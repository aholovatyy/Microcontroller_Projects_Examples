
stm32_bluepill_weather_station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e1c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c8  08008f30  08008f30  00009f30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095f8  080095f8  0000b238  2**0
                  CONTENTS
  4 .ARM          00000008  080095f8  080095f8  0000a5f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009600  08009600  0000b238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009600  08009600  0000a600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009604  08009604  0000a604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  08009608  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000374  20000238  08009840  0000b238  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005ac  08009840  0000b5ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b238  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ede  00000000  00000000  0000b261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000271c  00000000  00000000  0001c13f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001160  00000000  00000000  0001e860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000da1  00000000  00000000  0001f9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019837  00000000  00000000  00020761  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014250  00000000  00000000  00039f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ffe0  00000000  00000000  0004e1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000de1c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bf4  00000000  00000000  000de20c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000e3e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000238 	.word	0x20000238
 800012c:	00000000 	.word	0x00000000
 8000130:	08008f14 	.word	0x08008f14

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000023c 	.word	0x2000023c
 800014c:	08008f14 	.word	0x08008f14

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_f2iz>:
 8000b28:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b2c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000b30:	d30f      	bcc.n	8000b52 <__aeabi_f2iz+0x2a>
 8000b32:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000b36:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b3a:	d90d      	bls.n	8000b58 <__aeabi_f2iz+0x30>
 8000b3c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b40:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b44:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b48:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4c:	bf18      	it	ne
 8000b4e:	4240      	negne	r0, r0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0000 	mov.w	r0, #0
 8000b56:	4770      	bx	lr
 8000b58:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000b5c:	d101      	bne.n	8000b62 <__aeabi_f2iz+0x3a>
 8000b5e:	0242      	lsls	r2, r0, #9
 8000b60:	d105      	bne.n	8000b6e <__aeabi_f2iz+0x46>
 8000b62:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000b66:	bf08      	it	eq
 8000b68:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b6c:	4770      	bx	lr
 8000b6e:	f04f 0000 	mov.w	r0, #0
 8000b72:	4770      	bx	lr

08000b74 <bmp180_init>:

/**
 * @brief ініціалізація давача температури і тиску BMP180
 * @param hi2c User I2C вказівник дескриптора інтерфейсу I2C.
 */
void bmp180_init(I2C_HandleTypeDef *hi2c) {
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
	_bmp180_ui2c = hi2c;
 8000b7c:	4a03      	ldr	r2, [pc, #12]	@ (8000b8c <bmp180_init+0x18>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6013      	str	r3, [r2, #0]
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr
 8000b8c:	20000254 	.word	0x20000254

08000b90 <bmp180_set_oversampling>:
/**
 * @param oss Enum, налаштування oversampling.
 * @note доступні режими дискретизації (точності) вимірюваняя тиску: BMP180_LOW, BMP180_STANDARD, BMP180_HIGH, BMP180_ULTRA.
 * @note детально описано в розділі 3.3.1 даташиту давача
 */
void bmp180_set_oversampling(BMP180_OSS oss) {
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	71fb      	strb	r3, [r7, #7]
	_bmp180_oss = oss;
 8000b9a:	4a04      	ldr	r2, [pc, #16]	@ (8000bac <bmp180_set_oversampling+0x1c>)
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	7013      	strb	r3, [r2, #0]
}
 8000ba0:	bf00      	nop
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bc80      	pop	{r7}
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	2000026e 	.word	0x2000026e

08000bb0 <bmp180_update_calibration_data>:

/**
 * @brief зчитування калібрувальних коефіцієнтів з EEPROM давача BMP180
 * @note викликається один раз перед основним циклом (main loop)
 */
void bmp180_update_calibration_data(void) {
 8000bb0:	b598      	push	{r3, r4, r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
	_bmp180_eeprom.BMP180_AC1 = (bmp180_read_reg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC1]) << 8) | bmp180_read_reg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC1]);
 8000bb4:	23aa      	movs	r3, #170	@ 0xaa
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f000 f8dc 	bl	8000d74 <bmp180_read_reg>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	021b      	lsls	r3, r3, #8
 8000bc0:	b21c      	sxth	r4, r3
 8000bc2:	23ab      	movs	r3, #171	@ 0xab
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f000 f8d5 	bl	8000d74 <bmp180_read_reg>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	b21b      	sxth	r3, r3
 8000bce:	4323      	orrs	r3, r4
 8000bd0:	b21a      	sxth	r2, r3
 8000bd2:	4b58      	ldr	r3, [pc, #352]	@ (8000d34 <bmp180_update_calibration_data+0x184>)
 8000bd4:	801a      	strh	r2, [r3, #0]
	_bmp180_eeprom.BMP180_AC2 = (bmp180_read_reg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC2]) << 8) | bmp180_read_reg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC2]);
 8000bd6:	23ac      	movs	r3, #172	@ 0xac
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f000 f8cb 	bl	8000d74 <bmp180_read_reg>
 8000bde:	4603      	mov	r3, r0
 8000be0:	021b      	lsls	r3, r3, #8
 8000be2:	b21c      	sxth	r4, r3
 8000be4:	23ad      	movs	r3, #173	@ 0xad
 8000be6:	4618      	mov	r0, r3
 8000be8:	f000 f8c4 	bl	8000d74 <bmp180_read_reg>
 8000bec:	4603      	mov	r3, r0
 8000bee:	b21b      	sxth	r3, r3
 8000bf0:	4323      	orrs	r3, r4
 8000bf2:	b21a      	sxth	r2, r3
 8000bf4:	4b4f      	ldr	r3, [pc, #316]	@ (8000d34 <bmp180_update_calibration_data+0x184>)
 8000bf6:	805a      	strh	r2, [r3, #2]
	_bmp180_eeprom.BMP180_AC3 = (bmp180_read_reg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC3]) << 8) | bmp180_read_reg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC3]);
 8000bf8:	23ae      	movs	r3, #174	@ 0xae
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f000 f8ba 	bl	8000d74 <bmp180_read_reg>
 8000c00:	4603      	mov	r3, r0
 8000c02:	021b      	lsls	r3, r3, #8
 8000c04:	b21c      	sxth	r4, r3
 8000c06:	23af      	movs	r3, #175	@ 0xaf
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f000 f8b3 	bl	8000d74 <bmp180_read_reg>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	b21b      	sxth	r3, r3
 8000c12:	4323      	orrs	r3, r4
 8000c14:	b21a      	sxth	r2, r3
 8000c16:	4b47      	ldr	r3, [pc, #284]	@ (8000d34 <bmp180_update_calibration_data+0x184>)
 8000c18:	809a      	strh	r2, [r3, #4]
	_bmp180_eeprom.BMP180_AC4 = (bmp180_read_reg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC4]) << 8) | bmp180_read_reg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC4]);
 8000c1a:	23b0      	movs	r3, #176	@ 0xb0
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f000 f8a9 	bl	8000d74 <bmp180_read_reg>
 8000c22:	4603      	mov	r3, r0
 8000c24:	021b      	lsls	r3, r3, #8
 8000c26:	b21c      	sxth	r4, r3
 8000c28:	23b1      	movs	r3, #177	@ 0xb1
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f000 f8a2 	bl	8000d74 <bmp180_read_reg>
 8000c30:	4603      	mov	r3, r0
 8000c32:	b21b      	sxth	r3, r3
 8000c34:	4323      	orrs	r3, r4
 8000c36:	b21b      	sxth	r3, r3
 8000c38:	b29a      	uxth	r2, r3
 8000c3a:	4b3e      	ldr	r3, [pc, #248]	@ (8000d34 <bmp180_update_calibration_data+0x184>)
 8000c3c:	80da      	strh	r2, [r3, #6]
	_bmp180_eeprom.BMP180_AC5 = (bmp180_read_reg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC5]) << 8) | bmp180_read_reg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC5]);
 8000c3e:	23b2      	movs	r3, #178	@ 0xb2
 8000c40:	4618      	mov	r0, r3
 8000c42:	f000 f897 	bl	8000d74 <bmp180_read_reg>
 8000c46:	4603      	mov	r3, r0
 8000c48:	021b      	lsls	r3, r3, #8
 8000c4a:	b21c      	sxth	r4, r3
 8000c4c:	23b3      	movs	r3, #179	@ 0xb3
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f000 f890 	bl	8000d74 <bmp180_read_reg>
 8000c54:	4603      	mov	r3, r0
 8000c56:	b21b      	sxth	r3, r3
 8000c58:	4323      	orrs	r3, r4
 8000c5a:	b21b      	sxth	r3, r3
 8000c5c:	b29a      	uxth	r2, r3
 8000c5e:	4b35      	ldr	r3, [pc, #212]	@ (8000d34 <bmp180_update_calibration_data+0x184>)
 8000c60:	811a      	strh	r2, [r3, #8]
	_bmp180_eeprom.BMP180_AC6 = (bmp180_read_reg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC6]) << 8) | bmp180_read_reg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC6]);
 8000c62:	23b4      	movs	r3, #180	@ 0xb4
 8000c64:	4618      	mov	r0, r3
 8000c66:	f000 f885 	bl	8000d74 <bmp180_read_reg>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	021b      	lsls	r3, r3, #8
 8000c6e:	b21c      	sxth	r4, r3
 8000c70:	23b5      	movs	r3, #181	@ 0xb5
 8000c72:	4618      	mov	r0, r3
 8000c74:	f000 f87e 	bl	8000d74 <bmp180_read_reg>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	b21b      	sxth	r3, r3
 8000c7c:	4323      	orrs	r3, r4
 8000c7e:	b21b      	sxth	r3, r3
 8000c80:	b29a      	uxth	r2, r3
 8000c82:	4b2c      	ldr	r3, [pc, #176]	@ (8000d34 <bmp180_update_calibration_data+0x184>)
 8000c84:	815a      	strh	r2, [r3, #10]
	_bmp180_eeprom.BMP180_B1 = (bmp180_read_reg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_B1]) << 8) | bmp180_read_reg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_B1]);
 8000c86:	23b6      	movs	r3, #182	@ 0xb6
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f000 f873 	bl	8000d74 <bmp180_read_reg>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	021b      	lsls	r3, r3, #8
 8000c92:	b21c      	sxth	r4, r3
 8000c94:	23b7      	movs	r3, #183	@ 0xb7
 8000c96:	4618      	mov	r0, r3
 8000c98:	f000 f86c 	bl	8000d74 <bmp180_read_reg>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	b21b      	sxth	r3, r3
 8000ca0:	4323      	orrs	r3, r4
 8000ca2:	b21a      	sxth	r2, r3
 8000ca4:	4b23      	ldr	r3, [pc, #140]	@ (8000d34 <bmp180_update_calibration_data+0x184>)
 8000ca6:	819a      	strh	r2, [r3, #12]
	_bmp180_eeprom.BMP180_B2 = (bmp180_read_reg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_B2]) << 8) | bmp180_read_reg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_B2]);
 8000ca8:	23b8      	movs	r3, #184	@ 0xb8
 8000caa:	4618      	mov	r0, r3
 8000cac:	f000 f862 	bl	8000d74 <bmp180_read_reg>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	021b      	lsls	r3, r3, #8
 8000cb4:	b21c      	sxth	r4, r3
 8000cb6:	23b9      	movs	r3, #185	@ 0xb9
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f000 f85b 	bl	8000d74 <bmp180_read_reg>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	b21b      	sxth	r3, r3
 8000cc2:	4323      	orrs	r3, r4
 8000cc4:	b21a      	sxth	r2, r3
 8000cc6:	4b1b      	ldr	r3, [pc, #108]	@ (8000d34 <bmp180_update_calibration_data+0x184>)
 8000cc8:	81da      	strh	r2, [r3, #14]
	_bmp180_eeprom.BMP180_MB = (bmp180_read_reg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MB]) << 8) | bmp180_read_reg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MB]);
 8000cca:	23ba      	movs	r3, #186	@ 0xba
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f000 f851 	bl	8000d74 <bmp180_read_reg>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	021b      	lsls	r3, r3, #8
 8000cd6:	b21c      	sxth	r4, r3
 8000cd8:	23bb      	movs	r3, #187	@ 0xbb
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f000 f84a 	bl	8000d74 <bmp180_read_reg>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	b21b      	sxth	r3, r3
 8000ce4:	4323      	orrs	r3, r4
 8000ce6:	b21a      	sxth	r2, r3
 8000ce8:	4b12      	ldr	r3, [pc, #72]	@ (8000d34 <bmp180_update_calibration_data+0x184>)
 8000cea:	821a      	strh	r2, [r3, #16]
	_bmp180_eeprom.BMP180_MC = (bmp180_read_reg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MC]) << 8) | bmp180_read_reg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MC]);
 8000cec:	23bc      	movs	r3, #188	@ 0xbc
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 f840 	bl	8000d74 <bmp180_read_reg>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	021b      	lsls	r3, r3, #8
 8000cf8:	b21c      	sxth	r4, r3
 8000cfa:	23bd      	movs	r3, #189	@ 0xbd
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f000 f839 	bl	8000d74 <bmp180_read_reg>
 8000d02:	4603      	mov	r3, r0
 8000d04:	b21b      	sxth	r3, r3
 8000d06:	4323      	orrs	r3, r4
 8000d08:	b21a      	sxth	r2, r3
 8000d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d34 <bmp180_update_calibration_data+0x184>)
 8000d0c:	825a      	strh	r2, [r3, #18]
	_bmp180_eeprom.BMP180_MD = (bmp180_read_reg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MD]) << 8) | bmp180_read_reg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MD]);
 8000d0e:	23be      	movs	r3, #190	@ 0xbe
 8000d10:	4618      	mov	r0, r3
 8000d12:	f000 f82f 	bl	8000d74 <bmp180_read_reg>
 8000d16:	4603      	mov	r3, r0
 8000d18:	021b      	lsls	r3, r3, #8
 8000d1a:	b21c      	sxth	r4, r3
 8000d1c:	23bf      	movs	r3, #191	@ 0xbf
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f000 f828 	bl	8000d74 <bmp180_read_reg>
 8000d24:	4603      	mov	r3, r0
 8000d26:	b21b      	sxth	r3, r3
 8000d28:	4323      	orrs	r3, r4
 8000d2a:	b21a      	sxth	r2, r3
 8000d2c:	4b01      	ldr	r3, [pc, #4]	@ (8000d34 <bmp180_update_calibration_data+0x184>)
 8000d2e:	829a      	strh	r2, [r3, #20]
}
 8000d30:	bf00      	nop
 8000d32:	bd98      	pop	{r3, r4, r7, pc}
 8000d34:	20000258 	.word	0x20000258

08000d38 <bmp180_write_reg>:
/**
 * @brief записує байт в регістр
 * @param reg - адреса регістра, в який має бути записано
 * @param cmd - байт, який має бути записано
 */
void bmp180_write_reg(uint8_t reg, uint8_t cmd) {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af02      	add	r7, sp, #8
 8000d3e:	4603      	mov	r3, r0
 8000d40:	460a      	mov	r2, r1
 8000d42:	71fb      	strb	r3, [r7, #7]
 8000d44:	4613      	mov	r3, r2
 8000d46:	71bb      	strb	r3, [r7, #6]
	uint8_t arr[2] = { reg, cmd };
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	733b      	strb	r3, [r7, #12]
 8000d4c:	79bb      	ldrb	r3, [r7, #6]
 8000d4e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, arr, 2, BMP180_I2C_TIMEOUT);
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <bmp180_write_reg+0x38>)
 8000d52:	6818      	ldr	r0, [r3, #0]
 8000d54:	f107 020c 	add.w	r2, r7, #12
 8000d58:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d5c:	9300      	str	r3, [sp, #0]
 8000d5e:	2302      	movs	r3, #2
 8000d60:	21ee      	movs	r1, #238	@ 0xee
 8000d62:	f003 f875 	bl	8003e50 <HAL_I2C_Master_Transmit>
}
 8000d66:	bf00      	nop
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000254 	.word	0x20000254

08000d74 <bmp180_read_reg>:
/**
 * @brief зчитує байт з вказаного регістра
 * @param reg  - адреса регістра, з якого має бути виконано зчитування
 * @return повертає прочитаний байт
 */
uint8_t bmp180_read_reg(uint8_t reg) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af02      	add	r7, sp, #8
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 8000d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000db4 <bmp180_read_reg+0x40>)
 8000d80:	6818      	ldr	r0, [r3, #0]
 8000d82:	1dfa      	adds	r2, r7, #7
 8000d84:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d88:	9300      	str	r3, [sp, #0]
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	21ee      	movs	r1, #238	@ 0xee
 8000d8e:	f003 f85f 	bl	8003e50 <HAL_I2C_Master_Transmit>
	uint8_t result;
	HAL_I2C_Master_Receive(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &result, 1, BMP180_I2C_TIMEOUT);
 8000d92:	4b08      	ldr	r3, [pc, #32]	@ (8000db4 <bmp180_read_reg+0x40>)
 8000d94:	6818      	ldr	r0, [r3, #0]
 8000d96:	f107 020f 	add.w	r2, r7, #15
 8000d9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d9e:	9300      	str	r3, [sp, #0]
 8000da0:	2301      	movs	r3, #1
 8000da2:	21ee      	movs	r1, #238	@ 0xee
 8000da4:	f003 f952 	bl	800404c <HAL_I2C_Master_Receive>
	return result;
 8000da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000254 	.word	0x20000254

08000db8 <bmp180_get_raw_temperature>:

/**
 * @brief вимірює та обчислює значення температури
 * @return повертає значення температури в 0.1 (1/10) градусах Цельсія
 */
int32_t bmp180_get_raw_temperature(void) {
 8000db8:	b590      	push	{r4, r7, lr}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
	bmp180_write_reg(BMP180_CONTROL_REG, BMP180_CMD_TEMP);
 8000dbe:	232e      	movs	r3, #46	@ 0x2e
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	20f4      	movs	r0, #244	@ 0xf4
 8000dc4:	f7ff ffb8 	bl	8000d38 <bmp180_write_reg>
	HAL_Delay(BMP180_DELAY_TEMP);
 8000dc8:	2319      	movs	r3, #25
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f002 fc28 	bl	8003620 <HAL_Delay>
	int32_t ut = (bmp180_read_reg(BMP180_MSB_REG) << 8) | bmp180_read_reg(BMP180_LSB_REG);
 8000dd0:	20f6      	movs	r0, #246	@ 0xf6
 8000dd2:	f7ff ffcf 	bl	8000d74 <bmp180_read_reg>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	021c      	lsls	r4, r3, #8
 8000dda:	20f7      	movs	r0, #247	@ 0xf7
 8000ddc:	f7ff ffca 	bl	8000d74 <bmp180_read_reg>
 8000de0:	4603      	mov	r3, r0
 8000de2:	4323      	orrs	r3, r4
 8000de4:	60fb      	str	r3, [r7, #12]
	int32_t x1 = (ut - _bmp180_eeprom.BMP180_AC6) * _bmp180_eeprom.BMP180_AC5 / (1 << 15);
 8000de6:	4b15      	ldr	r3, [pc, #84]	@ (8000e3c <bmp180_get_raw_temperature+0x84>)
 8000de8:	895b      	ldrh	r3, [r3, #10]
 8000dea:	461a      	mov	r2, r3
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	1a9b      	subs	r3, r3, r2
 8000df0:	4a12      	ldr	r2, [pc, #72]	@ (8000e3c <bmp180_get_raw_temperature+0x84>)
 8000df2:	8912      	ldrh	r2, [r2, #8]
 8000df4:	fb02 f303 	mul.w	r3, r2, r3
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	da02      	bge.n	8000e02 <bmp180_get_raw_temperature+0x4a>
 8000dfc:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8000e00:	337f      	adds	r3, #127	@ 0x7f
 8000e02:	13db      	asrs	r3, r3, #15
 8000e04:	60bb      	str	r3, [r7, #8]
	int32_t x2 = (_bmp180_eeprom.BMP180_MC * (1 << 11)) / (x1 + _bmp180_eeprom.BMP180_MD);
 8000e06:	4b0d      	ldr	r3, [pc, #52]	@ (8000e3c <bmp180_get_raw_temperature+0x84>)
 8000e08:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000e0c:	02da      	lsls	r2, r3, #11
 8000e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e3c <bmp180_get_raw_temperature+0x84>)
 8000e10:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000e14:	4619      	mov	r1, r3
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	440b      	add	r3, r1
 8000e1a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e1e:	607b      	str	r3, [r7, #4]
	int32_t b5 = x1 + x2;
 8000e20:	68ba      	ldr	r2, [r7, #8]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4413      	add	r3, r2
 8000e26:	603b      	str	r3, [r7, #0]
	return (b5 + 8) / (1 << 4);
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	3308      	adds	r3, #8
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	da00      	bge.n	8000e32 <bmp180_get_raw_temperature+0x7a>
 8000e30:	330f      	adds	r3, #15
 8000e32:	111b      	asrs	r3, r3, #4
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3714      	adds	r7, #20
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd90      	pop	{r4, r7, pc}
 8000e3c:	20000258 	.word	0x20000258

08000e40 <bmp180_get_temperature>:

/**
 * @brief вимірює та обчислює значення температури
 * @return повертає значення температури в градусах Цельсія
 */
float bmp180_get_temperature(void) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
	int32_t temp = bmp180_get_raw_temperature();
 8000e46:	f7ff ffb7 	bl	8000db8 <bmp180_get_raw_temperature>
 8000e4a:	6078      	str	r0, [r7, #4]
	return temp / 10.0;
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	f7ff fad9 	bl	8000404 <__aeabi_i2d>
 8000e52:	f04f 0200 	mov.w	r2, #0
 8000e56:	4b07      	ldr	r3, [pc, #28]	@ (8000e74 <bmp180_get_temperature+0x34>)
 8000e58:	f7ff fc68 	bl	800072c <__aeabi_ddiv>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	460b      	mov	r3, r1
 8000e60:	4610      	mov	r0, r2
 8000e62:	4619      	mov	r1, r3
 8000e64:	f7ff fe10 	bl	8000a88 <__aeabi_d2f>
 8000e68:	4603      	mov	r3, r0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40240000 	.word	0x40240000

08000e78 <bmp180_get_pressure>:

/**
 * @brief вимірює та обчислює значення тиску
 * @return повертає значення тиску в Паскалях (Pa)
 */
int32_t bmp180_get_pressure(void) {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08c      	sub	sp, #48	@ 0x30
 8000e7c:	af00      	add	r7, sp, #0
	bmp180_write_reg(BMP180_CONTROL_REG, BMP180_CMD_TEMP);
 8000e7e:	232e      	movs	r3, #46	@ 0x2e
 8000e80:	4619      	mov	r1, r3
 8000e82:	20f4      	movs	r0, #244	@ 0xf4
 8000e84:	f7ff ff58 	bl	8000d38 <bmp180_write_reg>
	HAL_Delay(BMP180_DELAY_TEMP);
 8000e88:	2319      	movs	r3, #25
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f002 fbc8 	bl	8003620 <HAL_Delay>
	int32_t ut = bmp180_get_UT();
 8000e90:	f000 f902 	bl	8001098 <bmp180_get_UT>
 8000e94:	62b8      	str	r0, [r7, #40]	@ 0x28
	bmp180_write_reg(BMP180_CONTROL_REG, BMP180_CMD_PRES[_bmp180_oss]);
 8000e96:	4b7b      	ldr	r3, [pc, #492]	@ (8001084 <bmp180_get_pressure+0x20c>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	4b7a      	ldr	r3, [pc, #488]	@ (8001088 <bmp180_get_pressure+0x210>)
 8000e9e:	5c9b      	ldrb	r3, [r3, r2]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	20f4      	movs	r0, #244	@ 0xf4
 8000ea4:	f7ff ff48 	bl	8000d38 <bmp180_write_reg>
	HAL_Delay(BMP180_DELAY_PRES[_bmp180_oss]);
 8000ea8:	4b76      	ldr	r3, [pc, #472]	@ (8001084 <bmp180_get_pressure+0x20c>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	461a      	mov	r2, r3
 8000eae:	4b77      	ldr	r3, [pc, #476]	@ (800108c <bmp180_get_pressure+0x214>)
 8000eb0:	5c9b      	ldrb	r3, [r3, r2]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f002 fbb4 	bl	8003620 <HAL_Delay>
	int32_t up = bmp180_get_UP();
 8000eb8:	f000 f8fc 	bl	80010b4 <bmp180_get_UP>
 8000ebc:	6278      	str	r0, [r7, #36]	@ 0x24
	int32_t x1 = (ut - _bmp180_eeprom.BMP180_AC6) * _bmp180_eeprom.BMP180_AC5 / (1 << 15);
 8000ebe:	4b74      	ldr	r3, [pc, #464]	@ (8001090 <bmp180_get_pressure+0x218>)
 8000ec0:	895b      	ldrh	r3, [r3, #10]
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ec6:	1a9b      	subs	r3, r3, r2
 8000ec8:	4a71      	ldr	r2, [pc, #452]	@ (8001090 <bmp180_get_pressure+0x218>)
 8000eca:	8912      	ldrh	r2, [r2, #8]
 8000ecc:	fb02 f303 	mul.w	r3, r2, r3
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	da02      	bge.n	8000eda <bmp180_get_pressure+0x62>
 8000ed4:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8000ed8:	337f      	adds	r3, #127	@ 0x7f
 8000eda:	13db      	asrs	r3, r3, #15
 8000edc:	623b      	str	r3, [r7, #32]
	int32_t x2 = (_bmp180_eeprom.BMP180_MC * (1 << 11)) / (x1 + _bmp180_eeprom.BMP180_MD);
 8000ede:	4b6c      	ldr	r3, [pc, #432]	@ (8001090 <bmp180_get_pressure+0x218>)
 8000ee0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000ee4:	02da      	lsls	r2, r3, #11
 8000ee6:	4b6a      	ldr	r3, [pc, #424]	@ (8001090 <bmp180_get_pressure+0x218>)
 8000ee8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000eec:	4619      	mov	r1, r3
 8000eee:	6a3b      	ldr	r3, [r7, #32]
 8000ef0:	440b      	add	r3, r1
 8000ef2:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ef6:	61fb      	str	r3, [r7, #28]
	int32_t b5 = x1 + x2;
 8000ef8:	6a3a      	ldr	r2, [r7, #32]
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	4413      	add	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
	int32_t b6 = b5 - 4000;
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	f5a3 637a 	sub.w	r3, r3, #4000	@ 0xfa0
 8000f06:	617b      	str	r3, [r7, #20]
	x1 = (_bmp180_eeprom.BMP180_B2 * (b6 * b6 / (1 << 12))) / (1 << 11);
 8000f08:	4b61      	ldr	r3, [pc, #388]	@ (8001090 <bmp180_get_pressure+0x218>)
 8000f0a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000f0e:	461a      	mov	r2, r3
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	fb03 f303 	mul.w	r3, r3, r3
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	da01      	bge.n	8000f1e <bmp180_get_pressure+0xa6>
 8000f1a:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000f1e:	131b      	asrs	r3, r3, #12
 8000f20:	fb02 f303 	mul.w	r3, r2, r3
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	da01      	bge.n	8000f2c <bmp180_get_pressure+0xb4>
 8000f28:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8000f2c:	12db      	asrs	r3, r3, #11
 8000f2e:	623b      	str	r3, [r7, #32]
	x2 = _bmp180_eeprom.BMP180_AC2 * b6 / (1 << 11);
 8000f30:	4b57      	ldr	r3, [pc, #348]	@ (8001090 <bmp180_get_pressure+0x218>)
 8000f32:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f36:	461a      	mov	r2, r3
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	fb02 f303 	mul.w	r3, r2, r3
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	da01      	bge.n	8000f46 <bmp180_get_pressure+0xce>
 8000f42:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8000f46:	12db      	asrs	r3, r3, #11
 8000f48:	61fb      	str	r3, [r7, #28]
	int32_t x3 = x1 + x2;
 8000f4a:	6a3a      	ldr	r2, [r7, #32]
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	4413      	add	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
	int32_t b3 = (((_bmp180_eeprom.BMP180_AC1 * 4 + x3) << _bmp180_oss) + 2) / 4;
 8000f52:	4b4f      	ldr	r3, [pc, #316]	@ (8001090 <bmp180_get_pressure+0x218>)
 8000f54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f58:	009a      	lsls	r2, r3, #2
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	4a49      	ldr	r2, [pc, #292]	@ (8001084 <bmp180_get_pressure+0x20c>)
 8000f60:	7812      	ldrb	r2, [r2, #0]
 8000f62:	4093      	lsls	r3, r2
 8000f64:	3302      	adds	r3, #2
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	da00      	bge.n	8000f6c <bmp180_get_pressure+0xf4>
 8000f6a:	3303      	adds	r3, #3
 8000f6c:	109b      	asrs	r3, r3, #2
 8000f6e:	60fb      	str	r3, [r7, #12]
	x1 = _bmp180_eeprom.BMP180_AC3 * b6 / (1 << 13);
 8000f70:	4b47      	ldr	r3, [pc, #284]	@ (8001090 <bmp180_get_pressure+0x218>)
 8000f72:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000f76:	461a      	mov	r2, r3
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	fb02 f303 	mul.w	r3, r2, r3
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	da02      	bge.n	8000f88 <bmp180_get_pressure+0x110>
 8000f82:	f503 53ff 	add.w	r3, r3, #8160	@ 0x1fe0
 8000f86:	331f      	adds	r3, #31
 8000f88:	135b      	asrs	r3, r3, #13
 8000f8a:	623b      	str	r3, [r7, #32]
	x2 = (_bmp180_eeprom.BMP180_B1 * (b6 * b6 / (1 << 12))) / (1 << 16);
 8000f8c:	4b40      	ldr	r3, [pc, #256]	@ (8001090 <bmp180_get_pressure+0x218>)
 8000f8e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000f92:	461a      	mov	r2, r3
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	fb03 f303 	mul.w	r3, r3, r3
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	da01      	bge.n	8000fa2 <bmp180_get_pressure+0x12a>
 8000f9e:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000fa2:	131b      	asrs	r3, r3, #12
 8000fa4:	fb02 f303 	mul.w	r3, r2, r3
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	da02      	bge.n	8000fb2 <bmp180_get_pressure+0x13a>
 8000fac:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000fb0:	33ff      	adds	r3, #255	@ 0xff
 8000fb2:	141b      	asrs	r3, r3, #16
 8000fb4:	61fb      	str	r3, [r7, #28]
	x3 = ((x1 + x2) + 2) / 4;
 8000fb6:	6a3a      	ldr	r2, [r7, #32]
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	4413      	add	r3, r2
 8000fbc:	3302      	adds	r3, #2
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	da00      	bge.n	8000fc4 <bmp180_get_pressure+0x14c>
 8000fc2:	3303      	adds	r3, #3
 8000fc4:	109b      	asrs	r3, r3, #2
 8000fc6:	613b      	str	r3, [r7, #16]
	uint32_t b4 = _bmp180_eeprom.BMP180_AC4 * (uint32_t) (x3 + 32768) / (1 << 15);
 8000fc8:	4b31      	ldr	r3, [pc, #196]	@ (8001090 <bmp180_get_pressure+0x218>)
 8000fca:	88db      	ldrh	r3, [r3, #6]
 8000fcc:	461a      	mov	r2, r3
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8000fd4:	fb02 f303 	mul.w	r3, r2, r3
 8000fd8:	0bdb      	lsrs	r3, r3, #15
 8000fda:	60bb      	str	r3, [r7, #8]
	uint32_t b7 = ((uint32_t) up - b3) * (50000 >> _bmp180_oss);
 8000fdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	4a28      	ldr	r2, [pc, #160]	@ (8001084 <bmp180_get_pressure+0x20c>)
 8000fe4:	7812      	ldrb	r2, [r2, #0]
 8000fe6:	4611      	mov	r1, r2
 8000fe8:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8000fec:	410a      	asrs	r2, r1
 8000fee:	fb02 f303 	mul.w	r3, r2, r3
 8000ff2:	607b      	str	r3, [r7, #4]
	int32_t p;
	if (b7 < 0x80000000)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	db06      	blt.n	8001008 <bmp180_get_pressure+0x190>
		p = (b7 * 2) / b4;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	005a      	lsls	r2, r3, #1
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	fbb2 f3f3 	udiv	r3, r2, r3
 8001004:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001006:	e005      	b.n	8001014 <bmp180_get_pressure+0x19c>
	else
		p = (b7 / b4) * 2;
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	62fb      	str	r3, [r7, #44]	@ 0x2c
	x1 = (p / (1 << 8)) * (p / (1 << 8));
 8001014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001016:	2b00      	cmp	r3, #0
 8001018:	da00      	bge.n	800101c <bmp180_get_pressure+0x1a4>
 800101a:	33ff      	adds	r3, #255	@ 0xff
 800101c:	121b      	asrs	r3, r3, #8
 800101e:	461a      	mov	r2, r3
 8001020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001022:	2b00      	cmp	r3, #0
 8001024:	da00      	bge.n	8001028 <bmp180_get_pressure+0x1b0>
 8001026:	33ff      	adds	r3, #255	@ 0xff
 8001028:	121b      	asrs	r3, r3, #8
 800102a:	fb02 f303 	mul.w	r3, r2, r3
 800102e:	623b      	str	r3, [r7, #32]
	x1 = (x1 * 3038) / (1 << 16);
 8001030:	6a3b      	ldr	r3, [r7, #32]
 8001032:	f640 32de 	movw	r2, #3038	@ 0xbde
 8001036:	fb02 f303 	mul.w	r3, r2, r3
 800103a:	2b00      	cmp	r3, #0
 800103c:	da02      	bge.n	8001044 <bmp180_get_pressure+0x1cc>
 800103e:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001042:	33ff      	adds	r3, #255	@ 0xff
 8001044:	141b      	asrs	r3, r3, #16
 8001046:	623b      	str	r3, [r7, #32]
	x2 = (-7357 * p) / (1 << 16);
 8001048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800104a:	4a12      	ldr	r2, [pc, #72]	@ (8001094 <bmp180_get_pressure+0x21c>)
 800104c:	fb02 f303 	mul.w	r3, r2, r3
 8001050:	2b00      	cmp	r3, #0
 8001052:	da02      	bge.n	800105a <bmp180_get_pressure+0x1e2>
 8001054:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001058:	33ff      	adds	r3, #255	@ 0xff
 800105a:	141b      	asrs	r3, r3, #16
 800105c:	61fb      	str	r3, [r7, #28]
	p = p + (x1 + x2 + 3791) / (1 << 4);
 800105e:	6a3a      	ldr	r2, [r7, #32]
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	4413      	add	r3, r2
 8001064:	f603 63cf 	addw	r3, r3, #3791	@ 0xecf
 8001068:	2b00      	cmp	r3, #0
 800106a:	da00      	bge.n	800106e <bmp180_get_pressure+0x1f6>
 800106c:	330f      	adds	r3, #15
 800106e:	111b      	asrs	r3, r3, #4
 8001070:	461a      	mov	r2, r3
 8001072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001074:	4413      	add	r3, r2
 8001076:	62fb      	str	r3, [r7, #44]	@ 0x2c
	return p;
 8001078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800107a:	4618      	mov	r0, r3
 800107c:	3730      	adds	r7, #48	@ 0x30
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	2000026e 	.word	0x2000026e
 8001088:	08009258 	.word	0x08009258
 800108c:	0800925c 	.word	0x0800925c
 8001090:	20000258 	.word	0x20000258
 8001094:	ffffe343 	.word	0xffffe343

08001098 <bmp180_get_UT>:

int32_t bmp180_get_UT(void){
 8001098:	b598      	push	{r3, r4, r7, lr}
 800109a:	af00      	add	r7, sp, #0
	return (bmp180_read_reg(BMP180_MSB_REG) << 8) | bmp180_read_reg(BMP180_LSB_REG);
 800109c:	20f6      	movs	r0, #246	@ 0xf6
 800109e:	f7ff fe69 	bl	8000d74 <bmp180_read_reg>
 80010a2:	4603      	mov	r3, r0
 80010a4:	021c      	lsls	r4, r3, #8
 80010a6:	20f7      	movs	r0, #247	@ 0xf7
 80010a8:	f7ff fe64 	bl	8000d74 <bmp180_read_reg>
 80010ac:	4603      	mov	r3, r0
 80010ae:	4323      	orrs	r3, r4
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	bd98      	pop	{r3, r4, r7, pc}

080010b4 <bmp180_get_UP>:

int32_t bmp180_get_UP(void){
 80010b4:	b598      	push	{r3, r4, r7, lr}
 80010b6:	af00      	add	r7, sp, #0
	return ((bmp180_read_reg(BMP180_MSB_REG) << 16) | (bmp180_read_reg(BMP180_LSB_REG) << 8) | bmp180_read_reg(BMP180_XLSB_REG)) >> (8 - _bmp180_oss);
 80010b8:	20f6      	movs	r0, #246	@ 0xf6
 80010ba:	f7ff fe5b 	bl	8000d74 <bmp180_read_reg>
 80010be:	4603      	mov	r3, r0
 80010c0:	041c      	lsls	r4, r3, #16
 80010c2:	20f7      	movs	r0, #247	@ 0xf7
 80010c4:	f7ff fe56 	bl	8000d74 <bmp180_read_reg>
 80010c8:	4603      	mov	r3, r0
 80010ca:	021b      	lsls	r3, r3, #8
 80010cc:	431c      	orrs	r4, r3
 80010ce:	20f8      	movs	r0, #248	@ 0xf8
 80010d0:	f7ff fe50 	bl	8000d74 <bmp180_read_reg>
 80010d4:	4603      	mov	r3, r0
 80010d6:	ea44 0203 	orr.w	r2, r4, r3
 80010da:	4b04      	ldr	r3, [pc, #16]	@ (80010ec <bmp180_get_UP+0x38>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	f1c3 0308 	rsb	r3, r3, #8
 80010e2:	fa42 f303 	asr.w	r3, r2, r3
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	bd98      	pop	{r3, r4, r7, pc}
 80010ea:	bf00      	nop
 80010ec:	2000026e 	.word	0x2000026e

080010f0 <set_pin_output>:

/* функція налаштування GPIO піна як вихід
 * GPIOx - GPIO порт, GPIO_Pin - GPIO пін
 * */
void set_pin_output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	460b      	mov	r3, r1
 80010fa:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fc:	f107 0308 	add.w	r3, r7, #8
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800110a:	887b      	ldrh	r3, [r7, #2]
 800110c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110e:	2301      	movs	r3, #1
 8001110:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2302      	movs	r3, #2
 8001114:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001116:	f107 0308 	add.w	r3, r7, #8
 800111a:	4619      	mov	r1, r3
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f002 fb87 	bl	8003830 <HAL_GPIO_Init>
}
 8001122:	bf00      	nop
 8001124:	3718      	adds	r7, #24
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <set_pin_input>:

/* функція налаштування GPIO піна як вхід
 * GPIOx - GPIO порт, GPIO_Pin - GPIO пін
 * */
void set_pin_input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b086      	sub	sp, #24
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
 8001132:	460b      	mov	r3, r1
 8001134:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001136:	f107 0308 	add.w	r3, r7, #8
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001144:	887b      	ldrh	r3, [r7, #2]
 8001146:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001148:	2300      	movs	r3, #0
 800114a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001150:	f107 0308 	add.w	r3, r7, #8
 8001154:	4619      	mov	r1, r3
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f002 fb6a 	bl	8003830 <HAL_GPIO_Init>
}
 800115c:	bf00      	nop
 800115e:	3718      	adds	r7, #24
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <dht_init>:
/* функція ініціалізації DHT
 * GPIOx - GPIO порт, GPIO_Pin - GPIO пін
 * _htim - вказівник на структуру параметрів конфігурації таймера
 * */
void dht_init(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, TIM_HandleTypeDef *_htim)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	460b      	mov	r3, r1
 800116e:	607a      	str	r2, [r7, #4]
 8001170:	817b      	strh	r3, [r7, #10]
	DHT_PORT = GPIOx;
 8001172:	4a07      	ldr	r2, [pc, #28]	@ (8001190 <dht_init+0x2c>)
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	6013      	str	r3, [r2, #0]
	DHT_PIN = GPIO_Pin;
 8001178:	4a06      	ldr	r2, [pc, #24]	@ (8001194 <dht_init+0x30>)
 800117a:	897b      	ldrh	r3, [r7, #10]
 800117c:	8013      	strh	r3, [r2, #0]
	htim = _htim;
 800117e:	4a06      	ldr	r2, [pc, #24]	@ (8001198 <dht_init+0x34>)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6013      	str	r3, [r2, #0]
}
 8001184:	bf00      	nop
 8001186:	3714      	adds	r7, #20
 8001188:	46bd      	mov	sp, r7
 800118a:	bc80      	pop	{r7}
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	20000270 	.word	0x20000270
 8001194:	20000274 	.word	0x20000274
 8001198:	20000278 	.word	0x20000278

0800119c <dht_readSensor>:

int dht_readSensor(uint8_t wakeup_delay)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
	//__disable_irq();
	uint8_t mask = 128;
 80011a6:	2380      	movs	r3, #128	@ 0x80
 80011a8:	73fb      	strb	r3, [r7, #15]
    uint8_t idx = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	73bb      	strb	r3, [r7, #14]

    // очищуємо буфер
    for (uint8_t i = 0; i < 5; i++) bits[i] = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	737b      	strb	r3, [r7, #13]
 80011b2:	e006      	b.n	80011c2 <dht_readSensor+0x26>
 80011b4:	7b7b      	ldrb	r3, [r7, #13]
 80011b6:	4a5e      	ldr	r2, [pc, #376]	@ (8001330 <dht_readSensor+0x194>)
 80011b8:	2100      	movs	r1, #0
 80011ba:	54d1      	strb	r1, [r2, r3]
 80011bc:	7b7b      	ldrb	r3, [r7, #13]
 80011be:	3301      	adds	r3, #1
 80011c0:	737b      	strb	r3, [r7, #13]
 80011c2:	7b7b      	ldrb	r3, [r7, #13]
 80011c4:	2b04      	cmp	r3, #4
 80011c6:	d9f5      	bls.n	80011b4 <dht_readSensor+0x18>

    // виконуємо запит на читання даних
    set_pin_output(DHT_PORT, DHT_PIN);
 80011c8:	4b5a      	ldr	r3, [pc, #360]	@ (8001334 <dht_readSensor+0x198>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a5a      	ldr	r2, [pc, #360]	@ (8001338 <dht_readSensor+0x19c>)
 80011ce:	8812      	ldrh	r2, [r2, #0]
 80011d0:	4611      	mov	r1, r2
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff ff8c 	bl	80010f0 <set_pin_output>
    HAL_GPIO_WritePin(DHT_PORT, DHT_PIN, 0); // переводимо пін у низький лог. рівень
 80011d8:	4b56      	ldr	r3, [pc, #344]	@ (8001334 <dht_readSensor+0x198>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a56      	ldr	r2, [pc, #344]	@ (8001338 <dht_readSensor+0x19c>)
 80011de:	8811      	ldrh	r1, [r2, #0]
 80011e0:	2200      	movs	r2, #0
 80011e2:	4618      	mov	r0, r3
 80011e4:	f002 fcbf 	bl	8003b66 <HAL_GPIO_WritePin>
    delay_us(wakeup_delay * 1000UL);
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80011ee:	fb02 f303 	mul.w	r3, r2, r3
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 fe8c 	bl	8001f10 <delay_us>
    set_pin_input(DHT_PORT, DHT_PIN);
 80011f8:	4b4e      	ldr	r3, [pc, #312]	@ (8001334 <dht_readSensor+0x198>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a4e      	ldr	r2, [pc, #312]	@ (8001338 <dht_readSensor+0x19c>)
 80011fe:	8812      	ldrh	r2, [r2, #0]
 8001200:	4611      	mov	r1, r2
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff ff91 	bl	800112a <set_pin_input>
    delay_us(50);
 8001208:	2032      	movs	r0, #50	@ 0x32
 800120a:	f000 fe81 	bl	8001f10 <delay_us>

    // отримуємо підтвердження від давача або TIMEOUT
    htim->Instance->CNT = 0;
 800120e:	4b4b      	ldr	r3, [pc, #300]	@ (800133c <dht_readSensor+0x1a0>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2200      	movs	r2, #0
 8001216:	625a      	str	r2, [r3, #36]	@ 0x24
    while (!(HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN)))
 8001218:	e008      	b.n	800122c <dht_readSensor+0x90>
    {
       if (htim->Instance->CNT > DHTLIB_TIMEOUT)
 800121a:	4b48      	ldr	r3, [pc, #288]	@ (800133c <dht_readSensor+0x1a0>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001222:	2bc8      	cmp	r3, #200	@ 0xc8
 8001224:	d902      	bls.n	800122c <dht_readSensor+0x90>
       {
    	   return DHTLIB_ERROR_TIMEOUT;
 8001226:	f06f 0301 	mvn.w	r3, #1
 800122a:	e07c      	b.n	8001326 <dht_readSensor+0x18a>
    while (!(HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN)))
 800122c:	4b41      	ldr	r3, [pc, #260]	@ (8001334 <dht_readSensor+0x198>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a41      	ldr	r2, [pc, #260]	@ (8001338 <dht_readSensor+0x19c>)
 8001232:	8812      	ldrh	r2, [r2, #0]
 8001234:	4611      	mov	r1, r2
 8001236:	4618      	mov	r0, r3
 8001238:	f002 fc7e 	bl	8003b38 <HAL_GPIO_ReadPin>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d0eb      	beq.n	800121a <dht_readSensor+0x7e>
       }
    }
    htim->Instance->CNT = 0;
 8001242:	4b3e      	ldr	r3, [pc, #248]	@ (800133c <dht_readSensor+0x1a0>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2200      	movs	r2, #0
 800124a:	625a      	str	r2, [r3, #36]	@ 0x24
    while (HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN))
 800124c:	e008      	b.n	8001260 <dht_readSensor+0xc4>
    {
       if (htim->Instance->CNT > DHTLIB_TIMEOUT)
 800124e:	4b3b      	ldr	r3, [pc, #236]	@ (800133c <dht_readSensor+0x1a0>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001256:	2bc8      	cmp	r3, #200	@ 0xc8
 8001258:	d902      	bls.n	8001260 <dht_readSensor+0xc4>
       {
    	   return DHTLIB_ERROR_TIMEOUT;
 800125a:	f06f 0301 	mvn.w	r3, #1
 800125e:	e062      	b.n	8001326 <dht_readSensor+0x18a>
    while (HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN))
 8001260:	4b34      	ldr	r3, [pc, #208]	@ (8001334 <dht_readSensor+0x198>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a34      	ldr	r2, [pc, #208]	@ (8001338 <dht_readSensor+0x19c>)
 8001266:	8812      	ldrh	r2, [r2, #0]
 8001268:	4611      	mov	r1, r2
 800126a:	4618      	mov	r0, r3
 800126c:	f002 fc64 	bl	8003b38 <HAL_GPIO_ReadPin>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d1eb      	bne.n	800124e <dht_readSensor+0xb2>
       }
    }
    // читаємо дані - 40 біт => 5 байтів
    for (uint8_t i = 40; i != 0; i--)
 8001276:	2328      	movs	r3, #40	@ 0x28
 8001278:	733b      	strb	r3, [r7, #12]
 800127a:	e050      	b.n	800131e <dht_readSensor+0x182>
    {
        htim->Instance->CNT = 0;
 800127c:	4b2f      	ldr	r3, [pc, #188]	@ (800133c <dht_readSensor+0x1a0>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2200      	movs	r2, #0
 8001284:	625a      	str	r2, [r3, #36]	@ 0x24
        while (!(HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN)))
 8001286:	e008      	b.n	800129a <dht_readSensor+0xfe>
        {
           if (htim->Instance->CNT > DHTLIB_TIMEOUT)
 8001288:	4b2c      	ldr	r3, [pc, #176]	@ (800133c <dht_readSensor+0x1a0>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001290:	2bc8      	cmp	r3, #200	@ 0xc8
 8001292:	d902      	bls.n	800129a <dht_readSensor+0xfe>
           {
               return DHTLIB_ERROR_TIMEOUT;
 8001294:	f06f 0301 	mvn.w	r3, #1
 8001298:	e045      	b.n	8001326 <dht_readSensor+0x18a>
        while (!(HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN)))
 800129a:	4b26      	ldr	r3, [pc, #152]	@ (8001334 <dht_readSensor+0x198>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a26      	ldr	r2, [pc, #152]	@ (8001338 <dht_readSensor+0x19c>)
 80012a0:	8812      	ldrh	r2, [r2, #0]
 80012a2:	4611      	mov	r1, r2
 80012a4:	4618      	mov	r0, r3
 80012a6:	f002 fc47 	bl	8003b38 <HAL_GPIO_ReadPin>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d0eb      	beq.n	8001288 <dht_readSensor+0xec>
           }
        }

        htim->Instance->CNT = 0;
 80012b0:	4b22      	ldr	r3, [pc, #136]	@ (800133c <dht_readSensor+0x1a0>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2200      	movs	r2, #0
 80012b8:	625a      	str	r2, [r3, #36]	@ 0x24

        while (HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN))
 80012ba:	e008      	b.n	80012ce <dht_readSensor+0x132>
        {
           if (htim->Instance->CNT > DHTLIB_TIMEOUT)
 80012bc:	4b1f      	ldr	r3, [pc, #124]	@ (800133c <dht_readSensor+0x1a0>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012c4:	2bc8      	cmp	r3, #200	@ 0xc8
 80012c6:	d902      	bls.n	80012ce <dht_readSensor+0x132>
           {
               return DHTLIB_ERROR_TIMEOUT;
 80012c8:	f06f 0301 	mvn.w	r3, #1
 80012cc:	e02b      	b.n	8001326 <dht_readSensor+0x18a>
        while (HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN))
 80012ce:	4b19      	ldr	r3, [pc, #100]	@ (8001334 <dht_readSensor+0x198>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a19      	ldr	r2, [pc, #100]	@ (8001338 <dht_readSensor+0x19c>)
 80012d4:	8812      	ldrh	r2, [r2, #0]
 80012d6:	4611      	mov	r1, r2
 80012d8:	4618      	mov	r0, r3
 80012da:	f002 fc2d 	bl	8003b38 <HAL_GPIO_ReadPin>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1eb      	bne.n	80012bc <dht_readSensor+0x120>
           }
        }

        if (htim->Instance->CNT > 40)
 80012e4:	4b15      	ldr	r3, [pc, #84]	@ (800133c <dht_readSensor+0x1a0>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ec:	2b28      	cmp	r3, #40	@ 0x28
 80012ee:	d908      	bls.n	8001302 <dht_readSensor+0x166>
        {
            bits[idx] |= mask;
 80012f0:	7bbb      	ldrb	r3, [r7, #14]
 80012f2:	4a0f      	ldr	r2, [pc, #60]	@ (8001330 <dht_readSensor+0x194>)
 80012f4:	5cd1      	ldrb	r1, [r2, r3]
 80012f6:	7bbb      	ldrb	r3, [r7, #14]
 80012f8:	7bfa      	ldrb	r2, [r7, #15]
 80012fa:	430a      	orrs	r2, r1
 80012fc:	b2d1      	uxtb	r1, r2
 80012fe:	4a0c      	ldr	r2, [pc, #48]	@ (8001330 <dht_readSensor+0x194>)
 8001300:	54d1      	strb	r1, [r2, r3]
        }
        mask >>= 1;
 8001302:	7bfb      	ldrb	r3, [r7, #15]
 8001304:	085b      	lsrs	r3, r3, #1
 8001306:	73fb      	strb	r3, [r7, #15]
        if (mask == 0)   // наступний байт?
 8001308:	7bfb      	ldrb	r3, [r7, #15]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d104      	bne.n	8001318 <dht_readSensor+0x17c>
        {
            mask = 128;
 800130e:	2380      	movs	r3, #128	@ 0x80
 8001310:	73fb      	strb	r3, [r7, #15]
            idx++;
 8001312:	7bbb      	ldrb	r3, [r7, #14]
 8001314:	3301      	adds	r3, #1
 8001316:	73bb      	strb	r3, [r7, #14]
    for (uint8_t i = 40; i != 0; i--)
 8001318:	7b3b      	ldrb	r3, [r7, #12]
 800131a:	3b01      	subs	r3, #1
 800131c:	733b      	strb	r3, [r7, #12]
 800131e:	7b3b      	ldrb	r3, [r7, #12]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d1ab      	bne.n	800127c <dht_readSensor+0xe0>
        }
    }
    //__enable_irq();
    return DHTLIB_OK;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	2000027c 	.word	0x2000027c
 8001334:	20000270 	.word	0x20000270
 8001338:	20000274 	.word	0x20000274
 800133c:	20000278 	.word	0x20000278

08001340 <dht_read>:

int dht_read(float *humidity, float *temperature)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800134a:	b672      	cpsid	i
}
 800134c:	bf00      	nop
    // читаємо дані температури і вологості
    //if (_disableIRQ) noInterrupts();
	__disable_irq();
    int rv = dht_readSensor(DHTLIB_DHT11_WAKEUP);
 800134e:	2012      	movs	r0, #18
 8001350:	f7ff ff24 	bl	800119c <dht_readSensor>
 8001354:	60f8      	str	r0, [r7, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8001356:	b662      	cpsie	i
}
 8001358:	bf00      	nop
    __enable_irq();
    if (rv != DHTLIB_OK)
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d007      	beq.n	8001370 <dht_read+0x30>
    {
        *humidity    = DHTLIB_INVALID_VALUE; // некоректне (недійсне) значення , або NaN prefered?
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4a2f      	ldr	r2, [pc, #188]	@ (8001420 <dht_read+0xe0>)
 8001364:	601a      	str	r2, [r3, #0]
        *temperature = DHTLIB_INVALID_VALUE; // недійсне значення
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	4a2d      	ldr	r2, [pc, #180]	@ (8001420 <dht_read+0xe0>)
 800136a:	601a      	str	r2, [r3, #0]
        return rv;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	e04f      	b.n	8001410 <dht_read+0xd0>
    }
    // перетворюємо отримані дані у значення температури і вологості та зберігаємо їх
    *humidity = ((bits[0] << 8) | bits[1]) * 0.1;
 8001370:	4b2c      	ldr	r3, [pc, #176]	@ (8001424 <dht_read+0xe4>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	021b      	lsls	r3, r3, #8
 8001376:	4a2b      	ldr	r2, [pc, #172]	@ (8001424 <dht_read+0xe4>)
 8001378:	7852      	ldrb	r2, [r2, #1]
 800137a:	4313      	orrs	r3, r2
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff f841 	bl	8000404 <__aeabi_i2d>
 8001382:	a325      	add	r3, pc, #148	@ (adr r3, 8001418 <dht_read+0xd8>)
 8001384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001388:	f7ff f8a6 	bl	80004d8 <__aeabi_dmul>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	4610      	mov	r0, r2
 8001392:	4619      	mov	r1, r3
 8001394:	f7ff fb78 	bl	8000a88 <__aeabi_d2f>
 8001398:	4602      	mov	r2, r0
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	601a      	str	r2, [r3, #0]
    *temperature = ((bits[2] << 8) | bits[3]) * 0.1;
 800139e:	4b21      	ldr	r3, [pc, #132]	@ (8001424 <dht_read+0xe4>)
 80013a0:	789b      	ldrb	r3, [r3, #2]
 80013a2:	021b      	lsls	r3, r3, #8
 80013a4:	4a1f      	ldr	r2, [pc, #124]	@ (8001424 <dht_read+0xe4>)
 80013a6:	78d2      	ldrb	r2, [r2, #3]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff f82a 	bl	8000404 <__aeabi_i2d>
 80013b0:	a319      	add	r3, pc, #100	@ (adr r3, 8001418 <dht_read+0xd8>)
 80013b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b6:	f7ff f88f 	bl	80004d8 <__aeabi_dmul>
 80013ba:	4602      	mov	r2, r0
 80013bc:	460b      	mov	r3, r1
 80013be:	4610      	mov	r0, r2
 80013c0:	4619      	mov	r1, r3
 80013c2:	f7ff fb61 	bl	8000a88 <__aeabi_d2f>
 80013c6:	4602      	mov	r2, r0
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	601a      	str	r2, [r3, #0]
    if (bits[2] & 0x80)  // від'ємна температура
 80013cc:	4b15      	ldr	r3, [pc, #84]	@ (8001424 <dht_read+0xe4>)
 80013ce:	789b      	ldrb	r3, [r3, #2]
 80013d0:	b25b      	sxtb	r3, r3
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	da05      	bge.n	80013e2 <dht_read+0xa2>
    {
        *temperature = -(*temperature);
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	601a      	str	r2, [r3, #0]
    }
    // перевіряємо контрольну суму
    uint8_t sum = bits[0] + bits[1] + bits[2] + bits[3];
 80013e2:	4b10      	ldr	r3, [pc, #64]	@ (8001424 <dht_read+0xe4>)
 80013e4:	781a      	ldrb	r2, [r3, #0]
 80013e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001424 <dht_read+0xe4>)
 80013e8:	785b      	ldrb	r3, [r3, #1]
 80013ea:	4413      	add	r3, r2
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001424 <dht_read+0xe4>)
 80013f0:	789b      	ldrb	r3, [r3, #2]
 80013f2:	4413      	add	r3, r2
 80013f4:	b2da      	uxtb	r2, r3
 80013f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001424 <dht_read+0xe4>)
 80013f8:	78db      	ldrb	r3, [r3, #3]
 80013fa:	4413      	add	r3, r2
 80013fc:	72fb      	strb	r3, [r7, #11]
    if (bits[4] != sum)
 80013fe:	4b09      	ldr	r3, [pc, #36]	@ (8001424 <dht_read+0xe4>)
 8001400:	791b      	ldrb	r3, [r3, #4]
 8001402:	7afa      	ldrb	r2, [r7, #11]
 8001404:	429a      	cmp	r2, r3
 8001406:	d002      	beq.n	800140e <dht_read+0xce>
    {
      return DHTLIB_ERROR_CHECKSUM;
 8001408:	f04f 33ff 	mov.w	r3, #4294967295
 800140c:	e000      	b.n	8001410 <dht_read+0xd0>
    }
    return DHTLIB_OK;
 800140e:	2300      	movs	r3, #0
}
 8001410:	4618      	mov	r0, r3
 8001412:	3710      	adds	r7, #16
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	9999999a 	.word	0x9999999a
 800141c:	3fb99999 	.word	0x3fb99999
 8001420:	c479c000 	.word	0xc479c000
 8001424:	2000027c 	.word	0x2000027c

08001428 <dht_calc_dewpoint>:
/* функція обчислює точку роси
 * вхідні параметри: humidity [%RH], temperature [°C]
 * повертає: обчислене значення точки роси dew_point [°C]
  */
float dht_calc_dewpoint(float *humidity, float *temperature)
{
 8001428:	b5b0      	push	{r4, r5, r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  float logEx, dew_point;
  logEx = 0.66077 + 7.5* (*temperature) / (237.3 + (*temperature))+(log10(*humidity)-2);
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4618      	mov	r0, r3
 8001438:	f7fe fff6 	bl	8000428 <__aeabi_f2d>
 800143c:	f04f 0200 	mov.w	r2, #0
 8001440:	4b41      	ldr	r3, [pc, #260]	@ (8001548 <dht_calc_dewpoint+0x120>)
 8001442:	f7ff f849 	bl	80004d8 <__aeabi_dmul>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	4614      	mov	r4, r2
 800144c:	461d      	mov	r5, r3
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4618      	mov	r0, r3
 8001454:	f7fe ffe8 	bl	8000428 <__aeabi_f2d>
 8001458:	a335      	add	r3, pc, #212	@ (adr r3, 8001530 <dht_calc_dewpoint+0x108>)
 800145a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145e:	f7fe fe85 	bl	800016c <__adddf3>
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	4620      	mov	r0, r4
 8001468:	4629      	mov	r1, r5
 800146a:	f7ff f95f 	bl	800072c <__aeabi_ddiv>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	4610      	mov	r0, r2
 8001474:	4619      	mov	r1, r3
 8001476:	a330      	add	r3, pc, #192	@ (adr r3, 8001538 <dht_calc_dewpoint+0x110>)
 8001478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147c:	f7fe fe76 	bl	800016c <__adddf3>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	4614      	mov	r4, r2
 8001486:	461d      	mov	r5, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	f7fe ffcb 	bl	8000428 <__aeabi_f2d>
 8001492:	4602      	mov	r2, r0
 8001494:	460b      	mov	r3, r1
 8001496:	4610      	mov	r0, r2
 8001498:	4619      	mov	r1, r3
 800149a:	f007 fad5 	bl	8008a48 <log10>
 800149e:	f04f 0200 	mov.w	r2, #0
 80014a2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80014a6:	f7fe fe5f 	bl	8000168 <__aeabi_dsub>
 80014aa:	4602      	mov	r2, r0
 80014ac:	460b      	mov	r3, r1
 80014ae:	4620      	mov	r0, r4
 80014b0:	4629      	mov	r1, r5
 80014b2:	f7fe fe5b 	bl	800016c <__adddf3>
 80014b6:	4602      	mov	r2, r0
 80014b8:	460b      	mov	r3, r1
 80014ba:	4610      	mov	r0, r2
 80014bc:	4619      	mov	r1, r3
 80014be:	f7ff fae3 	bl	8000a88 <__aeabi_d2f>
 80014c2:	4603      	mov	r3, r0
 80014c4:	60fb      	str	r3, [r7, #12]
  dew_point = (logEx - 0.66077)*237.3 / (0.66077+7.5-logEx);
 80014c6:	68f8      	ldr	r0, [r7, #12]
 80014c8:	f7fe ffae 	bl	8000428 <__aeabi_f2d>
 80014cc:	a31a      	add	r3, pc, #104	@ (adr r3, 8001538 <dht_calc_dewpoint+0x110>)
 80014ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d2:	f7fe fe49 	bl	8000168 <__aeabi_dsub>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	4610      	mov	r0, r2
 80014dc:	4619      	mov	r1, r3
 80014de:	a314      	add	r3, pc, #80	@ (adr r3, 8001530 <dht_calc_dewpoint+0x108>)
 80014e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e4:	f7fe fff8 	bl	80004d8 <__aeabi_dmul>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	4614      	mov	r4, r2
 80014ee:	461d      	mov	r5, r3
 80014f0:	68f8      	ldr	r0, [r7, #12]
 80014f2:	f7fe ff99 	bl	8000428 <__aeabi_f2d>
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	a111      	add	r1, pc, #68	@ (adr r1, 8001540 <dht_calc_dewpoint+0x118>)
 80014fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001500:	f7fe fe32 	bl	8000168 <__aeabi_dsub>
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	4620      	mov	r0, r4
 800150a:	4629      	mov	r1, r5
 800150c:	f7ff f90e 	bl	800072c <__aeabi_ddiv>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	4610      	mov	r0, r2
 8001516:	4619      	mov	r1, r3
 8001518:	f7ff fab6 	bl	8000a88 <__aeabi_d2f>
 800151c:	4603      	mov	r3, r0
 800151e:	60bb      	str	r3, [r7, #8]
  return dew_point;
 8001520:	68bb      	ldr	r3, [r7, #8]
}
 8001522:	4618      	mov	r0, r3
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bdb0      	pop	{r4, r5, r7, pc}
 800152a:	bf00      	nop
 800152c:	f3af 8000 	nop.w
 8001530:	9999999a 	.word	0x9999999a
 8001534:	406da999 	.word	0x406da999
 8001538:	2085b185 	.word	0x2085b185
 800153c:	3fe52507 	.word	0x3fe52507
 8001540:	72085b18 	.word	0x72085b18
 8001544:	40205250 	.word	0x40205250
 8001548:	401e0000 	.word	0x401e0000

0800154c <ds1307_init>:
	
/**
 * @brief Initializes the DS1307 module. Sets clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void ds1307_init(I2C_HandleTypeDef *hi2c) {
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
	_ds1307_ui2c = hi2c;
 8001554:	4a04      	ldr	r2, [pc, #16]	@ (8001568 <ds1307_init+0x1c>)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6013      	str	r3, [r2, #0]
	ds1307_set_clock_halt(0);
 800155a:	2000      	movs	r0, #0
 800155c:	f000 f806 	bl	800156c <ds1307_set_clock_halt>
}
 8001560:	bf00      	nop
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20000284 	.word	0x20000284

0800156c <ds1307_set_clock_halt>:

/**
 * @brief Sets clock halt bit.
 * @param halt Clock halt bit to set, 0 or 1. 0 to start timing, 0 to stop.
 */
void ds1307_set_clock_halt(uint8_t halt) {
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	71fb      	strb	r3, [r7, #7]
	uint8_t ch = (halt ? 1 << 7 : 0);
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <ds1307_set_clock_halt+0x14>
 800157c:	2380      	movs	r3, #128	@ 0x80
 800157e:	e000      	b.n	8001582 <ds1307_set_clock_halt+0x16>
 8001580:	2300      	movs	r3, #0
 8001582:	73fb      	strb	r3, [r7, #15]
	ds1307_set_reg_byte(DS1307_REG_SECOND, ch | (ds1307_get_reg_byte(DS1307_REG_SECOND) & 0x7f));
 8001584:	2000      	movs	r0, #0
 8001586:	f000 f83d 	bl	8001604 <ds1307_get_reg_byte>
 800158a:	4603      	mov	r3, r0
 800158c:	b25b      	sxtb	r3, r3
 800158e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001592:	b25a      	sxtb	r2, r3
 8001594:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001598:	4313      	orrs	r3, r2
 800159a:	b25b      	sxtb	r3, r3
 800159c:	b2db      	uxtb	r3, r3
 800159e:	4619      	mov	r1, r3
 80015a0:	2000      	movs	r0, #0
 80015a2:	f000 f811 	bl	80015c8 <ds1307_set_reg_byte>
}
 80015a6:	bf00      	nop
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <ds1307_get_clock_halt>:

/**
 * @brief Gets clock halt bit.
 * @return Clock halt bit, 0 or 1.
 */
uint8_t ds1307_get_clock_halt(void) {
 80015ae:	b580      	push	{r7, lr}
 80015b0:	af00      	add	r7, sp, #0
	return (ds1307_get_reg_byte(DS1307_REG_SECOND) & 0x80) >> 7;
 80015b2:	2000      	movs	r0, #0
 80015b4:	f000 f826 	bl	8001604 <ds1307_get_reg_byte>
 80015b8:	4603      	mov	r3, r0
 80015ba:	11db      	asrs	r3, r3, #7
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	b2db      	uxtb	r3, r3
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <ds1307_set_reg_byte>:
/**
 * @brief Sets the byte in the designated DS1307 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void ds1307_set_reg_byte(uint8_t regAddr, uint8_t val) {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af02      	add	r7, sp, #8
 80015ce:	4603      	mov	r3, r0
 80015d0:	460a      	mov	r2, r1
 80015d2:	71fb      	strb	r3, [r7, #7]
 80015d4:	4613      	mov	r3, r2
 80015d6:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	733b      	strb	r3, [r7, #12]
 80015dc:	79bb      	ldrb	r3, [r7, #6]
 80015de:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, bytes, 2, DS1307_TIMEOUT);
 80015e0:	4b07      	ldr	r3, [pc, #28]	@ (8001600 <ds1307_set_reg_byte+0x38>)
 80015e2:	6818      	ldr	r0, [r3, #0]
 80015e4:	f107 020c 	add.w	r2, r7, #12
 80015e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015ec:	9300      	str	r3, [sp, #0]
 80015ee:	2302      	movs	r3, #2
 80015f0:	21d0      	movs	r1, #208	@ 0xd0
 80015f2:	f002 fc2d 	bl	8003e50 <HAL_I2C_Master_Transmit>
}
 80015f6:	bf00      	nop
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000284 	.word	0x20000284

08001604 <ds1307_get_reg_byte>:
/**
 * @brief Gets the byte in the designated DS1307 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t ds1307_get_reg_byte(uint8_t regAddr) {
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af02      	add	r7, sp, #8
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &regAddr, 1, DS1307_TIMEOUT);
 800160e:	4b0d      	ldr	r3, [pc, #52]	@ (8001644 <ds1307_get_reg_byte+0x40>)
 8001610:	6818      	ldr	r0, [r3, #0]
 8001612:	1dfa      	adds	r2, r7, #7
 8001614:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001618:	9300      	str	r3, [sp, #0]
 800161a:	2301      	movs	r3, #1
 800161c:	21d0      	movs	r1, #208	@ 0xd0
 800161e:	f002 fc17 	bl	8003e50 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &val, 1, DS1307_TIMEOUT);
 8001622:	4b08      	ldr	r3, [pc, #32]	@ (8001644 <ds1307_get_reg_byte+0x40>)
 8001624:	6818      	ldr	r0, [r3, #0]
 8001626:	f107 020f 	add.w	r2, r7, #15
 800162a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	2301      	movs	r3, #1
 8001632:	21d0      	movs	r1, #208	@ 0xd0
 8001634:	f002 fd0a 	bl	800404c <HAL_I2C_Master_Receive>
	return val;
 8001638:	7bfb      	ldrb	r3, [r7, #15]
}
 800163a:	4618      	mov	r0, r3
 800163c:	3710      	adds	r7, #16
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20000284 	.word	0x20000284

08001648 <ds1307_set_enable_square_wave>:

/**
 * @brief Toggle square wave output on pin 7.
 * @param mode DS1307_ENABLED (1) or DS1307_DISABLED (0);
 */
void ds1307_set_enable_square_wave(DS1307_SquareWaveEnable mode){
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	71fb      	strb	r3, [r7, #7]
	uint8_t controlReg = ds1307_get_reg_byte(DS1307_REG_CONTROL);
 8001652:	2007      	movs	r0, #7
 8001654:	f7ff ffd6 	bl	8001604 <ds1307_get_reg_byte>
 8001658:	4603      	mov	r3, r0
 800165a:	73fb      	strb	r3, [r7, #15]
	uint8_t newControlReg = (controlReg & ~(1 << 4)) | ((mode & 1) << 4);
 800165c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001660:	f023 0310 	bic.w	r3, r3, #16
 8001664:	b25a      	sxtb	r2, r3
 8001666:	79fb      	ldrb	r3, [r7, #7]
 8001668:	011b      	lsls	r3, r3, #4
 800166a:	b25b      	sxtb	r3, r3
 800166c:	f003 0310 	and.w	r3, r3, #16
 8001670:	b25b      	sxtb	r3, r3
 8001672:	4313      	orrs	r3, r2
 8001674:	b25b      	sxtb	r3, r3
 8001676:	73bb      	strb	r3, [r7, #14]
	ds1307_set_reg_byte(DS1307_REG_CONTROL, newControlReg);
 8001678:	7bbb      	ldrb	r3, [r7, #14]
 800167a:	4619      	mov	r1, r3
 800167c:	2007      	movs	r0, #7
 800167e:	f7ff ffa3 	bl	80015c8 <ds1307_set_reg_byte>
}
 8001682:	bf00      	nop
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <ds1307_set_interrupt_rate>:

/**
 * @brief Set square wave output frequency.
 * @param rate DS1307_1HZ (0b00), DS1307_4096HZ (0b01), DS1307_8192HZ (0b10) or DS1307_32768HZ (0b11).
 */
void ds1307_set_interrupt_rate(DS1307_Rate rate){
 800168a:	b580      	push	{r7, lr}
 800168c:	b084      	sub	sp, #16
 800168e:	af00      	add	r7, sp, #0
 8001690:	4603      	mov	r3, r0
 8001692:	71fb      	strb	r3, [r7, #7]
	uint8_t controlReg = ds1307_get_reg_byte(DS1307_REG_CONTROL);
 8001694:	2007      	movs	r0, #7
 8001696:	f7ff ffb5 	bl	8001604 <ds1307_get_reg_byte>
 800169a:	4603      	mov	r3, r0
 800169c:	73fb      	strb	r3, [r7, #15]
	uint8_t newControlReg = (controlReg & ~0x03) | rate;
 800169e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016a2:	f023 0303 	bic.w	r3, r3, #3
 80016a6:	b25a      	sxtb	r2, r3
 80016a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	b25b      	sxtb	r3, r3
 80016b0:	73bb      	strb	r3, [r7, #14]
	ds1307_set_reg_byte(DS1307_REG_CONTROL, newControlReg);
 80016b2:	7bbb      	ldrb	r3, [r7, #14]
 80016b4:	4619      	mov	r1, r3
 80016b6:	2007      	movs	r0, #7
 80016b8:	f7ff ff86 	bl	80015c8 <ds1307_set_reg_byte>
}
 80016bc:	bf00      	nop
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <ds1307_get_day_of_week>:

/**
 * @brief Gets the current day of week.
 * @return Days from last Sunday, 0 to 6.
 */
uint8_t ds1307_get_day_of_week(void) {
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
	return ds1307_decode_BCD(ds1307_get_reg_byte(DS1307_REG_DOW));
 80016c8:	2003      	movs	r0, #3
 80016ca:	f7ff ff9b 	bl	8001604 <ds1307_get_reg_byte>
 80016ce:	4603      	mov	r3, r0
 80016d0:	4618      	mov	r0, r3
 80016d2:	f000 f913 	bl	80018fc <ds1307_decode_BCD>
 80016d6:	4603      	mov	r3, r0
}
 80016d8:	4618      	mov	r0, r3
 80016da:	bd80      	pop	{r7, pc}

080016dc <ds1307_get_date>:

/**
 * @brief Gets the current day of month.
 * @return Day of month, 1 to 31.
 */
uint8_t ds1307_get_date(void) {
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
	return ds1307_decode_BCD(ds1307_get_reg_byte(DS1307_REG_DATE));
 80016e0:	2004      	movs	r0, #4
 80016e2:	f7ff ff8f 	bl	8001604 <ds1307_get_reg_byte>
 80016e6:	4603      	mov	r3, r0
 80016e8:	4618      	mov	r0, r3
 80016ea:	f000 f907 	bl	80018fc <ds1307_decode_BCD>
 80016ee:	4603      	mov	r3, r0
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <ds1307_get_month>:

/**
 * @brief Gets the current month.
 * @return Month, 1 to 12.
 */
uint8_t ds1307_get_month(void) {
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
	return ds1307_decode_BCD(ds1307_get_reg_byte(DS1307_REG_MONTH));
 80016f8:	2005      	movs	r0, #5
 80016fa:	f7ff ff83 	bl	8001604 <ds1307_get_reg_byte>
 80016fe:	4603      	mov	r3, r0
 8001700:	4618      	mov	r0, r3
 8001702:	f000 f8fb 	bl	80018fc <ds1307_decode_BCD>
 8001706:	4603      	mov	r3, r0
}
 8001708:	4618      	mov	r0, r3
 800170a:	bd80      	pop	{r7, pc}

0800170c <ds1307_get_year>:

/**
 * @brief Gets the current year.
 * @return Year, 2000 to 2099.
 */
uint16_t ds1307_get_year(void) {
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
	uint16_t cen = ds1307_get_reg_byte(DS1307_REG_CENT) * 100;
 8001712:	2010      	movs	r0, #16
 8001714:	f7ff ff76 	bl	8001604 <ds1307_get_reg_byte>
 8001718:	4603      	mov	r3, r0
 800171a:	461a      	mov	r2, r3
 800171c:	0092      	lsls	r2, r2, #2
 800171e:	4413      	add	r3, r2
 8001720:	461a      	mov	r2, r3
 8001722:	0091      	lsls	r1, r2, #2
 8001724:	461a      	mov	r2, r3
 8001726:	460b      	mov	r3, r1
 8001728:	4413      	add	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	80fb      	strh	r3, [r7, #6]
	return ds1307_decode_BCD(ds1307_get_reg_byte(DS1307_REG_YEAR));// + cen;
 800172e:	2006      	movs	r0, #6
 8001730:	f7ff ff68 	bl	8001604 <ds1307_get_reg_byte>
 8001734:	4603      	mov	r3, r0
 8001736:	4618      	mov	r0, r3
 8001738:	f000 f8e0 	bl	80018fc <ds1307_decode_BCD>
 800173c:	4603      	mov	r3, r0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <ds1307_get_hour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t ds1307_get_hour(void) {
 8001746:	b580      	push	{r7, lr}
 8001748:	af00      	add	r7, sp, #0
	return ds1307_decode_BCD(ds1307_get_reg_byte(DS1307_REG_HOUR) & 0x3f);
 800174a:	2002      	movs	r0, #2
 800174c:	f7ff ff5a 	bl	8001604 <ds1307_get_reg_byte>
 8001750:	4603      	mov	r3, r0
 8001752:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001756:	b2db      	uxtb	r3, r3
 8001758:	4618      	mov	r0, r3
 800175a:	f000 f8cf 	bl	80018fc <ds1307_decode_BCD>
 800175e:	4603      	mov	r3, r0
}
 8001760:	4618      	mov	r0, r3
 8001762:	bd80      	pop	{r7, pc}

08001764 <ds1307_get_minute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t ds1307_get_minute(void) {
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
	return ds1307_decode_BCD(ds1307_get_reg_byte(DS1307_REG_MINUTE));
 8001768:	2001      	movs	r0, #1
 800176a:	f7ff ff4b 	bl	8001604 <ds1307_get_reg_byte>
 800176e:	4603      	mov	r3, r0
 8001770:	4618      	mov	r0, r3
 8001772:	f000 f8c3 	bl	80018fc <ds1307_decode_BCD>
 8001776:	4603      	mov	r3, r0
}
 8001778:	4618      	mov	r0, r3
 800177a:	bd80      	pop	{r7, pc}

0800177c <ds1307_get_second>:

/**
 * @brief Gets the current second. Clock halt bit not included.
 * @return Second, 0 to 59.
 */
uint8_t ds1307_get_second(void) {
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
	return ds1307_decode_BCD(ds1307_get_reg_byte(DS1307_REG_SECOND) & 0x7f);
 8001780:	2000      	movs	r0, #0
 8001782:	f7ff ff3f 	bl	8001604 <ds1307_get_reg_byte>
 8001786:	4603      	mov	r3, r0
 8001788:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800178c:	b2db      	uxtb	r3, r3
 800178e:	4618      	mov	r0, r3
 8001790:	f000 f8b4 	bl	80018fc <ds1307_decode_BCD>
 8001794:	4603      	mov	r3, r0
}
 8001796:	4618      	mov	r0, r3
 8001798:	bd80      	pop	{r7, pc}

0800179a <ds1307_get_time_zone_hour>:
/**
 * @brief Gets the stored UTC hour offset.
 * @note  UTC offset is not updated automatically.
 * @return UTC hour offset, -12 to 12.
 */
int8_t ds1307_get_time_zone_hour(void) {
 800179a:	b580      	push	{r7, lr}
 800179c:	af00      	add	r7, sp, #0
	return ds1307_get_reg_byte(DS1307_REG_UTC_HR);
 800179e:	2008      	movs	r0, #8
 80017a0:	f7ff ff30 	bl	8001604 <ds1307_get_reg_byte>
 80017a4:	4603      	mov	r3, r0
 80017a6:	b25b      	sxtb	r3, r3
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	bd80      	pop	{r7, pc}

080017ac <ds1307_get_time_zone_min>:
/**
 * @brief Gets the stored UTC minute offset.
 * @note  UTC offset is not updated automatically.
 * @return UTC time zone, 0 to 59.
 */
uint8_t ds1307_get_time_zone_min(void) {
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
	return ds1307_get_reg_byte(DS1307_REG_UTC_MIN);
 80017b0:	2009      	movs	r0, #9
 80017b2:	f7ff ff27 	bl	8001604 <ds1307_get_reg_byte>
 80017b6:	4603      	mov	r3, r0
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	bd80      	pop	{r7, pc}

080017bc <ds1307_set_day_of_week>:

/**
 * @brief Sets the current day of week.
 * @param dayOfWeek Days since last Sunday, 0 to 6.
 */
void ds1307_set_day_of_week(uint8_t dayOfWeek) {
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	71fb      	strb	r3, [r7, #7]
	ds1307_set_reg_byte(DS1307_REG_DOW, ds1307_encode_BCD(dayOfWeek));
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f000 f8af 	bl	800192c <ds1307_encode_BCD>
 80017ce:	4603      	mov	r3, r0
 80017d0:	4619      	mov	r1, r3
 80017d2:	2003      	movs	r0, #3
 80017d4:	f7ff fef8 	bl	80015c8 <ds1307_set_reg_byte>
}
 80017d8:	bf00      	nop
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <ds1307_set_date>:

/**
 * @brief Sets the current day of month.
 * @param date Day of month, 1 to 31.
 */
void ds1307_set_date(uint8_t date) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	71fb      	strb	r3, [r7, #7]
	ds1307_set_reg_byte(DS1307_REG_DATE, ds1307_encode_BCD(date));
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f000 f89d 	bl	800192c <ds1307_encode_BCD>
 80017f2:	4603      	mov	r3, r0
 80017f4:	4619      	mov	r1, r3
 80017f6:	2004      	movs	r0, #4
 80017f8:	f7ff fee6 	bl	80015c8 <ds1307_set_reg_byte>
}
 80017fc:	bf00      	nop
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <ds1307_set_month>:

/**
 * @brief Sets the current month.
 * @param month Month, 1 to 12.
 */
void ds1307_set_month(uint8_t month) {
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	71fb      	strb	r3, [r7, #7]
	ds1307_set_reg_byte(DS1307_REG_MONTH, ds1307_encode_BCD(month));
 800180e:	79fb      	ldrb	r3, [r7, #7]
 8001810:	4618      	mov	r0, r3
 8001812:	f000 f88b 	bl	800192c <ds1307_encode_BCD>
 8001816:	4603      	mov	r3, r0
 8001818:	4619      	mov	r1, r3
 800181a:	2005      	movs	r0, #5
 800181c:	f7ff fed4 	bl	80015c8 <ds1307_set_reg_byte>
}
 8001820:	bf00      	nop
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <ds1307_set_year>:

/**
 * @brief Sets the current year.
 * @param year Year, 2000 to 2099.
 */
void ds1307_set_year(uint16_t year) {
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	80fb      	strh	r3, [r7, #6]
	ds1307_set_reg_byte(DS1307_REG_CENT, year / 100);
 8001832:	88fb      	ldrh	r3, [r7, #6]
 8001834:	4a10      	ldr	r2, [pc, #64]	@ (8001878 <ds1307_set_year+0x50>)
 8001836:	fba2 2303 	umull	r2, r3, r2, r3
 800183a:	095b      	lsrs	r3, r3, #5
 800183c:	b29b      	uxth	r3, r3
 800183e:	b2db      	uxtb	r3, r3
 8001840:	4619      	mov	r1, r3
 8001842:	2010      	movs	r0, #16
 8001844:	f7ff fec0 	bl	80015c8 <ds1307_set_reg_byte>
	ds1307_set_reg_byte(DS1307_REG_YEAR, ds1307_encode_BCD(year % 100));
 8001848:	88fb      	ldrh	r3, [r7, #6]
 800184a:	4a0b      	ldr	r2, [pc, #44]	@ (8001878 <ds1307_set_year+0x50>)
 800184c:	fba2 1203 	umull	r1, r2, r2, r3
 8001850:	0952      	lsrs	r2, r2, #5
 8001852:	2164      	movs	r1, #100	@ 0x64
 8001854:	fb01 f202 	mul.w	r2, r1, r2
 8001858:	1a9b      	subs	r3, r3, r2
 800185a:	b29b      	uxth	r3, r3
 800185c:	b2db      	uxtb	r3, r3
 800185e:	4618      	mov	r0, r3
 8001860:	f000 f864 	bl	800192c <ds1307_encode_BCD>
 8001864:	4603      	mov	r3, r0
 8001866:	4619      	mov	r1, r3
 8001868:	2006      	movs	r0, #6
 800186a:	f7ff fead 	bl	80015c8 <ds1307_set_reg_byte>
}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	51eb851f 	.word	0x51eb851f

0800187c <ds1307_set_hour>:

/**
 * @brief Sets the current hour, in 24h format.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 */
void ds1307_set_hour(uint8_t hour_24mode) {
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	71fb      	strb	r3, [r7, #7]
	ds1307_set_reg_byte(DS1307_REG_HOUR, ds1307_encode_BCD(hour_24mode & 0x3f));
 8001886:	79fb      	ldrb	r3, [r7, #7]
 8001888:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800188c:	b2db      	uxtb	r3, r3
 800188e:	4618      	mov	r0, r3
 8001890:	f000 f84c 	bl	800192c <ds1307_encode_BCD>
 8001894:	4603      	mov	r3, r0
 8001896:	4619      	mov	r1, r3
 8001898:	2002      	movs	r0, #2
 800189a:	f7ff fe95 	bl	80015c8 <ds1307_set_reg_byte>
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <ds1307_set_minute>:

/**
 * @brief Sets the current minute.
 * @param minute Minute, 0 to 59.
 */
void ds1307_set_minute(uint8_t minute) {
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b082      	sub	sp, #8
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	4603      	mov	r3, r0
 80018ae:	71fb      	strb	r3, [r7, #7]
	ds1307_set_reg_byte(DS1307_REG_MINUTE, ds1307_encode_BCD(minute));
 80018b0:	79fb      	ldrb	r3, [r7, #7]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f000 f83a 	bl	800192c <ds1307_encode_BCD>
 80018b8:	4603      	mov	r3, r0
 80018ba:	4619      	mov	r1, r3
 80018bc:	2001      	movs	r0, #1
 80018be:	f7ff fe83 	bl	80015c8 <ds1307_set_reg_byte>
}
 80018c2:	bf00      	nop
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <ds1307_set_second>:

/**
 * @brief Sets the current second.
 * @param second Second, 0 to 59.
 */
void ds1307_set_second(uint8_t second) {
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b084      	sub	sp, #16
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	4603      	mov	r3, r0
 80018d2:	71fb      	strb	r3, [r7, #7]
	uint8_t ch = ds1307_get_clock_halt();
 80018d4:	f7ff fe6b 	bl	80015ae <ds1307_get_clock_halt>
 80018d8:	4603      	mov	r3, r0
 80018da:	73fb      	strb	r3, [r7, #15]
	ds1307_set_reg_byte(DS1307_REG_SECOND, ds1307_encode_BCD(second | ch));
 80018dc:	79fa      	ldrb	r2, [r7, #7]
 80018de:	7bfb      	ldrb	r3, [r7, #15]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	4618      	mov	r0, r3
 80018e6:	f000 f821 	bl	800192c <ds1307_encode_BCD>
 80018ea:	4603      	mov	r3, r0
 80018ec:	4619      	mov	r1, r3
 80018ee:	2000      	movs	r0, #0
 80018f0:	f7ff fe6a 	bl	80015c8 <ds1307_set_reg_byte>
}
 80018f4:	bf00      	nop
 80018f6:	3710      	adds	r7, #16
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <ds1307_decode_BCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t ds1307_decode_BCD(uint8_t bin) {
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	091b      	lsrs	r3, r3, #4
 800190a:	b2db      	uxtb	r3, r3
 800190c:	461a      	mov	r2, r3
 800190e:	0092      	lsls	r2, r2, #2
 8001910:	4413      	add	r3, r2
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	b2da      	uxtb	r2, r3
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	f003 030f 	and.w	r3, r3, #15
 800191c:	b2db      	uxtb	r3, r3
 800191e:	4413      	add	r3, r2
 8001920:	b2db      	uxtb	r3, r3
}
 8001922:	4618      	mov	r0, r3
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	bc80      	pop	{r7}
 800192a:	4770      	bx	lr

0800192c <ds1307_encode_BCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t ds1307_encode_BCD(uint8_t dec) {
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	71fb      	strb	r3, [r7, #7]
	return (dec % 10 + ((dec / 10) << 4));
 8001936:	79fa      	ldrb	r2, [r7, #7]
 8001938:	4b0c      	ldr	r3, [pc, #48]	@ (800196c <ds1307_encode_BCD+0x40>)
 800193a:	fba3 1302 	umull	r1, r3, r3, r2
 800193e:	08d9      	lsrs	r1, r3, #3
 8001940:	460b      	mov	r3, r1
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	440b      	add	r3, r1
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	b2da      	uxtb	r2, r3
 800194c:	79fb      	ldrb	r3, [r7, #7]
 800194e:	4907      	ldr	r1, [pc, #28]	@ (800196c <ds1307_encode_BCD+0x40>)
 8001950:	fba1 1303 	umull	r1, r3, r1, r3
 8001954:	08db      	lsrs	r3, r3, #3
 8001956:	b2db      	uxtb	r3, r3
 8001958:	011b      	lsls	r3, r3, #4
 800195a:	b2db      	uxtb	r3, r3
 800195c:	4413      	add	r3, r2
 800195e:	b2db      	uxtb	r3, r3
}
 8001960:	4618      	mov	r0, r3
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	bc80      	pop	{r7}
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	cccccccd 	.word	0xcccccccd

08001970 <DWT_Delay_Init>:

/* private functions prototypes */
/**
 * @brief DWT Cortex Tick counter for Microsecond delay
 */
static uint32_t DWT_Delay_Init(void) {
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8001974:	4b14      	ldr	r3, [pc, #80]	@ (80019c8 <DWT_Delay_Init+0x58>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	4a13      	ldr	r2, [pc, #76]	@ (80019c8 <DWT_Delay_Init+0x58>)
 800197a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800197e:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001980:	4b11      	ldr	r3, [pc, #68]	@ (80019c8 <DWT_Delay_Init+0x58>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	4a10      	ldr	r2, [pc, #64]	@ (80019c8 <DWT_Delay_Init+0x58>)
 8001986:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800198a:	60d3      	str	r3, [r2, #12]
  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk;
 800198c:	4b0f      	ldr	r3, [pc, #60]	@ (80019cc <DWT_Delay_Init+0x5c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a0e      	ldr	r2, [pc, #56]	@ (80019cc <DWT_Delay_Init+0x5c>)
 8001992:	f023 0301 	bic.w	r3, r3, #1
 8001996:	6013      	str	r3, [r2, #0]
  /* Enable clock cycle counter */
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001998:	4b0c      	ldr	r3, [pc, #48]	@ (80019cc <DWT_Delay_Init+0x5c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a0b      	ldr	r2, [pc, #44]	@ (80019cc <DWT_Delay_Init+0x5c>)
 800199e:	f043 0301 	orr.w	r3, r3, #1
 80019a2:	6013      	str	r3, [r2, #0]
  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 80019a4:	4b09      	ldr	r3, [pc, #36]	@ (80019cc <DWT_Delay_Init+0x5c>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	605a      	str	r2, [r3, #4]
  /* 3 NO OPERATION instructions */
  __NOP();
 80019aa:	bf00      	nop
  __NOP();
 80019ac:	bf00      	nop
  __NOP();
 80019ae:	bf00      	nop
  /* Check if clock cycle counter has started */
  if(DWT->CYCCNT)
 80019b0:	4b06      	ldr	r3, [pc, #24]	@ (80019cc <DWT_Delay_Init+0x5c>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <DWT_Delay_Init+0x4c>
  {
    return 0;
 80019b8:	2300      	movs	r3, #0
 80019ba:	e000      	b.n	80019be <DWT_Delay_Init+0x4e>
  }
  else
  {
    return 1;
 80019bc:	2301      	movs	r3, #1
  }
}
 80019be:	4618      	mov	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bc80      	pop	{r7}
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	e000edf0 	.word	0xe000edf0
 80019cc:	e0001000 	.word	0xe0001000

080019d0 <lcd16x2_enablePulse>:

/**
 * @brief функція генерування сигналу Enable
 */
static void lcd16x2_enablePulse(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_SET);
 80019d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001a04 <lcd16x2_enablePulse+0x34>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001a08 <lcd16x2_enablePulse+0x38>)
 80019da:	8811      	ldrh	r1, [r2, #0]
 80019dc:	2201      	movs	r2, #1
 80019de:	4618      	mov	r0, r3
 80019e0:	f002 f8c1 	bl	8003b66 <HAL_GPIO_WritePin>
  //DWT_Delay_us(T_CONST);
  delay_us(T_CONST);
 80019e4:	2014      	movs	r0, #20
 80019e6:	f000 fa93 	bl	8001f10 <delay_us>
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_RESET);
 80019ea:	4b06      	ldr	r3, [pc, #24]	@ (8001a04 <lcd16x2_enablePulse+0x34>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a06      	ldr	r2, [pc, #24]	@ (8001a08 <lcd16x2_enablePulse+0x38>)
 80019f0:	8811      	ldrh	r1, [r2, #0]
 80019f2:	2200      	movs	r2, #0
 80019f4:	4618      	mov	r0, r3
 80019f6:	f002 f8b6 	bl	8003b66 <HAL_GPIO_WritePin>
  //DWT_Delay_us(60);
  delay_us(60);
 80019fa:	203c      	movs	r0, #60	@ 0x3c
 80019fc:	f000 fa88 	bl	8001f10 <delay_us>
}
 8001a00:	bf00      	nop
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20000288 	.word	0x20000288
 8001a08:	2000028e 	.word	0x2000028e

08001a0c <lcd16x2_rs>:

/**
 * @brief функція генерування RS сигналу управління
 */
static void lcd16x2_rs(bool state)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4603      	mov	r3, r0
 8001a14:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 8001a16:	4b06      	ldr	r3, [pc, #24]	@ (8001a30 <lcd16x2_rs+0x24>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a06      	ldr	r2, [pc, #24]	@ (8001a34 <lcd16x2_rs+0x28>)
 8001a1c:	8811      	ldrh	r1, [r2, #0]
 8001a1e:	79fa      	ldrb	r2, [r7, #7]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f002 f8a0 	bl	8003b66 <HAL_GPIO_WritePin>
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000288 	.word	0x20000288
 8001a34:	2000028c 	.word	0x2000028c

08001a38 <lcd16x2_write>:

/**
 * @brief функція запису паралельних даних на шині до LCD
 */
static void lcd16x2_write(uint8_t wbyte)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	71fb      	strb	r3, [r7, #7]
  uint8_t LSB_nibble = wbyte&0xF, MSB_nibble = (wbyte>>4)&0xF;
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	f003 030f 	and.w	r3, r3, #15
 8001a48:	73fb      	strb	r3, [r7, #15]
 8001a4a:	79fb      	ldrb	r3, [r7, #7]
 8001a4c:	091b      	lsrs	r3, r3, #4
 8001a4e:	73bb      	strb	r3, [r7, #14]
  if(is8BitsMode)
 8001a50:	4b5f      	ldr	r3, [pc, #380]	@ (8001bd0 <lcd16x2_write+0x198>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d05a      	beq.n	8001b0e <lcd16x2_write+0xd6>
  {
    //дані LSB
    HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8001a58:	4b5e      	ldr	r3, [pc, #376]	@ (8001bd4 <lcd16x2_write+0x19c>)
 8001a5a:	6818      	ldr	r0, [r3, #0]
 8001a5c:	4b5e      	ldr	r3, [pc, #376]	@ (8001bd8 <lcd16x2_write+0x1a0>)
 8001a5e:	8819      	ldrh	r1, [r3, #0]
 8001a60:	7bfb      	ldrb	r3, [r7, #15]
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	461a      	mov	r2, r3
 8001a6a:	f002 f87c 	bl	8003b66 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8001a6e:	4b59      	ldr	r3, [pc, #356]	@ (8001bd4 <lcd16x2_write+0x19c>)
 8001a70:	6818      	ldr	r0, [r3, #0]
 8001a72:	4b5a      	ldr	r3, [pc, #360]	@ (8001bdc <lcd16x2_write+0x1a4>)
 8001a74:	8819      	ldrh	r1, [r3, #0]
 8001a76:	7bfb      	ldrb	r3, [r7, #15]
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	461a      	mov	r2, r3
 8001a80:	f002 f871 	bl	8003b66 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8001a84:	4b53      	ldr	r3, [pc, #332]	@ (8001bd4 <lcd16x2_write+0x19c>)
 8001a86:	6818      	ldr	r0, [r3, #0]
 8001a88:	4b55      	ldr	r3, [pc, #340]	@ (8001be0 <lcd16x2_write+0x1a8>)
 8001a8a:	8819      	ldrh	r1, [r3, #0]
 8001a8c:	7bfb      	ldrb	r3, [r7, #15]
 8001a8e:	f003 0304 	and.w	r3, r3, #4
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	461a      	mov	r2, r3
 8001a96:	f002 f866 	bl	8003b66 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8001a9a:	4b4e      	ldr	r3, [pc, #312]	@ (8001bd4 <lcd16x2_write+0x19c>)
 8001a9c:	6818      	ldr	r0, [r3, #0]
 8001a9e:	4b51      	ldr	r3, [pc, #324]	@ (8001be4 <lcd16x2_write+0x1ac>)
 8001aa0:	8819      	ldrh	r1, [r3, #0]
 8001aa2:	7bfb      	ldrb	r3, [r7, #15]
 8001aa4:	f003 0308 	and.w	r3, r3, #8
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	461a      	mov	r2, r3
 8001aac:	f002 f85b 	bl	8003b66 <HAL_GPIO_WritePin>
    //дані MSB
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8001ab0:	4b4d      	ldr	r3, [pc, #308]	@ (8001be8 <lcd16x2_write+0x1b0>)
 8001ab2:	6818      	ldr	r0, [r3, #0]
 8001ab4:	4b4d      	ldr	r3, [pc, #308]	@ (8001bec <lcd16x2_write+0x1b4>)
 8001ab6:	8819      	ldrh	r1, [r3, #0]
 8001ab8:	7bbb      	ldrb	r3, [r7, #14]
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	f002 f850 	bl	8003b66 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8001ac6:	4b48      	ldr	r3, [pc, #288]	@ (8001be8 <lcd16x2_write+0x1b0>)
 8001ac8:	6818      	ldr	r0, [r3, #0]
 8001aca:	4b49      	ldr	r3, [pc, #292]	@ (8001bf0 <lcd16x2_write+0x1b8>)
 8001acc:	8819      	ldrh	r1, [r3, #0]
 8001ace:	7bbb      	ldrb	r3, [r7, #14]
 8001ad0:	f003 0302 	and.w	r3, r3, #2
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	f002 f845 	bl	8003b66 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8001adc:	4b42      	ldr	r3, [pc, #264]	@ (8001be8 <lcd16x2_write+0x1b0>)
 8001ade:	6818      	ldr	r0, [r3, #0]
 8001ae0:	4b44      	ldr	r3, [pc, #272]	@ (8001bf4 <lcd16x2_write+0x1bc>)
 8001ae2:	8819      	ldrh	r1, [r3, #0]
 8001ae4:	7bbb      	ldrb	r3, [r7, #14]
 8001ae6:	f003 0304 	and.w	r3, r3, #4
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	461a      	mov	r2, r3
 8001aee:	f002 f83a 	bl	8003b66 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8001af2:	4b3d      	ldr	r3, [pc, #244]	@ (8001be8 <lcd16x2_write+0x1b0>)
 8001af4:	6818      	ldr	r0, [r3, #0]
 8001af6:	4b40      	ldr	r3, [pc, #256]	@ (8001bf8 <lcd16x2_write+0x1c0>)
 8001af8:	8819      	ldrh	r1, [r3, #0]
 8001afa:	7bbb      	ldrb	r3, [r7, #14]
 8001afc:	f003 0308 	and.w	r3, r3, #8
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	461a      	mov	r2, r3
 8001b04:	f002 f82f 	bl	8003b66 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 8001b08:	f7ff ff62 	bl	80019d0 <lcd16x2_enablePulse>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
    lcd16x2_enablePulse();
  }
}
 8001b0c:	e05b      	b.n	8001bc6 <lcd16x2_write+0x18e>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8001b0e:	4b36      	ldr	r3, [pc, #216]	@ (8001be8 <lcd16x2_write+0x1b0>)
 8001b10:	6818      	ldr	r0, [r3, #0]
 8001b12:	4b36      	ldr	r3, [pc, #216]	@ (8001bec <lcd16x2_write+0x1b4>)
 8001b14:	8819      	ldrh	r1, [r3, #0]
 8001b16:	7bbb      	ldrb	r3, [r7, #14]
 8001b18:	f003 0301 	and.w	r3, r3, #1
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	461a      	mov	r2, r3
 8001b20:	f002 f821 	bl	8003b66 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8001b24:	4b30      	ldr	r3, [pc, #192]	@ (8001be8 <lcd16x2_write+0x1b0>)
 8001b26:	6818      	ldr	r0, [r3, #0]
 8001b28:	4b31      	ldr	r3, [pc, #196]	@ (8001bf0 <lcd16x2_write+0x1b8>)
 8001b2a:	8819      	ldrh	r1, [r3, #0]
 8001b2c:	7bbb      	ldrb	r3, [r7, #14]
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	461a      	mov	r2, r3
 8001b36:	f002 f816 	bl	8003b66 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8001b3a:	4b2b      	ldr	r3, [pc, #172]	@ (8001be8 <lcd16x2_write+0x1b0>)
 8001b3c:	6818      	ldr	r0, [r3, #0]
 8001b3e:	4b2d      	ldr	r3, [pc, #180]	@ (8001bf4 <lcd16x2_write+0x1bc>)
 8001b40:	8819      	ldrh	r1, [r3, #0]
 8001b42:	7bbb      	ldrb	r3, [r7, #14]
 8001b44:	f003 0304 	and.w	r3, r3, #4
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	f002 f80b 	bl	8003b66 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8001b50:	4b25      	ldr	r3, [pc, #148]	@ (8001be8 <lcd16x2_write+0x1b0>)
 8001b52:	6818      	ldr	r0, [r3, #0]
 8001b54:	4b28      	ldr	r3, [pc, #160]	@ (8001bf8 <lcd16x2_write+0x1c0>)
 8001b56:	8819      	ldrh	r1, [r3, #0]
 8001b58:	7bbb      	ldrb	r3, [r7, #14]
 8001b5a:	f003 0308 	and.w	r3, r3, #8
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	461a      	mov	r2, r3
 8001b62:	f002 f800 	bl	8003b66 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 8001b66:	f7ff ff33 	bl	80019d0 <lcd16x2_enablePulse>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8001b6a:	4b1f      	ldr	r3, [pc, #124]	@ (8001be8 <lcd16x2_write+0x1b0>)
 8001b6c:	6818      	ldr	r0, [r3, #0]
 8001b6e:	4b1f      	ldr	r3, [pc, #124]	@ (8001bec <lcd16x2_write+0x1b4>)
 8001b70:	8819      	ldrh	r1, [r3, #0]
 8001b72:	7bfb      	ldrb	r3, [r7, #15]
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	f001 fff3 	bl	8003b66 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8001b80:	4b19      	ldr	r3, [pc, #100]	@ (8001be8 <lcd16x2_write+0x1b0>)
 8001b82:	6818      	ldr	r0, [r3, #0]
 8001b84:	4b1a      	ldr	r3, [pc, #104]	@ (8001bf0 <lcd16x2_write+0x1b8>)
 8001b86:	8819      	ldrh	r1, [r3, #0]
 8001b88:	7bfb      	ldrb	r3, [r7, #15]
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	461a      	mov	r2, r3
 8001b92:	f001 ffe8 	bl	8003b66 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8001b96:	4b14      	ldr	r3, [pc, #80]	@ (8001be8 <lcd16x2_write+0x1b0>)
 8001b98:	6818      	ldr	r0, [r3, #0]
 8001b9a:	4b16      	ldr	r3, [pc, #88]	@ (8001bf4 <lcd16x2_write+0x1bc>)
 8001b9c:	8819      	ldrh	r1, [r3, #0]
 8001b9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ba0:	f003 0304 	and.w	r3, r3, #4
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	f001 ffdd 	bl	8003b66 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8001bac:	4b0e      	ldr	r3, [pc, #56]	@ (8001be8 <lcd16x2_write+0x1b0>)
 8001bae:	6818      	ldr	r0, [r3, #0]
 8001bb0:	4b11      	ldr	r3, [pc, #68]	@ (8001bf8 <lcd16x2_write+0x1c0>)
 8001bb2:	8819      	ldrh	r1, [r3, #0]
 8001bb4:	7bfb      	ldrb	r3, [r7, #15]
 8001bb6:	f003 0308 	and.w	r3, r3, #8
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	f001 ffd2 	bl	8003b66 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 8001bc2:	f7ff ff05 	bl	80019d0 <lcd16x2_enablePulse>
}
 8001bc6:	bf00      	nop
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000000 	.word	0x20000000
 8001bd4:	20000290 	.word	0x20000290
 8001bd8:	20000294 	.word	0x20000294
 8001bdc:	20000296 	.word	0x20000296
 8001be0:	20000298 	.word	0x20000298
 8001be4:	2000029a 	.word	0x2000029a
 8001be8:	2000029c 	.word	0x2000029c
 8001bec:	200002a0 	.word	0x200002a0
 8001bf0:	200002a2 	.word	0x200002a2
 8001bf4:	200002a4 	.word	0x200002a4
 8001bf8:	200002a6 	.word	0x200002a6

08001bfc <lcd16x2_writeCommand>:

/**
 * @brief генерує команду запису
 */
static void lcd16x2_writeCommand(uint8_t cmd)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(false);
 8001c06:	2000      	movs	r0, #0
 8001c08:	f7ff ff00 	bl	8001a0c <lcd16x2_rs>
  lcd16x2_write(cmd);
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff ff12 	bl	8001a38 <lcd16x2_write>
}
 8001c14:	bf00      	nop
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <lcd16x2_writeData>:

/**
 * @brief записує дані
 */
void lcd16x2_writeData(uint8_t data)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(true);
 8001c26:	2001      	movs	r0, #1
 8001c28:	f7ff fef0 	bl	8001a0c <lcd16x2_rs>
  lcd16x2_write(data);
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff ff02 	bl	8001a38 <lcd16x2_write>
}
 8001c34:	bf00      	nop
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <lcd16x2_write4>:

/**
 * @brief 4-бітний запис
 */
static void lcd16x2_write4(uint8_t nib)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	71fb      	strb	r3, [r7, #7]
  nib &= 0xF;
 8001c46:	79fb      	ldrb	r3, [r7, #7]
 8001c48:	f003 030f 	and.w	r3, r3, #15
 8001c4c:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(false);
 8001c4e:	2000      	movs	r0, #0
 8001c50:	f7ff fedc 	bl	8001a0c <lcd16x2_rs>
  //LSB data
  HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(nib&0x1));
 8001c54:	4b18      	ldr	r3, [pc, #96]	@ (8001cb8 <lcd16x2_write4+0x7c>)
 8001c56:	6818      	ldr	r0, [r3, #0]
 8001c58:	4b18      	ldr	r3, [pc, #96]	@ (8001cbc <lcd16x2_write4+0x80>)
 8001c5a:	8819      	ldrh	r1, [r3, #0]
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	461a      	mov	r2, r3
 8001c66:	f001 ff7e 	bl	8003b66 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(nib&0x2));
 8001c6a:	4b13      	ldr	r3, [pc, #76]	@ (8001cb8 <lcd16x2_write4+0x7c>)
 8001c6c:	6818      	ldr	r0, [r3, #0]
 8001c6e:	4b14      	ldr	r3, [pc, #80]	@ (8001cc0 <lcd16x2_write4+0x84>)
 8001c70:	8819      	ldrh	r1, [r3, #0]
 8001c72:	79fb      	ldrb	r3, [r7, #7]
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	f001 ff73 	bl	8003b66 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(nib&0x4));
 8001c80:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb8 <lcd16x2_write4+0x7c>)
 8001c82:	6818      	ldr	r0, [r3, #0]
 8001c84:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc4 <lcd16x2_write4+0x88>)
 8001c86:	8819      	ldrh	r1, [r3, #0]
 8001c88:	79fb      	ldrb	r3, [r7, #7]
 8001c8a:	f003 0304 	and.w	r3, r3, #4
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	461a      	mov	r2, r3
 8001c92:	f001 ff68 	bl	8003b66 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(nib&0x8));
 8001c96:	4b08      	ldr	r3, [pc, #32]	@ (8001cb8 <lcd16x2_write4+0x7c>)
 8001c98:	6818      	ldr	r0, [r3, #0]
 8001c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc8 <lcd16x2_write4+0x8c>)
 8001c9c:	8819      	ldrh	r1, [r3, #0]
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	f003 0308 	and.w	r3, r3, #8
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	f001 ff5d 	bl	8003b66 <HAL_GPIO_WritePin>
  lcd16x2_enablePulse();
 8001cac:	f7ff fe90 	bl	80019d0 <lcd16x2_enablePulse>
}
 8001cb0:	bf00      	nop
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	2000029c 	.word	0x2000029c
 8001cbc:	200002a0 	.word	0x200002a0
 8001cc0:	200002a2 	.word	0x200002a2
 8001cc4:	200002a4 	.word	0x200002a4
 8001cc8:	200002a6 	.word	0x200002a6

08001ccc <lcd16x2_init_4bits>:
 * @param[in] x_pin пін GPIO (e.g. GPIO_PIN_1)
 */
void lcd16x2_init_4bits(
    GPIO_TypeDef* port_rs_e, uint16_t rs_pin, uint16_t e_pin,
    GPIO_TypeDef* port_4_7, uint16_t d4_pin, uint16_t d5_pin, uint16_t d6_pin, uint16_t d7_pin)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	607b      	str	r3, [r7, #4]
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	817b      	strh	r3, [r7, #10]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	813b      	strh	r3, [r7, #8]
  DWT_Delay_Init();
 8001cde:	f7ff fe47 	bl	8001970 <DWT_Delay_Init>
  //Set GPIO Ports and Pins data
  PORT_RS_and_E = port_rs_e;
 8001ce2:	4a24      	ldr	r2, [pc, #144]	@ (8001d74 <lcd16x2_init_4bits+0xa8>)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6013      	str	r3, [r2, #0]
  PIN_RS = rs_pin;
 8001ce8:	4a23      	ldr	r2, [pc, #140]	@ (8001d78 <lcd16x2_init_4bits+0xac>)
 8001cea:	897b      	ldrh	r3, [r7, #10]
 8001cec:	8013      	strh	r3, [r2, #0]
  PIN_E = e_pin;
 8001cee:	4a23      	ldr	r2, [pc, #140]	@ (8001d7c <lcd16x2_init_4bits+0xb0>)
 8001cf0:	893b      	ldrh	r3, [r7, #8]
 8001cf2:	8013      	strh	r3, [r2, #0]
  PORT_MSB = port_4_7;
 8001cf4:	4a22      	ldr	r2, [pc, #136]	@ (8001d80 <lcd16x2_init_4bits+0xb4>)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6013      	str	r3, [r2, #0]
  D4_PIN = d4_pin;
 8001cfa:	4a22      	ldr	r2, [pc, #136]	@ (8001d84 <lcd16x2_init_4bits+0xb8>)
 8001cfc:	8b3b      	ldrh	r3, [r7, #24]
 8001cfe:	8013      	strh	r3, [r2, #0]
  D5_PIN = d5_pin;
 8001d00:	4a21      	ldr	r2, [pc, #132]	@ (8001d88 <lcd16x2_init_4bits+0xbc>)
 8001d02:	8bbb      	ldrh	r3, [r7, #28]
 8001d04:	8013      	strh	r3, [r2, #0]
  D6_PIN = d6_pin;
 8001d06:	4a21      	ldr	r2, [pc, #132]	@ (8001d8c <lcd16x2_init_4bits+0xc0>)
 8001d08:	8c3b      	ldrh	r3, [r7, #32]
 8001d0a:	8013      	strh	r3, [r2, #0]
  D7_PIN = d7_pin;
 8001d0c:	4a20      	ldr	r2, [pc, #128]	@ (8001d90 <lcd16x2_init_4bits+0xc4>)
 8001d0e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001d10:	8013      	strh	r3, [r2, #0]
  is8BitsMode = false;
 8001d12:	4b20      	ldr	r3, [pc, #128]	@ (8001d94 <lcd16x2_init_4bits+0xc8>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	701a      	strb	r2, [r3, #0]
  FunctionSet = 0x28;
 8001d18:	4b1f      	ldr	r3, [pc, #124]	@ (8001d98 <lcd16x2_init_4bits+0xcc>)
 8001d1a:	2228      	movs	r2, #40	@ 0x28
 8001d1c:	701a      	strb	r2, [r3, #0]

  //ініцілізація LCD
  //1. очікування щонайменще 15 мс
  LCD_MS_DELAY(20);
 8001d1e:	2014      	movs	r0, #20
 8001d20:	f001 fc7e 	bl	8003620 <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_write4(0x3);
 8001d24:	2003      	movs	r0, #3
 8001d26:	f7ff ff89 	bl	8001c3c <lcd16x2_write4>
  LCD_MS_DELAY(5);
 8001d2a:	2005      	movs	r0, #5
 8001d2c:	f001 fc78 	bl	8003620 <HAL_Delay>
  lcd16x2_write4(0x3);
 8001d30:	2003      	movs	r0, #3
 8001d32:	f7ff ff83 	bl	8001c3c <lcd16x2_write4>
  LCD_MS_DELAY(1);
 8001d36:	2001      	movs	r0, #1
 8001d38:	f001 fc72 	bl	8003620 <HAL_Delay>
  lcd16x2_write4(0x3);
 8001d3c:	2003      	movs	r0, #3
 8001d3e:	f7ff ff7d 	bl	8001c3c <lcd16x2_write4>
  LCD_MS_DELAY(1);
 8001d42:	2001      	movs	r0, #1
 8001d44:	f001 fc6c 	bl	8003620 <HAL_Delay>
  lcd16x2_write4(0x2);  //4-бітний режим
 8001d48:	2002      	movs	r0, #2
 8001d4a:	f7ff ff77 	bl	8001c3c <lcd16x2_write4>
  LCD_MS_DELAY(1);
 8001d4e:	2001      	movs	r0, #1
 8001d50:	f001 fc66 	bl	8003620 <HAL_Delay>
  //4. функція встановлення; Enable 2 рядки, довжина даних 4 біти
  lcd16x2_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 8001d54:	2028      	movs	r0, #40	@ 0x28
 8001d56:	f7ff ff51 	bl	8001bfc <lcd16x2_writeCommand>
  //3. управління дисплеєм (вкл. дисплею, вкл. курсора, мигання курсора)
  lcd16x2_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
 8001d5a:	200f      	movs	r0, #15
 8001d5c:	f7ff ff4e 	bl	8001bfc <lcd16x2_writeCommand>
  //4. очищення LCD і повернення на початок
  lcd16x2_writeCommand(LCD_CLEARDISPLAY);
 8001d60:	2001      	movs	r0, #1
 8001d62:	f7ff ff4b 	bl	8001bfc <lcd16x2_writeCommand>
  LCD_MS_DELAY(3);
 8001d66:	2003      	movs	r0, #3
 8001d68:	f001 fc5a 	bl	8003620 <HAL_Delay>
}
 8001d6c:	bf00      	nop
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	20000288 	.word	0x20000288
 8001d78:	2000028c 	.word	0x2000028c
 8001d7c:	2000028e 	.word	0x2000028e
 8001d80:	2000029c 	.word	0x2000029c
 8001d84:	200002a0 	.word	0x200002a0
 8001d88:	200002a2 	.word	0x200002a2
 8001d8c:	200002a4 	.word	0x200002a4
 8001d90:	200002a6 	.word	0x200002a6
 8001d94:	20000000 	.word	0x20000000
 8001d98:	20000002 	.word	0x20000002

08001d9c <lcd16x2_setCursor>:
 * @brief встановлює крусор у задану позицію
 * @param[in] row - 0 або 1 для рядка1 або рядка2
 * @param[in] col - 0 - 15 (16 стовпців LCD)
 */
void lcd16x2_setCursor(uint8_t row, uint8_t col)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	460a      	mov	r2, r1
 8001da6:	71fb      	strb	r3, [r7, #7]
 8001da8:	4613      	mov	r3, r2
 8001daa:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 8001dac:	79bb      	ldrb	r3, [r7, #6]
 8001dae:	f003 030f 	and.w	r3, r3, #15
 8001db2:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 8001db4:	79fb      	ldrb	r3, [r7, #7]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d108      	bne.n	8001dcc <lcd16x2_setCursor+0x30>
  {
    maskData |= (0x80);
 8001dba:	7bfb      	ldrb	r3, [r7, #15]
 8001dbc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001dc0:	73fb      	strb	r3, [r7, #15]
    lcd16x2_writeCommand(maskData);
 8001dc2:	7bfb      	ldrb	r3, [r7, #15]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff ff19 	bl	8001bfc <lcd16x2_writeCommand>
  else
  {
    maskData |= (0xc0);
    lcd16x2_writeCommand(maskData);
  }
}
 8001dca:	e007      	b.n	8001ddc <lcd16x2_setCursor+0x40>
    maskData |= (0xc0);
 8001dcc:	7bfb      	ldrb	r3, [r7, #15]
 8001dce:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8001dd2:	73fb      	strb	r3, [r7, #15]
    lcd16x2_writeCommand(maskData);
 8001dd4:	7bfb      	ldrb	r3, [r7, #15]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff ff10 	bl	8001bfc <lcd16x2_writeCommand>
}
 8001ddc:	bf00      	nop
 8001dde:	3710      	adds	r7, #16
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <lcd16x2_1stLine>:
/**
 * @brief перехід на перший рядок LCD
 */
void lcd16x2_1stLine(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  lcd16x2_setCursor(0,0);
 8001de8:	2100      	movs	r1, #0
 8001dea:	2000      	movs	r0, #0
 8001dec:	f7ff ffd6 	bl	8001d9c <lcd16x2_setCursor>
}
 8001df0:	bf00      	nop
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <lcd16x2_2ndLine>:
/**
 * @brief перехід на другий рядок LCD
 */
void lcd16x2_2ndLine(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  lcd16x2_setCursor(1,0);
 8001df8:	2100      	movs	r1, #0
 8001dfa:	2001      	movs	r0, #1
 8001dfc:	f7ff ffce 	bl	8001d9c <lcd16x2_setCursor>
}
 8001e00:	bf00      	nop
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <lcd16x2_cursorShow>:

/**
 * @brief включити/виключити курсор
 */
void lcd16x2_cursorShow(bool state)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	71fb      	strb	r3, [r7, #7]
  if(state)
 8001e0e:	79fb      	ldrb	r3, [r7, #7]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d00c      	beq.n	8001e2e <lcd16x2_cursorShow+0x2a>
  {
    DisplayControl |= (0x03);
 8001e14:	4b0e      	ldr	r3, [pc, #56]	@ (8001e50 <lcd16x2_cursorShow+0x4c>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	f043 0303 	orr.w	r3, r3, #3
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001e50 <lcd16x2_cursorShow+0x4c>)
 8001e20:	701a      	strb	r2, [r3, #0]
    lcd16x2_writeCommand(DisplayControl);
 8001e22:	4b0b      	ldr	r3, [pc, #44]	@ (8001e50 <lcd16x2_cursorShow+0x4c>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff fee8 	bl	8001bfc <lcd16x2_writeCommand>
  else
  {
    DisplayControl &= ~(0x03);
    lcd16x2_writeCommand(DisplayControl);
  }
}
 8001e2c:	e00b      	b.n	8001e46 <lcd16x2_cursorShow+0x42>
    DisplayControl &= ~(0x03);
 8001e2e:	4b08      	ldr	r3, [pc, #32]	@ (8001e50 <lcd16x2_cursorShow+0x4c>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	f023 0303 	bic.w	r3, r3, #3
 8001e36:	b2da      	uxtb	r2, r3
 8001e38:	4b05      	ldr	r3, [pc, #20]	@ (8001e50 <lcd16x2_cursorShow+0x4c>)
 8001e3a:	701a      	strb	r2, [r3, #0]
    lcd16x2_writeCommand(DisplayControl);
 8001e3c:	4b04      	ldr	r3, [pc, #16]	@ (8001e50 <lcd16x2_cursorShow+0x4c>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff fedb 	bl	8001bfc <lcd16x2_writeCommand>
}
 8001e46:	bf00      	nop
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000001 	.word	0x20000001

08001e54 <lcd16x2_clear>:

/**
 * @brief очистити дисплей
 */
void lcd16x2_clear(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  lcd16x2_writeCommand(LCD_CLEARDISPLAY);
 8001e58:	2001      	movs	r0, #1
 8001e5a:	f7ff fecf 	bl	8001bfc <lcd16x2_writeCommand>
  LCD_MS_DELAY(3);
 8001e5e:	2003      	movs	r0, #3
 8001e60:	f001 fbde 	bl	8003620 <HAL_Delay>
}
 8001e64:	bf00      	nop
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <lcd16x2_printf>:

/**
 * @brief виводить на дисплей будь-які типи даних (наприклад: lcd16x2_printf("Value1 = %.1f", 123.45))
 */
void lcd16x2_printf(const char* str, ...)
{
 8001e68:	b40f      	push	{r0, r1, r2, r3}
 8001e6a:	b590      	push	{r4, r7, lr}
 8001e6c:	b089      	sub	sp, #36	@ 0x24
 8001e6e:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 8001e70:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001e74:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 8001e76:	f107 0308 	add.w	r3, r7, #8
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f004 fd06 	bl	8006890 <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8001e84:	2300      	movs	r3, #0
 8001e86:	77fb      	strb	r3, [r7, #31]
 8001e88:	e00a      	b.n	8001ea0 <lcd16x2_printf+0x38>
  {
    lcd16x2_writeData((uint8_t)stringArray[i]);
 8001e8a:	7ffb      	ldrb	r3, [r7, #31]
 8001e8c:	3320      	adds	r3, #32
 8001e8e:	443b      	add	r3, r7
 8001e90:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff fec1 	bl	8001c1c <lcd16x2_writeData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8001e9a:	7ffb      	ldrb	r3, [r7, #31]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	77fb      	strb	r3, [r7, #31]
 8001ea0:	7ffc      	ldrb	r4, [r7, #31]
 8001ea2:	f107 0308 	add.w	r3, r7, #8
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7fe f952 	bl	8000150 <strlen>
 8001eac:	4603      	mov	r3, r0
 8001eae:	429c      	cmp	r4, r3
 8001eb0:	d202      	bcs.n	8001eb8 <lcd16x2_printf+0x50>
 8001eb2:	7ffb      	ldrb	r3, [r7, #31]
 8001eb4:	2b0f      	cmp	r3, #15
 8001eb6:	d9e8      	bls.n	8001e8a <lcd16x2_printf+0x22>
  }
}
 8001eb8:	bf00      	nop
 8001eba:	3724      	adds	r7, #36	@ 0x24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001ec2:	b004      	add	sp, #16
 8001ec4:	4770      	bx	lr

08001ec6 <lcd16x2_custom_char>:

void lcd16x2_custom_char(uint8_t loc, unsigned char *msg)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b084      	sub	sp, #16
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	4603      	mov	r3, r0
 8001ece:	6039      	str	r1, [r7, #0]
 8001ed0:	71fb      	strb	r3, [r7, #7]
    unsigned char i;
    if (loc < 8)
 8001ed2:	79fb      	ldrb	r3, [r7, #7]
 8001ed4:	2b07      	cmp	r3, #7
 8001ed6:	d817      	bhi.n	8001f08 <lcd16x2_custom_char+0x42>
    {
      lcd16x2_writeCommand (0x40 + (loc*8));  /* Command 0x40 and onwards forces the device to point CGRAM address */
 8001ed8:	79fb      	ldrb	r3, [r7, #7]
 8001eda:	3308      	adds	r3, #8
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff fe8a 	bl	8001bfc <lcd16x2_writeCommand>
      for (i = 0; i < 8; i++)  /* Write 8 byte for generation of 1 character */
 8001ee8:	2300      	movs	r3, #0
 8001eea:	73fb      	strb	r3, [r7, #15]
 8001eec:	e009      	b.n	8001f02 <lcd16x2_custom_char+0x3c>
    	lcd16x2_writeData((uint8_t)msg[i]);
 8001eee:	7bfb      	ldrb	r3, [r7, #15]
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff fe90 	bl	8001c1c <lcd16x2_writeData>
      for (i = 0; i < 8; i++)  /* Write 8 byte for generation of 1 character */
 8001efc:	7bfb      	ldrb	r3, [r7, #15]
 8001efe:	3301      	adds	r3, #1
 8001f00:	73fb      	strb	r3, [r7, #15]
 8001f02:	7bfb      	ldrb	r3, [r7, #15]
 8001f04:	2b07      	cmp	r3, #7
 8001f06:	d9f2      	bls.n	8001eee <lcd16x2_custom_char+0x28>
    }
}
 8001f08:	bf00      	nop
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <delay_us>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay_us(uint16_t us)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	80fb      	strh	r3, [r7, #6]
    htim1.Instance->CNT = 0;
 8001f1a:	4b08      	ldr	r3, [pc, #32]	@ (8001f3c <delay_us+0x2c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	625a      	str	r2, [r3, #36]	@ 0x24
    while (htim1.Instance->CNT < us);
 8001f22:	bf00      	nop
 8001f24:	4b05      	ldr	r3, [pc, #20]	@ (8001f3c <delay_us+0x2c>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f2a:	88fb      	ldrh	r3, [r7, #6]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d3f9      	bcc.n	8001f24 <delay_us+0x14>
}
 8001f30:	bf00      	nop
 8001f32:	bf00      	nop
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr
 8001f3c:	200002fc 	.word	0x200002fc

08001f40 <set_time>:
    	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
    }
}

void set_time(void)
{
 8001f40:	b590      	push	{r4, r7, lr}
 8001f42:	b089      	sub	sp, #36	@ 0x24
 8001f44:	af02      	add	r7, sp, #8
    //RTC_TimeTypeDef rtc_time;
    unsigned char i = 0, col = 2;
 8001f46:	2300      	movs	r3, #0
 8001f48:	75fb      	strb	r3, [r7, #23]
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	75bb      	strb	r3, [r7, #22]
    const char *time_items[] = { "hh", "mm", "ss", "^^" };
 8001f4e:	4b7b      	ldr	r3, [pc, #492]	@ (800213c <set_time+0x1fc>)
 8001f50:	463c      	mov	r4, r7
 8001f52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint8_t hours = 0, minutes = 0, seconds = 0;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	757b      	strb	r3, [r7, #21]
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	753b      	strb	r3, [r7, #20]
 8001f60:	2300      	movs	r3, #0
 8001f62:	74fb      	strb	r3, [r7, #19]
 	bool lcd_output_flag = true, ok = 0;
 8001f64:	2301      	movs	r3, #1
 8001f66:	74bb      	strb	r3, [r7, #18]
 8001f68:	2300      	movs	r3, #0
 8001f6a:	747b      	strb	r3, [r7, #17]

 	hours = ds1307_get_hour();
 8001f6c:	f7ff fbeb 	bl	8001746 <ds1307_get_hour>
 8001f70:	4603      	mov	r3, r0
 8001f72:	757b      	strb	r3, [r7, #21]
 	minutes = ds1307_get_minute();
 8001f74:	f7ff fbf6 	bl	8001764 <ds1307_get_minute>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	753b      	strb	r3, [r7, #20]
 	seconds = ds1307_get_second();
 8001f7c:	f7ff fbfe 	bl	800177c <ds1307_get_second>
 8001f80:	4603      	mov	r3, r0
 8001f82:	74fb      	strb	r3, [r7, #19]

    while (!ok)
 8001f84:	e0c3      	b.n	800210e <set_time+0x1ce>
    {
    	if (lcd_output_flag)
 8001f86:	7cbb      	ldrb	r3, [r7, #18]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d021      	beq.n	8001fd0 <set_time+0x90>
    	{
    		lcd16x2_clear();
 8001f8c:	f7ff ff62 	bl	8001e54 <lcd16x2_clear>
    		lcd16x2_setCursor(0,2);
 8001f90:	2102      	movs	r1, #2
 8001f92:	2000      	movs	r0, #0
 8001f94:	f7ff ff02 	bl	8001d9c <lcd16x2_setCursor>
    		sprintf(buffer, "%02d:%02d:%02d OK", hours, minutes, seconds);
 8001f98:	7d7a      	ldrb	r2, [r7, #21]
 8001f9a:	7d39      	ldrb	r1, [r7, #20]
 8001f9c:	7cfb      	ldrb	r3, [r7, #19]
 8001f9e:	9300      	str	r3, [sp, #0]
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	4967      	ldr	r1, [pc, #412]	@ (8002140 <set_time+0x200>)
 8001fa4:	4867      	ldr	r0, [pc, #412]	@ (8002144 <set_time+0x204>)
 8001fa6:	f004 fbf9 	bl	800679c <siprintf>
    	    lcd16x2_printf(buffer);
 8001faa:	4866      	ldr	r0, [pc, #408]	@ (8002144 <set_time+0x204>)
 8001fac:	f7ff ff5c 	bl	8001e68 <lcd16x2_printf>
    	    lcd16x2_setCursor(1,col);
 8001fb0:	7dbb      	ldrb	r3, [r7, #22]
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	2001      	movs	r0, #1
 8001fb6:	f7ff fef1 	bl	8001d9c <lcd16x2_setCursor>
    	    lcd16x2_printf(time_items[i]);
 8001fba:	7dfb      	ldrb	r3, [r7, #23]
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	3318      	adds	r3, #24
 8001fc0:	443b      	add	r3, r7
 8001fc2:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff ff4e 	bl	8001e68 <lcd16x2_printf>
    	    lcd_output_flag = false;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	74bb      	strb	r3, [r7, #18]
    	}

    	if (HAL_GPIO_ReadPin(SEL_PLUS_BTN_GPIO_Port, SEL_PLUS_BTN_Pin) == GPIO_PIN_SET)
 8001fd0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001fd4:	485c      	ldr	r0, [pc, #368]	@ (8002148 <set_time+0x208>)
 8001fd6:	f001 fdaf 	bl	8003b38 <HAL_GPIO_ReadPin>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d133      	bne.n	8002048 <set_time+0x108>
    	{
    		switch (i)
 8001fe0:	7dfb      	ldrb	r3, [r7, #23]
 8001fe2:	2b03      	cmp	r3, #3
 8001fe4:	d82b      	bhi.n	800203e <set_time+0xfe>
 8001fe6:	a201      	add	r2, pc, #4	@ (adr r2, 8001fec <set_time+0xac>)
 8001fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fec:	08001ffd 	.word	0x08001ffd
 8001ff0:	08002011 	.word	0x08002011
 8001ff4:	08002025 	.word	0x08002025
 8001ff8:	08002039 	.word	0x08002039
			{
				case 0:
					if (hours == 23) hours = 0;
 8001ffc:	7d7b      	ldrb	r3, [r7, #21]
 8001ffe:	2b17      	cmp	r3, #23
 8002000:	d102      	bne.n	8002008 <set_time+0xc8>
 8002002:	2300      	movs	r3, #0
 8002004:	757b      	strb	r3, [r7, #21]
					else hours ++;
					break;
 8002006:	e01a      	b.n	800203e <set_time+0xfe>
					else hours ++;
 8002008:	7d7b      	ldrb	r3, [r7, #21]
 800200a:	3301      	adds	r3, #1
 800200c:	757b      	strb	r3, [r7, #21]
					break;
 800200e:	e016      	b.n	800203e <set_time+0xfe>
				case 1:
					if (minutes == 59) minutes = 0;
 8002010:	7d3b      	ldrb	r3, [r7, #20]
 8002012:	2b3b      	cmp	r3, #59	@ 0x3b
 8002014:	d102      	bne.n	800201c <set_time+0xdc>
 8002016:	2300      	movs	r3, #0
 8002018:	753b      	strb	r3, [r7, #20]
					else minutes ++;
				break;
 800201a:	e010      	b.n	800203e <set_time+0xfe>
					else minutes ++;
 800201c:	7d3b      	ldrb	r3, [r7, #20]
 800201e:	3301      	adds	r3, #1
 8002020:	753b      	strb	r3, [r7, #20]
				break;
 8002022:	e00c      	b.n	800203e <set_time+0xfe>
				case 2:
					if (seconds == 59) seconds = 0;
 8002024:	7cfb      	ldrb	r3, [r7, #19]
 8002026:	2b3b      	cmp	r3, #59	@ 0x3b
 8002028:	d102      	bne.n	8002030 <set_time+0xf0>
 800202a:	2300      	movs	r3, #0
 800202c:	74fb      	strb	r3, [r7, #19]
					else seconds ++;
				break;
 800202e:	e006      	b.n	800203e <set_time+0xfe>
					else seconds ++;
 8002030:	7cfb      	ldrb	r3, [r7, #19]
 8002032:	3301      	adds	r3, #1
 8002034:	74fb      	strb	r3, [r7, #19]
				break;
 8002036:	e002      	b.n	800203e <set_time+0xfe>
				case 3:
					ok = 1;
 8002038:	2301      	movs	r3, #1
 800203a:	747b      	strb	r3, [r7, #17]
					break;
 800203c:	bf00      	nop
			}
			lcd_output_flag = true;
 800203e:	2301      	movs	r3, #1
 8002040:	74bb      	strb	r3, [r7, #18]
			HAL_Delay(200);
 8002042:	20c8      	movs	r0, #200	@ 0xc8
 8002044:	f001 faec 	bl	8003620 <HAL_Delay>
        }

    	if (HAL_GPIO_ReadPin(SEL_MINUS_BTN_GPIO_Port, SEL_MINUS_BTN_Pin) == GPIO_PIN_SET)
 8002048:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800204c:	483e      	ldr	r0, [pc, #248]	@ (8002148 <set_time+0x208>)
 800204e:	f001 fd73 	bl	8003b38 <HAL_GPIO_ReadPin>
 8002052:	4603      	mov	r3, r0
 8002054:	2b01      	cmp	r3, #1
 8002056:	d133      	bne.n	80020c0 <set_time+0x180>
    	{
    		switch (i)
 8002058:	7dfb      	ldrb	r3, [r7, #23]
 800205a:	2b03      	cmp	r3, #3
 800205c:	d82b      	bhi.n	80020b6 <set_time+0x176>
 800205e:	a201      	add	r2, pc, #4	@ (adr r2, 8002064 <set_time+0x124>)
 8002060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002064:	08002075 	.word	0x08002075
 8002068:	08002089 	.word	0x08002089
 800206c:	0800209d 	.word	0x0800209d
 8002070:	080020b1 	.word	0x080020b1
    		{
	       		case 0:
	        		if (hours == 0) hours = 23;
 8002074:	7d7b      	ldrb	r3, [r7, #21]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d102      	bne.n	8002080 <set_time+0x140>
 800207a:	2317      	movs	r3, #23
 800207c:	757b      	strb	r3, [r7, #21]
                    else hours --;
                    break;
 800207e:	e01a      	b.n	80020b6 <set_time+0x176>
                    else hours --;
 8002080:	7d7b      	ldrb	r3, [r7, #21]
 8002082:	3b01      	subs	r3, #1
 8002084:	757b      	strb	r3, [r7, #21]
                    break;
 8002086:	e016      	b.n	80020b6 <set_time+0x176>
                case 1:
                  	if (minutes == 0) minutes = 59;
 8002088:	7d3b      	ldrb	r3, [r7, #20]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d102      	bne.n	8002094 <set_time+0x154>
 800208e:	233b      	movs	r3, #59	@ 0x3b
 8002090:	753b      	strb	r3, [r7, #20]
                   	else minutes --;
                    	break;
 8002092:	e010      	b.n	80020b6 <set_time+0x176>
                   	else minutes --;
 8002094:	7d3b      	ldrb	r3, [r7, #20]
 8002096:	3b01      	subs	r3, #1
 8002098:	753b      	strb	r3, [r7, #20]
                    	break;
 800209a:	e00c      	b.n	80020b6 <set_time+0x176>
                case 2:
                    if (seconds == 0) seconds = 59;
 800209c:	7cfb      	ldrb	r3, [r7, #19]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d102      	bne.n	80020a8 <set_time+0x168>
 80020a2:	233b      	movs	r3, #59	@ 0x3b
 80020a4:	74fb      	strb	r3, [r7, #19]
                    else seconds--;
                    break;
 80020a6:	e006      	b.n	80020b6 <set_time+0x176>
                    else seconds--;
 80020a8:	7cfb      	ldrb	r3, [r7, #19]
 80020aa:	3b01      	subs	r3, #1
 80020ac:	74fb      	strb	r3, [r7, #19]
                    break;
 80020ae:	e002      	b.n	80020b6 <set_time+0x176>
                case 3:
                    ok = 1;
 80020b0:	2301      	movs	r3, #1
 80020b2:	747b      	strb	r3, [r7, #17]
                    break;
 80020b4:	bf00      	nop
            }
	        lcd_output_flag = true;
 80020b6:	2301      	movs	r3, #1
 80020b8:	74bb      	strb	r3, [r7, #18]
	        HAL_Delay(200);
 80020ba:	20c8      	movs	r0, #200	@ 0xc8
 80020bc:	f001 fab0 	bl	8003620 <HAL_Delay>
        }

    	if (HAL_GPIO_ReadPin(MENU_BTN_GPIO_Port, MENU_BTN_Pin) == GPIO_PIN_SET)
 80020c0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80020c4:	4820      	ldr	r0, [pc, #128]	@ (8002148 <set_time+0x208>)
 80020c6:	f001 fd37 	bl	8003b38 <HAL_GPIO_ReadPin>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d112      	bne.n	80020f6 <set_time+0x1b6>
    	{
    		if (i == 3)
 80020d0:	7dfb      	ldrb	r3, [r7, #23]
 80020d2:	2b03      	cmp	r3, #3
 80020d4:	d104      	bne.n	80020e0 <set_time+0x1a0>
    		{
    		  i = 0; col = 2;
 80020d6:	2300      	movs	r3, #0
 80020d8:	75fb      	strb	r3, [r7, #23]
 80020da:	2302      	movs	r3, #2
 80020dc:	75bb      	strb	r3, [r7, #22]
 80020de:	e005      	b.n	80020ec <set_time+0x1ac>
    		}
    		else
    		{
    			i++; col += 3;
 80020e0:	7dfb      	ldrb	r3, [r7, #23]
 80020e2:	3301      	adds	r3, #1
 80020e4:	75fb      	strb	r3, [r7, #23]
 80020e6:	7dbb      	ldrb	r3, [r7, #22]
 80020e8:	3303      	adds	r3, #3
 80020ea:	75bb      	strb	r3, [r7, #22]
    		}
    		lcd_output_flag = true;
 80020ec:	2301      	movs	r3, #1
 80020ee:	74bb      	strb	r3, [r7, #18]
    		HAL_Delay(200);
 80020f0:	20c8      	movs	r0, #200	@ 0xc8
 80020f2:	f001 fa95 	bl	8003620 <HAL_Delay>
         }

         if (HAL_GPIO_ReadPin(EXIT_BTN_GPIO_Port, EXIT_BTN_Pin) == GPIO_PIN_SET)
 80020f6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80020fa:	4813      	ldr	r0, [pc, #76]	@ (8002148 <set_time+0x208>)
 80020fc:	f001 fd1c 	bl	8003b38 <HAL_GPIO_ReadPin>
 8002100:	4603      	mov	r3, r0
 8002102:	2b01      	cmp	r3, #1
 8002104:	d103      	bne.n	800210e <set_time+0x1ce>
         {
           HAL_Delay(200);
 8002106:	20c8      	movs	r0, #200	@ 0xc8
 8002108:	f001 fa8a 	bl	8003620 <HAL_Delay>
 800210c:	e012      	b.n	8002134 <set_time+0x1f4>
    while (!ok)
 800210e:	7c7b      	ldrb	r3, [r7, #17]
 8002110:	f083 0301 	eor.w	r3, r3, #1
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	f47f af35 	bne.w	8001f86 <set_time+0x46>
           return;
         }
    }

    ds1307_set_hour(hours);
 800211c:	7d7b      	ldrb	r3, [r7, #21]
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff fbac 	bl	800187c <ds1307_set_hour>
    ds1307_set_minute(minutes);
 8002124:	7d3b      	ldrb	r3, [r7, #20]
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff fbbd 	bl	80018a6 <ds1307_set_minute>
    ds1307_set_second(seconds);
 800212c:	7cfb      	ldrb	r3, [r7, #19]
 800212e:	4618      	mov	r0, r3
 8002130:	f7ff fbcb 	bl	80018ca <ds1307_set_second>
}
 8002134:	371c      	adds	r7, #28
 8002136:	46bd      	mov	sp, r7
 8002138:	bd90      	pop	{r4, r7, pc}
 800213a:	bf00      	nop
 800213c:	08008f9c 	.word	0x08008f9c
 8002140:	08008f78 	.word	0x08008f78
 8002144:	2000038c 	.word	0x2000038c
 8002148:	40010c00 	.word	0x40010c00

0800214c <set_date>:

void set_date(void)
{
 800214c:	b5b0      	push	{r4, r5, r7, lr}
 800214e:	b08a      	sub	sp, #40	@ 0x28
 8002150:	af02      	add	r7, sp, #8
	//RTC_DateTypeDef rtc_date;
	const char *date_items[] = { "dd", "mm", "yy" , "wd", "^^"};
 8002152:	4b99      	ldr	r3, [pc, #612]	@ (80023b8 <set_date+0x26c>)
 8002154:	1d3c      	adds	r4, r7, #4
 8002156:	461d      	mov	r5, r3
 8002158:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800215a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800215c:	682b      	ldr	r3, [r5, #0]
 800215e:	6023      	str	r3, [r4, #0]
	uint8_t day = 0, month = 0, year = 0, dow = 0;
 8002160:	2300      	movs	r3, #0
 8002162:	77fb      	strb	r3, [r7, #31]
 8002164:	2300      	movs	r3, #0
 8002166:	77bb      	strb	r3, [r7, #30]
 8002168:	2300      	movs	r3, #0
 800216a:	777b      	strb	r3, [r7, #29]
 800216c:	2300      	movs	r3, #0
 800216e:	773b      	strb	r3, [r7, #28]
	uint8_t i = 0, col = 0;
 8002170:	2300      	movs	r3, #0
 8002172:	76fb      	strb	r3, [r7, #27]
 8002174:	2300      	movs	r3, #0
 8002176:	76bb      	strb	r3, [r7, #26]
	bool lcd_output_flag = true, ok = 0;
 8002178:	2301      	movs	r3, #1
 800217a:	767b      	strb	r3, [r7, #25]
 800217c:	2300      	movs	r3, #0
 800217e:	763b      	strb	r3, [r7, #24]

	day = ds1307_get_date();
 8002180:	f7ff faac 	bl	80016dc <ds1307_get_date>
 8002184:	4603      	mov	r3, r0
 8002186:	77fb      	strb	r3, [r7, #31]
	month = ds1307_get_month();
 8002188:	f7ff fab4 	bl	80016f4 <ds1307_get_month>
 800218c:	4603      	mov	r3, r0
 800218e:	77bb      	strb	r3, [r7, #30]
	year = ds1307_get_year();
 8002190:	f7ff fabc 	bl	800170c <ds1307_get_year>
 8002194:	4603      	mov	r3, r0
 8002196:	777b      	strb	r3, [r7, #29]
	dow = ds1307_get_day_of_week()-1;
 8002198:	f7ff fa94 	bl	80016c4 <ds1307_get_day_of_week>
 800219c:	4603      	mov	r3, r0
 800219e:	3b01      	subs	r3, #1
 80021a0:	773b      	strb	r3, [r7, #28]

	while (!ok)
 80021a2:	e0e9      	b.n	8002378 <set_date+0x22c>
	{
		if (lcd_output_flag)
 80021a4:	7e7b      	ldrb	r3, [r7, #25]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d027      	beq.n	80021fa <set_date+0xae>
		{
			lcd16x2_clear();
 80021aa:	f7ff fe53 	bl	8001e54 <lcd16x2_clear>
			sprintf(buffer, "%02d/%02d/%02d %s OK", day, month, year, days_of_week[dow]);
 80021ae:	7ff9      	ldrb	r1, [r7, #31]
 80021b0:	7fb8      	ldrb	r0, [r7, #30]
 80021b2:	7f7b      	ldrb	r3, [r7, #29]
 80021b4:	7f3a      	ldrb	r2, [r7, #28]
 80021b6:	4c81      	ldr	r4, [pc, #516]	@ (80023bc <set_date+0x270>)
 80021b8:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80021bc:	9201      	str	r2, [sp, #4]
 80021be:	9300      	str	r3, [sp, #0]
 80021c0:	4603      	mov	r3, r0
 80021c2:	460a      	mov	r2, r1
 80021c4:	497e      	ldr	r1, [pc, #504]	@ (80023c0 <set_date+0x274>)
 80021c6:	487f      	ldr	r0, [pc, #508]	@ (80023c4 <set_date+0x278>)
 80021c8:	f004 fae8 	bl	800679c <siprintf>
			lcd16x2_setCursor(0,0);
 80021cc:	2100      	movs	r1, #0
 80021ce:	2000      	movs	r0, #0
 80021d0:	f7ff fde4 	bl	8001d9c <lcd16x2_setCursor>
			lcd16x2_printf(buffer);
 80021d4:	487b      	ldr	r0, [pc, #492]	@ (80023c4 <set_date+0x278>)
 80021d6:	f7ff fe47 	bl	8001e68 <lcd16x2_printf>
			lcd16x2_setCursor(1,col);
 80021da:	7ebb      	ldrb	r3, [r7, #26]
 80021dc:	4619      	mov	r1, r3
 80021de:	2001      	movs	r0, #1
 80021e0:	f7ff fddc 	bl	8001d9c <lcd16x2_setCursor>
			lcd16x2_printf(date_items[i]);
 80021e4:	7efb      	ldrb	r3, [r7, #27]
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	3320      	adds	r3, #32
 80021ea:	443b      	add	r3, r7
 80021ec:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff fe39 	bl	8001e68 <lcd16x2_printf>
			lcd_output_flag = false;
 80021f6:	2300      	movs	r3, #0
 80021f8:	767b      	strb	r3, [r7, #25]
		}

        if (HAL_GPIO_ReadPin(SEL_PLUS_BTN_GPIO_Port, SEL_PLUS_BTN_Pin) == GPIO_PIN_SET)
 80021fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80021fe:	4872      	ldr	r0, [pc, #456]	@ (80023c8 <set_date+0x27c>)
 8002200:	f001 fc9a 	bl	8003b38 <HAL_GPIO_ReadPin>
 8002204:	4603      	mov	r3, r0
 8002206:	2b01      	cmp	r3, #1
 8002208:	d140      	bne.n	800228c <set_date+0x140>
        {
           switch (i)
 800220a:	7efb      	ldrb	r3, [r7, #27]
 800220c:	2b04      	cmp	r3, #4
 800220e:	d838      	bhi.n	8002282 <set_date+0x136>
 8002210:	a201      	add	r2, pc, #4	@ (adr r2, 8002218 <set_date+0xcc>)
 8002212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002216:	bf00      	nop
 8002218:	0800222d 	.word	0x0800222d
 800221c:	08002241 	.word	0x08002241
 8002220:	08002255 	.word	0x08002255
 8002224:	08002269 	.word	0x08002269
 8002228:	0800227d 	.word	0x0800227d
           {
              case 0:
            	  if (day == 31)
 800222c:	7ffb      	ldrb	r3, [r7, #31]
 800222e:	2b1f      	cmp	r3, #31
 8002230:	d102      	bne.n	8002238 <set_date+0xec>
            		day = 1;
 8002232:	2301      	movs	r3, #1
 8002234:	77fb      	strb	r3, [r7, #31]
                  else day ++;
                  break;
 8002236:	e024      	b.n	8002282 <set_date+0x136>
                  else day ++;
 8002238:	7ffb      	ldrb	r3, [r7, #31]
 800223a:	3301      	adds	r3, #1
 800223c:	77fb      	strb	r3, [r7, #31]
                  break;
 800223e:	e020      	b.n	8002282 <set_date+0x136>
              case 1:
                  if (month == 12) month = 1;
 8002240:	7fbb      	ldrb	r3, [r7, #30]
 8002242:	2b0c      	cmp	r3, #12
 8002244:	d102      	bne.n	800224c <set_date+0x100>
 8002246:	2301      	movs	r3, #1
 8002248:	77bb      	strb	r3, [r7, #30]
                  else month ++;
                  break;
 800224a:	e01a      	b.n	8002282 <set_date+0x136>
                  else month ++;
 800224c:	7fbb      	ldrb	r3, [r7, #30]
 800224e:	3301      	adds	r3, #1
 8002250:	77bb      	strb	r3, [r7, #30]
                  break;
 8002252:	e016      	b.n	8002282 <set_date+0x136>
              case 2:
                  if (year == 99) year = 0;
 8002254:	7f7b      	ldrb	r3, [r7, #29]
 8002256:	2b63      	cmp	r3, #99	@ 0x63
 8002258:	d102      	bne.n	8002260 <set_date+0x114>
 800225a:	2300      	movs	r3, #0
 800225c:	777b      	strb	r3, [r7, #29]
                  else year ++;
                  break;
 800225e:	e010      	b.n	8002282 <set_date+0x136>
                  else year ++;
 8002260:	7f7b      	ldrb	r3, [r7, #29]
 8002262:	3301      	adds	r3, #1
 8002264:	777b      	strb	r3, [r7, #29]
                  break;
 8002266:	e00c      	b.n	8002282 <set_date+0x136>
              case 3:
            	  if (dow == 6) dow = 0;
 8002268:	7f3b      	ldrb	r3, [r7, #28]
 800226a:	2b06      	cmp	r3, #6
 800226c:	d102      	bne.n	8002274 <set_date+0x128>
 800226e:	2300      	movs	r3, #0
 8002270:	773b      	strb	r3, [r7, #28]
            	  else dow ++;
            	  break;
 8002272:	e006      	b.n	8002282 <set_date+0x136>
            	  else dow ++;
 8002274:	7f3b      	ldrb	r3, [r7, #28]
 8002276:	3301      	adds	r3, #1
 8002278:	773b      	strb	r3, [r7, #28]
            	  break;
 800227a:	e002      	b.n	8002282 <set_date+0x136>
              case 4:
            	  ok = 1; break;
 800227c:	2301      	movs	r3, #1
 800227e:	763b      	strb	r3, [r7, #24]
 8002280:	bf00      	nop
           }
           lcd_output_flag = true;
 8002282:	2301      	movs	r3, #1
 8002284:	767b      	strb	r3, [r7, #25]
           HAL_Delay(200);
 8002286:	20c8      	movs	r0, #200	@ 0xc8
 8002288:	f001 f9ca 	bl	8003620 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(SEL_MINUS_BTN_GPIO_Port, SEL_MINUS_BTN_Pin) == GPIO_PIN_SET)
 800228c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002290:	484d      	ldr	r0, [pc, #308]	@ (80023c8 <set_date+0x27c>)
 8002292:	f001 fc51 	bl	8003b38 <HAL_GPIO_ReadPin>
 8002296:	4603      	mov	r3, r0
 8002298:	2b01      	cmp	r3, #1
 800229a:	d13f      	bne.n	800231c <set_date+0x1d0>
        {
        	switch (i)
 800229c:	7efb      	ldrb	r3, [r7, #27]
 800229e:	2b04      	cmp	r3, #4
 80022a0:	d837      	bhi.n	8002312 <set_date+0x1c6>
 80022a2:	a201      	add	r2, pc, #4	@ (adr r2, 80022a8 <set_date+0x15c>)
 80022a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a8:	080022bd 	.word	0x080022bd
 80022ac:	080022d1 	.word	0x080022d1
 80022b0:	080022e5 	.word	0x080022e5
 80022b4:	080022f9 	.word	0x080022f9
 80022b8:	0800230d 	.word	0x0800230d
        	{
        		case 0:
                   	if (day == 1) day = 31;
 80022bc:	7ffb      	ldrb	r3, [r7, #31]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d102      	bne.n	80022c8 <set_date+0x17c>
 80022c2:	231f      	movs	r3, #31
 80022c4:	77fb      	strb	r3, [r7, #31]
                    else day --;
                    break;
 80022c6:	e024      	b.n	8002312 <set_date+0x1c6>
                    else day --;
 80022c8:	7ffb      	ldrb	r3, [r7, #31]
 80022ca:	3b01      	subs	r3, #1
 80022cc:	77fb      	strb	r3, [r7, #31]
                    break;
 80022ce:	e020      	b.n	8002312 <set_date+0x1c6>
                case 1:
                    if (month == 1) month = 12;
 80022d0:	7fbb      	ldrb	r3, [r7, #30]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d102      	bne.n	80022dc <set_date+0x190>
 80022d6:	230c      	movs	r3, #12
 80022d8:	77bb      	strb	r3, [r7, #30]
                    else month --;
                    break;
 80022da:	e01a      	b.n	8002312 <set_date+0x1c6>
                    else month --;
 80022dc:	7fbb      	ldrb	r3, [r7, #30]
 80022de:	3b01      	subs	r3, #1
 80022e0:	77bb      	strb	r3, [r7, #30]
                    break;
 80022e2:	e016      	b.n	8002312 <set_date+0x1c6>
                case 2:
                	if (year == 0) year = 99;
 80022e4:	7f7b      	ldrb	r3, [r7, #29]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d102      	bne.n	80022f0 <set_date+0x1a4>
 80022ea:	2363      	movs	r3, #99	@ 0x63
 80022ec:	777b      	strb	r3, [r7, #29]
                	else year--;
                   	break;
 80022ee:	e010      	b.n	8002312 <set_date+0x1c6>
                	else year--;
 80022f0:	7f7b      	ldrb	r3, [r7, #29]
 80022f2:	3b01      	subs	r3, #1
 80022f4:	777b      	strb	r3, [r7, #29]
                   	break;
 80022f6:	e00c      	b.n	8002312 <set_date+0x1c6>
                case 3:
                	if (dow == 0) dow = 6;
 80022f8:	7f3b      	ldrb	r3, [r7, #28]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d102      	bne.n	8002304 <set_date+0x1b8>
 80022fe:	2306      	movs	r3, #6
 8002300:	773b      	strb	r3, [r7, #28]
                	else dow --;
                	break;
 8002302:	e006      	b.n	8002312 <set_date+0x1c6>
                	else dow --;
 8002304:	7f3b      	ldrb	r3, [r7, #28]
 8002306:	3b01      	subs	r3, #1
 8002308:	773b      	strb	r3, [r7, #28]
                	break;
 800230a:	e002      	b.n	8002312 <set_date+0x1c6>
                case 4: ok = 1; break;
 800230c:	2301      	movs	r3, #1
 800230e:	763b      	strb	r3, [r7, #24]
 8002310:	bf00      	nop
        	}
        	lcd_output_flag = true;
 8002312:	2301      	movs	r3, #1
 8002314:	767b      	strb	r3, [r7, #25]
        	HAL_Delay(200);
 8002316:	20c8      	movs	r0, #200	@ 0xc8
 8002318:	f001 f982 	bl	8003620 <HAL_Delay>
         }

        if (HAL_GPIO_ReadPin(MENU_BTN_GPIO_Port, MENU_BTN_Pin) == GPIO_PIN_SET)
 800231c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002320:	4829      	ldr	r0, [pc, #164]	@ (80023c8 <set_date+0x27c>)
 8002322:	f001 fc09 	bl	8003b38 <HAL_GPIO_ReadPin>
 8002326:	4603      	mov	r3, r0
 8002328:	2b01      	cmp	r3, #1
 800232a:	d119      	bne.n	8002360 <set_date+0x214>
        {
        	if (i == 4)
 800232c:	7efb      	ldrb	r3, [r7, #27]
 800232e:	2b04      	cmp	r3, #4
 8002330:	d104      	bne.n	800233c <set_date+0x1f0>
        	{
        		i = 0; col = 0;
 8002332:	2300      	movs	r3, #0
 8002334:	76fb      	strb	r3, [r7, #27]
 8002336:	2300      	movs	r3, #0
 8002338:	76bb      	strb	r3, [r7, #26]
 800233a:	e00c      	b.n	8002356 <set_date+0x20a>
        	}
        	else
        	{
        		if (i == 3) col += 4;
 800233c:	7efb      	ldrb	r3, [r7, #27]
 800233e:	2b03      	cmp	r3, #3
 8002340:	d103      	bne.n	800234a <set_date+0x1fe>
 8002342:	7ebb      	ldrb	r3, [r7, #26]
 8002344:	3304      	adds	r3, #4
 8002346:	76bb      	strb	r3, [r7, #26]
 8002348:	e002      	b.n	8002350 <set_date+0x204>
        	    else col += 3;
 800234a:	7ebb      	ldrb	r3, [r7, #26]
 800234c:	3303      	adds	r3, #3
 800234e:	76bb      	strb	r3, [r7, #26]
        		i++;
 8002350:	7efb      	ldrb	r3, [r7, #27]
 8002352:	3301      	adds	r3, #1
 8002354:	76fb      	strb	r3, [r7, #27]
        	}
        	lcd_output_flag = true;
 8002356:	2301      	movs	r3, #1
 8002358:	767b      	strb	r3, [r7, #25]
        	HAL_Delay(200);
 800235a:	20c8      	movs	r0, #200	@ 0xc8
 800235c:	f001 f960 	bl	8003620 <HAL_Delay>
     }

     if (HAL_GPIO_ReadPin(EXIT_BTN_GPIO_Port, EXIT_BTN_Pin) == GPIO_PIN_SET)
 8002360:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002364:	4818      	ldr	r0, [pc, #96]	@ (80023c8 <set_date+0x27c>)
 8002366:	f001 fbe7 	bl	8003b38 <HAL_GPIO_ReadPin>
 800236a:	4603      	mov	r3, r0
 800236c:	2b01      	cmp	r3, #1
 800236e:	d103      	bne.n	8002378 <set_date+0x22c>
     {
    	 HAL_Delay(200);
 8002370:	20c8      	movs	r0, #200	@ 0xc8
 8002372:	f001 f955 	bl	8003620 <HAL_Delay>
 8002376:	e01c      	b.n	80023b2 <set_date+0x266>
	while (!ok)
 8002378:	7e3b      	ldrb	r3, [r7, #24]
 800237a:	f083 0301 	eor.w	r3, r3, #1
 800237e:	b2db      	uxtb	r3, r3
 8002380:	2b00      	cmp	r3, #0
 8002382:	f47f af0f 	bne.w	80021a4 <set_date+0x58>
    	 return;
     }

	}
	ds1307_set_date(day);
 8002386:	7ffb      	ldrb	r3, [r7, #31]
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff fa29 	bl	80017e0 <ds1307_set_date>
	ds1307_set_month(month);
 800238e:	7fbb      	ldrb	r3, [r7, #30]
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff fa37 	bl	8001804 <ds1307_set_month>
	ds1307_set_year(2000+year);
 8002396:	7f7b      	ldrb	r3, [r7, #29]
 8002398:	b29b      	uxth	r3, r3
 800239a:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800239e:	b29b      	uxth	r3, r3
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff fa41 	bl	8001828 <ds1307_set_year>
	ds1307_set_day_of_week(dow+1);
 80023a6:	7f3b      	ldrb	r3, [r7, #28]
 80023a8:	3301      	adds	r3, #1
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff fa05 	bl	80017bc <ds1307_set_day_of_week>
}
 80023b2:	3720      	adds	r7, #32
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bdb0      	pop	{r4, r5, r7, pc}
 80023b8:	08008fd0 	.word	0x08008fd0
 80023bc:	2000002c 	.word	0x2000002c
 80023c0:	08008fac 	.word	0x08008fac
 80023c4:	2000038c 	.word	0x2000038c
 80023c8:	40010c00 	.word	0x40010c00

080023cc <set_pressure_unit>:

void set_pressure_unit()
{
 80023cc:	b590      	push	{r4, r7, lr}
 80023ce:	b087      	sub	sp, #28
 80023d0:	af00      	add	r7, sp, #0

  const char pressure_units_menu_title[] = "PRESSURE UNITS";
 80023d2:	4b42      	ldr	r3, [pc, #264]	@ (80024dc <set_pressure_unit+0x110>)
 80023d4:	1d3c      	adds	r4, r7, #4
 80023d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023d8:	c407      	stmia	r4!, {r0, r1, r2}
 80023da:	8023      	strh	r3, [r4, #0]
 80023dc:	3402      	adds	r4, #2
 80023de:	0c1b      	lsrs	r3, r3, #16
 80023e0:	7023      	strb	r3, [r4, #0]
  uint8_t col[] = {7, 6, 6, 6}; //{"mb", "mmHg", "inHg", "hPa"};
 80023e2:	4b3f      	ldr	r3, [pc, #252]	@ (80024e0 <set_pressure_unit+0x114>)
 80023e4:	603b      	str	r3, [r7, #0]
  uint8_t i = 0;
 80023e6:	2300      	movs	r3, #0
 80023e8:	75fb      	strb	r3, [r7, #23]
  bool lcd_output_flag = true;
 80023ea:	2301      	movs	r3, #1
 80023ec:	75bb      	strb	r3, [r7, #22]

  while(1)
  {
    if (lcd_output_flag)
 80023ee:	7dbb      	ldrb	r3, [r7, #22]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d029      	beq.n	8002448 <set_pressure_unit+0x7c>
    {
    	lcd16x2_clear();
 80023f4:	f7ff fd2e 	bl	8001e54 <lcd16x2_clear>
    	lcd16x2_setCursor(0,1);
 80023f8:	2101      	movs	r1, #1
 80023fa:	2000      	movs	r0, #0
 80023fc:	f7ff fcce 	bl	8001d9c <lcd16x2_setCursor>
    	lcd16x2_printf(pressure_units_menu_title);
 8002400:	1d3b      	adds	r3, r7, #4
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff fd30 	bl	8001e68 <lcd16x2_printf>
    	lcd16x2_setCursor(1,0);
 8002408:	2100      	movs	r1, #0
 800240a:	2001      	movs	r0, #1
 800240c:	f7ff fcc6 	bl	8001d9c <lcd16x2_setCursor>
    	lcd16x2_printf(">>");
 8002410:	4834      	ldr	r0, [pc, #208]	@ (80024e4 <set_pressure_unit+0x118>)
 8002412:	f7ff fd29 	bl	8001e68 <lcd16x2_printf>
    	lcd16x2_setCursor(1,14);
 8002416:	210e      	movs	r1, #14
 8002418:	2001      	movs	r0, #1
 800241a:	f7ff fcbf 	bl	8001d9c <lcd16x2_setCursor>
    	lcd16x2_printf("<<");
 800241e:	4832      	ldr	r0, [pc, #200]	@ (80024e8 <set_pressure_unit+0x11c>)
 8002420:	f7ff fd22 	bl	8001e68 <lcd16x2_printf>
    	lcd16x2_setCursor(1,col[i]);
 8002424:	7dfb      	ldrb	r3, [r7, #23]
 8002426:	3318      	adds	r3, #24
 8002428:	443b      	add	r3, r7
 800242a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800242e:	4619      	mov	r1, r3
 8002430:	2001      	movs	r0, #1
 8002432:	f7ff fcb3 	bl	8001d9c <lcd16x2_setCursor>
        lcd16x2_printf(pres_units[i]);
 8002436:	7dfb      	ldrb	r3, [r7, #23]
 8002438:	4a2c      	ldr	r2, [pc, #176]	@ (80024ec <set_pressure_unit+0x120>)
 800243a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff fd12 	bl	8001e68 <lcd16x2_printf>
        lcd_output_flag = false;
 8002444:	2300      	movs	r3, #0
 8002446:	75bb      	strb	r3, [r7, #22]
    }
    if (HAL_GPIO_ReadPin(SEL_PLUS_BTN_GPIO_Port, SEL_PLUS_BTN_Pin) == GPIO_PIN_SET)
 8002448:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800244c:	4828      	ldr	r0, [pc, #160]	@ (80024f0 <set_pressure_unit+0x124>)
 800244e:	f001 fb73 	bl	8003b38 <HAL_GPIO_ReadPin>
 8002452:	4603      	mov	r3, r0
 8002454:	2b01      	cmp	r3, #1
 8002456:	d10d      	bne.n	8002474 <set_pressure_unit+0xa8>
    {
      if (i == 3) i = 0;
 8002458:	7dfb      	ldrb	r3, [r7, #23]
 800245a:	2b03      	cmp	r3, #3
 800245c:	d102      	bne.n	8002464 <set_pressure_unit+0x98>
 800245e:	2300      	movs	r3, #0
 8002460:	75fb      	strb	r3, [r7, #23]
 8002462:	e002      	b.n	800246a <set_pressure_unit+0x9e>
      else i++;
 8002464:	7dfb      	ldrb	r3, [r7, #23]
 8002466:	3301      	adds	r3, #1
 8002468:	75fb      	strb	r3, [r7, #23]
      lcd_output_flag = true;
 800246a:	2301      	movs	r3, #1
 800246c:	75bb      	strb	r3, [r7, #22]
      HAL_Delay(200);
 800246e:	20c8      	movs	r0, #200	@ 0xc8
 8002470:	f001 f8d6 	bl	8003620 <HAL_Delay>
    }

    if (HAL_GPIO_ReadPin(SEL_MINUS_BTN_GPIO_Port, SEL_MINUS_BTN_Pin) == GPIO_PIN_SET)
 8002474:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002478:	481d      	ldr	r0, [pc, #116]	@ (80024f0 <set_pressure_unit+0x124>)
 800247a:	f001 fb5d 	bl	8003b38 <HAL_GPIO_ReadPin>
 800247e:	4603      	mov	r3, r0
 8002480:	2b01      	cmp	r3, #1
 8002482:	d10d      	bne.n	80024a0 <set_pressure_unit+0xd4>
    {
      if (i == 0) i = 3;
 8002484:	7dfb      	ldrb	r3, [r7, #23]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d102      	bne.n	8002490 <set_pressure_unit+0xc4>
 800248a:	2303      	movs	r3, #3
 800248c:	75fb      	strb	r3, [r7, #23]
 800248e:	e002      	b.n	8002496 <set_pressure_unit+0xca>
      else i--;
 8002490:	7dfb      	ldrb	r3, [r7, #23]
 8002492:	3b01      	subs	r3, #1
 8002494:	75fb      	strb	r3, [r7, #23]
      lcd_output_flag = true;
 8002496:	2301      	movs	r3, #1
 8002498:	75bb      	strb	r3, [r7, #22]
      HAL_Delay(200);
 800249a:	20c8      	movs	r0, #200	@ 0xc8
 800249c:	f001 f8c0 	bl	8003620 <HAL_Delay>
    }

    if (HAL_GPIO_ReadPin(MENU_BTN_GPIO_Port, MENU_BTN_Pin) == GPIO_PIN_SET)
 80024a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80024a4:	4812      	ldr	r0, [pc, #72]	@ (80024f0 <set_pressure_unit+0x124>)
 80024a6:	f001 fb47 	bl	8003b38 <HAL_GPIO_ReadPin>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d107      	bne.n	80024c0 <set_pressure_unit+0xf4>
    {
      pInd = i;
 80024b0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80024b4:	4b0f      	ldr	r3, [pc, #60]	@ (80024f4 <set_pressure_unit+0x128>)
 80024b6:	701a      	strb	r2, [r3, #0]
      HAL_Delay(200);
 80024b8:	20c8      	movs	r0, #200	@ 0xc8
 80024ba:	f001 f8b1 	bl	8003620 <HAL_Delay>
      return;
 80024be:	e00a      	b.n	80024d6 <set_pressure_unit+0x10a>
    }
    if (HAL_GPIO_ReadPin(EXIT_BTN_GPIO_Port, EXIT_BTN_Pin) == GPIO_PIN_SET)
 80024c0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80024c4:	480a      	ldr	r0, [pc, #40]	@ (80024f0 <set_pressure_unit+0x124>)
 80024c6:	f001 fb37 	bl	8003b38 <HAL_GPIO_ReadPin>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d18e      	bne.n	80023ee <set_pressure_unit+0x22>
    {
      HAL_Delay(200);
 80024d0:	20c8      	movs	r0, #200	@ 0xc8
 80024d2:	f001 f8a5 	bl	8003620 <HAL_Delay>
      return;
    }
  }
}
 80024d6:	371c      	adds	r7, #28
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd90      	pop	{r4, r7, pc}
 80024dc:	08008fec 	.word	0x08008fec
 80024e0:	06060607 	.word	0x06060607
 80024e4:	08008fe4 	.word	0x08008fe4
 80024e8:	08008fe8 	.word	0x08008fe8
 80024ec:	2000001c 	.word	0x2000001c
 80024f0:	40010c00 	.word	0x40010c00
 80024f4:	20000060 	.word	0x20000060

080024f8 <set_temperature_unit>:

void set_temperature_unit()
{
 80024f8:	b5b0      	push	{r4, r5, r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0

  const char temperature_units_menu_title[] = "TEMPERATURE UNIT";
 80024fe:	4b3e      	ldr	r3, [pc, #248]	@ (80025f8 <set_temperature_unit+0x100>)
 8002500:	1d3c      	adds	r4, r7, #4
 8002502:	461d      	mov	r5, r3
 8002504:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002506:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002508:	682b      	ldr	r3, [r5, #0]
 800250a:	7023      	strb	r3, [r4, #0]
  uint8_t i = 0;
 800250c:	2300      	movs	r3, #0
 800250e:	75fb      	strb	r3, [r7, #23]
  bool lcd_output_flag = true;
 8002510:	2301      	movs	r3, #1
 8002512:	75bb      	strb	r3, [r7, #22]

  while(1)
  {
    if (lcd_output_flag)
 8002514:	7dbb      	ldrb	r3, [r7, #22]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d024      	beq.n	8002564 <set_temperature_unit+0x6c>
    {
      lcd16x2_clear();
 800251a:	f7ff fc9b 	bl	8001e54 <lcd16x2_clear>
      lcd16x2_setCursor(0,0);
 800251e:	2100      	movs	r1, #0
 8002520:	2000      	movs	r0, #0
 8002522:	f7ff fc3b 	bl	8001d9c <lcd16x2_setCursor>
      lcd16x2_printf(temperature_units_menu_title);
 8002526:	1d3b      	adds	r3, r7, #4
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff fc9d 	bl	8001e68 <lcd16x2_printf>
      lcd16x2_setCursor(1,0);
 800252e:	2100      	movs	r1, #0
 8002530:	2001      	movs	r0, #1
 8002532:	f7ff fc33 	bl	8001d9c <lcd16x2_setCursor>
      lcd16x2_printf(">>");
 8002536:	4831      	ldr	r0, [pc, #196]	@ (80025fc <set_temperature_unit+0x104>)
 8002538:	f7ff fc96 	bl	8001e68 <lcd16x2_printf>
      lcd16x2_setCursor(1,14);
 800253c:	210e      	movs	r1, #14
 800253e:	2001      	movs	r0, #1
 8002540:	f7ff fc2c 	bl	8001d9c <lcd16x2_setCursor>
      lcd16x2_printf("<<");
 8002544:	482e      	ldr	r0, [pc, #184]	@ (8002600 <set_temperature_unit+0x108>)
 8002546:	f7ff fc8f 	bl	8001e68 <lcd16x2_printf>
      lcd16x2_setCursor(1,7);
 800254a:	2107      	movs	r1, #7
 800254c:	2001      	movs	r0, #1
 800254e:	f7ff fc25 	bl	8001d9c <lcd16x2_setCursor>
      lcd16x2_printf(temp_units_2[i]);
 8002552:	7dfb      	ldrb	r3, [r7, #23]
 8002554:	4a2b      	ldr	r2, [pc, #172]	@ (8002604 <set_temperature_unit+0x10c>)
 8002556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff fc84 	bl	8001e68 <lcd16x2_printf>
      lcd_output_flag = false;
 8002560:	2300      	movs	r3, #0
 8002562:	75bb      	strb	r3, [r7, #22]
    }
    if (HAL_GPIO_ReadPin(SEL_PLUS_BTN_GPIO_Port, SEL_PLUS_BTN_Pin) == GPIO_PIN_SET)
 8002564:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002568:	4827      	ldr	r0, [pc, #156]	@ (8002608 <set_temperature_unit+0x110>)
 800256a:	f001 fae5 	bl	8003b38 <HAL_GPIO_ReadPin>
 800256e:	4603      	mov	r3, r0
 8002570:	2b01      	cmp	r3, #1
 8002572:	d10d      	bne.n	8002590 <set_temperature_unit+0x98>
    {
      if (i == 2) i = 0;
 8002574:	7dfb      	ldrb	r3, [r7, #23]
 8002576:	2b02      	cmp	r3, #2
 8002578:	d102      	bne.n	8002580 <set_temperature_unit+0x88>
 800257a:	2300      	movs	r3, #0
 800257c:	75fb      	strb	r3, [r7, #23]
 800257e:	e002      	b.n	8002586 <set_temperature_unit+0x8e>
      else i++;
 8002580:	7dfb      	ldrb	r3, [r7, #23]
 8002582:	3301      	adds	r3, #1
 8002584:	75fb      	strb	r3, [r7, #23]
      lcd_output_flag = true;
 8002586:	2301      	movs	r3, #1
 8002588:	75bb      	strb	r3, [r7, #22]
      HAL_Delay(200);
 800258a:	20c8      	movs	r0, #200	@ 0xc8
 800258c:	f001 f848 	bl	8003620 <HAL_Delay>
    }

    if (HAL_GPIO_ReadPin(SEL_MINUS_BTN_GPIO_Port, SEL_MINUS_BTN_Pin) == GPIO_PIN_SET)
 8002590:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002594:	481c      	ldr	r0, [pc, #112]	@ (8002608 <set_temperature_unit+0x110>)
 8002596:	f001 facf 	bl	8003b38 <HAL_GPIO_ReadPin>
 800259a:	4603      	mov	r3, r0
 800259c:	2b01      	cmp	r3, #1
 800259e:	d10d      	bne.n	80025bc <set_temperature_unit+0xc4>
    {
      if (i == 0) i = 2;
 80025a0:	7dfb      	ldrb	r3, [r7, #23]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d102      	bne.n	80025ac <set_temperature_unit+0xb4>
 80025a6:	2302      	movs	r3, #2
 80025a8:	75fb      	strb	r3, [r7, #23]
 80025aa:	e002      	b.n	80025b2 <set_temperature_unit+0xba>
      else i--;
 80025ac:	7dfb      	ldrb	r3, [r7, #23]
 80025ae:	3b01      	subs	r3, #1
 80025b0:	75fb      	strb	r3, [r7, #23]
      lcd_output_flag = true;
 80025b2:	2301      	movs	r3, #1
 80025b4:	75bb      	strb	r3, [r7, #22]
      HAL_Delay(200);
 80025b6:	20c8      	movs	r0, #200	@ 0xc8
 80025b8:	f001 f832 	bl	8003620 <HAL_Delay>
    }

    if (HAL_GPIO_ReadPin(MENU_BTN_GPIO_Port, MENU_BTN_Pin) == GPIO_PIN_SET)
 80025bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80025c0:	4811      	ldr	r0, [pc, #68]	@ (8002608 <set_temperature_unit+0x110>)
 80025c2:	f001 fab9 	bl	8003b38 <HAL_GPIO_ReadPin>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d107      	bne.n	80025dc <set_temperature_unit+0xe4>
    {
      tInd = i;
 80025cc:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80025d0:	4b0e      	ldr	r3, [pc, #56]	@ (800260c <set_temperature_unit+0x114>)
 80025d2:	701a      	strb	r2, [r3, #0]
      HAL_Delay(200);
 80025d4:	20c8      	movs	r0, #200	@ 0xc8
 80025d6:	f001 f823 	bl	8003620 <HAL_Delay>
      return;
 80025da:	e00a      	b.n	80025f2 <set_temperature_unit+0xfa>
    }

    if (HAL_GPIO_ReadPin(EXIT_BTN_GPIO_Port, EXIT_BTN_Pin) == GPIO_PIN_SET)
 80025dc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80025e0:	4809      	ldr	r0, [pc, #36]	@ (8002608 <set_temperature_unit+0x110>)
 80025e2:	f001 faa9 	bl	8003b38 <HAL_GPIO_ReadPin>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d193      	bne.n	8002514 <set_temperature_unit+0x1c>
    {
      HAL_Delay(200);
 80025ec:	20c8      	movs	r0, #200	@ 0xc8
 80025ee:	f001 f817 	bl	8003620 <HAL_Delay>
      return;
    }
  }
}
 80025f2:	3718      	adds	r7, #24
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bdb0      	pop	{r4, r5, r7, pc}
 80025f8:	08008ffc 	.word	0x08008ffc
 80025fc:	08008fe4 	.word	0x08008fe4
 8002600:	08008fe8 	.word	0x08008fe8
 8002604:	20000010 	.word	0x20000010
 8002608:	40010c00 	.word	0x40010c00
 800260c:	20000454 	.word	0x20000454

08002610 <main_menu>:

void main_menu()
{
 8002610:	b5b0      	push	{r4, r5, r7, lr}
 8002612:	b08c      	sub	sp, #48	@ 0x30
 8002614:	af00      	add	r7, sp, #0
  char *main_menu_items[] = {"TEMPERATURE UNIT", " PRESSURE UNITS ", "    SET TIME    ", "    SET DATE    ", "      EXIT      "};
 8002616:	4b5b      	ldr	r3, [pc, #364]	@ (8002784 <main_menu+0x174>)
 8002618:	f107 0414 	add.w	r4, r7, #20
 800261c:	461d      	mov	r5, r3
 800261e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002620:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002622:	682b      	ldr	r3, [r5, #0]
 8002624:	6023      	str	r3, [r4, #0]
  char menu_title[] = "** MAIN MENU **";
 8002626:	4b58      	ldr	r3, [pc, #352]	@ (8002788 <main_menu+0x178>)
 8002628:	1d3c      	adds	r4, r7, #4
 800262a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800262c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  int i = 0;
 8002630:	2300      	movs	r3, #0
 8002632:	62fb      	str	r3, [r7, #44]	@ 0x2c
  bool lcd_output_flag = false;
 8002634:	2300      	movs	r3, #0
 8002636:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  lcd16x2_clear();
 800263a:	f7ff fc0b 	bl	8001e54 <lcd16x2_clear>
  lcd16x2_1stLine();
 800263e:	f7ff fbd1 	bl	8001de4 <lcd16x2_1stLine>
  lcd16x2_printf(menu_title);
 8002642:	1d3b      	adds	r3, r7, #4
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff fc0f 	bl	8001e68 <lcd16x2_printf>
  lcd16x2_2ndLine();
 800264a:	f7ff fbd3 	bl	8001df4 <lcd16x2_2ndLine>
  lcd16x2_printf(main_menu_items[i]);
 800264e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	3330      	adds	r3, #48	@ 0x30
 8002654:	443b      	add	r3, r7
 8002656:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff fc04 	bl	8001e68 <lcd16x2_printf>

  while(1)
  {
    if (lcd_output_flag)
 8002660:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00d      	beq.n	8002684 <main_menu+0x74>
    {
	  lcd16x2_2ndLine();
 8002668:	f7ff fbc4 	bl	8001df4 <lcd16x2_2ndLine>
	  lcd16x2_printf(main_menu_items[i]);
 800266c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	3330      	adds	r3, #48	@ 0x30
 8002672:	443b      	add	r3, r7
 8002674:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff fbf5 	bl	8001e68 <lcd16x2_printf>
      lcd_output_flag = false;
 800267e:	2300      	movs	r3, #0
 8002680:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    }
    if (HAL_GPIO_ReadPin(SEL_PLUS_BTN_GPIO_Port, SEL_PLUS_BTN_Pin) == GPIO_PIN_SET)
 8002684:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002688:	4840      	ldr	r0, [pc, #256]	@ (800278c <main_menu+0x17c>)
 800268a:	f001 fa55 	bl	8003b38 <HAL_GPIO_ReadPin>
 800268e:	4603      	mov	r3, r0
 8002690:	2b01      	cmp	r3, #1
 8002692:	d10e      	bne.n	80026b2 <main_menu+0xa2>
    {
      if(i == 4) i = 0;
 8002694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002696:	2b04      	cmp	r3, #4
 8002698:	d102      	bne.n	80026a0 <main_menu+0x90>
 800269a:	2300      	movs	r3, #0
 800269c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800269e:	e002      	b.n	80026a6 <main_menu+0x96>
      else i++;
 80026a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026a2:	3301      	adds	r3, #1
 80026a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      lcd_output_flag = true;
 80026a6:	2301      	movs	r3, #1
 80026a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
      HAL_Delay(200);
 80026ac:	20c8      	movs	r0, #200	@ 0xc8
 80026ae:	f000 ffb7 	bl	8003620 <HAL_Delay>
    }
    if (HAL_GPIO_ReadPin(SEL_MINUS_BTN_GPIO_Port, SEL_MINUS_BTN_Pin) == GPIO_PIN_SET)
 80026b2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80026b6:	4835      	ldr	r0, [pc, #212]	@ (800278c <main_menu+0x17c>)
 80026b8:	f001 fa3e 	bl	8003b38 <HAL_GPIO_ReadPin>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d10e      	bne.n	80026e0 <main_menu+0xd0>
    {
      if (i == 0) i = 4;
 80026c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d102      	bne.n	80026ce <main_menu+0xbe>
 80026c8:	2304      	movs	r3, #4
 80026ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026cc:	e002      	b.n	80026d4 <main_menu+0xc4>
      else i--;
 80026ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026d0:	3b01      	subs	r3, #1
 80026d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      lcd_output_flag = true;
 80026d4:	2301      	movs	r3, #1
 80026d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
      HAL_Delay(200);
 80026da:	20c8      	movs	r0, #200	@ 0xc8
 80026dc:	f000 ffa0 	bl	8003620 <HAL_Delay>
    }
    if (HAL_GPIO_ReadPin(MENU_BTN_GPIO_Port, MENU_BTN_Pin) == GPIO_PIN_SET)
 80026e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80026e4:	4829      	ldr	r0, [pc, #164]	@ (800278c <main_menu+0x17c>)
 80026e6:	f001 fa27 	bl	8003b38 <HAL_GPIO_ReadPin>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d137      	bne.n	8002760 <main_menu+0x150>
    {
      HAL_Delay(200);
 80026f0:	20c8      	movs	r0, #200	@ 0xc8
 80026f2:	f000 ff95 	bl	8003620 <HAL_Delay>
      switch(i)
 80026f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026f8:	2b04      	cmp	r3, #4
 80026fa:	d819      	bhi.n	8002730 <main_menu+0x120>
 80026fc:	a201      	add	r2, pc, #4	@ (adr r2, 8002704 <main_menu+0xf4>)
 80026fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002702:	bf00      	nop
 8002704:	08002719 	.word	0x08002719
 8002708:	0800271f 	.word	0x0800271f
 800270c:	08002725 	.word	0x08002725
 8002710:	0800272b 	.word	0x0800272b
 8002714:	0800277b 	.word	0x0800277b
      {
        case 0: set_temperature_unit(); break;
 8002718:	f7ff feee 	bl	80024f8 <set_temperature_unit>
 800271c:	e009      	b.n	8002732 <main_menu+0x122>
        case 1: set_pressure_unit(); break;
 800271e:	f7ff fe55 	bl	80023cc <set_pressure_unit>
 8002722:	e006      	b.n	8002732 <main_menu+0x122>
        case 2: set_time(); break;
 8002724:	f7ff fc0c 	bl	8001f40 <set_time>
 8002728:	e003      	b.n	8002732 <main_menu+0x122>
        case 3: set_date(); break;
 800272a:	f7ff fd0f 	bl	800214c <set_date>
 800272e:	e000      	b.n	8002732 <main_menu+0x122>
        case 4: return;
        default: break;
 8002730:	bf00      	nop
      }
      lcd16x2_clear();
 8002732:	f7ff fb8f 	bl	8001e54 <lcd16x2_clear>
      lcd16x2_1stLine();
 8002736:	f7ff fb55 	bl	8001de4 <lcd16x2_1stLine>
      lcd16x2_setCursor(0,0);
 800273a:	2100      	movs	r1, #0
 800273c:	2000      	movs	r0, #0
 800273e:	f7ff fb2d 	bl	8001d9c <lcd16x2_setCursor>
      lcd16x2_printf(menu_title);
 8002742:	1d3b      	adds	r3, r7, #4
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff fb8f 	bl	8001e68 <lcd16x2_printf>
      lcd16x2_2ndLine();
 800274a:	f7ff fb53 	bl	8001df4 <lcd16x2_2ndLine>
      lcd16x2_printf(main_menu_items[i]);
 800274e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	3330      	adds	r3, #48	@ 0x30
 8002754:	443b      	add	r3, r7
 8002756:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff fb84 	bl	8001e68 <lcd16x2_printf>
    }
    if (HAL_GPIO_ReadPin(EXIT_BTN_GPIO_Port, EXIT_BTN_Pin)== GPIO_PIN_SET)
 8002760:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002764:	4809      	ldr	r0, [pc, #36]	@ (800278c <main_menu+0x17c>)
 8002766:	f001 f9e7 	bl	8003b38 <HAL_GPIO_ReadPin>
 800276a:	4603      	mov	r3, r0
 800276c:	2b01      	cmp	r3, #1
 800276e:	f47f af77 	bne.w	8002660 <main_menu+0x50>
    {
      HAL_Delay(200);
 8002772:	20c8      	movs	r0, #200	@ 0xc8
 8002774:	f000 ff54 	bl	8003620 <HAL_Delay>
      return;
 8002778:	e000      	b.n	800277c <main_menu+0x16c>
        case 4: return;
 800277a:	bf00      	nop
    }
  }
}
 800277c:	3730      	adds	r7, #48	@ 0x30
 800277e:	46bd      	mov	sp, r7
 8002780:	bdb0      	pop	{r4, r5, r7, pc}
 8002782:	bf00      	nop
 8002784:	08009060 	.word	0x08009060
 8002788:	08009074 	.word	0x08009074
 800278c:	40010c00 	.word	0x40010c00

08002790 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002792:	b0b1      	sub	sp, #196	@ 0xc4
 8002794:	af06      	add	r7, sp, #24

  /* USER CODE BEGIN 1 */
  char title[] = "*** STM32 MCU BASED WEATHER STATION ***\r\n*** DEVELOPED BY IHOR BIZHYK, 2024 ***\r\n";
 8002796:	4aac      	ldr	r2, [pc, #688]	@ (8002a48 <main+0x2b8>)
 8002798:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800279c:	4611      	mov	r1, r2
 800279e:	2252      	movs	r2, #82	@ 0x52
 80027a0:	4618      	mov	r0, r3
 80027a2:	f004 f90c 	bl	80069be <memcpy>
  float dht_temperature = 0.0f, dht_humidity = 0.0f;
 80027a6:	f04f 0300 	mov.w	r3, #0
 80027aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80027ac:	f04f 0300 	mov.w	r3, #0
 80027b0:	637b      	str	r3, [r7, #52]	@ 0x34
  float bmp180_temperature = 0.0f;
 80027b2:	f04f 0300 	mov.w	r3, #0
 80027b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  int32_t bmp180_pressure = 0;
 80027ba:	2300      	movs	r3, #0
 80027bc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  bool flag_weather_date = 0;
 80027c0:	2300      	movs	r3, #0
 80027c2:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
  /* Lookup table for the days of week. */
  const char *months[12] = {"Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"};
 80027c6:	4ba1      	ldr	r3, [pc, #644]	@ (8002a4c <main+0x2bc>)
 80027c8:	1d3c      	adds	r4, r7, #4
 80027ca:	461d      	mov	r5, r3
 80027cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027d4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80027d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027dc:	f000 febe 	bl	800355c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027e0:	f000 fb56 	bl	8002e90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027e4:	f000 fc38 	bl	8003058 <MX_GPIO_Init>
  MX_I2C1_Init();
 80027e8:	f000 fb8e 	bl	8002f08 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80027ec:	f000 fc0a 	bl	8003004 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80027f0:	f000 fbb8 	bl	8002f64 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 80027f4:	4896      	ldr	r0, [pc, #600]	@ (8002a50 <main+0x2c0>)
 80027f6:	f002 fe7b 	bl	80054f0 <HAL_TIM_Base_Start>
  lcd16x2_init_4bits(GPIOA, LCD_RS_Pin, LCD_EN_Pin,
 80027fa:	2340      	movs	r3, #64	@ 0x40
 80027fc:	9303      	str	r3, [sp, #12]
 80027fe:	2320      	movs	r3, #32
 8002800:	9302      	str	r3, [sp, #8]
 8002802:	2310      	movs	r3, #16
 8002804:	9301      	str	r3, [sp, #4]
 8002806:	2308      	movs	r3, #8
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	4b92      	ldr	r3, [pc, #584]	@ (8002a54 <main+0x2c4>)
 800280c:	2204      	movs	r2, #4
 800280e:	2102      	movs	r1, #2
 8002810:	4890      	ldr	r0, [pc, #576]	@ (8002a54 <main+0x2c4>)
 8002812:	f7ff fa5b 	bl	8001ccc <lcd16x2_init_4bits>
        GPIOA, LCD_DB4_Pin, LCD_DB5_Pin, LCD_DB6_Pin, LCD_DB7_Pin);
  lcd16x2_custom_char(0, temp_icon);
 8002816:	4990      	ldr	r1, [pc, #576]	@ (8002a58 <main+0x2c8>)
 8002818:	2000      	movs	r0, #0
 800281a:	f7ff fb54 	bl	8001ec6 <lcd16x2_custom_char>
  lcd16x2_custom_char(1, clock_icon);
 800281e:	498f      	ldr	r1, [pc, #572]	@ (8002a5c <main+0x2cc>)
 8002820:	2001      	movs	r0, #1
 8002822:	f7ff fb50 	bl	8001ec6 <lcd16x2_custom_char>
  lcd16x2_custom_char(2, smile_icon);
 8002826:	498e      	ldr	r1, [pc, #568]	@ (8002a60 <main+0x2d0>)
 8002828:	2002      	movs	r0, #2
 800282a:	f7ff fb4c 	bl	8001ec6 <lcd16x2_custom_char>
  lcd16x2_cursorShow(false);
 800282e:	2000      	movs	r0, #0
 8002830:	f7ff fae8 	bl	8001e04 <lcd16x2_cursorShow>
  lcd16x2_1stLine();
 8002834:	f7ff fad6 	bl	8001de4 <lcd16x2_1stLine>
  lcd16x2_printf("STM32 MCU BASED");
 8002838:	488a      	ldr	r0, [pc, #552]	@ (8002a64 <main+0x2d4>)
 800283a:	f7ff fb15 	bl	8001e68 <lcd16x2_printf>
  lcd16x2_2ndLine();
 800283e:	f7ff fad9 	bl	8001df4 <lcd16x2_2ndLine>
  lcd16x2_printf("WEATHER STATION");
 8002842:	4889      	ldr	r0, [pc, #548]	@ (8002a68 <main+0x2d8>)
 8002844:	f7ff fb10 	bl	8001e68 <lcd16x2_printf>
  HAL_Delay(1000);
 8002848:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800284c:	f000 fee8 	bl	8003620 <HAL_Delay>
  lcd16x2_clear();
 8002850:	f7ff fb00 	bl	8001e54 <lcd16x2_clear>
  lcd16x2_setCursor(0, 2);
 8002854:	2102      	movs	r1, #2
 8002856:	2000      	movs	r0, #0
 8002858:	f7ff faa0 	bl	8001d9c <lcd16x2_setCursor>
  lcd16x2_printf("DEVELOPED BY");
 800285c:	4883      	ldr	r0, [pc, #524]	@ (8002a6c <main+0x2dc>)
 800285e:	f7ff fb03 	bl	8001e68 <lcd16x2_printf>
  lcd16x2_setCursor(1, 0);
 8002862:	2100      	movs	r1, #0
 8002864:	2001      	movs	r0, #1
 8002866:	f7ff fa99 	bl	8001d9c <lcd16x2_setCursor>
  lcd16x2_printf("IHOR BIZHYK 2024");
 800286a:	4881      	ldr	r0, [pc, #516]	@ (8002a70 <main+0x2e0>)
 800286c:	f7ff fafc 	bl	8001e68 <lcd16x2_printf>
  HAL_Delay(1000);
 8002870:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002874:	f000 fed4 	bl	8003620 <HAL_Delay>

  HAL_UART_Transmit(&huart1, (uint8_t *)title, strlen(title), 0xff);
 8002878:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800287c:	4618      	mov	r0, r3
 800287e:	f7fd fc67 	bl	8000150 <strlen>
 8002882:	4603      	mov	r3, r0
 8002884:	b29a      	uxth	r2, r3
 8002886:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800288a:	23ff      	movs	r3, #255	@ 0xff
 800288c:	4879      	ldr	r0, [pc, #484]	@ (8002a74 <main+0x2e4>)
 800288e:	f003 f8e7 	bl	8005a60 <HAL_UART_Transmit>
  bmp180_init(&hi2c1);
 8002892:	4879      	ldr	r0, [pc, #484]	@ (8002a78 <main+0x2e8>)
 8002894:	f7fe f96e 	bl	8000b74 <bmp180_init>
  bmp180_set_oversampling(BMP180_STANDARD); //BMP180_ULTRA);
 8002898:	2001      	movs	r0, #1
 800289a:	f7fe f979 	bl	8000b90 <bmp180_set_oversampling>
  //* Update calibration data. Must be called once before entering main loop. */
  bmp180_update_calibration_data();
 800289e:	f7fe f987 	bl	8000bb0 <bmp180_update_calibration_data>
  //
  dht_init(DHT_DATA_GPIO_Port, DHT_DATA_Pin, &htim1);
 80028a2:	4a6b      	ldr	r2, [pc, #428]	@ (8002a50 <main+0x2c0>)
 80028a4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80028a8:	4874      	ldr	r0, [pc, #464]	@ (8002a7c <main+0x2ec>)
 80028aa:	f7fe fc5b 	bl	8001164 <dht_init>
  /* Start DS1307 timing. Pass user I2C handle pointer to function. */
  ds1307_init(&hi2c1);
 80028ae:	4872      	ldr	r0, [pc, #456]	@ (8002a78 <main+0x2e8>)
 80028b0:	f7fe fe4c 	bl	800154c <ds1307_init>
  ds1307_set_interrupt_rate(DS1307_1HZ);
 80028b4:	2000      	movs	r0, #0
 80028b6:	f7fe fee8 	bl	800168a <ds1307_set_interrupt_rate>
  ds1307_set_enable_square_wave(DS1307_ENABLED);
 80028ba:	2001      	movs	r0, #1
 80028bc:	f7fe fec4 	bl	8001648 <ds1307_set_enable_square_wave>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 80028c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80028c4:	486d      	ldr	r0, [pc, #436]	@ (8002a7c <main+0x2ec>)
 80028c6:	f001 f966 	bl	8003b96 <HAL_GPIO_TogglePin>
	if (!flag_weather_date)
 80028ca:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 80028ce:	f083 0301 	eor.w	r3, r3, #1
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 8215 	beq.w	8002d04 <main+0x574>
	{
		/* отримуємо/визначаємо ціле значення температури з давача bmp180 */
		//bmp180_temperature = bmp180_get_raw_temperature();
		/* отримуємо/визначаємо дійсне значення температури з давача bmp180 */
		bmp180_temperature = bmp180_get_temperature();
 80028da:	f7fe fab1 	bl	8000e40 <bmp180_get_temperature>
 80028de:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
		/* читаємо дані тиску з давача bmp180 */
		bmp180_pressure = bmp180_get_pressure();
 80028e2:	f7fe fac9 	bl	8000e78 <bmp180_get_pressure>
 80028e6:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
		/* читаємо дані про вологість і температуру */
		dht_read(&dht_humidity, &dht_temperature);
 80028ea:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80028ee:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80028f2:	4611      	mov	r1, r2
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7fe fd23 	bl	8001340 <dht_read>
		/* обчислюємо значення точки роси */
		float dew_point = dht_calc_dewpoint(&dht_humidity, &dht_temperature);
 80028fa:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80028fe:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002902:	4611      	mov	r1, r2
 8002904:	4618      	mov	r0, r3
 8002906:	f7fe fd8f 	bl	8001428 <dht_calc_dewpoint>
 800290a:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

		switch (pInd)
 800290e:	4b5c      	ldr	r3, [pc, #368]	@ (8002a80 <main+0x2f0>)
 8002910:	f993 3000 	ldrsb.w	r3, [r3]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d002      	beq.n	800291e <main+0x18e>
 8002918:	2b02      	cmp	r3, #2
 800291a:	d01c      	beq.n	8002956 <main+0x1c6>
 800291c:	e02e      	b.n	800297c <main+0x1ec>
		{
			/*case 0:
	      	  bmp180_pressure = bmp180_pressure;
	   	   	   break;*/
			case 1:
				bmp180_pressure = bmp180_pressure * 0.0295333727*25.399999705;
 800291e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8002922:	f7fd fd6f 	bl	8000404 <__aeabi_i2d>
 8002926:	a342      	add	r3, pc, #264	@ (adr r3, 8002a30 <main+0x2a0>)
 8002928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800292c:	f7fd fdd4 	bl	80004d8 <__aeabi_dmul>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	4610      	mov	r0, r2
 8002936:	4619      	mov	r1, r3
 8002938:	a33f      	add	r3, pc, #252	@ (adr r3, 8002a38 <main+0x2a8>)
 800293a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800293e:	f7fd fdcb 	bl	80004d8 <__aeabi_dmul>
 8002942:	4602      	mov	r2, r0
 8002944:	460b      	mov	r3, r1
 8002946:	4610      	mov	r0, r2
 8002948:	4619      	mov	r1, r3
 800294a:	f7fe f875 	bl	8000a38 <__aeabi_d2iz>
 800294e:	4603      	mov	r3, r0
 8002950:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
				break;
 8002954:	e012      	b.n	800297c <main+0x1ec>
			case 2:
				bmp180_pressure = bmp180_pressure*0.0295333727;
 8002956:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 800295a:	f7fd fd53 	bl	8000404 <__aeabi_i2d>
 800295e:	a334      	add	r3, pc, #208	@ (adr r3, 8002a30 <main+0x2a0>)
 8002960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002964:	f7fd fdb8 	bl	80004d8 <__aeabi_dmul>
 8002968:	4602      	mov	r2, r0
 800296a:	460b      	mov	r3, r1
 800296c:	4610      	mov	r0, r2
 800296e:	4619      	mov	r1, r3
 8002970:	f7fe f862 	bl	8000a38 <__aeabi_d2iz>
 8002974:	4603      	mov	r3, r0
 8002976:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
				break;
 800297a:	bf00      	nop
		}

		switch (tInd)
 800297c:	4b41      	ldr	r3, [pc, #260]	@ (8002a84 <main+0x2f4>)
 800297e:	f993 3000 	ldrsb.w	r3, [r3]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d003      	beq.n	800298e <main+0x1fe>
 8002986:	2b02      	cmp	r3, #2
 8002988:	f000 8080 	beq.w	8002a8c <main+0x2fc>
 800298c:	e0b4      	b.n	8002af8 <main+0x368>
		{
			case 1:
				bmp180_temperature = (9.0/5.0)*bmp180_temperature + 32.0;
 800298e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8002992:	f7fd fd49 	bl	8000428 <__aeabi_f2d>
 8002996:	a32a      	add	r3, pc, #168	@ (adr r3, 8002a40 <main+0x2b0>)
 8002998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800299c:	f7fd fd9c 	bl	80004d8 <__aeabi_dmul>
 80029a0:	4602      	mov	r2, r0
 80029a2:	460b      	mov	r3, r1
 80029a4:	4610      	mov	r0, r2
 80029a6:	4619      	mov	r1, r3
 80029a8:	f04f 0200 	mov.w	r2, #0
 80029ac:	4b36      	ldr	r3, [pc, #216]	@ (8002a88 <main+0x2f8>)
 80029ae:	f7fd fbdd 	bl	800016c <__adddf3>
 80029b2:	4602      	mov	r2, r0
 80029b4:	460b      	mov	r3, r1
 80029b6:	4610      	mov	r0, r2
 80029b8:	4619      	mov	r1, r3
 80029ba:	f7fe f865 	bl	8000a88 <__aeabi_d2f>
 80029be:	4603      	mov	r3, r0
 80029c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
				dht_temperature = (9.0/5.0)*dht_temperature + 32.0;
 80029c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7fd fd2e 	bl	8000428 <__aeabi_f2d>
 80029cc:	a31c      	add	r3, pc, #112	@ (adr r3, 8002a40 <main+0x2b0>)
 80029ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d2:	f7fd fd81 	bl	80004d8 <__aeabi_dmul>
 80029d6:	4602      	mov	r2, r0
 80029d8:	460b      	mov	r3, r1
 80029da:	4610      	mov	r0, r2
 80029dc:	4619      	mov	r1, r3
 80029de:	f04f 0200 	mov.w	r2, #0
 80029e2:	4b29      	ldr	r3, [pc, #164]	@ (8002a88 <main+0x2f8>)
 80029e4:	f7fd fbc2 	bl	800016c <__adddf3>
 80029e8:	4602      	mov	r2, r0
 80029ea:	460b      	mov	r3, r1
 80029ec:	4610      	mov	r0, r2
 80029ee:	4619      	mov	r1, r3
 80029f0:	f7fe f84a 	bl	8000a88 <__aeabi_d2f>
 80029f4:	4603      	mov	r3, r0
 80029f6:	63bb      	str	r3, [r7, #56]	@ 0x38
				dew_point = (9.0/5.0)*dew_point + 32.0;
 80029f8:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 80029fc:	f7fd fd14 	bl	8000428 <__aeabi_f2d>
 8002a00:	a30f      	add	r3, pc, #60	@ (adr r3, 8002a40 <main+0x2b0>)
 8002a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a06:	f7fd fd67 	bl	80004d8 <__aeabi_dmul>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	4610      	mov	r0, r2
 8002a10:	4619      	mov	r1, r3
 8002a12:	f04f 0200 	mov.w	r2, #0
 8002a16:	4b1c      	ldr	r3, [pc, #112]	@ (8002a88 <main+0x2f8>)
 8002a18:	f7fd fba8 	bl	800016c <__adddf3>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	460b      	mov	r3, r1
 8002a20:	4610      	mov	r0, r2
 8002a22:	4619      	mov	r1, r3
 8002a24:	f7fe f830 	bl	8000a88 <__aeabi_d2f>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
				break;
 8002a2e:	e063      	b.n	8002af8 <main+0x368>
 8002a30:	178c5e7f 	.word	0x178c5e7f
 8002a34:	3f9e3dff 	.word	0x3f9e3dff
 8002a38:	61736278 	.word	0x61736278
 8002a3c:	40396666 	.word	0x40396666
 8002a40:	cccccccd 	.word	0xcccccccd
 8002a44:	3ffccccc 	.word	0x3ffccccc
 8002a48:	080091a4 	.word	0x080091a4
 8002a4c:	08009228 	.word	0x08009228
 8002a50:	200002fc 	.word	0x200002fc
 8002a54:	40010800 	.word	0x40010800
 8002a58:	20000048 	.word	0x20000048
 8002a5c:	20000058 	.word	0x20000058
 8002a60:	20000050 	.word	0x20000050
 8002a64:	08009084 	.word	0x08009084
 8002a68:	08009094 	.word	0x08009094
 8002a6c:	080090a4 	.word	0x080090a4
 8002a70:	080090b4 	.word	0x080090b4
 8002a74:	20000344 	.word	0x20000344
 8002a78:	200002a8 	.word	0x200002a8
 8002a7c:	40010c00 	.word	0x40010c00
 8002a80:	20000060 	.word	0x20000060
 8002a84:	20000454 	.word	0x20000454
 8002a88:	40400000 	.word	0x40400000
			case 2:
				bmp180_temperature = bmp180_temperature + 274.15;
 8002a8c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8002a90:	f7fd fcca 	bl	8000428 <__aeabi_f2d>
 8002a94:	a388      	add	r3, pc, #544	@ (adr r3, 8002cb8 <main+0x528>)
 8002a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a9a:	f7fd fb67 	bl	800016c <__adddf3>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	4610      	mov	r0, r2
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	f7fd ffef 	bl	8000a88 <__aeabi_d2f>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
				dht_temperature = dht_temperature + 274.15;
 8002ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7fd fcb8 	bl	8000428 <__aeabi_f2d>
 8002ab8:	a37f      	add	r3, pc, #508	@ (adr r3, 8002cb8 <main+0x528>)
 8002aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002abe:	f7fd fb55 	bl	800016c <__adddf3>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	4610      	mov	r0, r2
 8002ac8:	4619      	mov	r1, r3
 8002aca:	f7fd ffdd 	bl	8000a88 <__aeabi_d2f>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	63bb      	str	r3, [r7, #56]	@ 0x38
				dew_point = dew_point + 274.15;
 8002ad2:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8002ad6:	f7fd fca7 	bl	8000428 <__aeabi_f2d>
 8002ada:	a377      	add	r3, pc, #476	@ (adr r3, 8002cb8 <main+0x528>)
 8002adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae0:	f7fd fb44 	bl	800016c <__adddf3>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	4610      	mov	r0, r2
 8002aea:	4619      	mov	r1, r3
 8002aec:	f7fd ffcc 	bl	8000a88 <__aeabi_d2f>
 8002af0:	4603      	mov	r3, r0
 8002af2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
				break;
 8002af6:	bf00      	nop
		}
		/*вивід у послідовний порт */
		sprintf(buffer, "BMP180: Temp = %.1f%s, Pres = %d %s\r\n", bmp180_temperature, temp_units_1[tInd], bmp180_pressure/100, pres_units[pInd]);
 8002af8:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8002afc:	f7fd fc94 	bl	8000428 <__aeabi_f2d>
 8002b00:	4602      	mov	r2, r0
 8002b02:	460b      	mov	r3, r1
 8002b04:	496e      	ldr	r1, [pc, #440]	@ (8002cc0 <main+0x530>)
 8002b06:	f991 1000 	ldrsb.w	r1, [r1]
 8002b0a:	4608      	mov	r0, r1
 8002b0c:	496d      	ldr	r1, [pc, #436]	@ (8002cc4 <main+0x534>)
 8002b0e:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8002b12:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8002b16:	4c6c      	ldr	r4, [pc, #432]	@ (8002cc8 <main+0x538>)
 8002b18:	fb84 5401 	smull	r5, r4, r4, r1
 8002b1c:	1164      	asrs	r4, r4, #5
 8002b1e:	17c9      	asrs	r1, r1, #31
 8002b20:	1a61      	subs	r1, r4, r1
 8002b22:	4c6a      	ldr	r4, [pc, #424]	@ (8002ccc <main+0x53c>)
 8002b24:	f994 4000 	ldrsb.w	r4, [r4]
 8002b28:	4625      	mov	r5, r4
 8002b2a:	4c69      	ldr	r4, [pc, #420]	@ (8002cd0 <main+0x540>)
 8002b2c:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8002b30:	9402      	str	r4, [sp, #8]
 8002b32:	9101      	str	r1, [sp, #4]
 8002b34:	9000      	str	r0, [sp, #0]
 8002b36:	4967      	ldr	r1, [pc, #412]	@ (8002cd4 <main+0x544>)
 8002b38:	4867      	ldr	r0, [pc, #412]	@ (8002cd8 <main+0x548>)
 8002b3a:	f003 fe2f 	bl	800679c <siprintf>
		HAL_UART_Transmit(&huart1, buffer, strlen(buffer), 0xff);
 8002b3e:	4866      	ldr	r0, [pc, #408]	@ (8002cd8 <main+0x548>)
 8002b40:	f7fd fb06 	bl	8000150 <strlen>
 8002b44:	4603      	mov	r3, r0
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	23ff      	movs	r3, #255	@ 0xff
 8002b4a:	4963      	ldr	r1, [pc, #396]	@ (8002cd8 <main+0x548>)
 8002b4c:	4863      	ldr	r0, [pc, #396]	@ (8002cdc <main+0x54c>)
 8002b4e:	f002 ff87 	bl	8005a60 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, "DHT22: ", 7, 0xff);
 8002b52:	23ff      	movs	r3, #255	@ 0xff
 8002b54:	2207      	movs	r2, #7
 8002b56:	4962      	ldr	r1, [pc, #392]	@ (8002ce0 <main+0x550>)
 8002b58:	4860      	ldr	r0, [pc, #384]	@ (8002cdc <main+0x54c>)
 8002b5a:	f002 ff81 	bl	8005a60 <HAL_UART_Transmit>
		//sprintf(buffer, "Temp = %.1f\xb0\C ", dht_temperature);
		sprintf(buffer, "Temp = %.1f%s ", dht_temperature, temp_units_1[tInd]);
 8002b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7fd fc61 	bl	8000428 <__aeabi_f2d>
 8002b66:	4602      	mov	r2, r0
 8002b68:	460b      	mov	r3, r1
 8002b6a:	4955      	ldr	r1, [pc, #340]	@ (8002cc0 <main+0x530>)
 8002b6c:	f991 1000 	ldrsb.w	r1, [r1]
 8002b70:	4608      	mov	r0, r1
 8002b72:	4954      	ldr	r1, [pc, #336]	@ (8002cc4 <main+0x534>)
 8002b74:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8002b78:	9100      	str	r1, [sp, #0]
 8002b7a:	495a      	ldr	r1, [pc, #360]	@ (8002ce4 <main+0x554>)
 8002b7c:	4856      	ldr	r0, [pc, #344]	@ (8002cd8 <main+0x548>)
 8002b7e:	f003 fe0d 	bl	800679c <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 0xff);
 8002b82:	4855      	ldr	r0, [pc, #340]	@ (8002cd8 <main+0x548>)
 8002b84:	f7fd fae4 	bl	8000150 <strlen>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	23ff      	movs	r3, #255	@ 0xff
 8002b8e:	4952      	ldr	r1, [pc, #328]	@ (8002cd8 <main+0x548>)
 8002b90:	4852      	ldr	r0, [pc, #328]	@ (8002cdc <main+0x54c>)
 8002b92:	f002 ff65 	bl	8005a60 <HAL_UART_Transmit>
		sprintf(buffer, "Humi = %.1f%% ", dht_humidity);
 8002b96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7fd fc45 	bl	8000428 <__aeabi_f2d>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	4951      	ldr	r1, [pc, #324]	@ (8002ce8 <main+0x558>)
 8002ba4:	484c      	ldr	r0, [pc, #304]	@ (8002cd8 <main+0x548>)
 8002ba6:	f003 fdf9 	bl	800679c <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 0xff);
 8002baa:	484b      	ldr	r0, [pc, #300]	@ (8002cd8 <main+0x548>)
 8002bac:	f7fd fad0 	bl	8000150 <strlen>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	23ff      	movs	r3, #255	@ 0xff
 8002bb6:	4948      	ldr	r1, [pc, #288]	@ (8002cd8 <main+0x548>)
 8002bb8:	4848      	ldr	r0, [pc, #288]	@ (8002cdc <main+0x54c>)
 8002bba:	f002 ff51 	bl	8005a60 <HAL_UART_Transmit>
		sprintf(buffer, "Dew Point = %.1f%s\r\n", dew_point, temp_units_1[tInd]);
 8002bbe:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8002bc2:	f7fd fc31 	bl	8000428 <__aeabi_f2d>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	460b      	mov	r3, r1
 8002bca:	493d      	ldr	r1, [pc, #244]	@ (8002cc0 <main+0x530>)
 8002bcc:	f991 1000 	ldrsb.w	r1, [r1]
 8002bd0:	4608      	mov	r0, r1
 8002bd2:	493c      	ldr	r1, [pc, #240]	@ (8002cc4 <main+0x534>)
 8002bd4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8002bd8:	9100      	str	r1, [sp, #0]
 8002bda:	4944      	ldr	r1, [pc, #272]	@ (8002cec <main+0x55c>)
 8002bdc:	483e      	ldr	r0, [pc, #248]	@ (8002cd8 <main+0x548>)
 8002bde:	f003 fddd 	bl	800679c <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 0xff);
 8002be2:	483d      	ldr	r0, [pc, #244]	@ (8002cd8 <main+0x548>)
 8002be4:	f7fd fab4 	bl	8000150 <strlen>
 8002be8:	4603      	mov	r3, r0
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	23ff      	movs	r3, #255	@ 0xff
 8002bee:	493a      	ldr	r1, [pc, #232]	@ (8002cd8 <main+0x548>)
 8002bf0:	483a      	ldr	r0, [pc, #232]	@ (8002cdc <main+0x54c>)
 8002bf2:	f002 ff35 	bl	8005a60 <HAL_UART_Transmit>
		/* вивід на дисплей */
		lcd16x2_clear();
 8002bf6:	f7ff f92d 	bl	8001e54 <lcd16x2_clear>
		lcd16x2_1stLine();
 8002bfa:	f7ff f8f3 	bl	8001de4 <lcd16x2_1stLine>
		lcd16x2_writeData((uint8_t)0);
 8002bfe:	2000      	movs	r0, #0
 8002c00:	f7ff f80c 	bl	8001c1c <lcd16x2_writeData>
		//sprintf(buffer, "%.1f\xdf\C %d hPa", bmp180_temperature, (int) bmp180_pressure / 100);
		//sprintf(buffer, "%.1f%s %d %s", bmp180_temperature, temp_units_2[tInd], (int) bmp180_pressure/100, pres_units[pInd]);
		sprintf(buffer, " %d%s %d %s", (int) bmp180_temperature, temp_units_2[tInd], (int) bmp180_pressure/100, pres_units[pInd]);
 8002c04:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8002c08:	f7fd ff8e 	bl	8000b28 <__aeabi_f2iz>
 8002c0c:	4b2c      	ldr	r3, [pc, #176]	@ (8002cc0 <main+0x530>)
 8002c0e:	f993 3000 	ldrsb.w	r3, [r3]
 8002c12:	461a      	mov	r2, r3
 8002c14:	4b36      	ldr	r3, [pc, #216]	@ (8002cf0 <main+0x560>)
 8002c16:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002c1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c1e:	4a2a      	ldr	r2, [pc, #168]	@ (8002cc8 <main+0x538>)
 8002c20:	fb82 4203 	smull	r4, r2, r2, r3
 8002c24:	1152      	asrs	r2, r2, #5
 8002c26:	17db      	asrs	r3, r3, #31
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	4a28      	ldr	r2, [pc, #160]	@ (8002ccc <main+0x53c>)
 8002c2c:	f992 2000 	ldrsb.w	r2, [r2]
 8002c30:	4614      	mov	r4, r2
 8002c32:	4a27      	ldr	r2, [pc, #156]	@ (8002cd0 <main+0x540>)
 8002c34:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8002c38:	9201      	str	r2, [sp, #4]
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	4602      	mov	r2, r0
 8002c40:	492c      	ldr	r1, [pc, #176]	@ (8002cf4 <main+0x564>)
 8002c42:	4825      	ldr	r0, [pc, #148]	@ (8002cd8 <main+0x548>)
 8002c44:	f003 fdaa 	bl	800679c <siprintf>
		lcd16x2_printf(buffer);
 8002c48:	4823      	ldr	r0, [pc, #140]	@ (8002cd8 <main+0x548>)
 8002c4a:	f7ff f90d 	bl	8001e68 <lcd16x2_printf>
		lcd16x2_2ndLine();
 8002c4e:	f7ff f8d1 	bl	8001df4 <lcd16x2_2ndLine>
		//sprintf(buffer, "%.1f%s %.1f", dht_temperature, temp_units_2[tInd], dht_humidity);
		sprintf(buffer, "%d%s %d", (int) dht_temperature, temp_units_2[tInd], (int) dht_humidity);
 8002c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7fd ff67 	bl	8000b28 <__aeabi_f2iz>
 8002c5a:	4605      	mov	r5, r0
 8002c5c:	4b18      	ldr	r3, [pc, #96]	@ (8002cc0 <main+0x530>)
 8002c5e:	f993 3000 	ldrsb.w	r3, [r3]
 8002c62:	461a      	mov	r2, r3
 8002c64:	4b22      	ldr	r3, [pc, #136]	@ (8002cf0 <main+0x560>)
 8002c66:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8002c6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7fd ff5b 	bl	8000b28 <__aeabi_f2iz>
 8002c72:	4603      	mov	r3, r0
 8002c74:	9300      	str	r3, [sp, #0]
 8002c76:	4623      	mov	r3, r4
 8002c78:	462a      	mov	r2, r5
 8002c7a:	491f      	ldr	r1, [pc, #124]	@ (8002cf8 <main+0x568>)
 8002c7c:	4816      	ldr	r0, [pc, #88]	@ (8002cd8 <main+0x548>)
 8002c7e:	f003 fd8d 	bl	800679c <siprintf>
		lcd16x2_printf(buffer);
 8002c82:	4815      	ldr	r0, [pc, #84]	@ (8002cd8 <main+0x548>)
 8002c84:	f7ff f8f0 	bl	8001e68 <lcd16x2_printf>
		lcd16x2_printf("%% ");
 8002c88:	481c      	ldr	r0, [pc, #112]	@ (8002cfc <main+0x56c>)
 8002c8a:	f7ff f8ed 	bl	8001e68 <lcd16x2_printf>
		sprintf(buffer, "DP:%d%s", (int) dew_point, temp_units_2[tInd]);
 8002c8e:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8002c92:	f7fd ff49 	bl	8000b28 <__aeabi_f2iz>
 8002c96:	4602      	mov	r2, r0
 8002c98:	4b09      	ldr	r3, [pc, #36]	@ (8002cc0 <main+0x530>)
 8002c9a:	f993 3000 	ldrsb.w	r3, [r3]
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	4b13      	ldr	r3, [pc, #76]	@ (8002cf0 <main+0x560>)
 8002ca2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002ca6:	4916      	ldr	r1, [pc, #88]	@ (8002d00 <main+0x570>)
 8002ca8:	480b      	ldr	r0, [pc, #44]	@ (8002cd8 <main+0x548>)
 8002caa:	f003 fd77 	bl	800679c <siprintf>
		lcd16x2_printf(buffer);
 8002cae:	480a      	ldr	r0, [pc, #40]	@ (8002cd8 <main+0x548>)
 8002cb0:	f7ff f8da 	bl	8001e68 <lcd16x2_printf>
 8002cb4:	e0b5      	b.n	8002e22 <main+0x692>
 8002cb6:	bf00      	nop
 8002cb8:	66666666 	.word	0x66666666
 8002cbc:	40712266 	.word	0x40712266
 8002cc0:	20000454 	.word	0x20000454
 8002cc4:	20000004 	.word	0x20000004
 8002cc8:	51eb851f 	.word	0x51eb851f
 8002ccc:	20000060 	.word	0x20000060
 8002cd0:	2000001c 	.word	0x2000001c
 8002cd4:	080090c8 	.word	0x080090c8
 8002cd8:	2000038c 	.word	0x2000038c
 8002cdc:	20000344 	.word	0x20000344
 8002ce0:	080090f0 	.word	0x080090f0
 8002ce4:	080090f8 	.word	0x080090f8
 8002ce8:	08009108 	.word	0x08009108
 8002cec:	08009118 	.word	0x08009118
 8002cf0:	20000010 	.word	0x20000010
 8002cf4:	08009130 	.word	0x08009130
 8002cf8:	0800913c 	.word	0x0800913c
 8002cfc:	08009144 	.word	0x08009144
 8002d00:	08009148 	.word	0x08009148
	} else {
		/* отримуємо з RTC DS1307 поточну дату і час */
		uint8_t date = ds1307_get_date();
 8002d04:	f7fe fcea 	bl	80016dc <ds1307_get_date>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		uint8_t month = ds1307_get_month();
 8002d0e:	f7fe fcf1 	bl	80016f4 <ds1307_get_month>
 8002d12:	4603      	mov	r3, r0
 8002d14:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
		uint16_t year = ds1307_get_year();
 8002d18:	f7fe fcf8 	bl	800170c <ds1307_get_year>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
		uint8_t dow = ds1307_get_day_of_week();
 8002d22:	f7fe fccf 	bl	80016c4 <ds1307_get_day_of_week>
 8002d26:	4603      	mov	r3, r0
 8002d28:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
		uint8_t hour = ds1307_get_hour();
 8002d2c:	f7fe fd0b 	bl	8001746 <ds1307_get_hour>
 8002d30:	4603      	mov	r3, r0
 8002d32:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
		uint8_t minute = ds1307_get_minute();
 8002d36:	f7fe fd15 	bl	8001764 <ds1307_get_minute>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91
		uint8_t second = ds1307_get_second();
 8002d40:	f7fe fd1c 	bl	800177c <ds1307_get_second>
 8002d44:	4603      	mov	r3, r0
 8002d46:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
		int8_t zone_hr = ds1307_get_time_zone_hour();
 8002d4a:	f7fe fd26 	bl	800179a <ds1307_get_time_zone_hour>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		uint8_t zone_min = ds1307_get_time_zone_min();
 8002d54:	f7fe fd2a 	bl	80017ac <ds1307_get_time_zone_min>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
		/* виводимо поточний час, день тижня, дату і назву місяця у послідовний порт */
		sprintf(buffer, "Date: %02d/%02d/%02d Time: %02d:%02d:%02d %s\r\n",
 8002d5e:	f897 5097 	ldrb.w	r5, [r7, #151]	@ 0x97
 8002d62:	f897 6096 	ldrb.w	r6, [r7, #150]	@ 0x96
 8002d66:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8002d6a:	f897 2092 	ldrb.w	r2, [r7, #146]	@ 0x92
 8002d6e:	f897 1091 	ldrb.w	r1, [r7, #145]	@ 0x91
 8002d72:	f897 0090 	ldrb.w	r0, [r7, #144]	@ 0x90
					date, month, year, hour, minute, second, days_of_week[dow-1]);
 8002d76:	f897 4093 	ldrb.w	r4, [r7, #147]	@ 0x93
 8002d7a:	3c01      	subs	r4, #1
		sprintf(buffer, "Date: %02d/%02d/%02d Time: %02d:%02d:%02d %s\r\n",
 8002d7c:	f8df c0f4 	ldr.w	ip, [pc, #244]	@ 8002e74 <main+0x6e4>
 8002d80:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 8002d84:	9404      	str	r4, [sp, #16]
 8002d86:	9003      	str	r0, [sp, #12]
 8002d88:	9102      	str	r1, [sp, #8]
 8002d8a:	9201      	str	r2, [sp, #4]
 8002d8c:	9300      	str	r3, [sp, #0]
 8002d8e:	4633      	mov	r3, r6
 8002d90:	462a      	mov	r2, r5
 8002d92:	4939      	ldr	r1, [pc, #228]	@ (8002e78 <main+0x6e8>)
 8002d94:	4839      	ldr	r0, [pc, #228]	@ (8002e7c <main+0x6ec>)
 8002d96:	f003 fd01 	bl	800679c <siprintf>
		HAL_UART_Transmit(&huart1, buffer, strlen(buffer), 1000);
 8002d9a:	4838      	ldr	r0, [pc, #224]	@ (8002e7c <main+0x6ec>)
 8002d9c:	f7fd f9d8 	bl	8000150 <strlen>
 8002da0:	4603      	mov	r3, r0
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002da8:	4934      	ldr	r1, [pc, #208]	@ (8002e7c <main+0x6ec>)
 8002daa:	4835      	ldr	r0, [pc, #212]	@ (8002e80 <main+0x6f0>)
 8002dac:	f002 fe58 	bl	8005a60 <HAL_UART_Transmit>
		/* виводимо поточний час, день тижня, дату і назву місяця на дисплей */
		lcd16x2_clear();
 8002db0:	f7ff f850 	bl	8001e54 <lcd16x2_clear>
		lcd16x2_1stLine();
 8002db4:	f7ff f816 	bl	8001de4 <lcd16x2_1stLine>
		lcd16x2_writeData((uint8_t)2);
 8002db8:	2002      	movs	r0, #2
 8002dba:	f7fe ff2f 	bl	8001c1c <lcd16x2_writeData>
		sprintf(buffer, " %02d:%02d:%02d %s", hour, minute, second, days_of_week[dow-1]);
 8002dbe:	f897 1092 	ldrb.w	r1, [r7, #146]	@ 0x92
 8002dc2:	f897 0091 	ldrb.w	r0, [r7, #145]	@ 0x91
 8002dc6:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 8002dca:	f897 2093 	ldrb.w	r2, [r7, #147]	@ 0x93
 8002dce:	3a01      	subs	r2, #1
 8002dd0:	4c28      	ldr	r4, [pc, #160]	@ (8002e74 <main+0x6e4>)
 8002dd2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8002dd6:	9201      	str	r2, [sp, #4]
 8002dd8:	9300      	str	r3, [sp, #0]
 8002dda:	4603      	mov	r3, r0
 8002ddc:	460a      	mov	r2, r1
 8002dde:	4929      	ldr	r1, [pc, #164]	@ (8002e84 <main+0x6f4>)
 8002de0:	4826      	ldr	r0, [pc, #152]	@ (8002e7c <main+0x6ec>)
 8002de2:	f003 fcdb 	bl	800679c <siprintf>
		lcd16x2_printf(buffer);
 8002de6:	4825      	ldr	r0, [pc, #148]	@ (8002e7c <main+0x6ec>)
 8002de8:	f7ff f83e 	bl	8001e68 <lcd16x2_printf>
		lcd16x2_2ndLine();
 8002dec:	f7ff f802 	bl	8001df4 <lcd16x2_2ndLine>
		sprintf(buffer, "%02d/%02d/%d %s", date, month, year, months[month-1]);
 8002df0:	f897 1097 	ldrb.w	r1, [r7, #151]	@ 0x97
 8002df4:	f897 0096 	ldrb.w	r0, [r7, #150]	@ 0x96
 8002df8:	f8b7 2094 	ldrh.w	r2, [r7, #148]	@ 0x94
 8002dfc:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8002e00:	3b01      	subs	r3, #1
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	33a8      	adds	r3, #168	@ 0xa8
 8002e06:	443b      	add	r3, r7
 8002e08:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 8002e0c:	9301      	str	r3, [sp, #4]
 8002e0e:	9200      	str	r2, [sp, #0]
 8002e10:	4603      	mov	r3, r0
 8002e12:	460a      	mov	r2, r1
 8002e14:	491c      	ldr	r1, [pc, #112]	@ (8002e88 <main+0x6f8>)
 8002e16:	4819      	ldr	r0, [pc, #100]	@ (8002e7c <main+0x6ec>)
 8002e18:	f003 fcc0 	bl	800679c <siprintf>
		lcd16x2_printf(buffer);
 8002e1c:	4817      	ldr	r0, [pc, #92]	@ (8002e7c <main+0x6ec>)
 8002e1e:	f7ff f823 	bl	8001e68 <lcd16x2_printf>
	}

	if (HAL_GPIO_ReadPin(MENU_BTN_GPIO_Port, MENU_BTN_Pin) == GPIO_PIN_SET)
 8002e22:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e26:	4819      	ldr	r0, [pc, #100]	@ (8002e8c <main+0x6fc>)
 8002e28:	f000 fe86 	bl	8003b38 <HAL_GPIO_ReadPin>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d101      	bne.n	8002e36 <main+0x6a6>
	{
	  //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
	  main_menu();
 8002e32:	f7ff fbed 	bl	8002610 <main_menu>
    }

	if (HAL_GPIO_ReadPin(EXIT_BTN_GPIO_Port, EXIT_BTN_Pin) == GPIO_PIN_SET)
 8002e36:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002e3a:	4814      	ldr	r0, [pc, #80]	@ (8002e8c <main+0x6fc>)
 8002e3c:	f000 fe7c 	bl	8003b38 <HAL_GPIO_ReadPin>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d111      	bne.n	8002e6a <main+0x6da>
	{
	  flag_weather_date = !flag_weather_date;
 8002e46:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	bf14      	ite	ne
 8002e4e:	2301      	movne	r3, #1
 8002e50:	2300      	moveq	r3, #0
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	f083 0301 	eor.w	r3, r3, #1
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 8002e5e:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
	  HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
	  main_menu_call = false;
	  main_menu();
	  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
    }*/
	HAL_Delay(700);
 8002e6a:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8002e6e:	f000 fbd7 	bl	8003620 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8002e72:	e525      	b.n	80028c0 <main+0x130>
 8002e74:	2000002c 	.word	0x2000002c
 8002e78:	08009150 	.word	0x08009150
 8002e7c:	2000038c 	.word	0x2000038c
 8002e80:	20000344 	.word	0x20000344
 8002e84:	08009180 	.word	0x08009180
 8002e88:	08009194 	.word	0x08009194
 8002e8c:	40010c00 	.word	0x40010c00

08002e90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b090      	sub	sp, #64	@ 0x40
 8002e94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e96:	f107 0318 	add.w	r3, r7, #24
 8002e9a:	2228      	movs	r2, #40	@ 0x28
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f003 fd00 	bl	80068a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ea4:	1d3b      	adds	r3, r7, #4
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	601a      	str	r2, [r3, #0]
 8002eaa:	605a      	str	r2, [r3, #4]
 8002eac:	609a      	str	r2, [r3, #8]
 8002eae:	60da      	str	r2, [r3, #12]
 8002eb0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002eba:	2310      	movs	r3, #16
 8002ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ec2:	f107 0318 	add.w	r3, r7, #24
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f001 feb2 	bl	8004c30 <HAL_RCC_OscConfig>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8002ed2:	f000 f949 	bl	8003168 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ed6:	230f      	movs	r3, #15
 8002ed8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002eda:	2300      	movs	r3, #0
 8002edc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002eea:	1d3b      	adds	r3, r7, #4
 8002eec:	2100      	movs	r1, #0
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f002 f920 	bl	8005134 <HAL_RCC_ClockConfig>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002efa:	f000 f935 	bl	8003168 <Error_Handler>
  }
}
 8002efe:	bf00      	nop
 8002f00:	3740      	adds	r7, #64	@ 0x40
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
	...

08002f08 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002f0c:	4b12      	ldr	r3, [pc, #72]	@ (8002f58 <MX_I2C1_Init+0x50>)
 8002f0e:	4a13      	ldr	r2, [pc, #76]	@ (8002f5c <MX_I2C1_Init+0x54>)
 8002f10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002f12:	4b11      	ldr	r3, [pc, #68]	@ (8002f58 <MX_I2C1_Init+0x50>)
 8002f14:	4a12      	ldr	r2, [pc, #72]	@ (8002f60 <MX_I2C1_Init+0x58>)
 8002f16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002f18:	4b0f      	ldr	r3, [pc, #60]	@ (8002f58 <MX_I2C1_Init+0x50>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002f58 <MX_I2C1_Init+0x50>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f24:	4b0c      	ldr	r3, [pc, #48]	@ (8002f58 <MX_I2C1_Init+0x50>)
 8002f26:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002f2a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8002f58 <MX_I2C1_Init+0x50>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002f32:	4b09      	ldr	r3, [pc, #36]	@ (8002f58 <MX_I2C1_Init+0x50>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f38:	4b07      	ldr	r3, [pc, #28]	@ (8002f58 <MX_I2C1_Init+0x50>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f3e:	4b06      	ldr	r3, [pc, #24]	@ (8002f58 <MX_I2C1_Init+0x50>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002f44:	4804      	ldr	r0, [pc, #16]	@ (8002f58 <MX_I2C1_Init+0x50>)
 8002f46:	f000 fe3f 	bl	8003bc8 <HAL_I2C_Init>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002f50:	f000 f90a 	bl	8003168 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002f54:	bf00      	nop
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	200002a8 	.word	0x200002a8
 8002f5c:	40005400 	.word	0x40005400
 8002f60:	000186a0 	.word	0x000186a0

08002f64 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f6a:	f107 0308 	add.w	r3, r7, #8
 8002f6e:	2200      	movs	r2, #0
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	605a      	str	r2, [r3, #4]
 8002f74:	609a      	str	r2, [r3, #8]
 8002f76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f78:	463b      	mov	r3, r7
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	601a      	str	r2, [r3, #0]
 8002f7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002f80:	4b1e      	ldr	r3, [pc, #120]	@ (8002ffc <MX_TIM1_Init+0x98>)
 8002f82:	4a1f      	ldr	r2, [pc, #124]	@ (8003000 <MX_TIM1_Init+0x9c>)
 8002f84:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8-1;
 8002f86:	4b1d      	ldr	r3, [pc, #116]	@ (8002ffc <MX_TIM1_Init+0x98>)
 8002f88:	2207      	movs	r2, #7
 8002f8a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f8c:	4b1b      	ldr	r3, [pc, #108]	@ (8002ffc <MX_TIM1_Init+0x98>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFF-1;
 8002f92:	4b1a      	ldr	r3, [pc, #104]	@ (8002ffc <MX_TIM1_Init+0x98>)
 8002f94:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002f98:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f9a:	4b18      	ldr	r3, [pc, #96]	@ (8002ffc <MX_TIM1_Init+0x98>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002fa0:	4b16      	ldr	r3, [pc, #88]	@ (8002ffc <MX_TIM1_Init+0x98>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fa6:	4b15      	ldr	r3, [pc, #84]	@ (8002ffc <MX_TIM1_Init+0x98>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002fac:	4813      	ldr	r0, [pc, #76]	@ (8002ffc <MX_TIM1_Init+0x98>)
 8002fae:	f002 fa4f 	bl	8005450 <HAL_TIM_Base_Init>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002fb8:	f000 f8d6 	bl	8003168 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fbc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002fc0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002fc2:	f107 0308 	add.w	r3, r7, #8
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	480c      	ldr	r0, [pc, #48]	@ (8002ffc <MX_TIM1_Init+0x98>)
 8002fca:	f002 fadb 	bl	8005584 <HAL_TIM_ConfigClockSource>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002fd4:	f000 f8c8 	bl	8003168 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002fe0:	463b      	mov	r3, r7
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	4805      	ldr	r0, [pc, #20]	@ (8002ffc <MX_TIM1_Init+0x98>)
 8002fe6:	f002 fc8d 	bl	8005904 <HAL_TIMEx_MasterConfigSynchronization>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002ff0:	f000 f8ba 	bl	8003168 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002ff4:	bf00      	nop
 8002ff6:	3718      	adds	r7, #24
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	200002fc 	.word	0x200002fc
 8003000:	40012c00 	.word	0x40012c00

08003004 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003008:	4b11      	ldr	r3, [pc, #68]	@ (8003050 <MX_USART1_UART_Init+0x4c>)
 800300a:	4a12      	ldr	r2, [pc, #72]	@ (8003054 <MX_USART1_UART_Init+0x50>)
 800300c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800300e:	4b10      	ldr	r3, [pc, #64]	@ (8003050 <MX_USART1_UART_Init+0x4c>)
 8003010:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003014:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003016:	4b0e      	ldr	r3, [pc, #56]	@ (8003050 <MX_USART1_UART_Init+0x4c>)
 8003018:	2200      	movs	r2, #0
 800301a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800301c:	4b0c      	ldr	r3, [pc, #48]	@ (8003050 <MX_USART1_UART_Init+0x4c>)
 800301e:	2200      	movs	r2, #0
 8003020:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003022:	4b0b      	ldr	r3, [pc, #44]	@ (8003050 <MX_USART1_UART_Init+0x4c>)
 8003024:	2200      	movs	r2, #0
 8003026:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003028:	4b09      	ldr	r3, [pc, #36]	@ (8003050 <MX_USART1_UART_Init+0x4c>)
 800302a:	220c      	movs	r2, #12
 800302c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800302e:	4b08      	ldr	r3, [pc, #32]	@ (8003050 <MX_USART1_UART_Init+0x4c>)
 8003030:	2200      	movs	r2, #0
 8003032:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003034:	4b06      	ldr	r3, [pc, #24]	@ (8003050 <MX_USART1_UART_Init+0x4c>)
 8003036:	2200      	movs	r2, #0
 8003038:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800303a:	4805      	ldr	r0, [pc, #20]	@ (8003050 <MX_USART1_UART_Init+0x4c>)
 800303c:	f002 fcc0 	bl	80059c0 <HAL_UART_Init>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003046:	f000 f88f 	bl	8003168 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800304a:	bf00      	nop
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	20000344 	.word	0x20000344
 8003054:	40013800 	.word	0x40013800

08003058 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b088      	sub	sp, #32
 800305c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800305e:	f107 0310 	add.w	r3, r7, #16
 8003062:	2200      	movs	r2, #0
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	605a      	str	r2, [r3, #4]
 8003068:	609a      	str	r2, [r3, #8]
 800306a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800306c:	4b3b      	ldr	r3, [pc, #236]	@ (800315c <MX_GPIO_Init+0x104>)
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	4a3a      	ldr	r2, [pc, #232]	@ (800315c <MX_GPIO_Init+0x104>)
 8003072:	f043 0320 	orr.w	r3, r3, #32
 8003076:	6193      	str	r3, [r2, #24]
 8003078:	4b38      	ldr	r3, [pc, #224]	@ (800315c <MX_GPIO_Init+0x104>)
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	f003 0320 	and.w	r3, r3, #32
 8003080:	60fb      	str	r3, [r7, #12]
 8003082:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003084:	4b35      	ldr	r3, [pc, #212]	@ (800315c <MX_GPIO_Init+0x104>)
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	4a34      	ldr	r2, [pc, #208]	@ (800315c <MX_GPIO_Init+0x104>)
 800308a:	f043 0304 	orr.w	r3, r3, #4
 800308e:	6193      	str	r3, [r2, #24]
 8003090:	4b32      	ldr	r3, [pc, #200]	@ (800315c <MX_GPIO_Init+0x104>)
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	f003 0304 	and.w	r3, r3, #4
 8003098:	60bb      	str	r3, [r7, #8]
 800309a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800309c:	4b2f      	ldr	r3, [pc, #188]	@ (800315c <MX_GPIO_Init+0x104>)
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	4a2e      	ldr	r2, [pc, #184]	@ (800315c <MX_GPIO_Init+0x104>)
 80030a2:	f043 0308 	orr.w	r3, r3, #8
 80030a6:	6193      	str	r3, [r2, #24]
 80030a8:	4b2c      	ldr	r3, [pc, #176]	@ (800315c <MX_GPIO_Init+0x104>)
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	f003 0308 	and.w	r3, r3, #8
 80030b0:	607b      	str	r3, [r7, #4]
 80030b2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RS_Pin|LCD_EN_Pin|LCD_DB4_Pin|LCD_DB5_Pin
 80030b4:	2200      	movs	r2, #0
 80030b6:	217e      	movs	r1, #126	@ 0x7e
 80030b8:	4829      	ldr	r0, [pc, #164]	@ (8003160 <MX_GPIO_Init+0x108>)
 80030ba:	f000 fd54 	bl	8003b66 <HAL_GPIO_WritePin>
                          |LCD_DB6_Pin|LCD_DB7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|DHT_DATA_Pin|LED_Pin, GPIO_PIN_RESET);
 80030be:	2200      	movs	r2, #0
 80030c0:	f243 0104 	movw	r1, #12292	@ 0x3004
 80030c4:	4827      	ldr	r0, [pc, #156]	@ (8003164 <MX_GPIO_Init+0x10c>)
 80030c6:	f000 fd4e 	bl	8003b66 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_RS_Pin LCD_EN_Pin LCD_DB4_Pin LCD_DB5_Pin
                           LCD_DB6_Pin LCD_DB7_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_EN_Pin|LCD_DB4_Pin|LCD_DB5_Pin
 80030ca:	237e      	movs	r3, #126	@ 0x7e
 80030cc:	613b      	str	r3, [r7, #16]
                          |LCD_DB6_Pin|LCD_DB7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030ce:	2301      	movs	r3, #1
 80030d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d2:	2300      	movs	r3, #0
 80030d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d6:	2302      	movs	r3, #2
 80030d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030da:	f107 0310 	add.w	r3, r7, #16
 80030de:	4619      	mov	r1, r3
 80030e0:	481f      	ldr	r0, [pc, #124]	@ (8003160 <MX_GPIO_Init+0x108>)
 80030e2:	f000 fba5 	bl	8003830 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80030e6:	2304      	movs	r3, #4
 80030e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030ea:	2301      	movs	r3, #1
 80030ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ee:	2300      	movs	r3, #0
 80030f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030f2:	2303      	movs	r3, #3
 80030f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030f6:	f107 0310 	add.w	r3, r7, #16
 80030fa:	4619      	mov	r1, r3
 80030fc:	4819      	ldr	r0, [pc, #100]	@ (8003164 <MX_GPIO_Init+0x10c>)
 80030fe:	f000 fb97 	bl	8003830 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEL_MINUS_BTN_Pin EXIT_BTN_Pin SEL_PLUS_BTN_Pin */
  GPIO_InitStruct.Pin = SEL_MINUS_BTN_Pin|EXIT_BTN_Pin|SEL_PLUS_BTN_Pin;
 8003102:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 8003106:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003108:	2300      	movs	r3, #0
 800310a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310c:	2300      	movs	r3, #0
 800310e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003110:	f107 0310 	add.w	r3, r7, #16
 8003114:	4619      	mov	r1, r3
 8003116:	4813      	ldr	r0, [pc, #76]	@ (8003164 <MX_GPIO_Init+0x10c>)
 8003118:	f000 fb8a 	bl	8003830 <HAL_GPIO_Init>

  /*Configure GPIO pins : DHT_DATA_Pin LED_Pin */
  GPIO_InitStruct.Pin = DHT_DATA_Pin|LED_Pin;
 800311c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003120:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003122:	2301      	movs	r3, #1
 8003124:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003126:	2300      	movs	r3, #0
 8003128:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800312a:	2302      	movs	r3, #2
 800312c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800312e:	f107 0310 	add.w	r3, r7, #16
 8003132:	4619      	mov	r1, r3
 8003134:	480b      	ldr	r0, [pc, #44]	@ (8003164 <MX_GPIO_Init+0x10c>)
 8003136:	f000 fb7b 	bl	8003830 <HAL_GPIO_Init>

  /*Configure GPIO pin : MENU_BTN_Pin */
  GPIO_InitStruct.Pin = MENU_BTN_Pin;
 800313a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800313e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003140:	2300      	movs	r3, #0
 8003142:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003144:	2302      	movs	r3, #2
 8003146:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MENU_BTN_GPIO_Port, &GPIO_InitStruct);
 8003148:	f107 0310 	add.w	r3, r7, #16
 800314c:	4619      	mov	r1, r3
 800314e:	4805      	ldr	r0, [pc, #20]	@ (8003164 <MX_GPIO_Init+0x10c>)
 8003150:	f000 fb6e 	bl	8003830 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003154:	bf00      	nop
 8003156:	3720      	adds	r7, #32
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	40021000 	.word	0x40021000
 8003160:	40010800 	.word	0x40010800
 8003164:	40010c00 	.word	0x40010c00

08003168 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800316c:	b672      	cpsid	i
}
 800316e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003170:	bf00      	nop
 8003172:	e7fd      	b.n	8003170 <Error_Handler+0x8>

08003174 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800317a:	4b15      	ldr	r3, [pc, #84]	@ (80031d0 <HAL_MspInit+0x5c>)
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	4a14      	ldr	r2, [pc, #80]	@ (80031d0 <HAL_MspInit+0x5c>)
 8003180:	f043 0301 	orr.w	r3, r3, #1
 8003184:	6193      	str	r3, [r2, #24]
 8003186:	4b12      	ldr	r3, [pc, #72]	@ (80031d0 <HAL_MspInit+0x5c>)
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	60bb      	str	r3, [r7, #8]
 8003190:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003192:	4b0f      	ldr	r3, [pc, #60]	@ (80031d0 <HAL_MspInit+0x5c>)
 8003194:	69db      	ldr	r3, [r3, #28]
 8003196:	4a0e      	ldr	r2, [pc, #56]	@ (80031d0 <HAL_MspInit+0x5c>)
 8003198:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800319c:	61d3      	str	r3, [r2, #28]
 800319e:	4b0c      	ldr	r3, [pc, #48]	@ (80031d0 <HAL_MspInit+0x5c>)
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031a6:	607b      	str	r3, [r7, #4]
 80031a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80031aa:	4b0a      	ldr	r3, [pc, #40]	@ (80031d4 <HAL_MspInit+0x60>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	60fb      	str	r3, [r7, #12]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80031b6:	60fb      	str	r3, [r7, #12]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80031be:	60fb      	str	r3, [r7, #12]
 80031c0:	4a04      	ldr	r2, [pc, #16]	@ (80031d4 <HAL_MspInit+0x60>)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031c6:	bf00      	nop
 80031c8:	3714      	adds	r7, #20
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bc80      	pop	{r7}
 80031ce:	4770      	bx	lr
 80031d0:	40021000 	.word	0x40021000
 80031d4:	40010000 	.word	0x40010000

080031d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b088      	sub	sp, #32
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031e0:	f107 0310 	add.w	r3, r7, #16
 80031e4:	2200      	movs	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	605a      	str	r2, [r3, #4]
 80031ea:	609a      	str	r2, [r3, #8]
 80031ec:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a15      	ldr	r2, [pc, #84]	@ (8003248 <HAL_I2C_MspInit+0x70>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d123      	bne.n	8003240 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031f8:	4b14      	ldr	r3, [pc, #80]	@ (800324c <HAL_I2C_MspInit+0x74>)
 80031fa:	699b      	ldr	r3, [r3, #24]
 80031fc:	4a13      	ldr	r2, [pc, #76]	@ (800324c <HAL_I2C_MspInit+0x74>)
 80031fe:	f043 0308 	orr.w	r3, r3, #8
 8003202:	6193      	str	r3, [r2, #24]
 8003204:	4b11      	ldr	r3, [pc, #68]	@ (800324c <HAL_I2C_MspInit+0x74>)
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	f003 0308 	and.w	r3, r3, #8
 800320c:	60fb      	str	r3, [r7, #12]
 800320e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003210:	23c0      	movs	r3, #192	@ 0xc0
 8003212:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003214:	2312      	movs	r3, #18
 8003216:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003218:	2303      	movs	r3, #3
 800321a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800321c:	f107 0310 	add.w	r3, r7, #16
 8003220:	4619      	mov	r1, r3
 8003222:	480b      	ldr	r0, [pc, #44]	@ (8003250 <HAL_I2C_MspInit+0x78>)
 8003224:	f000 fb04 	bl	8003830 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003228:	4b08      	ldr	r3, [pc, #32]	@ (800324c <HAL_I2C_MspInit+0x74>)
 800322a:	69db      	ldr	r3, [r3, #28]
 800322c:	4a07      	ldr	r2, [pc, #28]	@ (800324c <HAL_I2C_MspInit+0x74>)
 800322e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003232:	61d3      	str	r3, [r2, #28]
 8003234:	4b05      	ldr	r3, [pc, #20]	@ (800324c <HAL_I2C_MspInit+0x74>)
 8003236:	69db      	ldr	r3, [r3, #28]
 8003238:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800323c:	60bb      	str	r3, [r7, #8]
 800323e:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003240:	bf00      	nop
 8003242:	3720      	adds	r7, #32
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	40005400 	.word	0x40005400
 800324c:	40021000 	.word	0x40021000
 8003250:	40010c00 	.word	0x40010c00

08003254 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a09      	ldr	r2, [pc, #36]	@ (8003288 <HAL_TIM_Base_MspInit+0x34>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d10b      	bne.n	800327e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003266:	4b09      	ldr	r3, [pc, #36]	@ (800328c <HAL_TIM_Base_MspInit+0x38>)
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	4a08      	ldr	r2, [pc, #32]	@ (800328c <HAL_TIM_Base_MspInit+0x38>)
 800326c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003270:	6193      	str	r3, [r2, #24]
 8003272:	4b06      	ldr	r3, [pc, #24]	@ (800328c <HAL_TIM_Base_MspInit+0x38>)
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800327a:	60fb      	str	r3, [r7, #12]
 800327c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800327e:	bf00      	nop
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	bc80      	pop	{r7}
 8003286:	4770      	bx	lr
 8003288:	40012c00 	.word	0x40012c00
 800328c:	40021000 	.word	0x40021000

08003290 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b088      	sub	sp, #32
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003298:	f107 0310 	add.w	r3, r7, #16
 800329c:	2200      	movs	r2, #0
 800329e:	601a      	str	r2, [r3, #0]
 80032a0:	605a      	str	r2, [r3, #4]
 80032a2:	609a      	str	r2, [r3, #8]
 80032a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a1c      	ldr	r2, [pc, #112]	@ (800331c <HAL_UART_MspInit+0x8c>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d131      	bne.n	8003314 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80032b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003320 <HAL_UART_MspInit+0x90>)
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	4a1a      	ldr	r2, [pc, #104]	@ (8003320 <HAL_UART_MspInit+0x90>)
 80032b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032ba:	6193      	str	r3, [r2, #24]
 80032bc:	4b18      	ldr	r3, [pc, #96]	@ (8003320 <HAL_UART_MspInit+0x90>)
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032c4:	60fb      	str	r3, [r7, #12]
 80032c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032c8:	4b15      	ldr	r3, [pc, #84]	@ (8003320 <HAL_UART_MspInit+0x90>)
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	4a14      	ldr	r2, [pc, #80]	@ (8003320 <HAL_UART_MspInit+0x90>)
 80032ce:	f043 0304 	orr.w	r3, r3, #4
 80032d2:	6193      	str	r3, [r2, #24]
 80032d4:	4b12      	ldr	r3, [pc, #72]	@ (8003320 <HAL_UART_MspInit+0x90>)
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	f003 0304 	and.w	r3, r3, #4
 80032dc:	60bb      	str	r3, [r7, #8]
 80032de:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80032e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80032e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032e6:	2302      	movs	r3, #2
 80032e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032ea:	2303      	movs	r3, #3
 80032ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ee:	f107 0310 	add.w	r3, r7, #16
 80032f2:	4619      	mov	r1, r3
 80032f4:	480b      	ldr	r0, [pc, #44]	@ (8003324 <HAL_UART_MspInit+0x94>)
 80032f6:	f000 fa9b 	bl	8003830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80032fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80032fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003300:	2300      	movs	r3, #0
 8003302:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003304:	2300      	movs	r3, #0
 8003306:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003308:	f107 0310 	add.w	r3, r7, #16
 800330c:	4619      	mov	r1, r3
 800330e:	4805      	ldr	r0, [pc, #20]	@ (8003324 <HAL_UART_MspInit+0x94>)
 8003310:	f000 fa8e 	bl	8003830 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8003314:	bf00      	nop
 8003316:	3720      	adds	r7, #32
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	40013800 	.word	0x40013800
 8003320:	40021000 	.word	0x40021000
 8003324:	40010800 	.word	0x40010800

08003328 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800332c:	bf00      	nop
 800332e:	e7fd      	b.n	800332c <NMI_Handler+0x4>

08003330 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003334:	bf00      	nop
 8003336:	e7fd      	b.n	8003334 <HardFault_Handler+0x4>

08003338 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800333c:	bf00      	nop
 800333e:	e7fd      	b.n	800333c <MemManage_Handler+0x4>

08003340 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003344:	bf00      	nop
 8003346:	e7fd      	b.n	8003344 <BusFault_Handler+0x4>

08003348 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800334c:	bf00      	nop
 800334e:	e7fd      	b.n	800334c <UsageFault_Handler+0x4>

08003350 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003354:	bf00      	nop
 8003356:	46bd      	mov	sp, r7
 8003358:	bc80      	pop	{r7}
 800335a:	4770      	bx	lr

0800335c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003360:	bf00      	nop
 8003362:	46bd      	mov	sp, r7
 8003364:	bc80      	pop	{r7}
 8003366:	4770      	bx	lr

08003368 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800336c:	bf00      	nop
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr

08003374 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003378:	f000 f936 	bl	80035e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800337c:	bf00      	nop
 800337e:	bd80      	pop	{r7, pc}

08003380 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  return 1;
 8003384:	2301      	movs	r3, #1
}
 8003386:	4618      	mov	r0, r3
 8003388:	46bd      	mov	sp, r7
 800338a:	bc80      	pop	{r7}
 800338c:	4770      	bx	lr

0800338e <_kill>:

int _kill(int pid, int sig)
{
 800338e:	b580      	push	{r7, lr}
 8003390:	b082      	sub	sp, #8
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
 8003396:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003398:	f003 fad6 	bl	8006948 <__errno>
 800339c:	4603      	mov	r3, r0
 800339e:	2216      	movs	r2, #22
 80033a0:	601a      	str	r2, [r3, #0]
  return -1;
 80033a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <_exit>:

void _exit (int status)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b082      	sub	sp, #8
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80033b6:	f04f 31ff 	mov.w	r1, #4294967295
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7ff ffe7 	bl	800338e <_kill>
  while (1) {}    /* Make sure we hang here */
 80033c0:	bf00      	nop
 80033c2:	e7fd      	b.n	80033c0 <_exit+0x12>

080033c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033d0:	2300      	movs	r3, #0
 80033d2:	617b      	str	r3, [r7, #20]
 80033d4:	e00a      	b.n	80033ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80033d6:	f3af 8000 	nop.w
 80033da:	4601      	mov	r1, r0
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	1c5a      	adds	r2, r3, #1
 80033e0:	60ba      	str	r2, [r7, #8]
 80033e2:	b2ca      	uxtb	r2, r1
 80033e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	3301      	adds	r3, #1
 80033ea:	617b      	str	r3, [r7, #20]
 80033ec:	697a      	ldr	r2, [r7, #20]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	dbf0      	blt.n	80033d6 <_read+0x12>
  }

  return len;
 80033f4:	687b      	ldr	r3, [r7, #4]
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3718      	adds	r7, #24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80033fe:	b580      	push	{r7, lr}
 8003400:	b086      	sub	sp, #24
 8003402:	af00      	add	r7, sp, #0
 8003404:	60f8      	str	r0, [r7, #12]
 8003406:	60b9      	str	r1, [r7, #8]
 8003408:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800340a:	2300      	movs	r3, #0
 800340c:	617b      	str	r3, [r7, #20]
 800340e:	e009      	b.n	8003424 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	1c5a      	adds	r2, r3, #1
 8003414:	60ba      	str	r2, [r7, #8]
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	4618      	mov	r0, r3
 800341a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	3301      	adds	r3, #1
 8003422:	617b      	str	r3, [r7, #20]
 8003424:	697a      	ldr	r2, [r7, #20]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	429a      	cmp	r2, r3
 800342a:	dbf1      	blt.n	8003410 <_write+0x12>
  }
  return len;
 800342c:	687b      	ldr	r3, [r7, #4]
}
 800342e:	4618      	mov	r0, r3
 8003430:	3718      	adds	r7, #24
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <_close>:

int _close(int file)
{
 8003436:	b480      	push	{r7}
 8003438:	b083      	sub	sp, #12
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800343e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003442:	4618      	mov	r0, r3
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	bc80      	pop	{r7}
 800344a:	4770      	bx	lr

0800344c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800345c:	605a      	str	r2, [r3, #4]
  return 0;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	bc80      	pop	{r7}
 8003468:	4770      	bx	lr

0800346a <_isatty>:

int _isatty(int file)
{
 800346a:	b480      	push	{r7}
 800346c:	b083      	sub	sp, #12
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003472:	2301      	movs	r3, #1
}
 8003474:	4618      	mov	r0, r3
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	bc80      	pop	{r7}
 800347c:	4770      	bx	lr

0800347e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800347e:	b480      	push	{r7}
 8003480:	b085      	sub	sp, #20
 8003482:	af00      	add	r7, sp, #0
 8003484:	60f8      	str	r0, [r7, #12]
 8003486:	60b9      	str	r1, [r7, #8]
 8003488:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3714      	adds	r7, #20
 8003490:	46bd      	mov	sp, r7
 8003492:	bc80      	pop	{r7}
 8003494:	4770      	bx	lr
	...

08003498 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034a0:	4a14      	ldr	r2, [pc, #80]	@ (80034f4 <_sbrk+0x5c>)
 80034a2:	4b15      	ldr	r3, [pc, #84]	@ (80034f8 <_sbrk+0x60>)
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034ac:	4b13      	ldr	r3, [pc, #76]	@ (80034fc <_sbrk+0x64>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d102      	bne.n	80034ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034b4:	4b11      	ldr	r3, [pc, #68]	@ (80034fc <_sbrk+0x64>)
 80034b6:	4a12      	ldr	r2, [pc, #72]	@ (8003500 <_sbrk+0x68>)
 80034b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034ba:	4b10      	ldr	r3, [pc, #64]	@ (80034fc <_sbrk+0x64>)
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4413      	add	r3, r2
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d207      	bcs.n	80034d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034c8:	f003 fa3e 	bl	8006948 <__errno>
 80034cc:	4603      	mov	r3, r0
 80034ce:	220c      	movs	r2, #12
 80034d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034d2:	f04f 33ff 	mov.w	r3, #4294967295
 80034d6:	e009      	b.n	80034ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034d8:	4b08      	ldr	r3, [pc, #32]	@ (80034fc <_sbrk+0x64>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034de:	4b07      	ldr	r3, [pc, #28]	@ (80034fc <_sbrk+0x64>)
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4413      	add	r3, r2
 80034e6:	4a05      	ldr	r2, [pc, #20]	@ (80034fc <_sbrk+0x64>)
 80034e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034ea:	68fb      	ldr	r3, [r7, #12]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3718      	adds	r7, #24
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	20005000 	.word	0x20005000
 80034f8:	00000400 	.word	0x00000400
 80034fc:	20000458 	.word	0x20000458
 8003500:	200005b0 	.word	0x200005b0

08003504 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003508:	bf00      	nop
 800350a:	46bd      	mov	sp, r7
 800350c:	bc80      	pop	{r7}
 800350e:	4770      	bx	lr

08003510 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003510:	f7ff fff8 	bl	8003504 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003514:	480b      	ldr	r0, [pc, #44]	@ (8003544 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003516:	490c      	ldr	r1, [pc, #48]	@ (8003548 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003518:	4a0c      	ldr	r2, [pc, #48]	@ (800354c <LoopFillZerobss+0x16>)
  movs r3, #0
 800351a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800351c:	e002      	b.n	8003524 <LoopCopyDataInit>

0800351e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800351e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003520:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003522:	3304      	adds	r3, #4

08003524 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003524:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003526:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003528:	d3f9      	bcc.n	800351e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800352a:	4a09      	ldr	r2, [pc, #36]	@ (8003550 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800352c:	4c09      	ldr	r4, [pc, #36]	@ (8003554 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800352e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003530:	e001      	b.n	8003536 <LoopFillZerobss>

08003532 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003532:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003534:	3204      	adds	r2, #4

08003536 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003536:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003538:	d3fb      	bcc.n	8003532 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800353a:	f003 fa0b 	bl	8006954 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800353e:	f7ff f927 	bl	8002790 <main>
  bx lr
 8003542:	4770      	bx	lr
  ldr r0, =_sdata
 8003544:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003548:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 800354c:	08009608 	.word	0x08009608
  ldr r2, =_sbss
 8003550:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8003554:	200005ac 	.word	0x200005ac

08003558 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003558:	e7fe      	b.n	8003558 <ADC1_2_IRQHandler>
	...

0800355c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003560:	4b08      	ldr	r3, [pc, #32]	@ (8003584 <HAL_Init+0x28>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a07      	ldr	r2, [pc, #28]	@ (8003584 <HAL_Init+0x28>)
 8003566:	f043 0310 	orr.w	r3, r3, #16
 800356a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800356c:	2003      	movs	r0, #3
 800356e:	f000 f92b 	bl	80037c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003572:	200f      	movs	r0, #15
 8003574:	f000 f808 	bl	8003588 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003578:	f7ff fdfc 	bl	8003174 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	40022000 	.word	0x40022000

08003588 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003590:	4b12      	ldr	r3, [pc, #72]	@ (80035dc <HAL_InitTick+0x54>)
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	4b12      	ldr	r3, [pc, #72]	@ (80035e0 <HAL_InitTick+0x58>)
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	4619      	mov	r1, r3
 800359a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800359e:	fbb3 f3f1 	udiv	r3, r3, r1
 80035a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 f935 	bl	8003816 <HAL_SYSTICK_Config>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e00e      	b.n	80035d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2b0f      	cmp	r3, #15
 80035ba:	d80a      	bhi.n	80035d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035bc:	2200      	movs	r2, #0
 80035be:	6879      	ldr	r1, [r7, #4]
 80035c0:	f04f 30ff 	mov.w	r0, #4294967295
 80035c4:	f000 f90b 	bl	80037de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80035c8:	4a06      	ldr	r2, [pc, #24]	@ (80035e4 <HAL_InitTick+0x5c>)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
 80035d0:	e000      	b.n	80035d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3708      	adds	r7, #8
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	20000064 	.word	0x20000064
 80035e0:	2000006c 	.word	0x2000006c
 80035e4:	20000068 	.word	0x20000068

080035e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035ec:	4b05      	ldr	r3, [pc, #20]	@ (8003604 <HAL_IncTick+0x1c>)
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	461a      	mov	r2, r3
 80035f2:	4b05      	ldr	r3, [pc, #20]	@ (8003608 <HAL_IncTick+0x20>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4413      	add	r3, r2
 80035f8:	4a03      	ldr	r2, [pc, #12]	@ (8003608 <HAL_IncTick+0x20>)
 80035fa:	6013      	str	r3, [r2, #0]
}
 80035fc:	bf00      	nop
 80035fe:	46bd      	mov	sp, r7
 8003600:	bc80      	pop	{r7}
 8003602:	4770      	bx	lr
 8003604:	2000006c 	.word	0x2000006c
 8003608:	2000045c 	.word	0x2000045c

0800360c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0
  return uwTick;
 8003610:	4b02      	ldr	r3, [pc, #8]	@ (800361c <HAL_GetTick+0x10>)
 8003612:	681b      	ldr	r3, [r3, #0]
}
 8003614:	4618      	mov	r0, r3
 8003616:	46bd      	mov	sp, r7
 8003618:	bc80      	pop	{r7}
 800361a:	4770      	bx	lr
 800361c:	2000045c 	.word	0x2000045c

08003620 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003628:	f7ff fff0 	bl	800360c <HAL_GetTick>
 800362c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003638:	d005      	beq.n	8003646 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800363a:	4b0a      	ldr	r3, [pc, #40]	@ (8003664 <HAL_Delay+0x44>)
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	461a      	mov	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	4413      	add	r3, r2
 8003644:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003646:	bf00      	nop
 8003648:	f7ff ffe0 	bl	800360c <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	429a      	cmp	r2, r3
 8003656:	d8f7      	bhi.n	8003648 <HAL_Delay+0x28>
  {
  }
}
 8003658:	bf00      	nop
 800365a:	bf00      	nop
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	2000006c 	.word	0x2000006c

08003668 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f003 0307 	and.w	r3, r3, #7
 8003676:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003678:	4b0c      	ldr	r3, [pc, #48]	@ (80036ac <__NVIC_SetPriorityGrouping+0x44>)
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800367e:	68ba      	ldr	r2, [r7, #8]
 8003680:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003684:	4013      	ands	r3, r2
 8003686:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003690:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003694:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003698:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800369a:	4a04      	ldr	r2, [pc, #16]	@ (80036ac <__NVIC_SetPriorityGrouping+0x44>)
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	60d3      	str	r3, [r2, #12]
}
 80036a0:	bf00      	nop
 80036a2:	3714      	adds	r7, #20
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bc80      	pop	{r7}
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	e000ed00 	.word	0xe000ed00

080036b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036b4:	4b04      	ldr	r3, [pc, #16]	@ (80036c8 <__NVIC_GetPriorityGrouping+0x18>)
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	0a1b      	lsrs	r3, r3, #8
 80036ba:	f003 0307 	and.w	r3, r3, #7
}
 80036be:	4618      	mov	r0, r3
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bc80      	pop	{r7}
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	e000ed00 	.word	0xe000ed00

080036cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	4603      	mov	r3, r0
 80036d4:	6039      	str	r1, [r7, #0]
 80036d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	db0a      	blt.n	80036f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	b2da      	uxtb	r2, r3
 80036e4:	490c      	ldr	r1, [pc, #48]	@ (8003718 <__NVIC_SetPriority+0x4c>)
 80036e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ea:	0112      	lsls	r2, r2, #4
 80036ec:	b2d2      	uxtb	r2, r2
 80036ee:	440b      	add	r3, r1
 80036f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036f4:	e00a      	b.n	800370c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	b2da      	uxtb	r2, r3
 80036fa:	4908      	ldr	r1, [pc, #32]	@ (800371c <__NVIC_SetPriority+0x50>)
 80036fc:	79fb      	ldrb	r3, [r7, #7]
 80036fe:	f003 030f 	and.w	r3, r3, #15
 8003702:	3b04      	subs	r3, #4
 8003704:	0112      	lsls	r2, r2, #4
 8003706:	b2d2      	uxtb	r2, r2
 8003708:	440b      	add	r3, r1
 800370a:	761a      	strb	r2, [r3, #24]
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	bc80      	pop	{r7}
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	e000e100 	.word	0xe000e100
 800371c:	e000ed00 	.word	0xe000ed00

08003720 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003720:	b480      	push	{r7}
 8003722:	b089      	sub	sp, #36	@ 0x24
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f003 0307 	and.w	r3, r3, #7
 8003732:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	f1c3 0307 	rsb	r3, r3, #7
 800373a:	2b04      	cmp	r3, #4
 800373c:	bf28      	it	cs
 800373e:	2304      	movcs	r3, #4
 8003740:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	3304      	adds	r3, #4
 8003746:	2b06      	cmp	r3, #6
 8003748:	d902      	bls.n	8003750 <NVIC_EncodePriority+0x30>
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	3b03      	subs	r3, #3
 800374e:	e000      	b.n	8003752 <NVIC_EncodePriority+0x32>
 8003750:	2300      	movs	r3, #0
 8003752:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003754:	f04f 32ff 	mov.w	r2, #4294967295
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	fa02 f303 	lsl.w	r3, r2, r3
 800375e:	43da      	mvns	r2, r3
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	401a      	ands	r2, r3
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003768:	f04f 31ff 	mov.w	r1, #4294967295
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	fa01 f303 	lsl.w	r3, r1, r3
 8003772:	43d9      	mvns	r1, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003778:	4313      	orrs	r3, r2
         );
}
 800377a:	4618      	mov	r0, r3
 800377c:	3724      	adds	r7, #36	@ 0x24
 800377e:	46bd      	mov	sp, r7
 8003780:	bc80      	pop	{r7}
 8003782:	4770      	bx	lr

08003784 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	3b01      	subs	r3, #1
 8003790:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003794:	d301      	bcc.n	800379a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003796:	2301      	movs	r3, #1
 8003798:	e00f      	b.n	80037ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800379a:	4a0a      	ldr	r2, [pc, #40]	@ (80037c4 <SysTick_Config+0x40>)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	3b01      	subs	r3, #1
 80037a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037a2:	210f      	movs	r1, #15
 80037a4:	f04f 30ff 	mov.w	r0, #4294967295
 80037a8:	f7ff ff90 	bl	80036cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037ac:	4b05      	ldr	r3, [pc, #20]	@ (80037c4 <SysTick_Config+0x40>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037b2:	4b04      	ldr	r3, [pc, #16]	@ (80037c4 <SysTick_Config+0x40>)
 80037b4:	2207      	movs	r2, #7
 80037b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	e000e010 	.word	0xe000e010

080037c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f7ff ff49 	bl	8003668 <__NVIC_SetPriorityGrouping>
}
 80037d6:	bf00      	nop
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037de:	b580      	push	{r7, lr}
 80037e0:	b086      	sub	sp, #24
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	4603      	mov	r3, r0
 80037e6:	60b9      	str	r1, [r7, #8]
 80037e8:	607a      	str	r2, [r7, #4]
 80037ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037ec:	2300      	movs	r3, #0
 80037ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037f0:	f7ff ff5e 	bl	80036b0 <__NVIC_GetPriorityGrouping>
 80037f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	68b9      	ldr	r1, [r7, #8]
 80037fa:	6978      	ldr	r0, [r7, #20]
 80037fc:	f7ff ff90 	bl	8003720 <NVIC_EncodePriority>
 8003800:	4602      	mov	r2, r0
 8003802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003806:	4611      	mov	r1, r2
 8003808:	4618      	mov	r0, r3
 800380a:	f7ff ff5f 	bl	80036cc <__NVIC_SetPriority>
}
 800380e:	bf00      	nop
 8003810:	3718      	adds	r7, #24
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b082      	sub	sp, #8
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7ff ffb0 	bl	8003784 <SysTick_Config>
 8003824:	4603      	mov	r3, r0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
	...

08003830 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003830:	b480      	push	{r7}
 8003832:	b08b      	sub	sp, #44	@ 0x2c
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800383a:	2300      	movs	r3, #0
 800383c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800383e:	2300      	movs	r3, #0
 8003840:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003842:	e169      	b.n	8003b18 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003844:	2201      	movs	r2, #1
 8003846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003848:	fa02 f303 	lsl.w	r3, r2, r3
 800384c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	69fa      	ldr	r2, [r7, #28]
 8003854:	4013      	ands	r3, r2
 8003856:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	429a      	cmp	r2, r3
 800385e:	f040 8158 	bne.w	8003b12 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	4a9a      	ldr	r2, [pc, #616]	@ (8003ad0 <HAL_GPIO_Init+0x2a0>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d05e      	beq.n	800392a <HAL_GPIO_Init+0xfa>
 800386c:	4a98      	ldr	r2, [pc, #608]	@ (8003ad0 <HAL_GPIO_Init+0x2a0>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d875      	bhi.n	800395e <HAL_GPIO_Init+0x12e>
 8003872:	4a98      	ldr	r2, [pc, #608]	@ (8003ad4 <HAL_GPIO_Init+0x2a4>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d058      	beq.n	800392a <HAL_GPIO_Init+0xfa>
 8003878:	4a96      	ldr	r2, [pc, #600]	@ (8003ad4 <HAL_GPIO_Init+0x2a4>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d86f      	bhi.n	800395e <HAL_GPIO_Init+0x12e>
 800387e:	4a96      	ldr	r2, [pc, #600]	@ (8003ad8 <HAL_GPIO_Init+0x2a8>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d052      	beq.n	800392a <HAL_GPIO_Init+0xfa>
 8003884:	4a94      	ldr	r2, [pc, #592]	@ (8003ad8 <HAL_GPIO_Init+0x2a8>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d869      	bhi.n	800395e <HAL_GPIO_Init+0x12e>
 800388a:	4a94      	ldr	r2, [pc, #592]	@ (8003adc <HAL_GPIO_Init+0x2ac>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d04c      	beq.n	800392a <HAL_GPIO_Init+0xfa>
 8003890:	4a92      	ldr	r2, [pc, #584]	@ (8003adc <HAL_GPIO_Init+0x2ac>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d863      	bhi.n	800395e <HAL_GPIO_Init+0x12e>
 8003896:	4a92      	ldr	r2, [pc, #584]	@ (8003ae0 <HAL_GPIO_Init+0x2b0>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d046      	beq.n	800392a <HAL_GPIO_Init+0xfa>
 800389c:	4a90      	ldr	r2, [pc, #576]	@ (8003ae0 <HAL_GPIO_Init+0x2b0>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d85d      	bhi.n	800395e <HAL_GPIO_Init+0x12e>
 80038a2:	2b12      	cmp	r3, #18
 80038a4:	d82a      	bhi.n	80038fc <HAL_GPIO_Init+0xcc>
 80038a6:	2b12      	cmp	r3, #18
 80038a8:	d859      	bhi.n	800395e <HAL_GPIO_Init+0x12e>
 80038aa:	a201      	add	r2, pc, #4	@ (adr r2, 80038b0 <HAL_GPIO_Init+0x80>)
 80038ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b0:	0800392b 	.word	0x0800392b
 80038b4:	08003905 	.word	0x08003905
 80038b8:	08003917 	.word	0x08003917
 80038bc:	08003959 	.word	0x08003959
 80038c0:	0800395f 	.word	0x0800395f
 80038c4:	0800395f 	.word	0x0800395f
 80038c8:	0800395f 	.word	0x0800395f
 80038cc:	0800395f 	.word	0x0800395f
 80038d0:	0800395f 	.word	0x0800395f
 80038d4:	0800395f 	.word	0x0800395f
 80038d8:	0800395f 	.word	0x0800395f
 80038dc:	0800395f 	.word	0x0800395f
 80038e0:	0800395f 	.word	0x0800395f
 80038e4:	0800395f 	.word	0x0800395f
 80038e8:	0800395f 	.word	0x0800395f
 80038ec:	0800395f 	.word	0x0800395f
 80038f0:	0800395f 	.word	0x0800395f
 80038f4:	0800390d 	.word	0x0800390d
 80038f8:	08003921 	.word	0x08003921
 80038fc:	4a79      	ldr	r2, [pc, #484]	@ (8003ae4 <HAL_GPIO_Init+0x2b4>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d013      	beq.n	800392a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003902:	e02c      	b.n	800395e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	623b      	str	r3, [r7, #32]
          break;
 800390a:	e029      	b.n	8003960 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	3304      	adds	r3, #4
 8003912:	623b      	str	r3, [r7, #32]
          break;
 8003914:	e024      	b.n	8003960 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	3308      	adds	r3, #8
 800391c:	623b      	str	r3, [r7, #32]
          break;
 800391e:	e01f      	b.n	8003960 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	330c      	adds	r3, #12
 8003926:	623b      	str	r3, [r7, #32]
          break;
 8003928:	e01a      	b.n	8003960 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d102      	bne.n	8003938 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003932:	2304      	movs	r3, #4
 8003934:	623b      	str	r3, [r7, #32]
          break;
 8003936:	e013      	b.n	8003960 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d105      	bne.n	800394c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003940:	2308      	movs	r3, #8
 8003942:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	69fa      	ldr	r2, [r7, #28]
 8003948:	611a      	str	r2, [r3, #16]
          break;
 800394a:	e009      	b.n	8003960 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800394c:	2308      	movs	r3, #8
 800394e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	69fa      	ldr	r2, [r7, #28]
 8003954:	615a      	str	r2, [r3, #20]
          break;
 8003956:	e003      	b.n	8003960 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003958:	2300      	movs	r3, #0
 800395a:	623b      	str	r3, [r7, #32]
          break;
 800395c:	e000      	b.n	8003960 <HAL_GPIO_Init+0x130>
          break;
 800395e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	2bff      	cmp	r3, #255	@ 0xff
 8003964:	d801      	bhi.n	800396a <HAL_GPIO_Init+0x13a>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	e001      	b.n	800396e <HAL_GPIO_Init+0x13e>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	3304      	adds	r3, #4
 800396e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	2bff      	cmp	r3, #255	@ 0xff
 8003974:	d802      	bhi.n	800397c <HAL_GPIO_Init+0x14c>
 8003976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	e002      	b.n	8003982 <HAL_GPIO_Init+0x152>
 800397c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397e:	3b08      	subs	r3, #8
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	210f      	movs	r1, #15
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	fa01 f303 	lsl.w	r3, r1, r3
 8003990:	43db      	mvns	r3, r3
 8003992:	401a      	ands	r2, r3
 8003994:	6a39      	ldr	r1, [r7, #32]
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	fa01 f303 	lsl.w	r3, r1, r3
 800399c:	431a      	orrs	r2, r3
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 80b1 	beq.w	8003b12 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80039b0:	4b4d      	ldr	r3, [pc, #308]	@ (8003ae8 <HAL_GPIO_Init+0x2b8>)
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	4a4c      	ldr	r2, [pc, #304]	@ (8003ae8 <HAL_GPIO_Init+0x2b8>)
 80039b6:	f043 0301 	orr.w	r3, r3, #1
 80039ba:	6193      	str	r3, [r2, #24]
 80039bc:	4b4a      	ldr	r3, [pc, #296]	@ (8003ae8 <HAL_GPIO_Init+0x2b8>)
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	f003 0301 	and.w	r3, r3, #1
 80039c4:	60bb      	str	r3, [r7, #8]
 80039c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80039c8:	4a48      	ldr	r2, [pc, #288]	@ (8003aec <HAL_GPIO_Init+0x2bc>)
 80039ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039cc:	089b      	lsrs	r3, r3, #2
 80039ce:	3302      	adds	r3, #2
 80039d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80039d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d8:	f003 0303 	and.w	r3, r3, #3
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	220f      	movs	r2, #15
 80039e0:	fa02 f303 	lsl.w	r3, r2, r3
 80039e4:	43db      	mvns	r3, r3
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	4013      	ands	r3, r2
 80039ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a40      	ldr	r2, [pc, #256]	@ (8003af0 <HAL_GPIO_Init+0x2c0>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d013      	beq.n	8003a1c <HAL_GPIO_Init+0x1ec>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a3f      	ldr	r2, [pc, #252]	@ (8003af4 <HAL_GPIO_Init+0x2c4>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d00d      	beq.n	8003a18 <HAL_GPIO_Init+0x1e8>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a3e      	ldr	r2, [pc, #248]	@ (8003af8 <HAL_GPIO_Init+0x2c8>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d007      	beq.n	8003a14 <HAL_GPIO_Init+0x1e4>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a3d      	ldr	r2, [pc, #244]	@ (8003afc <HAL_GPIO_Init+0x2cc>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d101      	bne.n	8003a10 <HAL_GPIO_Init+0x1e0>
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e006      	b.n	8003a1e <HAL_GPIO_Init+0x1ee>
 8003a10:	2304      	movs	r3, #4
 8003a12:	e004      	b.n	8003a1e <HAL_GPIO_Init+0x1ee>
 8003a14:	2302      	movs	r3, #2
 8003a16:	e002      	b.n	8003a1e <HAL_GPIO_Init+0x1ee>
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e000      	b.n	8003a1e <HAL_GPIO_Init+0x1ee>
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a20:	f002 0203 	and.w	r2, r2, #3
 8003a24:	0092      	lsls	r2, r2, #2
 8003a26:	4093      	lsls	r3, r2
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003a2e:	492f      	ldr	r1, [pc, #188]	@ (8003aec <HAL_GPIO_Init+0x2bc>)
 8003a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a32:	089b      	lsrs	r3, r3, #2
 8003a34:	3302      	adds	r3, #2
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d006      	beq.n	8003a56 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003a48:	4b2d      	ldr	r3, [pc, #180]	@ (8003b00 <HAL_GPIO_Init+0x2d0>)
 8003a4a:	689a      	ldr	r2, [r3, #8]
 8003a4c:	492c      	ldr	r1, [pc, #176]	@ (8003b00 <HAL_GPIO_Init+0x2d0>)
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	608b      	str	r3, [r1, #8]
 8003a54:	e006      	b.n	8003a64 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003a56:	4b2a      	ldr	r3, [pc, #168]	@ (8003b00 <HAL_GPIO_Init+0x2d0>)
 8003a58:	689a      	ldr	r2, [r3, #8]
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	43db      	mvns	r3, r3
 8003a5e:	4928      	ldr	r1, [pc, #160]	@ (8003b00 <HAL_GPIO_Init+0x2d0>)
 8003a60:	4013      	ands	r3, r2
 8003a62:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d006      	beq.n	8003a7e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003a70:	4b23      	ldr	r3, [pc, #140]	@ (8003b00 <HAL_GPIO_Init+0x2d0>)
 8003a72:	68da      	ldr	r2, [r3, #12]
 8003a74:	4922      	ldr	r1, [pc, #136]	@ (8003b00 <HAL_GPIO_Init+0x2d0>)
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	60cb      	str	r3, [r1, #12]
 8003a7c:	e006      	b.n	8003a8c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003a7e:	4b20      	ldr	r3, [pc, #128]	@ (8003b00 <HAL_GPIO_Init+0x2d0>)
 8003a80:	68da      	ldr	r2, [r3, #12]
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	43db      	mvns	r3, r3
 8003a86:	491e      	ldr	r1, [pc, #120]	@ (8003b00 <HAL_GPIO_Init+0x2d0>)
 8003a88:	4013      	ands	r3, r2
 8003a8a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d006      	beq.n	8003aa6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003a98:	4b19      	ldr	r3, [pc, #100]	@ (8003b00 <HAL_GPIO_Init+0x2d0>)
 8003a9a:	685a      	ldr	r2, [r3, #4]
 8003a9c:	4918      	ldr	r1, [pc, #96]	@ (8003b00 <HAL_GPIO_Init+0x2d0>)
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	604b      	str	r3, [r1, #4]
 8003aa4:	e006      	b.n	8003ab4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003aa6:	4b16      	ldr	r3, [pc, #88]	@ (8003b00 <HAL_GPIO_Init+0x2d0>)
 8003aa8:	685a      	ldr	r2, [r3, #4]
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	43db      	mvns	r3, r3
 8003aae:	4914      	ldr	r1, [pc, #80]	@ (8003b00 <HAL_GPIO_Init+0x2d0>)
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d021      	beq.n	8003b04 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003ac0:	4b0f      	ldr	r3, [pc, #60]	@ (8003b00 <HAL_GPIO_Init+0x2d0>)
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	490e      	ldr	r1, [pc, #56]	@ (8003b00 <HAL_GPIO_Init+0x2d0>)
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	600b      	str	r3, [r1, #0]
 8003acc:	e021      	b.n	8003b12 <HAL_GPIO_Init+0x2e2>
 8003ace:	bf00      	nop
 8003ad0:	10320000 	.word	0x10320000
 8003ad4:	10310000 	.word	0x10310000
 8003ad8:	10220000 	.word	0x10220000
 8003adc:	10210000 	.word	0x10210000
 8003ae0:	10120000 	.word	0x10120000
 8003ae4:	10110000 	.word	0x10110000
 8003ae8:	40021000 	.word	0x40021000
 8003aec:	40010000 	.word	0x40010000
 8003af0:	40010800 	.word	0x40010800
 8003af4:	40010c00 	.word	0x40010c00
 8003af8:	40011000 	.word	0x40011000
 8003afc:	40011400 	.word	0x40011400
 8003b00:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003b04:	4b0b      	ldr	r3, [pc, #44]	@ (8003b34 <HAL_GPIO_Init+0x304>)
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	43db      	mvns	r3, r3
 8003b0c:	4909      	ldr	r1, [pc, #36]	@ (8003b34 <HAL_GPIO_Init+0x304>)
 8003b0e:	4013      	ands	r3, r2
 8003b10:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b14:	3301      	adds	r3, #1
 8003b16:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f47f ae8e 	bne.w	8003844 <HAL_GPIO_Init+0x14>
  }
}
 8003b28:	bf00      	nop
 8003b2a:	bf00      	nop
 8003b2c:	372c      	adds	r7, #44	@ 0x2c
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bc80      	pop	{r7}
 8003b32:	4770      	bx	lr
 8003b34:	40010400 	.word	0x40010400

08003b38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	460b      	mov	r3, r1
 8003b42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	887b      	ldrh	r3, [r7, #2]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d002      	beq.n	8003b56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b50:	2301      	movs	r3, #1
 8003b52:	73fb      	strb	r3, [r7, #15]
 8003b54:	e001      	b.n	8003b5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b56:	2300      	movs	r3, #0
 8003b58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3714      	adds	r7, #20
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bc80      	pop	{r7}
 8003b64:	4770      	bx	lr

08003b66 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b66:	b480      	push	{r7}
 8003b68:	b083      	sub	sp, #12
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
 8003b6e:	460b      	mov	r3, r1
 8003b70:	807b      	strh	r3, [r7, #2]
 8003b72:	4613      	mov	r3, r2
 8003b74:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b76:	787b      	ldrb	r3, [r7, #1]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d003      	beq.n	8003b84 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b7c:	887a      	ldrh	r2, [r7, #2]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003b82:	e003      	b.n	8003b8c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003b84:	887b      	ldrh	r3, [r7, #2]
 8003b86:	041a      	lsls	r2, r3, #16
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	611a      	str	r2, [r3, #16]
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bc80      	pop	{r7}
 8003b94:	4770      	bx	lr

08003b96 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003b96:	b480      	push	{r7}
 8003b98:	b085      	sub	sp, #20
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ba8:	887a      	ldrh	r2, [r7, #2]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	4013      	ands	r3, r2
 8003bae:	041a      	lsls	r2, r3, #16
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	43d9      	mvns	r1, r3
 8003bb4:	887b      	ldrh	r3, [r7, #2]
 8003bb6:	400b      	ands	r3, r1
 8003bb8:	431a      	orrs	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	611a      	str	r2, [r3, #16]
}
 8003bbe:	bf00      	nop
 8003bc0:	3714      	adds	r7, #20
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bc80      	pop	{r7}
 8003bc6:	4770      	bx	lr

08003bc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e12b      	b.n	8003e32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d106      	bne.n	8003bf4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f7ff faf2 	bl	80031d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2224      	movs	r2, #36	@ 0x24
 8003bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f022 0201 	bic.w	r2, r2, #1
 8003c0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c2c:	f001 fbca 	bl	80053c4 <HAL_RCC_GetPCLK1Freq>
 8003c30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	4a81      	ldr	r2, [pc, #516]	@ (8003e3c <HAL_I2C_Init+0x274>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d807      	bhi.n	8003c4c <HAL_I2C_Init+0x84>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	4a80      	ldr	r2, [pc, #512]	@ (8003e40 <HAL_I2C_Init+0x278>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	bf94      	ite	ls
 8003c44:	2301      	movls	r3, #1
 8003c46:	2300      	movhi	r3, #0
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	e006      	b.n	8003c5a <HAL_I2C_Init+0x92>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	4a7d      	ldr	r2, [pc, #500]	@ (8003e44 <HAL_I2C_Init+0x27c>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	bf94      	ite	ls
 8003c54:	2301      	movls	r3, #1
 8003c56:	2300      	movhi	r3, #0
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e0e7      	b.n	8003e32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	4a78      	ldr	r2, [pc, #480]	@ (8003e48 <HAL_I2C_Init+0x280>)
 8003c66:	fba2 2303 	umull	r2, r3, r2, r3
 8003c6a:	0c9b      	lsrs	r3, r3, #18
 8003c6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68ba      	ldr	r2, [r7, #8]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	6a1b      	ldr	r3, [r3, #32]
 8003c88:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	4a6a      	ldr	r2, [pc, #424]	@ (8003e3c <HAL_I2C_Init+0x274>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d802      	bhi.n	8003c9c <HAL_I2C_Init+0xd4>
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	e009      	b.n	8003cb0 <HAL_I2C_Init+0xe8>
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003ca2:	fb02 f303 	mul.w	r3, r2, r3
 8003ca6:	4a69      	ldr	r2, [pc, #420]	@ (8003e4c <HAL_I2C_Init+0x284>)
 8003ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cac:	099b      	lsrs	r3, r3, #6
 8003cae:	3301      	adds	r3, #1
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	6812      	ldr	r2, [r2, #0]
 8003cb4:	430b      	orrs	r3, r1
 8003cb6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003cc2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	495c      	ldr	r1, [pc, #368]	@ (8003e3c <HAL_I2C_Init+0x274>)
 8003ccc:	428b      	cmp	r3, r1
 8003cce:	d819      	bhi.n	8003d04 <HAL_I2C_Init+0x13c>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	1e59      	subs	r1, r3, #1
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cde:	1c59      	adds	r1, r3, #1
 8003ce0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003ce4:	400b      	ands	r3, r1
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00a      	beq.n	8003d00 <HAL_I2C_Init+0x138>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	1e59      	subs	r1, r3, #1
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	005b      	lsls	r3, r3, #1
 8003cf4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cfe:	e051      	b.n	8003da4 <HAL_I2C_Init+0x1dc>
 8003d00:	2304      	movs	r3, #4
 8003d02:	e04f      	b.n	8003da4 <HAL_I2C_Init+0x1dc>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d111      	bne.n	8003d30 <HAL_I2C_Init+0x168>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	1e58      	subs	r0, r3, #1
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6859      	ldr	r1, [r3, #4]
 8003d14:	460b      	mov	r3, r1
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	440b      	add	r3, r1
 8003d1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d1e:	3301      	adds	r3, #1
 8003d20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	bf0c      	ite	eq
 8003d28:	2301      	moveq	r3, #1
 8003d2a:	2300      	movne	r3, #0
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	e012      	b.n	8003d56 <HAL_I2C_Init+0x18e>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	1e58      	subs	r0, r3, #1
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6859      	ldr	r1, [r3, #4]
 8003d38:	460b      	mov	r3, r1
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	440b      	add	r3, r1
 8003d3e:	0099      	lsls	r1, r3, #2
 8003d40:	440b      	add	r3, r1
 8003d42:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d46:	3301      	adds	r3, #1
 8003d48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	bf0c      	ite	eq
 8003d50:	2301      	moveq	r3, #1
 8003d52:	2300      	movne	r3, #0
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d001      	beq.n	8003d5e <HAL_I2C_Init+0x196>
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e022      	b.n	8003da4 <HAL_I2C_Init+0x1dc>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10e      	bne.n	8003d84 <HAL_I2C_Init+0x1bc>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	1e58      	subs	r0, r3, #1
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6859      	ldr	r1, [r3, #4]
 8003d6e:	460b      	mov	r3, r1
 8003d70:	005b      	lsls	r3, r3, #1
 8003d72:	440b      	add	r3, r1
 8003d74:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d78:	3301      	adds	r3, #1
 8003d7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d82:	e00f      	b.n	8003da4 <HAL_I2C_Init+0x1dc>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	1e58      	subs	r0, r3, #1
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6859      	ldr	r1, [r3, #4]
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	440b      	add	r3, r1
 8003d92:	0099      	lsls	r1, r3, #2
 8003d94:	440b      	add	r3, r1
 8003d96:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003da0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003da4:	6879      	ldr	r1, [r7, #4]
 8003da6:	6809      	ldr	r1, [r1, #0]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	69da      	ldr	r2, [r3, #28]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003dd2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	6911      	ldr	r1, [r2, #16]
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	68d2      	ldr	r2, [r2, #12]
 8003dde:	4311      	orrs	r1, r2
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	6812      	ldr	r2, [r2, #0]
 8003de4:	430b      	orrs	r3, r1
 8003de6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	695a      	ldr	r2, [r3, #20]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	430a      	orrs	r2, r1
 8003e02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f042 0201 	orr.w	r2, r2, #1
 8003e12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2220      	movs	r2, #32
 8003e1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	000186a0 	.word	0x000186a0
 8003e40:	001e847f 	.word	0x001e847f
 8003e44:	003d08ff 	.word	0x003d08ff
 8003e48:	431bde83 	.word	0x431bde83
 8003e4c:	10624dd3 	.word	0x10624dd3

08003e50 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b088      	sub	sp, #32
 8003e54:	af02      	add	r7, sp, #8
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	607a      	str	r2, [r7, #4]
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	817b      	strh	r3, [r7, #10]
 8003e60:	4613      	mov	r3, r2
 8003e62:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e64:	f7ff fbd2 	bl	800360c <HAL_GetTick>
 8003e68:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b20      	cmp	r3, #32
 8003e74:	f040 80e0 	bne.w	8004038 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	9300      	str	r3, [sp, #0]
 8003e7c:	2319      	movs	r3, #25
 8003e7e:	2201      	movs	r2, #1
 8003e80:	4970      	ldr	r1, [pc, #448]	@ (8004044 <HAL_I2C_Master_Transmit+0x1f4>)
 8003e82:	68f8      	ldr	r0, [r7, #12]
 8003e84:	f000 fc9e 	bl	80047c4 <I2C_WaitOnFlagUntilTimeout>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003e8e:	2302      	movs	r3, #2
 8003e90:	e0d3      	b.n	800403a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d101      	bne.n	8003ea0 <HAL_I2C_Master_Transmit+0x50>
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	e0cc      	b.n	800403a <HAL_I2C_Master_Transmit+0x1ea>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d007      	beq.n	8003ec6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f042 0201 	orr.w	r2, r2, #1
 8003ec4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ed4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2221      	movs	r2, #33	@ 0x21
 8003eda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2210      	movs	r2, #16
 8003ee2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	893a      	ldrh	r2, [r7, #8]
 8003ef6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	4a50      	ldr	r2, [pc, #320]	@ (8004048 <HAL_I2C_Master_Transmit+0x1f8>)
 8003f06:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003f08:	8979      	ldrh	r1, [r7, #10]
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	6a3a      	ldr	r2, [r7, #32]
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f000 fb08 	bl	8004524 <I2C_MasterRequestWrite>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e08d      	b.n	800403a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f1e:	2300      	movs	r3, #0
 8003f20:	613b      	str	r3, [r7, #16]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	613b      	str	r3, [r7, #16]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	613b      	str	r3, [r7, #16]
 8003f32:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003f34:	e066      	b.n	8004004 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	6a39      	ldr	r1, [r7, #32]
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f000 fd5c 	bl	80049f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00d      	beq.n	8003f62 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f4a:	2b04      	cmp	r3, #4
 8003f4c:	d107      	bne.n	8003f5e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f5c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e06b      	b.n	800403a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f66:	781a      	ldrb	r2, [r3, #0]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f72:	1c5a      	adds	r2, r3, #1
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	f003 0304 	and.w	r3, r3, #4
 8003f9c:	2b04      	cmp	r3, #4
 8003f9e:	d11b      	bne.n	8003fd8 <HAL_I2C_Master_Transmit+0x188>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d017      	beq.n	8003fd8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fac:	781a      	ldrb	r2, [r3, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb8:	1c5a      	adds	r2, r3, #1
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	6a39      	ldr	r1, [r7, #32]
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f000 fd53 	bl	8004a88 <I2C_WaitOnBTFFlagUntilTimeout>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00d      	beq.n	8004004 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fec:	2b04      	cmp	r3, #4
 8003fee:	d107      	bne.n	8004000 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ffe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e01a      	b.n	800403a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004008:	2b00      	cmp	r3, #0
 800400a:	d194      	bne.n	8003f36 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800401a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2220      	movs	r2, #32
 8004020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004034:	2300      	movs	r3, #0
 8004036:	e000      	b.n	800403a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004038:	2302      	movs	r3, #2
  }
}
 800403a:	4618      	mov	r0, r3
 800403c:	3718      	adds	r7, #24
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	00100002 	.word	0x00100002
 8004048:	ffff0000 	.word	0xffff0000

0800404c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b08c      	sub	sp, #48	@ 0x30
 8004050:	af02      	add	r7, sp, #8
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	607a      	str	r2, [r7, #4]
 8004056:	461a      	mov	r2, r3
 8004058:	460b      	mov	r3, r1
 800405a:	817b      	strh	r3, [r7, #10]
 800405c:	4613      	mov	r3, r2
 800405e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004060:	2300      	movs	r3, #0
 8004062:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004064:	f7ff fad2 	bl	800360c <HAL_GetTick>
 8004068:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004070:	b2db      	uxtb	r3, r3
 8004072:	2b20      	cmp	r3, #32
 8004074:	f040 824b 	bne.w	800450e <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407a:	9300      	str	r3, [sp, #0]
 800407c:	2319      	movs	r3, #25
 800407e:	2201      	movs	r2, #1
 8004080:	497f      	ldr	r1, [pc, #508]	@ (8004280 <HAL_I2C_Master_Receive+0x234>)
 8004082:	68f8      	ldr	r0, [r7, #12]
 8004084:	f000 fb9e 	bl	80047c4 <I2C_WaitOnFlagUntilTimeout>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d001      	beq.n	8004092 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800408e:	2302      	movs	r3, #2
 8004090:	e23e      	b.n	8004510 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004098:	2b01      	cmp	r3, #1
 800409a:	d101      	bne.n	80040a0 <HAL_I2C_Master_Receive+0x54>
 800409c:	2302      	movs	r3, #2
 800409e:	e237      	b.n	8004510 <HAL_I2C_Master_Receive+0x4c4>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d007      	beq.n	80040c6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f042 0201 	orr.w	r2, r2, #1
 80040c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2222      	movs	r2, #34	@ 0x22
 80040da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2210      	movs	r2, #16
 80040e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2200      	movs	r2, #0
 80040ea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	893a      	ldrh	r2, [r7, #8]
 80040f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040fc:	b29a      	uxth	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	4a5f      	ldr	r2, [pc, #380]	@ (8004284 <HAL_I2C_Master_Receive+0x238>)
 8004106:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004108:	8979      	ldrh	r1, [r7, #10]
 800410a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800410c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800410e:	68f8      	ldr	r0, [r7, #12]
 8004110:	f000 fa8a 	bl	8004628 <I2C_MasterRequestRead>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d001      	beq.n	800411e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e1f8      	b.n	8004510 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004122:	2b00      	cmp	r3, #0
 8004124:	d113      	bne.n	800414e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004126:	2300      	movs	r3, #0
 8004128:	61fb      	str	r3, [r7, #28]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	61fb      	str	r3, [r7, #28]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	61fb      	str	r3, [r7, #28]
 800413a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800414a:	601a      	str	r2, [r3, #0]
 800414c:	e1cc      	b.n	80044e8 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004152:	2b01      	cmp	r3, #1
 8004154:	d11e      	bne.n	8004194 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004164:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004166:	b672      	cpsid	i
}
 8004168:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800416a:	2300      	movs	r3, #0
 800416c:	61bb      	str	r3, [r7, #24]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	61bb      	str	r3, [r7, #24]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	61bb      	str	r3, [r7, #24]
 800417e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800418e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004190:	b662      	cpsie	i
}
 8004192:	e035      	b.n	8004200 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004198:	2b02      	cmp	r3, #2
 800419a:	d11e      	bne.n	80041da <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041aa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80041ac:	b672      	cpsid	i
}
 80041ae:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041b0:	2300      	movs	r3, #0
 80041b2:	617b      	str	r3, [r7, #20]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	617b      	str	r3, [r7, #20]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	617b      	str	r3, [r7, #20]
 80041c4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041d4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80041d6:	b662      	cpsie	i
}
 80041d8:	e012      	b.n	8004200 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80041e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ea:	2300      	movs	r3, #0
 80041ec:	613b      	str	r3, [r7, #16]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	613b      	str	r3, [r7, #16]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	613b      	str	r3, [r7, #16]
 80041fe:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004200:	e172      	b.n	80044e8 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004206:	2b03      	cmp	r3, #3
 8004208:	f200 811f 	bhi.w	800444a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004210:	2b01      	cmp	r3, #1
 8004212:	d123      	bne.n	800425c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004214:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004216:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f000 fc7d 	bl	8004b18 <I2C_WaitOnRXNEFlagUntilTimeout>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d001      	beq.n	8004228 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e173      	b.n	8004510 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	691a      	ldr	r2, [r3, #16]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004232:	b2d2      	uxtb	r2, r2
 8004234:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800423a:	1c5a      	adds	r2, r3, #1
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004244:	3b01      	subs	r3, #1
 8004246:	b29a      	uxth	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004250:	b29b      	uxth	r3, r3
 8004252:	3b01      	subs	r3, #1
 8004254:	b29a      	uxth	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800425a:	e145      	b.n	80044e8 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004260:	2b02      	cmp	r3, #2
 8004262:	d152      	bne.n	800430a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004266:	9300      	str	r3, [sp, #0]
 8004268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800426a:	2200      	movs	r2, #0
 800426c:	4906      	ldr	r1, [pc, #24]	@ (8004288 <HAL_I2C_Master_Receive+0x23c>)
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f000 faa8 	bl	80047c4 <I2C_WaitOnFlagUntilTimeout>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d008      	beq.n	800428c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e148      	b.n	8004510 <HAL_I2C_Master_Receive+0x4c4>
 800427e:	bf00      	nop
 8004280:	00100002 	.word	0x00100002
 8004284:	ffff0000 	.word	0xffff0000
 8004288:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800428c:	b672      	cpsid	i
}
 800428e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800429e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	691a      	ldr	r2, [r3, #16]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042aa:	b2d2      	uxtb	r2, r2
 80042ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b2:	1c5a      	adds	r2, r3, #1
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042bc:	3b01      	subs	r3, #1
 80042be:	b29a      	uxth	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	3b01      	subs	r3, #1
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80042d2:	b662      	cpsie	i
}
 80042d4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	691a      	ldr	r2, [r3, #16]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e0:	b2d2      	uxtb	r2, r2
 80042e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e8:	1c5a      	adds	r2, r3, #1
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042f2:	3b01      	subs	r3, #1
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042fe:	b29b      	uxth	r3, r3
 8004300:	3b01      	subs	r3, #1
 8004302:	b29a      	uxth	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004308:	e0ee      	b.n	80044e8 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800430a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430c:	9300      	str	r3, [sp, #0]
 800430e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004310:	2200      	movs	r2, #0
 8004312:	4981      	ldr	r1, [pc, #516]	@ (8004518 <HAL_I2C_Master_Receive+0x4cc>)
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f000 fa55 	bl	80047c4 <I2C_WaitOnFlagUntilTimeout>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d001      	beq.n	8004324 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e0f5      	b.n	8004510 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004332:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004334:	b672      	cpsid	i
}
 8004336:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	691a      	ldr	r2, [r3, #16]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004342:	b2d2      	uxtb	r2, r2
 8004344:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800434a:	1c5a      	adds	r2, r3, #1
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004354:	3b01      	subs	r3, #1
 8004356:	b29a      	uxth	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004360:	b29b      	uxth	r3, r3
 8004362:	3b01      	subs	r3, #1
 8004364:	b29a      	uxth	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800436a:	4b6c      	ldr	r3, [pc, #432]	@ (800451c <HAL_I2C_Master_Receive+0x4d0>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	08db      	lsrs	r3, r3, #3
 8004370:	4a6b      	ldr	r2, [pc, #428]	@ (8004520 <HAL_I2C_Master_Receive+0x4d4>)
 8004372:	fba2 2303 	umull	r2, r3, r2, r3
 8004376:	0a1a      	lsrs	r2, r3, #8
 8004378:	4613      	mov	r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4413      	add	r3, r2
 800437e:	00da      	lsls	r2, r3, #3
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004384:	6a3b      	ldr	r3, [r7, #32]
 8004386:	3b01      	subs	r3, #1
 8004388:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800438a:	6a3b      	ldr	r3, [r7, #32]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d118      	bne.n	80043c2 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2220      	movs	r2, #32
 800439a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043aa:	f043 0220 	orr.w	r2, r3, #32
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80043b2:	b662      	cpsie	i
}
 80043b4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e0a6      	b.n	8004510 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	f003 0304 	and.w	r3, r3, #4
 80043cc:	2b04      	cmp	r3, #4
 80043ce:	d1d9      	bne.n	8004384 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	691a      	ldr	r2, [r3, #16]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ea:	b2d2      	uxtb	r2, r2
 80043ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f2:	1c5a      	adds	r2, r3, #1
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043fc:	3b01      	subs	r3, #1
 80043fe:	b29a      	uxth	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004408:	b29b      	uxth	r3, r3
 800440a:	3b01      	subs	r3, #1
 800440c:	b29a      	uxth	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004412:	b662      	cpsie	i
}
 8004414:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	691a      	ldr	r2, [r3, #16]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004420:	b2d2      	uxtb	r2, r2
 8004422:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004428:	1c5a      	adds	r2, r3, #1
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004432:	3b01      	subs	r3, #1
 8004434:	b29a      	uxth	r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800443e:	b29b      	uxth	r3, r3
 8004440:	3b01      	subs	r3, #1
 8004442:	b29a      	uxth	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004448:	e04e      	b.n	80044e8 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800444a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800444c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f000 fb62 	bl	8004b18 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d001      	beq.n	800445e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e058      	b.n	8004510 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	691a      	ldr	r2, [r3, #16]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004468:	b2d2      	uxtb	r2, r2
 800446a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004470:	1c5a      	adds	r2, r3, #1
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800447a:	3b01      	subs	r3, #1
 800447c:	b29a      	uxth	r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004486:	b29b      	uxth	r3, r3
 8004488:	3b01      	subs	r3, #1
 800448a:	b29a      	uxth	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	f003 0304 	and.w	r3, r3, #4
 800449a:	2b04      	cmp	r3, #4
 800449c:	d124      	bne.n	80044e8 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044a2:	2b03      	cmp	r3, #3
 80044a4:	d107      	bne.n	80044b6 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044b4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	691a      	ldr	r2, [r3, #16]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c0:	b2d2      	uxtb	r2, r2
 80044c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c8:	1c5a      	adds	r2, r3, #1
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044d2:	3b01      	subs	r3, #1
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044de:	b29b      	uxth	r3, r3
 80044e0:	3b01      	subs	r3, #1
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f47f ae88 	bne.w	8004202 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2220      	movs	r2, #32
 80044f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800450a:	2300      	movs	r3, #0
 800450c:	e000      	b.n	8004510 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800450e:	2302      	movs	r3, #2
  }
}
 8004510:	4618      	mov	r0, r3
 8004512:	3728      	adds	r7, #40	@ 0x28
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	00010004 	.word	0x00010004
 800451c:	20000064 	.word	0x20000064
 8004520:	14f8b589 	.word	0x14f8b589

08004524 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b088      	sub	sp, #32
 8004528:	af02      	add	r7, sp, #8
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	607a      	str	r2, [r7, #4]
 800452e:	603b      	str	r3, [r7, #0]
 8004530:	460b      	mov	r3, r1
 8004532:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004538:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	2b08      	cmp	r3, #8
 800453e:	d006      	beq.n	800454e <I2C_MasterRequestWrite+0x2a>
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d003      	beq.n	800454e <I2C_MasterRequestWrite+0x2a>
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800454c:	d108      	bne.n	8004560 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800455c:	601a      	str	r2, [r3, #0]
 800455e:	e00b      	b.n	8004578 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004564:	2b12      	cmp	r3, #18
 8004566:	d107      	bne.n	8004578 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004576:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	9300      	str	r3, [sp, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004584:	68f8      	ldr	r0, [r7, #12]
 8004586:	f000 f91d 	bl	80047c4 <I2C_WaitOnFlagUntilTimeout>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00d      	beq.n	80045ac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800459a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800459e:	d103      	bne.n	80045a8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045a6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e035      	b.n	8004618 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045b4:	d108      	bne.n	80045c8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045b6:	897b      	ldrh	r3, [r7, #10]
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	461a      	mov	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80045c4:	611a      	str	r2, [r3, #16]
 80045c6:	e01b      	b.n	8004600 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80045c8:	897b      	ldrh	r3, [r7, #10]
 80045ca:	11db      	asrs	r3, r3, #7
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	f003 0306 	and.w	r3, r3, #6
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	f063 030f 	orn	r3, r3, #15
 80045d8:	b2da      	uxtb	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	490e      	ldr	r1, [pc, #56]	@ (8004620 <I2C_MasterRequestWrite+0xfc>)
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f000 f966 	bl	80048b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d001      	beq.n	80045f6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e010      	b.n	8004618 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80045f6:	897b      	ldrh	r3, [r7, #10]
 80045f8:	b2da      	uxtb	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	4907      	ldr	r1, [pc, #28]	@ (8004624 <I2C_MasterRequestWrite+0x100>)
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f000 f956 	bl	80048b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d001      	beq.n	8004616 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e000      	b.n	8004618 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3718      	adds	r7, #24
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	00010008 	.word	0x00010008
 8004624:	00010002 	.word	0x00010002

08004628 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b088      	sub	sp, #32
 800462c:	af02      	add	r7, sp, #8
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	607a      	str	r2, [r7, #4]
 8004632:	603b      	str	r3, [r7, #0]
 8004634:	460b      	mov	r3, r1
 8004636:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800463c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800464c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	2b08      	cmp	r3, #8
 8004652:	d006      	beq.n	8004662 <I2C_MasterRequestRead+0x3a>
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d003      	beq.n	8004662 <I2C_MasterRequestRead+0x3a>
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004660:	d108      	bne.n	8004674 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004670:	601a      	str	r2, [r3, #0]
 8004672:	e00b      	b.n	800468c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004678:	2b11      	cmp	r3, #17
 800467a:	d107      	bne.n	800468c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800468a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	9300      	str	r3, [sp, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	f000 f893 	bl	80047c4 <I2C_WaitOnFlagUntilTimeout>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00d      	beq.n	80046c0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046b2:	d103      	bne.n	80046bc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046ba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e079      	b.n	80047b4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80046c8:	d108      	bne.n	80046dc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80046ca:	897b      	ldrh	r3, [r7, #10]
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	f043 0301 	orr.w	r3, r3, #1
 80046d2:	b2da      	uxtb	r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	611a      	str	r2, [r3, #16]
 80046da:	e05f      	b.n	800479c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80046dc:	897b      	ldrh	r3, [r7, #10]
 80046de:	11db      	asrs	r3, r3, #7
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	f003 0306 	and.w	r3, r3, #6
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	f063 030f 	orn	r3, r3, #15
 80046ec:	b2da      	uxtb	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	4930      	ldr	r1, [pc, #192]	@ (80047bc <I2C_MasterRequestRead+0x194>)
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f000 f8dc 	bl	80048b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e054      	b.n	80047b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800470a:	897b      	ldrh	r3, [r7, #10]
 800470c:	b2da      	uxtb	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	4929      	ldr	r1, [pc, #164]	@ (80047c0 <I2C_MasterRequestRead+0x198>)
 800471a:	68f8      	ldr	r0, [r7, #12]
 800471c:	f000 f8cc 	bl	80048b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e044      	b.n	80047b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800472a:	2300      	movs	r3, #0
 800472c:	613b      	str	r3, [r7, #16]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	695b      	ldr	r3, [r3, #20]
 8004734:	613b      	str	r3, [r7, #16]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	613b      	str	r3, [r7, #16]
 800473e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800474e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	9300      	str	r3, [sp, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800475c:	68f8      	ldr	r0, [r7, #12]
 800475e:	f000 f831 	bl	80047c4 <I2C_WaitOnFlagUntilTimeout>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00d      	beq.n	8004784 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004772:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004776:	d103      	bne.n	8004780 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800477e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e017      	b.n	80047b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004784:	897b      	ldrh	r3, [r7, #10]
 8004786:	11db      	asrs	r3, r3, #7
 8004788:	b2db      	uxtb	r3, r3
 800478a:	f003 0306 	and.w	r3, r3, #6
 800478e:	b2db      	uxtb	r3, r3
 8004790:	f063 030e 	orn	r3, r3, #14
 8004794:	b2da      	uxtb	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	4907      	ldr	r1, [pc, #28]	@ (80047c0 <I2C_MasterRequestRead+0x198>)
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f000 f888 	bl	80048b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d001      	beq.n	80047b2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e000      	b.n	80047b4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3718      	adds	r7, #24
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	00010008 	.word	0x00010008
 80047c0:	00010002 	.word	0x00010002

080047c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	603b      	str	r3, [r7, #0]
 80047d0:	4613      	mov	r3, r2
 80047d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047d4:	e048      	b.n	8004868 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047dc:	d044      	beq.n	8004868 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047de:	f7fe ff15 	bl	800360c <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	683a      	ldr	r2, [r7, #0]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d302      	bcc.n	80047f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d139      	bne.n	8004868 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	0c1b      	lsrs	r3, r3, #16
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d10d      	bne.n	800481a <I2C_WaitOnFlagUntilTimeout+0x56>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	43da      	mvns	r2, r3
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	4013      	ands	r3, r2
 800480a:	b29b      	uxth	r3, r3
 800480c:	2b00      	cmp	r3, #0
 800480e:	bf0c      	ite	eq
 8004810:	2301      	moveq	r3, #1
 8004812:	2300      	movne	r3, #0
 8004814:	b2db      	uxtb	r3, r3
 8004816:	461a      	mov	r2, r3
 8004818:	e00c      	b.n	8004834 <I2C_WaitOnFlagUntilTimeout+0x70>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	43da      	mvns	r2, r3
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	4013      	ands	r3, r2
 8004826:	b29b      	uxth	r3, r3
 8004828:	2b00      	cmp	r3, #0
 800482a:	bf0c      	ite	eq
 800482c:	2301      	moveq	r3, #1
 800482e:	2300      	movne	r3, #0
 8004830:	b2db      	uxtb	r3, r3
 8004832:	461a      	mov	r2, r3
 8004834:	79fb      	ldrb	r3, [r7, #7]
 8004836:	429a      	cmp	r2, r3
 8004838:	d116      	bne.n	8004868 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2220      	movs	r2, #32
 8004844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2200      	movs	r2, #0
 800484c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004854:	f043 0220 	orr.w	r2, r3, #32
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e023      	b.n	80048b0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	0c1b      	lsrs	r3, r3, #16
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b01      	cmp	r3, #1
 8004870:	d10d      	bne.n	800488e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	695b      	ldr	r3, [r3, #20]
 8004878:	43da      	mvns	r2, r3
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	4013      	ands	r3, r2
 800487e:	b29b      	uxth	r3, r3
 8004880:	2b00      	cmp	r3, #0
 8004882:	bf0c      	ite	eq
 8004884:	2301      	moveq	r3, #1
 8004886:	2300      	movne	r3, #0
 8004888:	b2db      	uxtb	r3, r3
 800488a:	461a      	mov	r2, r3
 800488c:	e00c      	b.n	80048a8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	43da      	mvns	r2, r3
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	4013      	ands	r3, r2
 800489a:	b29b      	uxth	r3, r3
 800489c:	2b00      	cmp	r3, #0
 800489e:	bf0c      	ite	eq
 80048a0:	2301      	moveq	r3, #1
 80048a2:	2300      	movne	r3, #0
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	461a      	mov	r2, r3
 80048a8:	79fb      	ldrb	r3, [r7, #7]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d093      	beq.n	80047d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3710      	adds	r7, #16
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	607a      	str	r2, [r7, #4]
 80048c4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048c6:	e071      	b.n	80049ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048d6:	d123      	bne.n	8004920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048e6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80048f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2220      	movs	r2, #32
 80048fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490c:	f043 0204 	orr.w	r2, r3, #4
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e067      	b.n	80049f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004926:	d041      	beq.n	80049ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004928:	f7fe fe70 	bl	800360c <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	429a      	cmp	r2, r3
 8004936:	d302      	bcc.n	800493e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d136      	bne.n	80049ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	0c1b      	lsrs	r3, r3, #16
 8004942:	b2db      	uxtb	r3, r3
 8004944:	2b01      	cmp	r3, #1
 8004946:	d10c      	bne.n	8004962 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	43da      	mvns	r2, r3
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	4013      	ands	r3, r2
 8004954:	b29b      	uxth	r3, r3
 8004956:	2b00      	cmp	r3, #0
 8004958:	bf14      	ite	ne
 800495a:	2301      	movne	r3, #1
 800495c:	2300      	moveq	r3, #0
 800495e:	b2db      	uxtb	r3, r3
 8004960:	e00b      	b.n	800497a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	699b      	ldr	r3, [r3, #24]
 8004968:	43da      	mvns	r2, r3
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	4013      	ands	r3, r2
 800496e:	b29b      	uxth	r3, r3
 8004970:	2b00      	cmp	r3, #0
 8004972:	bf14      	ite	ne
 8004974:	2301      	movne	r3, #1
 8004976:	2300      	moveq	r3, #0
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b00      	cmp	r3, #0
 800497c:	d016      	beq.n	80049ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2220      	movs	r2, #32
 8004988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004998:	f043 0220 	orr.w	r2, r3, #32
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e021      	b.n	80049f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	0c1b      	lsrs	r3, r3, #16
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d10c      	bne.n	80049d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	695b      	ldr	r3, [r3, #20]
 80049bc:	43da      	mvns	r2, r3
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	4013      	ands	r3, r2
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	bf14      	ite	ne
 80049c8:	2301      	movne	r3, #1
 80049ca:	2300      	moveq	r3, #0
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	e00b      	b.n	80049e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	699b      	ldr	r3, [r3, #24]
 80049d6:	43da      	mvns	r2, r3
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	4013      	ands	r3, r2
 80049dc:	b29b      	uxth	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	bf14      	ite	ne
 80049e2:	2301      	movne	r3, #1
 80049e4:	2300      	moveq	r3, #0
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f47f af6d 	bne.w	80048c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3710      	adds	r7, #16
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a04:	e034      	b.n	8004a70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f000 f8e3 	bl	8004bd2 <I2C_IsAcknowledgeFailed>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e034      	b.n	8004a80 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a1c:	d028      	beq.n	8004a70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a1e:	f7fe fdf5 	bl	800360c <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	68ba      	ldr	r2, [r7, #8]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d302      	bcc.n	8004a34 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d11d      	bne.n	8004a70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a3e:	2b80      	cmp	r3, #128	@ 0x80
 8004a40:	d016      	beq.n	8004a70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2220      	movs	r2, #32
 8004a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a5c:	f043 0220 	orr.w	r2, r3, #32
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e007      	b.n	8004a80 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a7a:	2b80      	cmp	r3, #128	@ 0x80
 8004a7c:	d1c3      	bne.n	8004a06 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a7e:	2300      	movs	r3, #0
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3710      	adds	r7, #16
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a94:	e034      	b.n	8004b00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a96:	68f8      	ldr	r0, [r7, #12]
 8004a98:	f000 f89b 	bl	8004bd2 <I2C_IsAcknowledgeFailed>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d001      	beq.n	8004aa6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e034      	b.n	8004b10 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aac:	d028      	beq.n	8004b00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aae:	f7fe fdad 	bl	800360c <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	68ba      	ldr	r2, [r7, #8]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d302      	bcc.n	8004ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d11d      	bne.n	8004b00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	f003 0304 	and.w	r3, r3, #4
 8004ace:	2b04      	cmp	r3, #4
 8004ad0:	d016      	beq.n	8004b00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2220      	movs	r2, #32
 8004adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aec:	f043 0220 	orr.w	r2, r3, #32
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e007      	b.n	8004b10 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	f003 0304 	and.w	r3, r3, #4
 8004b0a:	2b04      	cmp	r3, #4
 8004b0c:	d1c3      	bne.n	8004a96 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b24:	e049      	b.n	8004bba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	695b      	ldr	r3, [r3, #20]
 8004b2c:	f003 0310 	and.w	r3, r3, #16
 8004b30:	2b10      	cmp	r3, #16
 8004b32:	d119      	bne.n	8004b68 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f06f 0210 	mvn.w	r2, #16
 8004b3c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2220      	movs	r2, #32
 8004b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e030      	b.n	8004bca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b68:	f7fe fd50 	bl	800360c <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	68ba      	ldr	r2, [r7, #8]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d302      	bcc.n	8004b7e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d11d      	bne.n	8004bba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	695b      	ldr	r3, [r3, #20]
 8004b84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b88:	2b40      	cmp	r3, #64	@ 0x40
 8004b8a:	d016      	beq.n	8004bba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2220      	movs	r2, #32
 8004b96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba6:	f043 0220 	orr.w	r2, r3, #32
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e007      	b.n	8004bca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bc4:	2b40      	cmp	r3, #64	@ 0x40
 8004bc6:	d1ae      	bne.n	8004b26 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b083      	sub	sp, #12
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	695b      	ldr	r3, [r3, #20]
 8004be0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004be4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004be8:	d11b      	bne.n	8004c22 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004bf2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2220      	movs	r2, #32
 8004bfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c0e:	f043 0204 	orr.w	r2, r3, #4
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e000      	b.n	8004c24 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bc80      	pop	{r7}
 8004c2c:	4770      	bx	lr
	...

08004c30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b086      	sub	sp, #24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d101      	bne.n	8004c42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e272      	b.n	8005128 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f000 8087 	beq.w	8004d5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c50:	4b92      	ldr	r3, [pc, #584]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f003 030c 	and.w	r3, r3, #12
 8004c58:	2b04      	cmp	r3, #4
 8004c5a:	d00c      	beq.n	8004c76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004c5c:	4b8f      	ldr	r3, [pc, #572]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f003 030c 	and.w	r3, r3, #12
 8004c64:	2b08      	cmp	r3, #8
 8004c66:	d112      	bne.n	8004c8e <HAL_RCC_OscConfig+0x5e>
 8004c68:	4b8c      	ldr	r3, [pc, #560]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c74:	d10b      	bne.n	8004c8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c76:	4b89      	ldr	r3, [pc, #548]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d06c      	beq.n	8004d5c <HAL_RCC_OscConfig+0x12c>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d168      	bne.n	8004d5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e24c      	b.n	8005128 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c96:	d106      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x76>
 8004c98:	4b80      	ldr	r3, [pc, #512]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a7f      	ldr	r2, [pc, #508]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004c9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ca2:	6013      	str	r3, [r2, #0]
 8004ca4:	e02e      	b.n	8004d04 <HAL_RCC_OscConfig+0xd4>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d10c      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x98>
 8004cae:	4b7b      	ldr	r3, [pc, #492]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a7a      	ldr	r2, [pc, #488]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004cb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cb8:	6013      	str	r3, [r2, #0]
 8004cba:	4b78      	ldr	r3, [pc, #480]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a77      	ldr	r2, [pc, #476]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004cc0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cc4:	6013      	str	r3, [r2, #0]
 8004cc6:	e01d      	b.n	8004d04 <HAL_RCC_OscConfig+0xd4>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004cd0:	d10c      	bne.n	8004cec <HAL_RCC_OscConfig+0xbc>
 8004cd2:	4b72      	ldr	r3, [pc, #456]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a71      	ldr	r2, [pc, #452]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004cd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004cdc:	6013      	str	r3, [r2, #0]
 8004cde:	4b6f      	ldr	r3, [pc, #444]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a6e      	ldr	r2, [pc, #440]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004ce4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ce8:	6013      	str	r3, [r2, #0]
 8004cea:	e00b      	b.n	8004d04 <HAL_RCC_OscConfig+0xd4>
 8004cec:	4b6b      	ldr	r3, [pc, #428]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a6a      	ldr	r2, [pc, #424]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004cf2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cf6:	6013      	str	r3, [r2, #0]
 8004cf8:	4b68      	ldr	r3, [pc, #416]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a67      	ldr	r2, [pc, #412]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004cfe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d013      	beq.n	8004d34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d0c:	f7fe fc7e 	bl	800360c <HAL_GetTick>
 8004d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d12:	e008      	b.n	8004d26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d14:	f7fe fc7a 	bl	800360c <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	2b64      	cmp	r3, #100	@ 0x64
 8004d20:	d901      	bls.n	8004d26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e200      	b.n	8005128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d26:	4b5d      	ldr	r3, [pc, #372]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d0f0      	beq.n	8004d14 <HAL_RCC_OscConfig+0xe4>
 8004d32:	e014      	b.n	8004d5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d34:	f7fe fc6a 	bl	800360c <HAL_GetTick>
 8004d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d3a:	e008      	b.n	8004d4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d3c:	f7fe fc66 	bl	800360c <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	2b64      	cmp	r3, #100	@ 0x64
 8004d48:	d901      	bls.n	8004d4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e1ec      	b.n	8005128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d4e:	4b53      	ldr	r3, [pc, #332]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1f0      	bne.n	8004d3c <HAL_RCC_OscConfig+0x10c>
 8004d5a:	e000      	b.n	8004d5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d063      	beq.n	8004e32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d6a:	4b4c      	ldr	r3, [pc, #304]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f003 030c 	and.w	r3, r3, #12
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00b      	beq.n	8004d8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004d76:	4b49      	ldr	r3, [pc, #292]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f003 030c 	and.w	r3, r3, #12
 8004d7e:	2b08      	cmp	r3, #8
 8004d80:	d11c      	bne.n	8004dbc <HAL_RCC_OscConfig+0x18c>
 8004d82:	4b46      	ldr	r3, [pc, #280]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d116      	bne.n	8004dbc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d8e:	4b43      	ldr	r3, [pc, #268]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d005      	beq.n	8004da6 <HAL_RCC_OscConfig+0x176>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d001      	beq.n	8004da6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e1c0      	b.n	8005128 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004da6:	4b3d      	ldr	r3, [pc, #244]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	00db      	lsls	r3, r3, #3
 8004db4:	4939      	ldr	r1, [pc, #228]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dba:	e03a      	b.n	8004e32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d020      	beq.n	8004e06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dc4:	4b36      	ldr	r3, [pc, #216]	@ (8004ea0 <HAL_RCC_OscConfig+0x270>)
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dca:	f7fe fc1f 	bl	800360c <HAL_GetTick>
 8004dce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dd0:	e008      	b.n	8004de4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dd2:	f7fe fc1b 	bl	800360c <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d901      	bls.n	8004de4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e1a1      	b.n	8005128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004de4:	4b2d      	ldr	r3, [pc, #180]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0302 	and.w	r3, r3, #2
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d0f0      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004df0:	4b2a      	ldr	r3, [pc, #168]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	695b      	ldr	r3, [r3, #20]
 8004dfc:	00db      	lsls	r3, r3, #3
 8004dfe:	4927      	ldr	r1, [pc, #156]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	600b      	str	r3, [r1, #0]
 8004e04:	e015      	b.n	8004e32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e06:	4b26      	ldr	r3, [pc, #152]	@ (8004ea0 <HAL_RCC_OscConfig+0x270>)
 8004e08:	2200      	movs	r2, #0
 8004e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e0c:	f7fe fbfe 	bl	800360c <HAL_GetTick>
 8004e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e12:	e008      	b.n	8004e26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e14:	f7fe fbfa 	bl	800360c <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e180      	b.n	8005128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e26:	4b1d      	ldr	r3, [pc, #116]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0302 	and.w	r3, r3, #2
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1f0      	bne.n	8004e14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0308 	and.w	r3, r3, #8
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d03a      	beq.n	8004eb4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d019      	beq.n	8004e7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e46:	4b17      	ldr	r3, [pc, #92]	@ (8004ea4 <HAL_RCC_OscConfig+0x274>)
 8004e48:	2201      	movs	r2, #1
 8004e4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e4c:	f7fe fbde 	bl	800360c <HAL_GetTick>
 8004e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e52:	e008      	b.n	8004e66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e54:	f7fe fbda 	bl	800360c <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d901      	bls.n	8004e66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e160      	b.n	8005128 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e66:	4b0d      	ldr	r3, [pc, #52]	@ (8004e9c <HAL_RCC_OscConfig+0x26c>)
 8004e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d0f0      	beq.n	8004e54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004e72:	2001      	movs	r0, #1
 8004e74:	f000 face 	bl	8005414 <RCC_Delay>
 8004e78:	e01c      	b.n	8004eb4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8004ea4 <HAL_RCC_OscConfig+0x274>)
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e80:	f7fe fbc4 	bl	800360c <HAL_GetTick>
 8004e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e86:	e00f      	b.n	8004ea8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e88:	f7fe fbc0 	bl	800360c <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d908      	bls.n	8004ea8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e146      	b.n	8005128 <HAL_RCC_OscConfig+0x4f8>
 8004e9a:	bf00      	nop
 8004e9c:	40021000 	.word	0x40021000
 8004ea0:	42420000 	.word	0x42420000
 8004ea4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ea8:	4b92      	ldr	r3, [pc, #584]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 8004eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eac:	f003 0302 	and.w	r3, r3, #2
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d1e9      	bne.n	8004e88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0304 	and.w	r3, r3, #4
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f000 80a6 	beq.w	800500e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ec6:	4b8b      	ldr	r3, [pc, #556]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 8004ec8:	69db      	ldr	r3, [r3, #28]
 8004eca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10d      	bne.n	8004eee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ed2:	4b88      	ldr	r3, [pc, #544]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 8004ed4:	69db      	ldr	r3, [r3, #28]
 8004ed6:	4a87      	ldr	r2, [pc, #540]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 8004ed8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004edc:	61d3      	str	r3, [r2, #28]
 8004ede:	4b85      	ldr	r3, [pc, #532]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 8004ee0:	69db      	ldr	r3, [r3, #28]
 8004ee2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ee6:	60bb      	str	r3, [r7, #8]
 8004ee8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004eea:	2301      	movs	r3, #1
 8004eec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eee:	4b82      	ldr	r3, [pc, #520]	@ (80050f8 <HAL_RCC_OscConfig+0x4c8>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d118      	bne.n	8004f2c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004efa:	4b7f      	ldr	r3, [pc, #508]	@ (80050f8 <HAL_RCC_OscConfig+0x4c8>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a7e      	ldr	r2, [pc, #504]	@ (80050f8 <HAL_RCC_OscConfig+0x4c8>)
 8004f00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f06:	f7fe fb81 	bl	800360c <HAL_GetTick>
 8004f0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f0c:	e008      	b.n	8004f20 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f0e:	f7fe fb7d 	bl	800360c <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	2b64      	cmp	r3, #100	@ 0x64
 8004f1a:	d901      	bls.n	8004f20 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e103      	b.n	8005128 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f20:	4b75      	ldr	r3, [pc, #468]	@ (80050f8 <HAL_RCC_OscConfig+0x4c8>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d0f0      	beq.n	8004f0e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d106      	bne.n	8004f42 <HAL_RCC_OscConfig+0x312>
 8004f34:	4b6f      	ldr	r3, [pc, #444]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 8004f36:	6a1b      	ldr	r3, [r3, #32]
 8004f38:	4a6e      	ldr	r2, [pc, #440]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 8004f3a:	f043 0301 	orr.w	r3, r3, #1
 8004f3e:	6213      	str	r3, [r2, #32]
 8004f40:	e02d      	b.n	8004f9e <HAL_RCC_OscConfig+0x36e>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d10c      	bne.n	8004f64 <HAL_RCC_OscConfig+0x334>
 8004f4a:	4b6a      	ldr	r3, [pc, #424]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 8004f4c:	6a1b      	ldr	r3, [r3, #32]
 8004f4e:	4a69      	ldr	r2, [pc, #420]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 8004f50:	f023 0301 	bic.w	r3, r3, #1
 8004f54:	6213      	str	r3, [r2, #32]
 8004f56:	4b67      	ldr	r3, [pc, #412]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	4a66      	ldr	r2, [pc, #408]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 8004f5c:	f023 0304 	bic.w	r3, r3, #4
 8004f60:	6213      	str	r3, [r2, #32]
 8004f62:	e01c      	b.n	8004f9e <HAL_RCC_OscConfig+0x36e>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	2b05      	cmp	r3, #5
 8004f6a:	d10c      	bne.n	8004f86 <HAL_RCC_OscConfig+0x356>
 8004f6c:	4b61      	ldr	r3, [pc, #388]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 8004f6e:	6a1b      	ldr	r3, [r3, #32]
 8004f70:	4a60      	ldr	r2, [pc, #384]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 8004f72:	f043 0304 	orr.w	r3, r3, #4
 8004f76:	6213      	str	r3, [r2, #32]
 8004f78:	4b5e      	ldr	r3, [pc, #376]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 8004f7a:	6a1b      	ldr	r3, [r3, #32]
 8004f7c:	4a5d      	ldr	r2, [pc, #372]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 8004f7e:	f043 0301 	orr.w	r3, r3, #1
 8004f82:	6213      	str	r3, [r2, #32]
 8004f84:	e00b      	b.n	8004f9e <HAL_RCC_OscConfig+0x36e>
 8004f86:	4b5b      	ldr	r3, [pc, #364]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 8004f88:	6a1b      	ldr	r3, [r3, #32]
 8004f8a:	4a5a      	ldr	r2, [pc, #360]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 8004f8c:	f023 0301 	bic.w	r3, r3, #1
 8004f90:	6213      	str	r3, [r2, #32]
 8004f92:	4b58      	ldr	r3, [pc, #352]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	4a57      	ldr	r2, [pc, #348]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 8004f98:	f023 0304 	bic.w	r3, r3, #4
 8004f9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d015      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fa6:	f7fe fb31 	bl	800360c <HAL_GetTick>
 8004faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fac:	e00a      	b.n	8004fc4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fae:	f7fe fb2d 	bl	800360c <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d901      	bls.n	8004fc4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e0b1      	b.n	8005128 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fc4:	4b4b      	ldr	r3, [pc, #300]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 8004fc6:	6a1b      	ldr	r3, [r3, #32]
 8004fc8:	f003 0302 	and.w	r3, r3, #2
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d0ee      	beq.n	8004fae <HAL_RCC_OscConfig+0x37e>
 8004fd0:	e014      	b.n	8004ffc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fd2:	f7fe fb1b 	bl	800360c <HAL_GetTick>
 8004fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fd8:	e00a      	b.n	8004ff0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fda:	f7fe fb17 	bl	800360c <HAL_GetTick>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d901      	bls.n	8004ff0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e09b      	b.n	8005128 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ff0:	4b40      	ldr	r3, [pc, #256]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 8004ff2:	6a1b      	ldr	r3, [r3, #32]
 8004ff4:	f003 0302 	and.w	r3, r3, #2
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d1ee      	bne.n	8004fda <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004ffc:	7dfb      	ldrb	r3, [r7, #23]
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d105      	bne.n	800500e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005002:	4b3c      	ldr	r3, [pc, #240]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 8005004:	69db      	ldr	r3, [r3, #28]
 8005006:	4a3b      	ldr	r2, [pc, #236]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 8005008:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800500c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	69db      	ldr	r3, [r3, #28]
 8005012:	2b00      	cmp	r3, #0
 8005014:	f000 8087 	beq.w	8005126 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005018:	4b36      	ldr	r3, [pc, #216]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f003 030c 	and.w	r3, r3, #12
 8005020:	2b08      	cmp	r3, #8
 8005022:	d061      	beq.n	80050e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	69db      	ldr	r3, [r3, #28]
 8005028:	2b02      	cmp	r3, #2
 800502a:	d146      	bne.n	80050ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800502c:	4b33      	ldr	r3, [pc, #204]	@ (80050fc <HAL_RCC_OscConfig+0x4cc>)
 800502e:	2200      	movs	r2, #0
 8005030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005032:	f7fe faeb 	bl	800360c <HAL_GetTick>
 8005036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005038:	e008      	b.n	800504c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800503a:	f7fe fae7 	bl	800360c <HAL_GetTick>
 800503e:	4602      	mov	r2, r0
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	2b02      	cmp	r3, #2
 8005046:	d901      	bls.n	800504c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	e06d      	b.n	8005128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800504c:	4b29      	ldr	r3, [pc, #164]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d1f0      	bne.n	800503a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a1b      	ldr	r3, [r3, #32]
 800505c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005060:	d108      	bne.n	8005074 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005062:	4b24      	ldr	r3, [pc, #144]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	4921      	ldr	r1, [pc, #132]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 8005070:	4313      	orrs	r3, r2
 8005072:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005074:	4b1f      	ldr	r3, [pc, #124]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a19      	ldr	r1, [r3, #32]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005084:	430b      	orrs	r3, r1
 8005086:	491b      	ldr	r1, [pc, #108]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 8005088:	4313      	orrs	r3, r2
 800508a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800508c:	4b1b      	ldr	r3, [pc, #108]	@ (80050fc <HAL_RCC_OscConfig+0x4cc>)
 800508e:	2201      	movs	r2, #1
 8005090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005092:	f7fe fabb 	bl	800360c <HAL_GetTick>
 8005096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005098:	e008      	b.n	80050ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800509a:	f7fe fab7 	bl	800360c <HAL_GetTick>
 800509e:	4602      	mov	r2, r0
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d901      	bls.n	80050ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e03d      	b.n	8005128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050ac:	4b11      	ldr	r3, [pc, #68]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d0f0      	beq.n	800509a <HAL_RCC_OscConfig+0x46a>
 80050b8:	e035      	b.n	8005126 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050ba:	4b10      	ldr	r3, [pc, #64]	@ (80050fc <HAL_RCC_OscConfig+0x4cc>)
 80050bc:	2200      	movs	r2, #0
 80050be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050c0:	f7fe faa4 	bl	800360c <HAL_GetTick>
 80050c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050c6:	e008      	b.n	80050da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050c8:	f7fe faa0 	bl	800360c <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d901      	bls.n	80050da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e026      	b.n	8005128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050da:	4b06      	ldr	r3, [pc, #24]	@ (80050f4 <HAL_RCC_OscConfig+0x4c4>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1f0      	bne.n	80050c8 <HAL_RCC_OscConfig+0x498>
 80050e6:	e01e      	b.n	8005126 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	69db      	ldr	r3, [r3, #28]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d107      	bne.n	8005100 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e019      	b.n	8005128 <HAL_RCC_OscConfig+0x4f8>
 80050f4:	40021000 	.word	0x40021000
 80050f8:	40007000 	.word	0x40007000
 80050fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005100:	4b0b      	ldr	r3, [pc, #44]	@ (8005130 <HAL_RCC_OscConfig+0x500>)
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	429a      	cmp	r2, r3
 8005112:	d106      	bne.n	8005122 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800511e:	429a      	cmp	r2, r3
 8005120:	d001      	beq.n	8005126 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e000      	b.n	8005128 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3718      	adds	r7, #24
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	40021000 	.word	0x40021000

08005134 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d101      	bne.n	8005148 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e0d0      	b.n	80052ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005148:	4b6a      	ldr	r3, [pc, #424]	@ (80052f4 <HAL_RCC_ClockConfig+0x1c0>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0307 	and.w	r3, r3, #7
 8005150:	683a      	ldr	r2, [r7, #0]
 8005152:	429a      	cmp	r2, r3
 8005154:	d910      	bls.n	8005178 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005156:	4b67      	ldr	r3, [pc, #412]	@ (80052f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f023 0207 	bic.w	r2, r3, #7
 800515e:	4965      	ldr	r1, [pc, #404]	@ (80052f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	4313      	orrs	r3, r2
 8005164:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005166:	4b63      	ldr	r3, [pc, #396]	@ (80052f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0307 	and.w	r3, r3, #7
 800516e:	683a      	ldr	r2, [r7, #0]
 8005170:	429a      	cmp	r2, r3
 8005172:	d001      	beq.n	8005178 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e0b8      	b.n	80052ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0302 	and.w	r3, r3, #2
 8005180:	2b00      	cmp	r3, #0
 8005182:	d020      	beq.n	80051c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0304 	and.w	r3, r3, #4
 800518c:	2b00      	cmp	r3, #0
 800518e:	d005      	beq.n	800519c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005190:	4b59      	ldr	r3, [pc, #356]	@ (80052f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	4a58      	ldr	r2, [pc, #352]	@ (80052f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005196:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800519a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0308 	and.w	r3, r3, #8
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d005      	beq.n	80051b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051a8:	4b53      	ldr	r3, [pc, #332]	@ (80052f8 <HAL_RCC_ClockConfig+0x1c4>)
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	4a52      	ldr	r2, [pc, #328]	@ (80052f8 <HAL_RCC_ClockConfig+0x1c4>)
 80051ae:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80051b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051b4:	4b50      	ldr	r3, [pc, #320]	@ (80052f8 <HAL_RCC_ClockConfig+0x1c4>)
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	494d      	ldr	r1, [pc, #308]	@ (80052f8 <HAL_RCC_ClockConfig+0x1c4>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d040      	beq.n	8005254 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d107      	bne.n	80051ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051da:	4b47      	ldr	r3, [pc, #284]	@ (80052f8 <HAL_RCC_ClockConfig+0x1c4>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d115      	bne.n	8005212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e07f      	b.n	80052ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d107      	bne.n	8005202 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051f2:	4b41      	ldr	r3, [pc, #260]	@ (80052f8 <HAL_RCC_ClockConfig+0x1c4>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d109      	bne.n	8005212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e073      	b.n	80052ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005202:	4b3d      	ldr	r3, [pc, #244]	@ (80052f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	2b00      	cmp	r3, #0
 800520c:	d101      	bne.n	8005212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e06b      	b.n	80052ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005212:	4b39      	ldr	r3, [pc, #228]	@ (80052f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f023 0203 	bic.w	r2, r3, #3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	4936      	ldr	r1, [pc, #216]	@ (80052f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005220:	4313      	orrs	r3, r2
 8005222:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005224:	f7fe f9f2 	bl	800360c <HAL_GetTick>
 8005228:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800522a:	e00a      	b.n	8005242 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800522c:	f7fe f9ee 	bl	800360c <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	f241 3288 	movw	r2, #5000	@ 0x1388
 800523a:	4293      	cmp	r3, r2
 800523c:	d901      	bls.n	8005242 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e053      	b.n	80052ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005242:	4b2d      	ldr	r3, [pc, #180]	@ (80052f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	f003 020c 	and.w	r2, r3, #12
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	429a      	cmp	r2, r3
 8005252:	d1eb      	bne.n	800522c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005254:	4b27      	ldr	r3, [pc, #156]	@ (80052f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0307 	and.w	r3, r3, #7
 800525c:	683a      	ldr	r2, [r7, #0]
 800525e:	429a      	cmp	r2, r3
 8005260:	d210      	bcs.n	8005284 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005262:	4b24      	ldr	r3, [pc, #144]	@ (80052f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f023 0207 	bic.w	r2, r3, #7
 800526a:	4922      	ldr	r1, [pc, #136]	@ (80052f4 <HAL_RCC_ClockConfig+0x1c0>)
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	4313      	orrs	r3, r2
 8005270:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005272:	4b20      	ldr	r3, [pc, #128]	@ (80052f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0307 	and.w	r3, r3, #7
 800527a:	683a      	ldr	r2, [r7, #0]
 800527c:	429a      	cmp	r2, r3
 800527e:	d001      	beq.n	8005284 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e032      	b.n	80052ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0304 	and.w	r3, r3, #4
 800528c:	2b00      	cmp	r3, #0
 800528e:	d008      	beq.n	80052a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005290:	4b19      	ldr	r3, [pc, #100]	@ (80052f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	4916      	ldr	r1, [pc, #88]	@ (80052f8 <HAL_RCC_ClockConfig+0x1c4>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0308 	and.w	r3, r3, #8
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d009      	beq.n	80052c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80052ae:	4b12      	ldr	r3, [pc, #72]	@ (80052f8 <HAL_RCC_ClockConfig+0x1c4>)
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	00db      	lsls	r3, r3, #3
 80052bc:	490e      	ldr	r1, [pc, #56]	@ (80052f8 <HAL_RCC_ClockConfig+0x1c4>)
 80052be:	4313      	orrs	r3, r2
 80052c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80052c2:	f000 f821 	bl	8005308 <HAL_RCC_GetSysClockFreq>
 80052c6:	4602      	mov	r2, r0
 80052c8:	4b0b      	ldr	r3, [pc, #44]	@ (80052f8 <HAL_RCC_ClockConfig+0x1c4>)
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	091b      	lsrs	r3, r3, #4
 80052ce:	f003 030f 	and.w	r3, r3, #15
 80052d2:	490a      	ldr	r1, [pc, #40]	@ (80052fc <HAL_RCC_ClockConfig+0x1c8>)
 80052d4:	5ccb      	ldrb	r3, [r1, r3]
 80052d6:	fa22 f303 	lsr.w	r3, r2, r3
 80052da:	4a09      	ldr	r2, [pc, #36]	@ (8005300 <HAL_RCC_ClockConfig+0x1cc>)
 80052dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80052de:	4b09      	ldr	r3, [pc, #36]	@ (8005304 <HAL_RCC_ClockConfig+0x1d0>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4618      	mov	r0, r3
 80052e4:	f7fe f950 	bl	8003588 <HAL_InitTick>

  return HAL_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3710      	adds	r7, #16
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	40022000 	.word	0x40022000
 80052f8:	40021000 	.word	0x40021000
 80052fc:	08009260 	.word	0x08009260
 8005300:	20000064 	.word	0x20000064
 8005304:	20000068 	.word	0x20000068

08005308 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005308:	b480      	push	{r7}
 800530a:	b087      	sub	sp, #28
 800530c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800530e:	2300      	movs	r3, #0
 8005310:	60fb      	str	r3, [r7, #12]
 8005312:	2300      	movs	r3, #0
 8005314:	60bb      	str	r3, [r7, #8]
 8005316:	2300      	movs	r3, #0
 8005318:	617b      	str	r3, [r7, #20]
 800531a:	2300      	movs	r3, #0
 800531c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800531e:	2300      	movs	r3, #0
 8005320:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005322:	4b1e      	ldr	r3, [pc, #120]	@ (800539c <HAL_RCC_GetSysClockFreq+0x94>)
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f003 030c 	and.w	r3, r3, #12
 800532e:	2b04      	cmp	r3, #4
 8005330:	d002      	beq.n	8005338 <HAL_RCC_GetSysClockFreq+0x30>
 8005332:	2b08      	cmp	r3, #8
 8005334:	d003      	beq.n	800533e <HAL_RCC_GetSysClockFreq+0x36>
 8005336:	e027      	b.n	8005388 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005338:	4b19      	ldr	r3, [pc, #100]	@ (80053a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800533a:	613b      	str	r3, [r7, #16]
      break;
 800533c:	e027      	b.n	800538e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	0c9b      	lsrs	r3, r3, #18
 8005342:	f003 030f 	and.w	r3, r3, #15
 8005346:	4a17      	ldr	r2, [pc, #92]	@ (80053a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005348:	5cd3      	ldrb	r3, [r2, r3]
 800534a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d010      	beq.n	8005378 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005356:	4b11      	ldr	r3, [pc, #68]	@ (800539c <HAL_RCC_GetSysClockFreq+0x94>)
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	0c5b      	lsrs	r3, r3, #17
 800535c:	f003 0301 	and.w	r3, r3, #1
 8005360:	4a11      	ldr	r2, [pc, #68]	@ (80053a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005362:	5cd3      	ldrb	r3, [r2, r3]
 8005364:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a0d      	ldr	r2, [pc, #52]	@ (80053a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800536a:	fb03 f202 	mul.w	r2, r3, r2
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	fbb2 f3f3 	udiv	r3, r2, r3
 8005374:	617b      	str	r3, [r7, #20]
 8005376:	e004      	b.n	8005382 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a0c      	ldr	r2, [pc, #48]	@ (80053ac <HAL_RCC_GetSysClockFreq+0xa4>)
 800537c:	fb02 f303 	mul.w	r3, r2, r3
 8005380:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	613b      	str	r3, [r7, #16]
      break;
 8005386:	e002      	b.n	800538e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005388:	4b05      	ldr	r3, [pc, #20]	@ (80053a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800538a:	613b      	str	r3, [r7, #16]
      break;
 800538c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800538e:	693b      	ldr	r3, [r7, #16]
}
 8005390:	4618      	mov	r0, r3
 8005392:	371c      	adds	r7, #28
 8005394:	46bd      	mov	sp, r7
 8005396:	bc80      	pop	{r7}
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	40021000 	.word	0x40021000
 80053a0:	007a1200 	.word	0x007a1200
 80053a4:	08009278 	.word	0x08009278
 80053a8:	08009288 	.word	0x08009288
 80053ac:	003d0900 	.word	0x003d0900

080053b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053b0:	b480      	push	{r7}
 80053b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053b4:	4b02      	ldr	r3, [pc, #8]	@ (80053c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80053b6:	681b      	ldr	r3, [r3, #0]
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bc80      	pop	{r7}
 80053be:	4770      	bx	lr
 80053c0:	20000064 	.word	0x20000064

080053c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80053c8:	f7ff fff2 	bl	80053b0 <HAL_RCC_GetHCLKFreq>
 80053cc:	4602      	mov	r2, r0
 80053ce:	4b05      	ldr	r3, [pc, #20]	@ (80053e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	0a1b      	lsrs	r3, r3, #8
 80053d4:	f003 0307 	and.w	r3, r3, #7
 80053d8:	4903      	ldr	r1, [pc, #12]	@ (80053e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053da:	5ccb      	ldrb	r3, [r1, r3]
 80053dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	40021000 	.word	0x40021000
 80053e8:	08009270 	.word	0x08009270

080053ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80053f0:	f7ff ffde 	bl	80053b0 <HAL_RCC_GetHCLKFreq>
 80053f4:	4602      	mov	r2, r0
 80053f6:	4b05      	ldr	r3, [pc, #20]	@ (800540c <HAL_RCC_GetPCLK2Freq+0x20>)
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	0adb      	lsrs	r3, r3, #11
 80053fc:	f003 0307 	and.w	r3, r3, #7
 8005400:	4903      	ldr	r1, [pc, #12]	@ (8005410 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005402:	5ccb      	ldrb	r3, [r1, r3]
 8005404:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005408:	4618      	mov	r0, r3
 800540a:	bd80      	pop	{r7, pc}
 800540c:	40021000 	.word	0x40021000
 8005410:	08009270 	.word	0x08009270

08005414 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005414:	b480      	push	{r7}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800541c:	4b0a      	ldr	r3, [pc, #40]	@ (8005448 <RCC_Delay+0x34>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a0a      	ldr	r2, [pc, #40]	@ (800544c <RCC_Delay+0x38>)
 8005422:	fba2 2303 	umull	r2, r3, r2, r3
 8005426:	0a5b      	lsrs	r3, r3, #9
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	fb02 f303 	mul.w	r3, r2, r3
 800542e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005430:	bf00      	nop
  }
  while (Delay --);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	1e5a      	subs	r2, r3, #1
 8005436:	60fa      	str	r2, [r7, #12]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d1f9      	bne.n	8005430 <RCC_Delay+0x1c>
}
 800543c:	bf00      	nop
 800543e:	bf00      	nop
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	bc80      	pop	{r7}
 8005446:	4770      	bx	lr
 8005448:	20000064 	.word	0x20000064
 800544c:	10624dd3 	.word	0x10624dd3

08005450 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d101      	bne.n	8005462 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e041      	b.n	80054e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d106      	bne.n	800547c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f7fd feec 	bl	8003254 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2202      	movs	r2, #2
 8005480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	3304      	adds	r3, #4
 800548c:	4619      	mov	r1, r3
 800548e:	4610      	mov	r0, r2
 8005490:	f000 f940 	bl	8005714 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3708      	adds	r7, #8
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
	...

080054f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	2b01      	cmp	r3, #1
 8005502:	d001      	beq.n	8005508 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e032      	b.n	800556e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2202      	movs	r2, #2
 800550c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a18      	ldr	r2, [pc, #96]	@ (8005578 <HAL_TIM_Base_Start+0x88>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d00e      	beq.n	8005538 <HAL_TIM_Base_Start+0x48>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005522:	d009      	beq.n	8005538 <HAL_TIM_Base_Start+0x48>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a14      	ldr	r2, [pc, #80]	@ (800557c <HAL_TIM_Base_Start+0x8c>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d004      	beq.n	8005538 <HAL_TIM_Base_Start+0x48>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a13      	ldr	r2, [pc, #76]	@ (8005580 <HAL_TIM_Base_Start+0x90>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d111      	bne.n	800555c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f003 0307 	and.w	r3, r3, #7
 8005542:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2b06      	cmp	r3, #6
 8005548:	d010      	beq.n	800556c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f042 0201 	orr.w	r2, r2, #1
 8005558:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800555a:	e007      	b.n	800556c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f042 0201 	orr.w	r2, r2, #1
 800556a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3714      	adds	r7, #20
 8005572:	46bd      	mov	sp, r7
 8005574:	bc80      	pop	{r7}
 8005576:	4770      	bx	lr
 8005578:	40012c00 	.word	0x40012c00
 800557c:	40000400 	.word	0x40000400
 8005580:	40000800 	.word	0x40000800

08005584 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800558e:	2300      	movs	r3, #0
 8005590:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005598:	2b01      	cmp	r3, #1
 800559a:	d101      	bne.n	80055a0 <HAL_TIM_ConfigClockSource+0x1c>
 800559c:	2302      	movs	r3, #2
 800559e:	e0b4      	b.n	800570a <HAL_TIM_ConfigClockSource+0x186>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2202      	movs	r2, #2
 80055ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80055be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80055c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68ba      	ldr	r2, [r7, #8]
 80055ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055d8:	d03e      	beq.n	8005658 <HAL_TIM_ConfigClockSource+0xd4>
 80055da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055de:	f200 8087 	bhi.w	80056f0 <HAL_TIM_ConfigClockSource+0x16c>
 80055e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055e6:	f000 8086 	beq.w	80056f6 <HAL_TIM_ConfigClockSource+0x172>
 80055ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055ee:	d87f      	bhi.n	80056f0 <HAL_TIM_ConfigClockSource+0x16c>
 80055f0:	2b70      	cmp	r3, #112	@ 0x70
 80055f2:	d01a      	beq.n	800562a <HAL_TIM_ConfigClockSource+0xa6>
 80055f4:	2b70      	cmp	r3, #112	@ 0x70
 80055f6:	d87b      	bhi.n	80056f0 <HAL_TIM_ConfigClockSource+0x16c>
 80055f8:	2b60      	cmp	r3, #96	@ 0x60
 80055fa:	d050      	beq.n	800569e <HAL_TIM_ConfigClockSource+0x11a>
 80055fc:	2b60      	cmp	r3, #96	@ 0x60
 80055fe:	d877      	bhi.n	80056f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005600:	2b50      	cmp	r3, #80	@ 0x50
 8005602:	d03c      	beq.n	800567e <HAL_TIM_ConfigClockSource+0xfa>
 8005604:	2b50      	cmp	r3, #80	@ 0x50
 8005606:	d873      	bhi.n	80056f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005608:	2b40      	cmp	r3, #64	@ 0x40
 800560a:	d058      	beq.n	80056be <HAL_TIM_ConfigClockSource+0x13a>
 800560c:	2b40      	cmp	r3, #64	@ 0x40
 800560e:	d86f      	bhi.n	80056f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005610:	2b30      	cmp	r3, #48	@ 0x30
 8005612:	d064      	beq.n	80056de <HAL_TIM_ConfigClockSource+0x15a>
 8005614:	2b30      	cmp	r3, #48	@ 0x30
 8005616:	d86b      	bhi.n	80056f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005618:	2b20      	cmp	r3, #32
 800561a:	d060      	beq.n	80056de <HAL_TIM_ConfigClockSource+0x15a>
 800561c:	2b20      	cmp	r3, #32
 800561e:	d867      	bhi.n	80056f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005620:	2b00      	cmp	r3, #0
 8005622:	d05c      	beq.n	80056de <HAL_TIM_ConfigClockSource+0x15a>
 8005624:	2b10      	cmp	r3, #16
 8005626:	d05a      	beq.n	80056de <HAL_TIM_ConfigClockSource+0x15a>
 8005628:	e062      	b.n	80056f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800563a:	f000 f944 	bl	80058c6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800564c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68ba      	ldr	r2, [r7, #8]
 8005654:	609a      	str	r2, [r3, #8]
      break;
 8005656:	e04f      	b.n	80056f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005668:	f000 f92d 	bl	80058c6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	689a      	ldr	r2, [r3, #8]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800567a:	609a      	str	r2, [r3, #8]
      break;
 800567c:	e03c      	b.n	80056f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800568a:	461a      	mov	r2, r3
 800568c:	f000 f8a4 	bl	80057d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2150      	movs	r1, #80	@ 0x50
 8005696:	4618      	mov	r0, r3
 8005698:	f000 f8fb 	bl	8005892 <TIM_ITRx_SetConfig>
      break;
 800569c:	e02c      	b.n	80056f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056aa:	461a      	mov	r2, r3
 80056ac:	f000 f8c2 	bl	8005834 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2160      	movs	r1, #96	@ 0x60
 80056b6:	4618      	mov	r0, r3
 80056b8:	f000 f8eb 	bl	8005892 <TIM_ITRx_SetConfig>
      break;
 80056bc:	e01c      	b.n	80056f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056ca:	461a      	mov	r2, r3
 80056cc:	f000 f884 	bl	80057d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2140      	movs	r1, #64	@ 0x40
 80056d6:	4618      	mov	r0, r3
 80056d8:	f000 f8db 	bl	8005892 <TIM_ITRx_SetConfig>
      break;
 80056dc:	e00c      	b.n	80056f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4619      	mov	r1, r3
 80056e8:	4610      	mov	r0, r2
 80056ea:	f000 f8d2 	bl	8005892 <TIM_ITRx_SetConfig>
      break;
 80056ee:	e003      	b.n	80056f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	73fb      	strb	r3, [r7, #15]
      break;
 80056f4:	e000      	b.n	80056f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80056f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005708:	7bfb      	ldrb	r3, [r7, #15]
}
 800570a:	4618      	mov	r0, r3
 800570c:	3710      	adds	r7, #16
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
	...

08005714 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005714:	b480      	push	{r7}
 8005716:	b085      	sub	sp, #20
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a29      	ldr	r2, [pc, #164]	@ (80057cc <TIM_Base_SetConfig+0xb8>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d00b      	beq.n	8005744 <TIM_Base_SetConfig+0x30>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005732:	d007      	beq.n	8005744 <TIM_Base_SetConfig+0x30>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a26      	ldr	r2, [pc, #152]	@ (80057d0 <TIM_Base_SetConfig+0xbc>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d003      	beq.n	8005744 <TIM_Base_SetConfig+0x30>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a25      	ldr	r2, [pc, #148]	@ (80057d4 <TIM_Base_SetConfig+0xc0>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d108      	bne.n	8005756 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800574a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	4313      	orrs	r3, r2
 8005754:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a1c      	ldr	r2, [pc, #112]	@ (80057cc <TIM_Base_SetConfig+0xb8>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d00b      	beq.n	8005776 <TIM_Base_SetConfig+0x62>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005764:	d007      	beq.n	8005776 <TIM_Base_SetConfig+0x62>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a19      	ldr	r2, [pc, #100]	@ (80057d0 <TIM_Base_SetConfig+0xbc>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d003      	beq.n	8005776 <TIM_Base_SetConfig+0x62>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a18      	ldr	r2, [pc, #96]	@ (80057d4 <TIM_Base_SetConfig+0xc0>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d108      	bne.n	8005788 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800577c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	4313      	orrs	r3, r2
 8005786:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	4313      	orrs	r3, r2
 8005794:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	689a      	ldr	r2, [r3, #8]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a07      	ldr	r2, [pc, #28]	@ (80057cc <TIM_Base_SetConfig+0xb8>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d103      	bne.n	80057bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	691a      	ldr	r2, [r3, #16]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	615a      	str	r2, [r3, #20]
}
 80057c2:	bf00      	nop
 80057c4:	3714      	adds	r7, #20
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bc80      	pop	{r7}
 80057ca:	4770      	bx	lr
 80057cc:	40012c00 	.word	0x40012c00
 80057d0:	40000400 	.word	0x40000400
 80057d4:	40000800 	.word	0x40000800

080057d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057d8:	b480      	push	{r7}
 80057da:	b087      	sub	sp, #28
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6a1b      	ldr	r3, [r3, #32]
 80057e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	f023 0201 	bic.w	r2, r3, #1
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005802:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	011b      	lsls	r3, r3, #4
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	4313      	orrs	r3, r2
 800580c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	f023 030a 	bic.w	r3, r3, #10
 8005814:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005816:	697a      	ldr	r2, [r7, #20]
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	4313      	orrs	r3, r2
 800581c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	693a      	ldr	r2, [r7, #16]
 8005822:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	697a      	ldr	r2, [r7, #20]
 8005828:	621a      	str	r2, [r3, #32]
}
 800582a:	bf00      	nop
 800582c:	371c      	adds	r7, #28
 800582e:	46bd      	mov	sp, r7
 8005830:	bc80      	pop	{r7}
 8005832:	4770      	bx	lr

08005834 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005834:	b480      	push	{r7}
 8005836:	b087      	sub	sp, #28
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6a1b      	ldr	r3, [r3, #32]
 8005844:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6a1b      	ldr	r3, [r3, #32]
 800584a:	f023 0210 	bic.w	r2, r3, #16
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	699b      	ldr	r3, [r3, #24]
 8005856:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800585e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	031b      	lsls	r3, r3, #12
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	4313      	orrs	r3, r2
 8005868:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005870:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	011b      	lsls	r3, r3, #4
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	4313      	orrs	r3, r2
 800587a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	693a      	ldr	r2, [r7, #16]
 8005880:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	621a      	str	r2, [r3, #32]
}
 8005888:	bf00      	nop
 800588a:	371c      	adds	r7, #28
 800588c:	46bd      	mov	sp, r7
 800588e:	bc80      	pop	{r7}
 8005890:	4770      	bx	lr

08005892 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005892:	b480      	push	{r7}
 8005894:	b085      	sub	sp, #20
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
 800589a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058aa:	683a      	ldr	r2, [r7, #0]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	f043 0307 	orr.w	r3, r3, #7
 80058b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	609a      	str	r2, [r3, #8]
}
 80058bc:	bf00      	nop
 80058be:	3714      	adds	r7, #20
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bc80      	pop	{r7}
 80058c4:	4770      	bx	lr

080058c6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058c6:	b480      	push	{r7}
 80058c8:	b087      	sub	sp, #28
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	60f8      	str	r0, [r7, #12]
 80058ce:	60b9      	str	r1, [r7, #8]
 80058d0:	607a      	str	r2, [r7, #4]
 80058d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80058e0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	021a      	lsls	r2, r3, #8
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	431a      	orrs	r2, r3
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	697a      	ldr	r2, [r7, #20]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	609a      	str	r2, [r3, #8]
}
 80058fa:	bf00      	nop
 80058fc:	371c      	adds	r7, #28
 80058fe:	46bd      	mov	sp, r7
 8005900:	bc80      	pop	{r7}
 8005902:	4770      	bx	lr

08005904 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005904:	b480      	push	{r7}
 8005906:	b085      	sub	sp, #20
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005914:	2b01      	cmp	r3, #1
 8005916:	d101      	bne.n	800591c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005918:	2302      	movs	r3, #2
 800591a:	e046      	b.n	80059aa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2202      	movs	r2, #2
 8005928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005942:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	4313      	orrs	r3, r2
 800594c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a16      	ldr	r2, [pc, #88]	@ (80059b4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d00e      	beq.n	800597e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005968:	d009      	beq.n	800597e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a12      	ldr	r2, [pc, #72]	@ (80059b8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d004      	beq.n	800597e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a10      	ldr	r2, [pc, #64]	@ (80059bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d10c      	bne.n	8005998 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005984:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	68ba      	ldr	r2, [r7, #8]
 800598c:	4313      	orrs	r3, r2
 800598e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68ba      	ldr	r2, [r7, #8]
 8005996:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3714      	adds	r7, #20
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bc80      	pop	{r7}
 80059b2:	4770      	bx	lr
 80059b4:	40012c00 	.word	0x40012c00
 80059b8:	40000400 	.word	0x40000400
 80059bc:	40000800 	.word	0x40000800

080059c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d101      	bne.n	80059d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e042      	b.n	8005a58 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d106      	bne.n	80059ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f7fd fc52 	bl	8003290 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2224      	movs	r2, #36	@ 0x24
 80059f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68da      	ldr	r2, [r3, #12]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005a02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 f91d 	bl	8005c44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	691a      	ldr	r2, [r3, #16]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005a18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	695a      	ldr	r2, [r3, #20]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68da      	ldr	r2, [r3, #12]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005a38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2220      	movs	r2, #32
 8005a44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2220      	movs	r2, #32
 8005a4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3708      	adds	r7, #8
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b08a      	sub	sp, #40	@ 0x28
 8005a64:	af02      	add	r7, sp, #8
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	603b      	str	r3, [r7, #0]
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a70:	2300      	movs	r3, #0
 8005a72:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	2b20      	cmp	r3, #32
 8005a7e:	d16d      	bne.n	8005b5c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d002      	beq.n	8005a8c <HAL_UART_Transmit+0x2c>
 8005a86:	88fb      	ldrh	r3, [r7, #6]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d101      	bne.n	8005a90 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e066      	b.n	8005b5e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2221      	movs	r2, #33	@ 0x21
 8005a9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a9e:	f7fd fdb5 	bl	800360c <HAL_GetTick>
 8005aa2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	88fa      	ldrh	r2, [r7, #6]
 8005aa8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	88fa      	ldrh	r2, [r7, #6]
 8005aae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ab8:	d108      	bne.n	8005acc <HAL_UART_Transmit+0x6c>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d104      	bne.n	8005acc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	61bb      	str	r3, [r7, #24]
 8005aca:	e003      	b.n	8005ad4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ad4:	e02a      	b.n	8005b2c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	9300      	str	r3, [sp, #0]
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	2200      	movs	r2, #0
 8005ade:	2180      	movs	r1, #128	@ 0x80
 8005ae0:	68f8      	ldr	r0, [r7, #12]
 8005ae2:	f000 f840 	bl	8005b66 <UART_WaitOnFlagUntilTimeout>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d001      	beq.n	8005af0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e036      	b.n	8005b5e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d10b      	bne.n	8005b0e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	881b      	ldrh	r3, [r3, #0]
 8005afa:	461a      	mov	r2, r3
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	3302      	adds	r3, #2
 8005b0a:	61bb      	str	r3, [r7, #24]
 8005b0c:	e007      	b.n	8005b1e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	781a      	ldrb	r2, [r3, #0]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	3b01      	subs	r3, #1
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d1cf      	bne.n	8005ad6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	9300      	str	r3, [sp, #0]
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	2140      	movs	r1, #64	@ 0x40
 8005b40:	68f8      	ldr	r0, [r7, #12]
 8005b42:	f000 f810 	bl	8005b66 <UART_WaitOnFlagUntilTimeout>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d001      	beq.n	8005b50 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e006      	b.n	8005b5e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2220      	movs	r2, #32
 8005b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	e000      	b.n	8005b5e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005b5c:	2302      	movs	r3, #2
  }
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3720      	adds	r7, #32
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}

08005b66 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005b66:	b580      	push	{r7, lr}
 8005b68:	b090      	sub	sp, #64	@ 0x40
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	60f8      	str	r0, [r7, #12]
 8005b6e:	60b9      	str	r1, [r7, #8]
 8005b70:	603b      	str	r3, [r7, #0]
 8005b72:	4613      	mov	r3, r2
 8005b74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b76:	e050      	b.n	8005c1a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b7e:	d04c      	beq.n	8005c1a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005b80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d007      	beq.n	8005b96 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b86:	f7fd fd41 	bl	800360c <HAL_GetTick>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d241      	bcs.n	8005c1a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	330c      	adds	r3, #12
 8005b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ba0:	e853 3f00 	ldrex	r3, [r3]
 8005ba4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba8:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	330c      	adds	r3, #12
 8005bb4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005bb6:	637a      	str	r2, [r7, #52]	@ 0x34
 8005bb8:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005bbc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005bbe:	e841 2300 	strex	r3, r2, [r1]
 8005bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1e5      	bne.n	8005b96 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	3314      	adds	r3, #20
 8005bd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	e853 3f00 	ldrex	r3, [r3]
 8005bd8:	613b      	str	r3, [r7, #16]
   return(result);
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	f023 0301 	bic.w	r3, r3, #1
 8005be0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	3314      	adds	r3, #20
 8005be8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005bea:	623a      	str	r2, [r7, #32]
 8005bec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bee:	69f9      	ldr	r1, [r7, #28]
 8005bf0:	6a3a      	ldr	r2, [r7, #32]
 8005bf2:	e841 2300 	strex	r3, r2, [r1]
 8005bf6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d1e5      	bne.n	8005bca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2220      	movs	r2, #32
 8005c02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2220      	movs	r2, #32
 8005c0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e00f      	b.n	8005c3a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	4013      	ands	r3, r2
 8005c24:	68ba      	ldr	r2, [r7, #8]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	bf0c      	ite	eq
 8005c2a:	2301      	moveq	r3, #1
 8005c2c:	2300      	movne	r3, #0
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	461a      	mov	r2, r3
 8005c32:	79fb      	ldrb	r3, [r7, #7]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d09f      	beq.n	8005b78 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3740      	adds	r7, #64	@ 0x40
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
	...

08005c44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	68da      	ldr	r2, [r3, #12]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	689a      	ldr	r2, [r3, #8]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	431a      	orrs	r2, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	695b      	ldr	r3, [r3, #20]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005c7e:	f023 030c 	bic.w	r3, r3, #12
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	6812      	ldr	r2, [r2, #0]
 8005c86:	68b9      	ldr	r1, [r7, #8]
 8005c88:	430b      	orrs	r3, r1
 8005c8a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	695b      	ldr	r3, [r3, #20]
 8005c92:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	699a      	ldr	r2, [r3, #24]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	430a      	orrs	r2, r1
 8005ca0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a2c      	ldr	r2, [pc, #176]	@ (8005d58 <UART_SetConfig+0x114>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d103      	bne.n	8005cb4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005cac:	f7ff fb9e 	bl	80053ec <HAL_RCC_GetPCLK2Freq>
 8005cb0:	60f8      	str	r0, [r7, #12]
 8005cb2:	e002      	b.n	8005cba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005cb4:	f7ff fb86 	bl	80053c4 <HAL_RCC_GetPCLK1Freq>
 8005cb8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	4413      	add	r3, r2
 8005cc2:	009a      	lsls	r2, r3, #2
 8005cc4:	441a      	add	r2, r3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cd0:	4a22      	ldr	r2, [pc, #136]	@ (8005d5c <UART_SetConfig+0x118>)
 8005cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd6:	095b      	lsrs	r3, r3, #5
 8005cd8:	0119      	lsls	r1, r3, #4
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	4613      	mov	r3, r2
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	4413      	add	r3, r2
 8005ce2:	009a      	lsls	r2, r3, #2
 8005ce4:	441a      	add	r2, r3
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	fbb2 f2f3 	udiv	r2, r2, r3
 8005cf0:	4b1a      	ldr	r3, [pc, #104]	@ (8005d5c <UART_SetConfig+0x118>)
 8005cf2:	fba3 0302 	umull	r0, r3, r3, r2
 8005cf6:	095b      	lsrs	r3, r3, #5
 8005cf8:	2064      	movs	r0, #100	@ 0x64
 8005cfa:	fb00 f303 	mul.w	r3, r0, r3
 8005cfe:	1ad3      	subs	r3, r2, r3
 8005d00:	011b      	lsls	r3, r3, #4
 8005d02:	3332      	adds	r3, #50	@ 0x32
 8005d04:	4a15      	ldr	r2, [pc, #84]	@ (8005d5c <UART_SetConfig+0x118>)
 8005d06:	fba2 2303 	umull	r2, r3, r2, r3
 8005d0a:	095b      	lsrs	r3, r3, #5
 8005d0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d10:	4419      	add	r1, r3
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	4613      	mov	r3, r2
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	4413      	add	r3, r2
 8005d1a:	009a      	lsls	r2, r3, #2
 8005d1c:	441a      	add	r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d28:	4b0c      	ldr	r3, [pc, #48]	@ (8005d5c <UART_SetConfig+0x118>)
 8005d2a:	fba3 0302 	umull	r0, r3, r3, r2
 8005d2e:	095b      	lsrs	r3, r3, #5
 8005d30:	2064      	movs	r0, #100	@ 0x64
 8005d32:	fb00 f303 	mul.w	r3, r0, r3
 8005d36:	1ad3      	subs	r3, r2, r3
 8005d38:	011b      	lsls	r3, r3, #4
 8005d3a:	3332      	adds	r3, #50	@ 0x32
 8005d3c:	4a07      	ldr	r2, [pc, #28]	@ (8005d5c <UART_SetConfig+0x118>)
 8005d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d42:	095b      	lsrs	r3, r3, #5
 8005d44:	f003 020f 	and.w	r2, r3, #15
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	440a      	add	r2, r1
 8005d4e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005d50:	bf00      	nop
 8005d52:	3710      	adds	r7, #16
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	40013800 	.word	0x40013800
 8005d5c:	51eb851f 	.word	0x51eb851f

08005d60 <__cvt>:
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d66:	461d      	mov	r5, r3
 8005d68:	bfbb      	ittet	lt
 8005d6a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005d6e:	461d      	movlt	r5, r3
 8005d70:	2300      	movge	r3, #0
 8005d72:	232d      	movlt	r3, #45	@ 0x2d
 8005d74:	b088      	sub	sp, #32
 8005d76:	4614      	mov	r4, r2
 8005d78:	bfb8      	it	lt
 8005d7a:	4614      	movlt	r4, r2
 8005d7c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005d7e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005d80:	7013      	strb	r3, [r2, #0]
 8005d82:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005d84:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005d88:	f023 0820 	bic.w	r8, r3, #32
 8005d8c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005d90:	d005      	beq.n	8005d9e <__cvt+0x3e>
 8005d92:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005d96:	d100      	bne.n	8005d9a <__cvt+0x3a>
 8005d98:	3601      	adds	r6, #1
 8005d9a:	2302      	movs	r3, #2
 8005d9c:	e000      	b.n	8005da0 <__cvt+0x40>
 8005d9e:	2303      	movs	r3, #3
 8005da0:	aa07      	add	r2, sp, #28
 8005da2:	9204      	str	r2, [sp, #16]
 8005da4:	aa06      	add	r2, sp, #24
 8005da6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005daa:	e9cd 3600 	strd	r3, r6, [sp]
 8005dae:	4622      	mov	r2, r4
 8005db0:	462b      	mov	r3, r5
 8005db2:	f000 fe9d 	bl	8006af0 <_dtoa_r>
 8005db6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005dba:	4607      	mov	r7, r0
 8005dbc:	d119      	bne.n	8005df2 <__cvt+0x92>
 8005dbe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005dc0:	07db      	lsls	r3, r3, #31
 8005dc2:	d50e      	bpl.n	8005de2 <__cvt+0x82>
 8005dc4:	eb00 0906 	add.w	r9, r0, r6
 8005dc8:	2200      	movs	r2, #0
 8005dca:	2300      	movs	r3, #0
 8005dcc:	4620      	mov	r0, r4
 8005dce:	4629      	mov	r1, r5
 8005dd0:	f7fa fdea 	bl	80009a8 <__aeabi_dcmpeq>
 8005dd4:	b108      	cbz	r0, 8005dda <__cvt+0x7a>
 8005dd6:	f8cd 901c 	str.w	r9, [sp, #28]
 8005dda:	2230      	movs	r2, #48	@ 0x30
 8005ddc:	9b07      	ldr	r3, [sp, #28]
 8005dde:	454b      	cmp	r3, r9
 8005de0:	d31e      	bcc.n	8005e20 <__cvt+0xc0>
 8005de2:	4638      	mov	r0, r7
 8005de4:	9b07      	ldr	r3, [sp, #28]
 8005de6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005de8:	1bdb      	subs	r3, r3, r7
 8005dea:	6013      	str	r3, [r2, #0]
 8005dec:	b008      	add	sp, #32
 8005dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005df2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005df6:	eb00 0906 	add.w	r9, r0, r6
 8005dfa:	d1e5      	bne.n	8005dc8 <__cvt+0x68>
 8005dfc:	7803      	ldrb	r3, [r0, #0]
 8005dfe:	2b30      	cmp	r3, #48	@ 0x30
 8005e00:	d10a      	bne.n	8005e18 <__cvt+0xb8>
 8005e02:	2200      	movs	r2, #0
 8005e04:	2300      	movs	r3, #0
 8005e06:	4620      	mov	r0, r4
 8005e08:	4629      	mov	r1, r5
 8005e0a:	f7fa fdcd 	bl	80009a8 <__aeabi_dcmpeq>
 8005e0e:	b918      	cbnz	r0, 8005e18 <__cvt+0xb8>
 8005e10:	f1c6 0601 	rsb	r6, r6, #1
 8005e14:	f8ca 6000 	str.w	r6, [sl]
 8005e18:	f8da 3000 	ldr.w	r3, [sl]
 8005e1c:	4499      	add	r9, r3
 8005e1e:	e7d3      	b.n	8005dc8 <__cvt+0x68>
 8005e20:	1c59      	adds	r1, r3, #1
 8005e22:	9107      	str	r1, [sp, #28]
 8005e24:	701a      	strb	r2, [r3, #0]
 8005e26:	e7d9      	b.n	8005ddc <__cvt+0x7c>

08005e28 <__exponent>:
 8005e28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e2a:	2900      	cmp	r1, #0
 8005e2c:	bfb6      	itet	lt
 8005e2e:	232d      	movlt	r3, #45	@ 0x2d
 8005e30:	232b      	movge	r3, #43	@ 0x2b
 8005e32:	4249      	neglt	r1, r1
 8005e34:	2909      	cmp	r1, #9
 8005e36:	7002      	strb	r2, [r0, #0]
 8005e38:	7043      	strb	r3, [r0, #1]
 8005e3a:	dd29      	ble.n	8005e90 <__exponent+0x68>
 8005e3c:	f10d 0307 	add.w	r3, sp, #7
 8005e40:	461d      	mov	r5, r3
 8005e42:	270a      	movs	r7, #10
 8005e44:	fbb1 f6f7 	udiv	r6, r1, r7
 8005e48:	461a      	mov	r2, r3
 8005e4a:	fb07 1416 	mls	r4, r7, r6, r1
 8005e4e:	3430      	adds	r4, #48	@ 0x30
 8005e50:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005e54:	460c      	mov	r4, r1
 8005e56:	2c63      	cmp	r4, #99	@ 0x63
 8005e58:	4631      	mov	r1, r6
 8005e5a:	f103 33ff 	add.w	r3, r3, #4294967295
 8005e5e:	dcf1      	bgt.n	8005e44 <__exponent+0x1c>
 8005e60:	3130      	adds	r1, #48	@ 0x30
 8005e62:	1e94      	subs	r4, r2, #2
 8005e64:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005e68:	4623      	mov	r3, r4
 8005e6a:	1c41      	adds	r1, r0, #1
 8005e6c:	42ab      	cmp	r3, r5
 8005e6e:	d30a      	bcc.n	8005e86 <__exponent+0x5e>
 8005e70:	f10d 0309 	add.w	r3, sp, #9
 8005e74:	1a9b      	subs	r3, r3, r2
 8005e76:	42ac      	cmp	r4, r5
 8005e78:	bf88      	it	hi
 8005e7a:	2300      	movhi	r3, #0
 8005e7c:	3302      	adds	r3, #2
 8005e7e:	4403      	add	r3, r0
 8005e80:	1a18      	subs	r0, r3, r0
 8005e82:	b003      	add	sp, #12
 8005e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e86:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005e8a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005e8e:	e7ed      	b.n	8005e6c <__exponent+0x44>
 8005e90:	2330      	movs	r3, #48	@ 0x30
 8005e92:	3130      	adds	r1, #48	@ 0x30
 8005e94:	7083      	strb	r3, [r0, #2]
 8005e96:	70c1      	strb	r1, [r0, #3]
 8005e98:	1d03      	adds	r3, r0, #4
 8005e9a:	e7f1      	b.n	8005e80 <__exponent+0x58>

08005e9c <_printf_float>:
 8005e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ea0:	b091      	sub	sp, #68	@ 0x44
 8005ea2:	460c      	mov	r4, r1
 8005ea4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005ea8:	4616      	mov	r6, r2
 8005eaa:	461f      	mov	r7, r3
 8005eac:	4605      	mov	r5, r0
 8005eae:	f000 fd01 	bl	80068b4 <_localeconv_r>
 8005eb2:	6803      	ldr	r3, [r0, #0]
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	9308      	str	r3, [sp, #32]
 8005eb8:	f7fa f94a 	bl	8000150 <strlen>
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	930e      	str	r3, [sp, #56]	@ 0x38
 8005ec0:	f8d8 3000 	ldr.w	r3, [r8]
 8005ec4:	9009      	str	r0, [sp, #36]	@ 0x24
 8005ec6:	3307      	adds	r3, #7
 8005ec8:	f023 0307 	bic.w	r3, r3, #7
 8005ecc:	f103 0208 	add.w	r2, r3, #8
 8005ed0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005ed4:	f8d4 b000 	ldr.w	fp, [r4]
 8005ed8:	f8c8 2000 	str.w	r2, [r8]
 8005edc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ee0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005ee4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005ee6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005eea:	f04f 32ff 	mov.w	r2, #4294967295
 8005eee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005ef2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005ef6:	4b9c      	ldr	r3, [pc, #624]	@ (8006168 <_printf_float+0x2cc>)
 8005ef8:	f7fa fd88 	bl	8000a0c <__aeabi_dcmpun>
 8005efc:	bb70      	cbnz	r0, 8005f5c <_printf_float+0xc0>
 8005efe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005f02:	f04f 32ff 	mov.w	r2, #4294967295
 8005f06:	4b98      	ldr	r3, [pc, #608]	@ (8006168 <_printf_float+0x2cc>)
 8005f08:	f7fa fd62 	bl	80009d0 <__aeabi_dcmple>
 8005f0c:	bb30      	cbnz	r0, 8005f5c <_printf_float+0xc0>
 8005f0e:	2200      	movs	r2, #0
 8005f10:	2300      	movs	r3, #0
 8005f12:	4640      	mov	r0, r8
 8005f14:	4649      	mov	r1, r9
 8005f16:	f7fa fd51 	bl	80009bc <__aeabi_dcmplt>
 8005f1a:	b110      	cbz	r0, 8005f22 <_printf_float+0x86>
 8005f1c:	232d      	movs	r3, #45	@ 0x2d
 8005f1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f22:	4a92      	ldr	r2, [pc, #584]	@ (800616c <_printf_float+0x2d0>)
 8005f24:	4b92      	ldr	r3, [pc, #584]	@ (8006170 <_printf_float+0x2d4>)
 8005f26:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005f2a:	bf94      	ite	ls
 8005f2c:	4690      	movls	r8, r2
 8005f2e:	4698      	movhi	r8, r3
 8005f30:	2303      	movs	r3, #3
 8005f32:	f04f 0900 	mov.w	r9, #0
 8005f36:	6123      	str	r3, [r4, #16]
 8005f38:	f02b 0304 	bic.w	r3, fp, #4
 8005f3c:	6023      	str	r3, [r4, #0]
 8005f3e:	4633      	mov	r3, r6
 8005f40:	4621      	mov	r1, r4
 8005f42:	4628      	mov	r0, r5
 8005f44:	9700      	str	r7, [sp, #0]
 8005f46:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005f48:	f000 f9d4 	bl	80062f4 <_printf_common>
 8005f4c:	3001      	adds	r0, #1
 8005f4e:	f040 8090 	bne.w	8006072 <_printf_float+0x1d6>
 8005f52:	f04f 30ff 	mov.w	r0, #4294967295
 8005f56:	b011      	add	sp, #68	@ 0x44
 8005f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f5c:	4642      	mov	r2, r8
 8005f5e:	464b      	mov	r3, r9
 8005f60:	4640      	mov	r0, r8
 8005f62:	4649      	mov	r1, r9
 8005f64:	f7fa fd52 	bl	8000a0c <__aeabi_dcmpun>
 8005f68:	b148      	cbz	r0, 8005f7e <_printf_float+0xe2>
 8005f6a:	464b      	mov	r3, r9
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	bfb8      	it	lt
 8005f70:	232d      	movlt	r3, #45	@ 0x2d
 8005f72:	4a80      	ldr	r2, [pc, #512]	@ (8006174 <_printf_float+0x2d8>)
 8005f74:	bfb8      	it	lt
 8005f76:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005f7a:	4b7f      	ldr	r3, [pc, #508]	@ (8006178 <_printf_float+0x2dc>)
 8005f7c:	e7d3      	b.n	8005f26 <_printf_float+0x8a>
 8005f7e:	6863      	ldr	r3, [r4, #4]
 8005f80:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005f84:	1c5a      	adds	r2, r3, #1
 8005f86:	d13f      	bne.n	8006008 <_printf_float+0x16c>
 8005f88:	2306      	movs	r3, #6
 8005f8a:	6063      	str	r3, [r4, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005f92:	6023      	str	r3, [r4, #0]
 8005f94:	9206      	str	r2, [sp, #24]
 8005f96:	aa0e      	add	r2, sp, #56	@ 0x38
 8005f98:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005f9c:	aa0d      	add	r2, sp, #52	@ 0x34
 8005f9e:	9203      	str	r2, [sp, #12]
 8005fa0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005fa4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005fa8:	6863      	ldr	r3, [r4, #4]
 8005faa:	4642      	mov	r2, r8
 8005fac:	9300      	str	r3, [sp, #0]
 8005fae:	4628      	mov	r0, r5
 8005fb0:	464b      	mov	r3, r9
 8005fb2:	910a      	str	r1, [sp, #40]	@ 0x28
 8005fb4:	f7ff fed4 	bl	8005d60 <__cvt>
 8005fb8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005fba:	4680      	mov	r8, r0
 8005fbc:	2947      	cmp	r1, #71	@ 0x47
 8005fbe:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005fc0:	d128      	bne.n	8006014 <_printf_float+0x178>
 8005fc2:	1cc8      	adds	r0, r1, #3
 8005fc4:	db02      	blt.n	8005fcc <_printf_float+0x130>
 8005fc6:	6863      	ldr	r3, [r4, #4]
 8005fc8:	4299      	cmp	r1, r3
 8005fca:	dd40      	ble.n	800604e <_printf_float+0x1b2>
 8005fcc:	f1aa 0a02 	sub.w	sl, sl, #2
 8005fd0:	fa5f fa8a 	uxtb.w	sl, sl
 8005fd4:	4652      	mov	r2, sl
 8005fd6:	3901      	subs	r1, #1
 8005fd8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005fdc:	910d      	str	r1, [sp, #52]	@ 0x34
 8005fde:	f7ff ff23 	bl	8005e28 <__exponent>
 8005fe2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005fe4:	4681      	mov	r9, r0
 8005fe6:	1813      	adds	r3, r2, r0
 8005fe8:	2a01      	cmp	r2, #1
 8005fea:	6123      	str	r3, [r4, #16]
 8005fec:	dc02      	bgt.n	8005ff4 <_printf_float+0x158>
 8005fee:	6822      	ldr	r2, [r4, #0]
 8005ff0:	07d2      	lsls	r2, r2, #31
 8005ff2:	d501      	bpl.n	8005ff8 <_printf_float+0x15c>
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	6123      	str	r3, [r4, #16]
 8005ff8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d09e      	beq.n	8005f3e <_printf_float+0xa2>
 8006000:	232d      	movs	r3, #45	@ 0x2d
 8006002:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006006:	e79a      	b.n	8005f3e <_printf_float+0xa2>
 8006008:	2947      	cmp	r1, #71	@ 0x47
 800600a:	d1bf      	bne.n	8005f8c <_printf_float+0xf0>
 800600c:	2b00      	cmp	r3, #0
 800600e:	d1bd      	bne.n	8005f8c <_printf_float+0xf0>
 8006010:	2301      	movs	r3, #1
 8006012:	e7ba      	b.n	8005f8a <_printf_float+0xee>
 8006014:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006018:	d9dc      	bls.n	8005fd4 <_printf_float+0x138>
 800601a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800601e:	d118      	bne.n	8006052 <_printf_float+0x1b6>
 8006020:	2900      	cmp	r1, #0
 8006022:	6863      	ldr	r3, [r4, #4]
 8006024:	dd0b      	ble.n	800603e <_printf_float+0x1a2>
 8006026:	6121      	str	r1, [r4, #16]
 8006028:	b913      	cbnz	r3, 8006030 <_printf_float+0x194>
 800602a:	6822      	ldr	r2, [r4, #0]
 800602c:	07d0      	lsls	r0, r2, #31
 800602e:	d502      	bpl.n	8006036 <_printf_float+0x19a>
 8006030:	3301      	adds	r3, #1
 8006032:	440b      	add	r3, r1
 8006034:	6123      	str	r3, [r4, #16]
 8006036:	f04f 0900 	mov.w	r9, #0
 800603a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800603c:	e7dc      	b.n	8005ff8 <_printf_float+0x15c>
 800603e:	b913      	cbnz	r3, 8006046 <_printf_float+0x1aa>
 8006040:	6822      	ldr	r2, [r4, #0]
 8006042:	07d2      	lsls	r2, r2, #31
 8006044:	d501      	bpl.n	800604a <_printf_float+0x1ae>
 8006046:	3302      	adds	r3, #2
 8006048:	e7f4      	b.n	8006034 <_printf_float+0x198>
 800604a:	2301      	movs	r3, #1
 800604c:	e7f2      	b.n	8006034 <_printf_float+0x198>
 800604e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006052:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006054:	4299      	cmp	r1, r3
 8006056:	db05      	blt.n	8006064 <_printf_float+0x1c8>
 8006058:	6823      	ldr	r3, [r4, #0]
 800605a:	6121      	str	r1, [r4, #16]
 800605c:	07d8      	lsls	r0, r3, #31
 800605e:	d5ea      	bpl.n	8006036 <_printf_float+0x19a>
 8006060:	1c4b      	adds	r3, r1, #1
 8006062:	e7e7      	b.n	8006034 <_printf_float+0x198>
 8006064:	2900      	cmp	r1, #0
 8006066:	bfcc      	ite	gt
 8006068:	2201      	movgt	r2, #1
 800606a:	f1c1 0202 	rsble	r2, r1, #2
 800606e:	4413      	add	r3, r2
 8006070:	e7e0      	b.n	8006034 <_printf_float+0x198>
 8006072:	6823      	ldr	r3, [r4, #0]
 8006074:	055a      	lsls	r2, r3, #21
 8006076:	d407      	bmi.n	8006088 <_printf_float+0x1ec>
 8006078:	6923      	ldr	r3, [r4, #16]
 800607a:	4642      	mov	r2, r8
 800607c:	4631      	mov	r1, r6
 800607e:	4628      	mov	r0, r5
 8006080:	47b8      	blx	r7
 8006082:	3001      	adds	r0, #1
 8006084:	d12b      	bne.n	80060de <_printf_float+0x242>
 8006086:	e764      	b.n	8005f52 <_printf_float+0xb6>
 8006088:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800608c:	f240 80dc 	bls.w	8006248 <_printf_float+0x3ac>
 8006090:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006094:	2200      	movs	r2, #0
 8006096:	2300      	movs	r3, #0
 8006098:	f7fa fc86 	bl	80009a8 <__aeabi_dcmpeq>
 800609c:	2800      	cmp	r0, #0
 800609e:	d033      	beq.n	8006108 <_printf_float+0x26c>
 80060a0:	2301      	movs	r3, #1
 80060a2:	4631      	mov	r1, r6
 80060a4:	4628      	mov	r0, r5
 80060a6:	4a35      	ldr	r2, [pc, #212]	@ (800617c <_printf_float+0x2e0>)
 80060a8:	47b8      	blx	r7
 80060aa:	3001      	adds	r0, #1
 80060ac:	f43f af51 	beq.w	8005f52 <_printf_float+0xb6>
 80060b0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80060b4:	4543      	cmp	r3, r8
 80060b6:	db02      	blt.n	80060be <_printf_float+0x222>
 80060b8:	6823      	ldr	r3, [r4, #0]
 80060ba:	07d8      	lsls	r0, r3, #31
 80060bc:	d50f      	bpl.n	80060de <_printf_float+0x242>
 80060be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80060c2:	4631      	mov	r1, r6
 80060c4:	4628      	mov	r0, r5
 80060c6:	47b8      	blx	r7
 80060c8:	3001      	adds	r0, #1
 80060ca:	f43f af42 	beq.w	8005f52 <_printf_float+0xb6>
 80060ce:	f04f 0900 	mov.w	r9, #0
 80060d2:	f108 38ff 	add.w	r8, r8, #4294967295
 80060d6:	f104 0a1a 	add.w	sl, r4, #26
 80060da:	45c8      	cmp	r8, r9
 80060dc:	dc09      	bgt.n	80060f2 <_printf_float+0x256>
 80060de:	6823      	ldr	r3, [r4, #0]
 80060e0:	079b      	lsls	r3, r3, #30
 80060e2:	f100 8102 	bmi.w	80062ea <_printf_float+0x44e>
 80060e6:	68e0      	ldr	r0, [r4, #12]
 80060e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80060ea:	4298      	cmp	r0, r3
 80060ec:	bfb8      	it	lt
 80060ee:	4618      	movlt	r0, r3
 80060f0:	e731      	b.n	8005f56 <_printf_float+0xba>
 80060f2:	2301      	movs	r3, #1
 80060f4:	4652      	mov	r2, sl
 80060f6:	4631      	mov	r1, r6
 80060f8:	4628      	mov	r0, r5
 80060fa:	47b8      	blx	r7
 80060fc:	3001      	adds	r0, #1
 80060fe:	f43f af28 	beq.w	8005f52 <_printf_float+0xb6>
 8006102:	f109 0901 	add.w	r9, r9, #1
 8006106:	e7e8      	b.n	80060da <_printf_float+0x23e>
 8006108:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800610a:	2b00      	cmp	r3, #0
 800610c:	dc38      	bgt.n	8006180 <_printf_float+0x2e4>
 800610e:	2301      	movs	r3, #1
 8006110:	4631      	mov	r1, r6
 8006112:	4628      	mov	r0, r5
 8006114:	4a19      	ldr	r2, [pc, #100]	@ (800617c <_printf_float+0x2e0>)
 8006116:	47b8      	blx	r7
 8006118:	3001      	adds	r0, #1
 800611a:	f43f af1a 	beq.w	8005f52 <_printf_float+0xb6>
 800611e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8006122:	ea59 0303 	orrs.w	r3, r9, r3
 8006126:	d102      	bne.n	800612e <_printf_float+0x292>
 8006128:	6823      	ldr	r3, [r4, #0]
 800612a:	07d9      	lsls	r1, r3, #31
 800612c:	d5d7      	bpl.n	80060de <_printf_float+0x242>
 800612e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006132:	4631      	mov	r1, r6
 8006134:	4628      	mov	r0, r5
 8006136:	47b8      	blx	r7
 8006138:	3001      	adds	r0, #1
 800613a:	f43f af0a 	beq.w	8005f52 <_printf_float+0xb6>
 800613e:	f04f 0a00 	mov.w	sl, #0
 8006142:	f104 0b1a 	add.w	fp, r4, #26
 8006146:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006148:	425b      	negs	r3, r3
 800614a:	4553      	cmp	r3, sl
 800614c:	dc01      	bgt.n	8006152 <_printf_float+0x2b6>
 800614e:	464b      	mov	r3, r9
 8006150:	e793      	b.n	800607a <_printf_float+0x1de>
 8006152:	2301      	movs	r3, #1
 8006154:	465a      	mov	r2, fp
 8006156:	4631      	mov	r1, r6
 8006158:	4628      	mov	r0, r5
 800615a:	47b8      	blx	r7
 800615c:	3001      	adds	r0, #1
 800615e:	f43f aef8 	beq.w	8005f52 <_printf_float+0xb6>
 8006162:	f10a 0a01 	add.w	sl, sl, #1
 8006166:	e7ee      	b.n	8006146 <_printf_float+0x2aa>
 8006168:	7fefffff 	.word	0x7fefffff
 800616c:	0800928a 	.word	0x0800928a
 8006170:	0800928e 	.word	0x0800928e
 8006174:	08009292 	.word	0x08009292
 8006178:	08009296 	.word	0x08009296
 800617c:	0800929a 	.word	0x0800929a
 8006180:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006182:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006186:	4553      	cmp	r3, sl
 8006188:	bfa8      	it	ge
 800618a:	4653      	movge	r3, sl
 800618c:	2b00      	cmp	r3, #0
 800618e:	4699      	mov	r9, r3
 8006190:	dc36      	bgt.n	8006200 <_printf_float+0x364>
 8006192:	f04f 0b00 	mov.w	fp, #0
 8006196:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800619a:	f104 021a 	add.w	r2, r4, #26
 800619e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80061a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80061a2:	eba3 0309 	sub.w	r3, r3, r9
 80061a6:	455b      	cmp	r3, fp
 80061a8:	dc31      	bgt.n	800620e <_printf_float+0x372>
 80061aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80061ac:	459a      	cmp	sl, r3
 80061ae:	dc3a      	bgt.n	8006226 <_printf_float+0x38a>
 80061b0:	6823      	ldr	r3, [r4, #0]
 80061b2:	07da      	lsls	r2, r3, #31
 80061b4:	d437      	bmi.n	8006226 <_printf_float+0x38a>
 80061b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80061b8:	ebaa 0903 	sub.w	r9, sl, r3
 80061bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80061be:	ebaa 0303 	sub.w	r3, sl, r3
 80061c2:	4599      	cmp	r9, r3
 80061c4:	bfa8      	it	ge
 80061c6:	4699      	movge	r9, r3
 80061c8:	f1b9 0f00 	cmp.w	r9, #0
 80061cc:	dc33      	bgt.n	8006236 <_printf_float+0x39a>
 80061ce:	f04f 0800 	mov.w	r8, #0
 80061d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80061d6:	f104 0b1a 	add.w	fp, r4, #26
 80061da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80061dc:	ebaa 0303 	sub.w	r3, sl, r3
 80061e0:	eba3 0309 	sub.w	r3, r3, r9
 80061e4:	4543      	cmp	r3, r8
 80061e6:	f77f af7a 	ble.w	80060de <_printf_float+0x242>
 80061ea:	2301      	movs	r3, #1
 80061ec:	465a      	mov	r2, fp
 80061ee:	4631      	mov	r1, r6
 80061f0:	4628      	mov	r0, r5
 80061f2:	47b8      	blx	r7
 80061f4:	3001      	adds	r0, #1
 80061f6:	f43f aeac 	beq.w	8005f52 <_printf_float+0xb6>
 80061fa:	f108 0801 	add.w	r8, r8, #1
 80061fe:	e7ec      	b.n	80061da <_printf_float+0x33e>
 8006200:	4642      	mov	r2, r8
 8006202:	4631      	mov	r1, r6
 8006204:	4628      	mov	r0, r5
 8006206:	47b8      	blx	r7
 8006208:	3001      	adds	r0, #1
 800620a:	d1c2      	bne.n	8006192 <_printf_float+0x2f6>
 800620c:	e6a1      	b.n	8005f52 <_printf_float+0xb6>
 800620e:	2301      	movs	r3, #1
 8006210:	4631      	mov	r1, r6
 8006212:	4628      	mov	r0, r5
 8006214:	920a      	str	r2, [sp, #40]	@ 0x28
 8006216:	47b8      	blx	r7
 8006218:	3001      	adds	r0, #1
 800621a:	f43f ae9a 	beq.w	8005f52 <_printf_float+0xb6>
 800621e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006220:	f10b 0b01 	add.w	fp, fp, #1
 8006224:	e7bb      	b.n	800619e <_printf_float+0x302>
 8006226:	4631      	mov	r1, r6
 8006228:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800622c:	4628      	mov	r0, r5
 800622e:	47b8      	blx	r7
 8006230:	3001      	adds	r0, #1
 8006232:	d1c0      	bne.n	80061b6 <_printf_float+0x31a>
 8006234:	e68d      	b.n	8005f52 <_printf_float+0xb6>
 8006236:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006238:	464b      	mov	r3, r9
 800623a:	4631      	mov	r1, r6
 800623c:	4628      	mov	r0, r5
 800623e:	4442      	add	r2, r8
 8006240:	47b8      	blx	r7
 8006242:	3001      	adds	r0, #1
 8006244:	d1c3      	bne.n	80061ce <_printf_float+0x332>
 8006246:	e684      	b.n	8005f52 <_printf_float+0xb6>
 8006248:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800624c:	f1ba 0f01 	cmp.w	sl, #1
 8006250:	dc01      	bgt.n	8006256 <_printf_float+0x3ba>
 8006252:	07db      	lsls	r3, r3, #31
 8006254:	d536      	bpl.n	80062c4 <_printf_float+0x428>
 8006256:	2301      	movs	r3, #1
 8006258:	4642      	mov	r2, r8
 800625a:	4631      	mov	r1, r6
 800625c:	4628      	mov	r0, r5
 800625e:	47b8      	blx	r7
 8006260:	3001      	adds	r0, #1
 8006262:	f43f ae76 	beq.w	8005f52 <_printf_float+0xb6>
 8006266:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800626a:	4631      	mov	r1, r6
 800626c:	4628      	mov	r0, r5
 800626e:	47b8      	blx	r7
 8006270:	3001      	adds	r0, #1
 8006272:	f43f ae6e 	beq.w	8005f52 <_printf_float+0xb6>
 8006276:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800627a:	2200      	movs	r2, #0
 800627c:	2300      	movs	r3, #0
 800627e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006282:	f7fa fb91 	bl	80009a8 <__aeabi_dcmpeq>
 8006286:	b9c0      	cbnz	r0, 80062ba <_printf_float+0x41e>
 8006288:	4653      	mov	r3, sl
 800628a:	f108 0201 	add.w	r2, r8, #1
 800628e:	4631      	mov	r1, r6
 8006290:	4628      	mov	r0, r5
 8006292:	47b8      	blx	r7
 8006294:	3001      	adds	r0, #1
 8006296:	d10c      	bne.n	80062b2 <_printf_float+0x416>
 8006298:	e65b      	b.n	8005f52 <_printf_float+0xb6>
 800629a:	2301      	movs	r3, #1
 800629c:	465a      	mov	r2, fp
 800629e:	4631      	mov	r1, r6
 80062a0:	4628      	mov	r0, r5
 80062a2:	47b8      	blx	r7
 80062a4:	3001      	adds	r0, #1
 80062a6:	f43f ae54 	beq.w	8005f52 <_printf_float+0xb6>
 80062aa:	f108 0801 	add.w	r8, r8, #1
 80062ae:	45d0      	cmp	r8, sl
 80062b0:	dbf3      	blt.n	800629a <_printf_float+0x3fe>
 80062b2:	464b      	mov	r3, r9
 80062b4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80062b8:	e6e0      	b.n	800607c <_printf_float+0x1e0>
 80062ba:	f04f 0800 	mov.w	r8, #0
 80062be:	f104 0b1a 	add.w	fp, r4, #26
 80062c2:	e7f4      	b.n	80062ae <_printf_float+0x412>
 80062c4:	2301      	movs	r3, #1
 80062c6:	4642      	mov	r2, r8
 80062c8:	e7e1      	b.n	800628e <_printf_float+0x3f2>
 80062ca:	2301      	movs	r3, #1
 80062cc:	464a      	mov	r2, r9
 80062ce:	4631      	mov	r1, r6
 80062d0:	4628      	mov	r0, r5
 80062d2:	47b8      	blx	r7
 80062d4:	3001      	adds	r0, #1
 80062d6:	f43f ae3c 	beq.w	8005f52 <_printf_float+0xb6>
 80062da:	f108 0801 	add.w	r8, r8, #1
 80062de:	68e3      	ldr	r3, [r4, #12]
 80062e0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80062e2:	1a5b      	subs	r3, r3, r1
 80062e4:	4543      	cmp	r3, r8
 80062e6:	dcf0      	bgt.n	80062ca <_printf_float+0x42e>
 80062e8:	e6fd      	b.n	80060e6 <_printf_float+0x24a>
 80062ea:	f04f 0800 	mov.w	r8, #0
 80062ee:	f104 0919 	add.w	r9, r4, #25
 80062f2:	e7f4      	b.n	80062de <_printf_float+0x442>

080062f4 <_printf_common>:
 80062f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062f8:	4616      	mov	r6, r2
 80062fa:	4698      	mov	r8, r3
 80062fc:	688a      	ldr	r2, [r1, #8]
 80062fe:	690b      	ldr	r3, [r1, #16]
 8006300:	4607      	mov	r7, r0
 8006302:	4293      	cmp	r3, r2
 8006304:	bfb8      	it	lt
 8006306:	4613      	movlt	r3, r2
 8006308:	6033      	str	r3, [r6, #0]
 800630a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800630e:	460c      	mov	r4, r1
 8006310:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006314:	b10a      	cbz	r2, 800631a <_printf_common+0x26>
 8006316:	3301      	adds	r3, #1
 8006318:	6033      	str	r3, [r6, #0]
 800631a:	6823      	ldr	r3, [r4, #0]
 800631c:	0699      	lsls	r1, r3, #26
 800631e:	bf42      	ittt	mi
 8006320:	6833      	ldrmi	r3, [r6, #0]
 8006322:	3302      	addmi	r3, #2
 8006324:	6033      	strmi	r3, [r6, #0]
 8006326:	6825      	ldr	r5, [r4, #0]
 8006328:	f015 0506 	ands.w	r5, r5, #6
 800632c:	d106      	bne.n	800633c <_printf_common+0x48>
 800632e:	f104 0a19 	add.w	sl, r4, #25
 8006332:	68e3      	ldr	r3, [r4, #12]
 8006334:	6832      	ldr	r2, [r6, #0]
 8006336:	1a9b      	subs	r3, r3, r2
 8006338:	42ab      	cmp	r3, r5
 800633a:	dc2b      	bgt.n	8006394 <_printf_common+0xa0>
 800633c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006340:	6822      	ldr	r2, [r4, #0]
 8006342:	3b00      	subs	r3, #0
 8006344:	bf18      	it	ne
 8006346:	2301      	movne	r3, #1
 8006348:	0692      	lsls	r2, r2, #26
 800634a:	d430      	bmi.n	80063ae <_printf_common+0xba>
 800634c:	4641      	mov	r1, r8
 800634e:	4638      	mov	r0, r7
 8006350:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006354:	47c8      	blx	r9
 8006356:	3001      	adds	r0, #1
 8006358:	d023      	beq.n	80063a2 <_printf_common+0xae>
 800635a:	6823      	ldr	r3, [r4, #0]
 800635c:	6922      	ldr	r2, [r4, #16]
 800635e:	f003 0306 	and.w	r3, r3, #6
 8006362:	2b04      	cmp	r3, #4
 8006364:	bf14      	ite	ne
 8006366:	2500      	movne	r5, #0
 8006368:	6833      	ldreq	r3, [r6, #0]
 800636a:	f04f 0600 	mov.w	r6, #0
 800636e:	bf08      	it	eq
 8006370:	68e5      	ldreq	r5, [r4, #12]
 8006372:	f104 041a 	add.w	r4, r4, #26
 8006376:	bf08      	it	eq
 8006378:	1aed      	subeq	r5, r5, r3
 800637a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800637e:	bf08      	it	eq
 8006380:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006384:	4293      	cmp	r3, r2
 8006386:	bfc4      	itt	gt
 8006388:	1a9b      	subgt	r3, r3, r2
 800638a:	18ed      	addgt	r5, r5, r3
 800638c:	42b5      	cmp	r5, r6
 800638e:	d11a      	bne.n	80063c6 <_printf_common+0xd2>
 8006390:	2000      	movs	r0, #0
 8006392:	e008      	b.n	80063a6 <_printf_common+0xb2>
 8006394:	2301      	movs	r3, #1
 8006396:	4652      	mov	r2, sl
 8006398:	4641      	mov	r1, r8
 800639a:	4638      	mov	r0, r7
 800639c:	47c8      	blx	r9
 800639e:	3001      	adds	r0, #1
 80063a0:	d103      	bne.n	80063aa <_printf_common+0xb6>
 80063a2:	f04f 30ff 	mov.w	r0, #4294967295
 80063a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063aa:	3501      	adds	r5, #1
 80063ac:	e7c1      	b.n	8006332 <_printf_common+0x3e>
 80063ae:	2030      	movs	r0, #48	@ 0x30
 80063b0:	18e1      	adds	r1, r4, r3
 80063b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80063b6:	1c5a      	adds	r2, r3, #1
 80063b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80063bc:	4422      	add	r2, r4
 80063be:	3302      	adds	r3, #2
 80063c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80063c4:	e7c2      	b.n	800634c <_printf_common+0x58>
 80063c6:	2301      	movs	r3, #1
 80063c8:	4622      	mov	r2, r4
 80063ca:	4641      	mov	r1, r8
 80063cc:	4638      	mov	r0, r7
 80063ce:	47c8      	blx	r9
 80063d0:	3001      	adds	r0, #1
 80063d2:	d0e6      	beq.n	80063a2 <_printf_common+0xae>
 80063d4:	3601      	adds	r6, #1
 80063d6:	e7d9      	b.n	800638c <_printf_common+0x98>

080063d8 <_printf_i>:
 80063d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063dc:	7e0f      	ldrb	r7, [r1, #24]
 80063de:	4691      	mov	r9, r2
 80063e0:	2f78      	cmp	r7, #120	@ 0x78
 80063e2:	4680      	mov	r8, r0
 80063e4:	460c      	mov	r4, r1
 80063e6:	469a      	mov	sl, r3
 80063e8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80063ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80063ee:	d807      	bhi.n	8006400 <_printf_i+0x28>
 80063f0:	2f62      	cmp	r7, #98	@ 0x62
 80063f2:	d80a      	bhi.n	800640a <_printf_i+0x32>
 80063f4:	2f00      	cmp	r7, #0
 80063f6:	f000 80d3 	beq.w	80065a0 <_printf_i+0x1c8>
 80063fa:	2f58      	cmp	r7, #88	@ 0x58
 80063fc:	f000 80ba 	beq.w	8006574 <_printf_i+0x19c>
 8006400:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006404:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006408:	e03a      	b.n	8006480 <_printf_i+0xa8>
 800640a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800640e:	2b15      	cmp	r3, #21
 8006410:	d8f6      	bhi.n	8006400 <_printf_i+0x28>
 8006412:	a101      	add	r1, pc, #4	@ (adr r1, 8006418 <_printf_i+0x40>)
 8006414:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006418:	08006471 	.word	0x08006471
 800641c:	08006485 	.word	0x08006485
 8006420:	08006401 	.word	0x08006401
 8006424:	08006401 	.word	0x08006401
 8006428:	08006401 	.word	0x08006401
 800642c:	08006401 	.word	0x08006401
 8006430:	08006485 	.word	0x08006485
 8006434:	08006401 	.word	0x08006401
 8006438:	08006401 	.word	0x08006401
 800643c:	08006401 	.word	0x08006401
 8006440:	08006401 	.word	0x08006401
 8006444:	08006587 	.word	0x08006587
 8006448:	080064af 	.word	0x080064af
 800644c:	08006541 	.word	0x08006541
 8006450:	08006401 	.word	0x08006401
 8006454:	08006401 	.word	0x08006401
 8006458:	080065a9 	.word	0x080065a9
 800645c:	08006401 	.word	0x08006401
 8006460:	080064af 	.word	0x080064af
 8006464:	08006401 	.word	0x08006401
 8006468:	08006401 	.word	0x08006401
 800646c:	08006549 	.word	0x08006549
 8006470:	6833      	ldr	r3, [r6, #0]
 8006472:	1d1a      	adds	r2, r3, #4
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	6032      	str	r2, [r6, #0]
 8006478:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800647c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006480:	2301      	movs	r3, #1
 8006482:	e09e      	b.n	80065c2 <_printf_i+0x1ea>
 8006484:	6833      	ldr	r3, [r6, #0]
 8006486:	6820      	ldr	r0, [r4, #0]
 8006488:	1d19      	adds	r1, r3, #4
 800648a:	6031      	str	r1, [r6, #0]
 800648c:	0606      	lsls	r6, r0, #24
 800648e:	d501      	bpl.n	8006494 <_printf_i+0xbc>
 8006490:	681d      	ldr	r5, [r3, #0]
 8006492:	e003      	b.n	800649c <_printf_i+0xc4>
 8006494:	0645      	lsls	r5, r0, #25
 8006496:	d5fb      	bpl.n	8006490 <_printf_i+0xb8>
 8006498:	f9b3 5000 	ldrsh.w	r5, [r3]
 800649c:	2d00      	cmp	r5, #0
 800649e:	da03      	bge.n	80064a8 <_printf_i+0xd0>
 80064a0:	232d      	movs	r3, #45	@ 0x2d
 80064a2:	426d      	negs	r5, r5
 80064a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064a8:	230a      	movs	r3, #10
 80064aa:	4859      	ldr	r0, [pc, #356]	@ (8006610 <_printf_i+0x238>)
 80064ac:	e011      	b.n	80064d2 <_printf_i+0xfa>
 80064ae:	6821      	ldr	r1, [r4, #0]
 80064b0:	6833      	ldr	r3, [r6, #0]
 80064b2:	0608      	lsls	r0, r1, #24
 80064b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80064b8:	d402      	bmi.n	80064c0 <_printf_i+0xe8>
 80064ba:	0649      	lsls	r1, r1, #25
 80064bc:	bf48      	it	mi
 80064be:	b2ad      	uxthmi	r5, r5
 80064c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80064c2:	6033      	str	r3, [r6, #0]
 80064c4:	bf14      	ite	ne
 80064c6:	230a      	movne	r3, #10
 80064c8:	2308      	moveq	r3, #8
 80064ca:	4851      	ldr	r0, [pc, #324]	@ (8006610 <_printf_i+0x238>)
 80064cc:	2100      	movs	r1, #0
 80064ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80064d2:	6866      	ldr	r6, [r4, #4]
 80064d4:	2e00      	cmp	r6, #0
 80064d6:	bfa8      	it	ge
 80064d8:	6821      	ldrge	r1, [r4, #0]
 80064da:	60a6      	str	r6, [r4, #8]
 80064dc:	bfa4      	itt	ge
 80064de:	f021 0104 	bicge.w	r1, r1, #4
 80064e2:	6021      	strge	r1, [r4, #0]
 80064e4:	b90d      	cbnz	r5, 80064ea <_printf_i+0x112>
 80064e6:	2e00      	cmp	r6, #0
 80064e8:	d04b      	beq.n	8006582 <_printf_i+0x1aa>
 80064ea:	4616      	mov	r6, r2
 80064ec:	fbb5 f1f3 	udiv	r1, r5, r3
 80064f0:	fb03 5711 	mls	r7, r3, r1, r5
 80064f4:	5dc7      	ldrb	r7, [r0, r7]
 80064f6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80064fa:	462f      	mov	r7, r5
 80064fc:	42bb      	cmp	r3, r7
 80064fe:	460d      	mov	r5, r1
 8006500:	d9f4      	bls.n	80064ec <_printf_i+0x114>
 8006502:	2b08      	cmp	r3, #8
 8006504:	d10b      	bne.n	800651e <_printf_i+0x146>
 8006506:	6823      	ldr	r3, [r4, #0]
 8006508:	07df      	lsls	r7, r3, #31
 800650a:	d508      	bpl.n	800651e <_printf_i+0x146>
 800650c:	6923      	ldr	r3, [r4, #16]
 800650e:	6861      	ldr	r1, [r4, #4]
 8006510:	4299      	cmp	r1, r3
 8006512:	bfde      	ittt	le
 8006514:	2330      	movle	r3, #48	@ 0x30
 8006516:	f806 3c01 	strble.w	r3, [r6, #-1]
 800651a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800651e:	1b92      	subs	r2, r2, r6
 8006520:	6122      	str	r2, [r4, #16]
 8006522:	464b      	mov	r3, r9
 8006524:	4621      	mov	r1, r4
 8006526:	4640      	mov	r0, r8
 8006528:	f8cd a000 	str.w	sl, [sp]
 800652c:	aa03      	add	r2, sp, #12
 800652e:	f7ff fee1 	bl	80062f4 <_printf_common>
 8006532:	3001      	adds	r0, #1
 8006534:	d14a      	bne.n	80065cc <_printf_i+0x1f4>
 8006536:	f04f 30ff 	mov.w	r0, #4294967295
 800653a:	b004      	add	sp, #16
 800653c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006540:	6823      	ldr	r3, [r4, #0]
 8006542:	f043 0320 	orr.w	r3, r3, #32
 8006546:	6023      	str	r3, [r4, #0]
 8006548:	2778      	movs	r7, #120	@ 0x78
 800654a:	4832      	ldr	r0, [pc, #200]	@ (8006614 <_printf_i+0x23c>)
 800654c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006550:	6823      	ldr	r3, [r4, #0]
 8006552:	6831      	ldr	r1, [r6, #0]
 8006554:	061f      	lsls	r7, r3, #24
 8006556:	f851 5b04 	ldr.w	r5, [r1], #4
 800655a:	d402      	bmi.n	8006562 <_printf_i+0x18a>
 800655c:	065f      	lsls	r7, r3, #25
 800655e:	bf48      	it	mi
 8006560:	b2ad      	uxthmi	r5, r5
 8006562:	6031      	str	r1, [r6, #0]
 8006564:	07d9      	lsls	r1, r3, #31
 8006566:	bf44      	itt	mi
 8006568:	f043 0320 	orrmi.w	r3, r3, #32
 800656c:	6023      	strmi	r3, [r4, #0]
 800656e:	b11d      	cbz	r5, 8006578 <_printf_i+0x1a0>
 8006570:	2310      	movs	r3, #16
 8006572:	e7ab      	b.n	80064cc <_printf_i+0xf4>
 8006574:	4826      	ldr	r0, [pc, #152]	@ (8006610 <_printf_i+0x238>)
 8006576:	e7e9      	b.n	800654c <_printf_i+0x174>
 8006578:	6823      	ldr	r3, [r4, #0]
 800657a:	f023 0320 	bic.w	r3, r3, #32
 800657e:	6023      	str	r3, [r4, #0]
 8006580:	e7f6      	b.n	8006570 <_printf_i+0x198>
 8006582:	4616      	mov	r6, r2
 8006584:	e7bd      	b.n	8006502 <_printf_i+0x12a>
 8006586:	6833      	ldr	r3, [r6, #0]
 8006588:	6825      	ldr	r5, [r4, #0]
 800658a:	1d18      	adds	r0, r3, #4
 800658c:	6961      	ldr	r1, [r4, #20]
 800658e:	6030      	str	r0, [r6, #0]
 8006590:	062e      	lsls	r6, r5, #24
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	d501      	bpl.n	800659a <_printf_i+0x1c2>
 8006596:	6019      	str	r1, [r3, #0]
 8006598:	e002      	b.n	80065a0 <_printf_i+0x1c8>
 800659a:	0668      	lsls	r0, r5, #25
 800659c:	d5fb      	bpl.n	8006596 <_printf_i+0x1be>
 800659e:	8019      	strh	r1, [r3, #0]
 80065a0:	2300      	movs	r3, #0
 80065a2:	4616      	mov	r6, r2
 80065a4:	6123      	str	r3, [r4, #16]
 80065a6:	e7bc      	b.n	8006522 <_printf_i+0x14a>
 80065a8:	6833      	ldr	r3, [r6, #0]
 80065aa:	2100      	movs	r1, #0
 80065ac:	1d1a      	adds	r2, r3, #4
 80065ae:	6032      	str	r2, [r6, #0]
 80065b0:	681e      	ldr	r6, [r3, #0]
 80065b2:	6862      	ldr	r2, [r4, #4]
 80065b4:	4630      	mov	r0, r6
 80065b6:	f000 f9f4 	bl	80069a2 <memchr>
 80065ba:	b108      	cbz	r0, 80065c0 <_printf_i+0x1e8>
 80065bc:	1b80      	subs	r0, r0, r6
 80065be:	6060      	str	r0, [r4, #4]
 80065c0:	6863      	ldr	r3, [r4, #4]
 80065c2:	6123      	str	r3, [r4, #16]
 80065c4:	2300      	movs	r3, #0
 80065c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065ca:	e7aa      	b.n	8006522 <_printf_i+0x14a>
 80065cc:	4632      	mov	r2, r6
 80065ce:	4649      	mov	r1, r9
 80065d0:	4640      	mov	r0, r8
 80065d2:	6923      	ldr	r3, [r4, #16]
 80065d4:	47d0      	blx	sl
 80065d6:	3001      	adds	r0, #1
 80065d8:	d0ad      	beq.n	8006536 <_printf_i+0x15e>
 80065da:	6823      	ldr	r3, [r4, #0]
 80065dc:	079b      	lsls	r3, r3, #30
 80065de:	d413      	bmi.n	8006608 <_printf_i+0x230>
 80065e0:	68e0      	ldr	r0, [r4, #12]
 80065e2:	9b03      	ldr	r3, [sp, #12]
 80065e4:	4298      	cmp	r0, r3
 80065e6:	bfb8      	it	lt
 80065e8:	4618      	movlt	r0, r3
 80065ea:	e7a6      	b.n	800653a <_printf_i+0x162>
 80065ec:	2301      	movs	r3, #1
 80065ee:	4632      	mov	r2, r6
 80065f0:	4649      	mov	r1, r9
 80065f2:	4640      	mov	r0, r8
 80065f4:	47d0      	blx	sl
 80065f6:	3001      	adds	r0, #1
 80065f8:	d09d      	beq.n	8006536 <_printf_i+0x15e>
 80065fa:	3501      	adds	r5, #1
 80065fc:	68e3      	ldr	r3, [r4, #12]
 80065fe:	9903      	ldr	r1, [sp, #12]
 8006600:	1a5b      	subs	r3, r3, r1
 8006602:	42ab      	cmp	r3, r5
 8006604:	dcf2      	bgt.n	80065ec <_printf_i+0x214>
 8006606:	e7eb      	b.n	80065e0 <_printf_i+0x208>
 8006608:	2500      	movs	r5, #0
 800660a:	f104 0619 	add.w	r6, r4, #25
 800660e:	e7f5      	b.n	80065fc <_printf_i+0x224>
 8006610:	0800929c 	.word	0x0800929c
 8006614:	080092ad 	.word	0x080092ad

08006618 <std>:
 8006618:	2300      	movs	r3, #0
 800661a:	b510      	push	{r4, lr}
 800661c:	4604      	mov	r4, r0
 800661e:	e9c0 3300 	strd	r3, r3, [r0]
 8006622:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006626:	6083      	str	r3, [r0, #8]
 8006628:	8181      	strh	r1, [r0, #12]
 800662a:	6643      	str	r3, [r0, #100]	@ 0x64
 800662c:	81c2      	strh	r2, [r0, #14]
 800662e:	6183      	str	r3, [r0, #24]
 8006630:	4619      	mov	r1, r3
 8006632:	2208      	movs	r2, #8
 8006634:	305c      	adds	r0, #92	@ 0x5c
 8006636:	f000 f935 	bl	80068a4 <memset>
 800663a:	4b0d      	ldr	r3, [pc, #52]	@ (8006670 <std+0x58>)
 800663c:	6224      	str	r4, [r4, #32]
 800663e:	6263      	str	r3, [r4, #36]	@ 0x24
 8006640:	4b0c      	ldr	r3, [pc, #48]	@ (8006674 <std+0x5c>)
 8006642:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006644:	4b0c      	ldr	r3, [pc, #48]	@ (8006678 <std+0x60>)
 8006646:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006648:	4b0c      	ldr	r3, [pc, #48]	@ (800667c <std+0x64>)
 800664a:	6323      	str	r3, [r4, #48]	@ 0x30
 800664c:	4b0c      	ldr	r3, [pc, #48]	@ (8006680 <std+0x68>)
 800664e:	429c      	cmp	r4, r3
 8006650:	d006      	beq.n	8006660 <std+0x48>
 8006652:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006656:	4294      	cmp	r4, r2
 8006658:	d002      	beq.n	8006660 <std+0x48>
 800665a:	33d0      	adds	r3, #208	@ 0xd0
 800665c:	429c      	cmp	r4, r3
 800665e:	d105      	bne.n	800666c <std+0x54>
 8006660:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006668:	f000 b998 	b.w	800699c <__retarget_lock_init_recursive>
 800666c:	bd10      	pop	{r4, pc}
 800666e:	bf00      	nop
 8006670:	080067dd 	.word	0x080067dd
 8006674:	080067ff 	.word	0x080067ff
 8006678:	08006837 	.word	0x08006837
 800667c:	0800685b 	.word	0x0800685b
 8006680:	20000460 	.word	0x20000460

08006684 <stdio_exit_handler>:
 8006684:	4a02      	ldr	r2, [pc, #8]	@ (8006690 <stdio_exit_handler+0xc>)
 8006686:	4903      	ldr	r1, [pc, #12]	@ (8006694 <stdio_exit_handler+0x10>)
 8006688:	4803      	ldr	r0, [pc, #12]	@ (8006698 <stdio_exit_handler+0x14>)
 800668a:	f000 b869 	b.w	8006760 <_fwalk_sglue>
 800668e:	bf00      	nop
 8006690:	20000070 	.word	0x20000070
 8006694:	0800832d 	.word	0x0800832d
 8006698:	20000080 	.word	0x20000080

0800669c <cleanup_stdio>:
 800669c:	6841      	ldr	r1, [r0, #4]
 800669e:	4b0c      	ldr	r3, [pc, #48]	@ (80066d0 <cleanup_stdio+0x34>)
 80066a0:	b510      	push	{r4, lr}
 80066a2:	4299      	cmp	r1, r3
 80066a4:	4604      	mov	r4, r0
 80066a6:	d001      	beq.n	80066ac <cleanup_stdio+0x10>
 80066a8:	f001 fe40 	bl	800832c <_fflush_r>
 80066ac:	68a1      	ldr	r1, [r4, #8]
 80066ae:	4b09      	ldr	r3, [pc, #36]	@ (80066d4 <cleanup_stdio+0x38>)
 80066b0:	4299      	cmp	r1, r3
 80066b2:	d002      	beq.n	80066ba <cleanup_stdio+0x1e>
 80066b4:	4620      	mov	r0, r4
 80066b6:	f001 fe39 	bl	800832c <_fflush_r>
 80066ba:	68e1      	ldr	r1, [r4, #12]
 80066bc:	4b06      	ldr	r3, [pc, #24]	@ (80066d8 <cleanup_stdio+0x3c>)
 80066be:	4299      	cmp	r1, r3
 80066c0:	d004      	beq.n	80066cc <cleanup_stdio+0x30>
 80066c2:	4620      	mov	r0, r4
 80066c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066c8:	f001 be30 	b.w	800832c <_fflush_r>
 80066cc:	bd10      	pop	{r4, pc}
 80066ce:	bf00      	nop
 80066d0:	20000460 	.word	0x20000460
 80066d4:	200004c8 	.word	0x200004c8
 80066d8:	20000530 	.word	0x20000530

080066dc <global_stdio_init.part.0>:
 80066dc:	b510      	push	{r4, lr}
 80066de:	4b0b      	ldr	r3, [pc, #44]	@ (800670c <global_stdio_init.part.0+0x30>)
 80066e0:	4c0b      	ldr	r4, [pc, #44]	@ (8006710 <global_stdio_init.part.0+0x34>)
 80066e2:	4a0c      	ldr	r2, [pc, #48]	@ (8006714 <global_stdio_init.part.0+0x38>)
 80066e4:	4620      	mov	r0, r4
 80066e6:	601a      	str	r2, [r3, #0]
 80066e8:	2104      	movs	r1, #4
 80066ea:	2200      	movs	r2, #0
 80066ec:	f7ff ff94 	bl	8006618 <std>
 80066f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80066f4:	2201      	movs	r2, #1
 80066f6:	2109      	movs	r1, #9
 80066f8:	f7ff ff8e 	bl	8006618 <std>
 80066fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006700:	2202      	movs	r2, #2
 8006702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006706:	2112      	movs	r1, #18
 8006708:	f7ff bf86 	b.w	8006618 <std>
 800670c:	20000598 	.word	0x20000598
 8006710:	20000460 	.word	0x20000460
 8006714:	08006685 	.word	0x08006685

08006718 <__sfp_lock_acquire>:
 8006718:	4801      	ldr	r0, [pc, #4]	@ (8006720 <__sfp_lock_acquire+0x8>)
 800671a:	f000 b940 	b.w	800699e <__retarget_lock_acquire_recursive>
 800671e:	bf00      	nop
 8006720:	200005a1 	.word	0x200005a1

08006724 <__sfp_lock_release>:
 8006724:	4801      	ldr	r0, [pc, #4]	@ (800672c <__sfp_lock_release+0x8>)
 8006726:	f000 b93b 	b.w	80069a0 <__retarget_lock_release_recursive>
 800672a:	bf00      	nop
 800672c:	200005a1 	.word	0x200005a1

08006730 <__sinit>:
 8006730:	b510      	push	{r4, lr}
 8006732:	4604      	mov	r4, r0
 8006734:	f7ff fff0 	bl	8006718 <__sfp_lock_acquire>
 8006738:	6a23      	ldr	r3, [r4, #32]
 800673a:	b11b      	cbz	r3, 8006744 <__sinit+0x14>
 800673c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006740:	f7ff bff0 	b.w	8006724 <__sfp_lock_release>
 8006744:	4b04      	ldr	r3, [pc, #16]	@ (8006758 <__sinit+0x28>)
 8006746:	6223      	str	r3, [r4, #32]
 8006748:	4b04      	ldr	r3, [pc, #16]	@ (800675c <__sinit+0x2c>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d1f5      	bne.n	800673c <__sinit+0xc>
 8006750:	f7ff ffc4 	bl	80066dc <global_stdio_init.part.0>
 8006754:	e7f2      	b.n	800673c <__sinit+0xc>
 8006756:	bf00      	nop
 8006758:	0800669d 	.word	0x0800669d
 800675c:	20000598 	.word	0x20000598

08006760 <_fwalk_sglue>:
 8006760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006764:	4607      	mov	r7, r0
 8006766:	4688      	mov	r8, r1
 8006768:	4614      	mov	r4, r2
 800676a:	2600      	movs	r6, #0
 800676c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006770:	f1b9 0901 	subs.w	r9, r9, #1
 8006774:	d505      	bpl.n	8006782 <_fwalk_sglue+0x22>
 8006776:	6824      	ldr	r4, [r4, #0]
 8006778:	2c00      	cmp	r4, #0
 800677a:	d1f7      	bne.n	800676c <_fwalk_sglue+0xc>
 800677c:	4630      	mov	r0, r6
 800677e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006782:	89ab      	ldrh	r3, [r5, #12]
 8006784:	2b01      	cmp	r3, #1
 8006786:	d907      	bls.n	8006798 <_fwalk_sglue+0x38>
 8006788:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800678c:	3301      	adds	r3, #1
 800678e:	d003      	beq.n	8006798 <_fwalk_sglue+0x38>
 8006790:	4629      	mov	r1, r5
 8006792:	4638      	mov	r0, r7
 8006794:	47c0      	blx	r8
 8006796:	4306      	orrs	r6, r0
 8006798:	3568      	adds	r5, #104	@ 0x68
 800679a:	e7e9      	b.n	8006770 <_fwalk_sglue+0x10>

0800679c <siprintf>:
 800679c:	b40e      	push	{r1, r2, r3}
 800679e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80067a2:	b500      	push	{lr}
 80067a4:	b09c      	sub	sp, #112	@ 0x70
 80067a6:	ab1d      	add	r3, sp, #116	@ 0x74
 80067a8:	9002      	str	r0, [sp, #8]
 80067aa:	9006      	str	r0, [sp, #24]
 80067ac:	9107      	str	r1, [sp, #28]
 80067ae:	9104      	str	r1, [sp, #16]
 80067b0:	4808      	ldr	r0, [pc, #32]	@ (80067d4 <siprintf+0x38>)
 80067b2:	4909      	ldr	r1, [pc, #36]	@ (80067d8 <siprintf+0x3c>)
 80067b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80067b8:	9105      	str	r1, [sp, #20]
 80067ba:	6800      	ldr	r0, [r0, #0]
 80067bc:	a902      	add	r1, sp, #8
 80067be:	9301      	str	r3, [sp, #4]
 80067c0:	f001 fc38 	bl	8008034 <_svfiprintf_r>
 80067c4:	2200      	movs	r2, #0
 80067c6:	9b02      	ldr	r3, [sp, #8]
 80067c8:	701a      	strb	r2, [r3, #0]
 80067ca:	b01c      	add	sp, #112	@ 0x70
 80067cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80067d0:	b003      	add	sp, #12
 80067d2:	4770      	bx	lr
 80067d4:	2000007c 	.word	0x2000007c
 80067d8:	ffff0208 	.word	0xffff0208

080067dc <__sread>:
 80067dc:	b510      	push	{r4, lr}
 80067de:	460c      	mov	r4, r1
 80067e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067e4:	f000 f88c 	bl	8006900 <_read_r>
 80067e8:	2800      	cmp	r0, #0
 80067ea:	bfab      	itete	ge
 80067ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80067ee:	89a3      	ldrhlt	r3, [r4, #12]
 80067f0:	181b      	addge	r3, r3, r0
 80067f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80067f6:	bfac      	ite	ge
 80067f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80067fa:	81a3      	strhlt	r3, [r4, #12]
 80067fc:	bd10      	pop	{r4, pc}

080067fe <__swrite>:
 80067fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006802:	461f      	mov	r7, r3
 8006804:	898b      	ldrh	r3, [r1, #12]
 8006806:	4605      	mov	r5, r0
 8006808:	05db      	lsls	r3, r3, #23
 800680a:	460c      	mov	r4, r1
 800680c:	4616      	mov	r6, r2
 800680e:	d505      	bpl.n	800681c <__swrite+0x1e>
 8006810:	2302      	movs	r3, #2
 8006812:	2200      	movs	r2, #0
 8006814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006818:	f000 f860 	bl	80068dc <_lseek_r>
 800681c:	89a3      	ldrh	r3, [r4, #12]
 800681e:	4632      	mov	r2, r6
 8006820:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006824:	81a3      	strh	r3, [r4, #12]
 8006826:	4628      	mov	r0, r5
 8006828:	463b      	mov	r3, r7
 800682a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800682e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006832:	f000 b877 	b.w	8006924 <_write_r>

08006836 <__sseek>:
 8006836:	b510      	push	{r4, lr}
 8006838:	460c      	mov	r4, r1
 800683a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800683e:	f000 f84d 	bl	80068dc <_lseek_r>
 8006842:	1c43      	adds	r3, r0, #1
 8006844:	89a3      	ldrh	r3, [r4, #12]
 8006846:	bf15      	itete	ne
 8006848:	6560      	strne	r0, [r4, #84]	@ 0x54
 800684a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800684e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006852:	81a3      	strheq	r3, [r4, #12]
 8006854:	bf18      	it	ne
 8006856:	81a3      	strhne	r3, [r4, #12]
 8006858:	bd10      	pop	{r4, pc}

0800685a <__sclose>:
 800685a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800685e:	f000 b82d 	b.w	80068bc <_close_r>
	...

08006864 <_vsiprintf_r>:
 8006864:	b500      	push	{lr}
 8006866:	b09b      	sub	sp, #108	@ 0x6c
 8006868:	9100      	str	r1, [sp, #0]
 800686a:	9104      	str	r1, [sp, #16]
 800686c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006870:	9105      	str	r1, [sp, #20]
 8006872:	9102      	str	r1, [sp, #8]
 8006874:	4905      	ldr	r1, [pc, #20]	@ (800688c <_vsiprintf_r+0x28>)
 8006876:	9103      	str	r1, [sp, #12]
 8006878:	4669      	mov	r1, sp
 800687a:	f001 fbdb 	bl	8008034 <_svfiprintf_r>
 800687e:	2200      	movs	r2, #0
 8006880:	9b00      	ldr	r3, [sp, #0]
 8006882:	701a      	strb	r2, [r3, #0]
 8006884:	b01b      	add	sp, #108	@ 0x6c
 8006886:	f85d fb04 	ldr.w	pc, [sp], #4
 800688a:	bf00      	nop
 800688c:	ffff0208 	.word	0xffff0208

08006890 <vsiprintf>:
 8006890:	4613      	mov	r3, r2
 8006892:	460a      	mov	r2, r1
 8006894:	4601      	mov	r1, r0
 8006896:	4802      	ldr	r0, [pc, #8]	@ (80068a0 <vsiprintf+0x10>)
 8006898:	6800      	ldr	r0, [r0, #0]
 800689a:	f7ff bfe3 	b.w	8006864 <_vsiprintf_r>
 800689e:	bf00      	nop
 80068a0:	2000007c 	.word	0x2000007c

080068a4 <memset>:
 80068a4:	4603      	mov	r3, r0
 80068a6:	4402      	add	r2, r0
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d100      	bne.n	80068ae <memset+0xa>
 80068ac:	4770      	bx	lr
 80068ae:	f803 1b01 	strb.w	r1, [r3], #1
 80068b2:	e7f9      	b.n	80068a8 <memset+0x4>

080068b4 <_localeconv_r>:
 80068b4:	4800      	ldr	r0, [pc, #0]	@ (80068b8 <_localeconv_r+0x4>)
 80068b6:	4770      	bx	lr
 80068b8:	200001bc 	.word	0x200001bc

080068bc <_close_r>:
 80068bc:	b538      	push	{r3, r4, r5, lr}
 80068be:	2300      	movs	r3, #0
 80068c0:	4d05      	ldr	r5, [pc, #20]	@ (80068d8 <_close_r+0x1c>)
 80068c2:	4604      	mov	r4, r0
 80068c4:	4608      	mov	r0, r1
 80068c6:	602b      	str	r3, [r5, #0]
 80068c8:	f7fc fdb5 	bl	8003436 <_close>
 80068cc:	1c43      	adds	r3, r0, #1
 80068ce:	d102      	bne.n	80068d6 <_close_r+0x1a>
 80068d0:	682b      	ldr	r3, [r5, #0]
 80068d2:	b103      	cbz	r3, 80068d6 <_close_r+0x1a>
 80068d4:	6023      	str	r3, [r4, #0]
 80068d6:	bd38      	pop	{r3, r4, r5, pc}
 80068d8:	2000059c 	.word	0x2000059c

080068dc <_lseek_r>:
 80068dc:	b538      	push	{r3, r4, r5, lr}
 80068de:	4604      	mov	r4, r0
 80068e0:	4608      	mov	r0, r1
 80068e2:	4611      	mov	r1, r2
 80068e4:	2200      	movs	r2, #0
 80068e6:	4d05      	ldr	r5, [pc, #20]	@ (80068fc <_lseek_r+0x20>)
 80068e8:	602a      	str	r2, [r5, #0]
 80068ea:	461a      	mov	r2, r3
 80068ec:	f7fc fdc7 	bl	800347e <_lseek>
 80068f0:	1c43      	adds	r3, r0, #1
 80068f2:	d102      	bne.n	80068fa <_lseek_r+0x1e>
 80068f4:	682b      	ldr	r3, [r5, #0]
 80068f6:	b103      	cbz	r3, 80068fa <_lseek_r+0x1e>
 80068f8:	6023      	str	r3, [r4, #0]
 80068fa:	bd38      	pop	{r3, r4, r5, pc}
 80068fc:	2000059c 	.word	0x2000059c

08006900 <_read_r>:
 8006900:	b538      	push	{r3, r4, r5, lr}
 8006902:	4604      	mov	r4, r0
 8006904:	4608      	mov	r0, r1
 8006906:	4611      	mov	r1, r2
 8006908:	2200      	movs	r2, #0
 800690a:	4d05      	ldr	r5, [pc, #20]	@ (8006920 <_read_r+0x20>)
 800690c:	602a      	str	r2, [r5, #0]
 800690e:	461a      	mov	r2, r3
 8006910:	f7fc fd58 	bl	80033c4 <_read>
 8006914:	1c43      	adds	r3, r0, #1
 8006916:	d102      	bne.n	800691e <_read_r+0x1e>
 8006918:	682b      	ldr	r3, [r5, #0]
 800691a:	b103      	cbz	r3, 800691e <_read_r+0x1e>
 800691c:	6023      	str	r3, [r4, #0]
 800691e:	bd38      	pop	{r3, r4, r5, pc}
 8006920:	2000059c 	.word	0x2000059c

08006924 <_write_r>:
 8006924:	b538      	push	{r3, r4, r5, lr}
 8006926:	4604      	mov	r4, r0
 8006928:	4608      	mov	r0, r1
 800692a:	4611      	mov	r1, r2
 800692c:	2200      	movs	r2, #0
 800692e:	4d05      	ldr	r5, [pc, #20]	@ (8006944 <_write_r+0x20>)
 8006930:	602a      	str	r2, [r5, #0]
 8006932:	461a      	mov	r2, r3
 8006934:	f7fc fd63 	bl	80033fe <_write>
 8006938:	1c43      	adds	r3, r0, #1
 800693a:	d102      	bne.n	8006942 <_write_r+0x1e>
 800693c:	682b      	ldr	r3, [r5, #0]
 800693e:	b103      	cbz	r3, 8006942 <_write_r+0x1e>
 8006940:	6023      	str	r3, [r4, #0]
 8006942:	bd38      	pop	{r3, r4, r5, pc}
 8006944:	2000059c 	.word	0x2000059c

08006948 <__errno>:
 8006948:	4b01      	ldr	r3, [pc, #4]	@ (8006950 <__errno+0x8>)
 800694a:	6818      	ldr	r0, [r3, #0]
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop
 8006950:	2000007c 	.word	0x2000007c

08006954 <__libc_init_array>:
 8006954:	b570      	push	{r4, r5, r6, lr}
 8006956:	2600      	movs	r6, #0
 8006958:	4d0c      	ldr	r5, [pc, #48]	@ (800698c <__libc_init_array+0x38>)
 800695a:	4c0d      	ldr	r4, [pc, #52]	@ (8006990 <__libc_init_array+0x3c>)
 800695c:	1b64      	subs	r4, r4, r5
 800695e:	10a4      	asrs	r4, r4, #2
 8006960:	42a6      	cmp	r6, r4
 8006962:	d109      	bne.n	8006978 <__libc_init_array+0x24>
 8006964:	f002 fad6 	bl	8008f14 <_init>
 8006968:	2600      	movs	r6, #0
 800696a:	4d0a      	ldr	r5, [pc, #40]	@ (8006994 <__libc_init_array+0x40>)
 800696c:	4c0a      	ldr	r4, [pc, #40]	@ (8006998 <__libc_init_array+0x44>)
 800696e:	1b64      	subs	r4, r4, r5
 8006970:	10a4      	asrs	r4, r4, #2
 8006972:	42a6      	cmp	r6, r4
 8006974:	d105      	bne.n	8006982 <__libc_init_array+0x2e>
 8006976:	bd70      	pop	{r4, r5, r6, pc}
 8006978:	f855 3b04 	ldr.w	r3, [r5], #4
 800697c:	4798      	blx	r3
 800697e:	3601      	adds	r6, #1
 8006980:	e7ee      	b.n	8006960 <__libc_init_array+0xc>
 8006982:	f855 3b04 	ldr.w	r3, [r5], #4
 8006986:	4798      	blx	r3
 8006988:	3601      	adds	r6, #1
 800698a:	e7f2      	b.n	8006972 <__libc_init_array+0x1e>
 800698c:	08009600 	.word	0x08009600
 8006990:	08009600 	.word	0x08009600
 8006994:	08009600 	.word	0x08009600
 8006998:	08009604 	.word	0x08009604

0800699c <__retarget_lock_init_recursive>:
 800699c:	4770      	bx	lr

0800699e <__retarget_lock_acquire_recursive>:
 800699e:	4770      	bx	lr

080069a0 <__retarget_lock_release_recursive>:
 80069a0:	4770      	bx	lr

080069a2 <memchr>:
 80069a2:	4603      	mov	r3, r0
 80069a4:	b510      	push	{r4, lr}
 80069a6:	b2c9      	uxtb	r1, r1
 80069a8:	4402      	add	r2, r0
 80069aa:	4293      	cmp	r3, r2
 80069ac:	4618      	mov	r0, r3
 80069ae:	d101      	bne.n	80069b4 <memchr+0x12>
 80069b0:	2000      	movs	r0, #0
 80069b2:	e003      	b.n	80069bc <memchr+0x1a>
 80069b4:	7804      	ldrb	r4, [r0, #0]
 80069b6:	3301      	adds	r3, #1
 80069b8:	428c      	cmp	r4, r1
 80069ba:	d1f6      	bne.n	80069aa <memchr+0x8>
 80069bc:	bd10      	pop	{r4, pc}

080069be <memcpy>:
 80069be:	440a      	add	r2, r1
 80069c0:	4291      	cmp	r1, r2
 80069c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80069c6:	d100      	bne.n	80069ca <memcpy+0xc>
 80069c8:	4770      	bx	lr
 80069ca:	b510      	push	{r4, lr}
 80069cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069d0:	4291      	cmp	r1, r2
 80069d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069d6:	d1f9      	bne.n	80069cc <memcpy+0xe>
 80069d8:	bd10      	pop	{r4, pc}

080069da <quorem>:
 80069da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069de:	6903      	ldr	r3, [r0, #16]
 80069e0:	690c      	ldr	r4, [r1, #16]
 80069e2:	4607      	mov	r7, r0
 80069e4:	42a3      	cmp	r3, r4
 80069e6:	db7e      	blt.n	8006ae6 <quorem+0x10c>
 80069e8:	3c01      	subs	r4, #1
 80069ea:	00a3      	lsls	r3, r4, #2
 80069ec:	f100 0514 	add.w	r5, r0, #20
 80069f0:	f101 0814 	add.w	r8, r1, #20
 80069f4:	9300      	str	r3, [sp, #0]
 80069f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80069fa:	9301      	str	r3, [sp, #4]
 80069fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006a00:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a04:	3301      	adds	r3, #1
 8006a06:	429a      	cmp	r2, r3
 8006a08:	fbb2 f6f3 	udiv	r6, r2, r3
 8006a0c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006a10:	d32e      	bcc.n	8006a70 <quorem+0x96>
 8006a12:	f04f 0a00 	mov.w	sl, #0
 8006a16:	46c4      	mov	ip, r8
 8006a18:	46ae      	mov	lr, r5
 8006a1a:	46d3      	mov	fp, sl
 8006a1c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006a20:	b298      	uxth	r0, r3
 8006a22:	fb06 a000 	mla	r0, r6, r0, sl
 8006a26:	0c1b      	lsrs	r3, r3, #16
 8006a28:	0c02      	lsrs	r2, r0, #16
 8006a2a:	fb06 2303 	mla	r3, r6, r3, r2
 8006a2e:	f8de 2000 	ldr.w	r2, [lr]
 8006a32:	b280      	uxth	r0, r0
 8006a34:	b292      	uxth	r2, r2
 8006a36:	1a12      	subs	r2, r2, r0
 8006a38:	445a      	add	r2, fp
 8006a3a:	f8de 0000 	ldr.w	r0, [lr]
 8006a3e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006a48:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006a4c:	b292      	uxth	r2, r2
 8006a4e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006a52:	45e1      	cmp	r9, ip
 8006a54:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006a58:	f84e 2b04 	str.w	r2, [lr], #4
 8006a5c:	d2de      	bcs.n	8006a1c <quorem+0x42>
 8006a5e:	9b00      	ldr	r3, [sp, #0]
 8006a60:	58eb      	ldr	r3, [r5, r3]
 8006a62:	b92b      	cbnz	r3, 8006a70 <quorem+0x96>
 8006a64:	9b01      	ldr	r3, [sp, #4]
 8006a66:	3b04      	subs	r3, #4
 8006a68:	429d      	cmp	r5, r3
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	d32f      	bcc.n	8006ace <quorem+0xf4>
 8006a6e:	613c      	str	r4, [r7, #16]
 8006a70:	4638      	mov	r0, r7
 8006a72:	f001 f97b 	bl	8007d6c <__mcmp>
 8006a76:	2800      	cmp	r0, #0
 8006a78:	db25      	blt.n	8006ac6 <quorem+0xec>
 8006a7a:	4629      	mov	r1, r5
 8006a7c:	2000      	movs	r0, #0
 8006a7e:	f858 2b04 	ldr.w	r2, [r8], #4
 8006a82:	f8d1 c000 	ldr.w	ip, [r1]
 8006a86:	fa1f fe82 	uxth.w	lr, r2
 8006a8a:	fa1f f38c 	uxth.w	r3, ip
 8006a8e:	eba3 030e 	sub.w	r3, r3, lr
 8006a92:	4403      	add	r3, r0
 8006a94:	0c12      	lsrs	r2, r2, #16
 8006a96:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006a9a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006aa4:	45c1      	cmp	r9, r8
 8006aa6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006aaa:	f841 3b04 	str.w	r3, [r1], #4
 8006aae:	d2e6      	bcs.n	8006a7e <quorem+0xa4>
 8006ab0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ab4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ab8:	b922      	cbnz	r2, 8006ac4 <quorem+0xea>
 8006aba:	3b04      	subs	r3, #4
 8006abc:	429d      	cmp	r5, r3
 8006abe:	461a      	mov	r2, r3
 8006ac0:	d30b      	bcc.n	8006ada <quorem+0x100>
 8006ac2:	613c      	str	r4, [r7, #16]
 8006ac4:	3601      	adds	r6, #1
 8006ac6:	4630      	mov	r0, r6
 8006ac8:	b003      	add	sp, #12
 8006aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ace:	6812      	ldr	r2, [r2, #0]
 8006ad0:	3b04      	subs	r3, #4
 8006ad2:	2a00      	cmp	r2, #0
 8006ad4:	d1cb      	bne.n	8006a6e <quorem+0x94>
 8006ad6:	3c01      	subs	r4, #1
 8006ad8:	e7c6      	b.n	8006a68 <quorem+0x8e>
 8006ada:	6812      	ldr	r2, [r2, #0]
 8006adc:	3b04      	subs	r3, #4
 8006ade:	2a00      	cmp	r2, #0
 8006ae0:	d1ef      	bne.n	8006ac2 <quorem+0xe8>
 8006ae2:	3c01      	subs	r4, #1
 8006ae4:	e7ea      	b.n	8006abc <quorem+0xe2>
 8006ae6:	2000      	movs	r0, #0
 8006ae8:	e7ee      	b.n	8006ac8 <quorem+0xee>
 8006aea:	0000      	movs	r0, r0
 8006aec:	0000      	movs	r0, r0
	...

08006af0 <_dtoa_r>:
 8006af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006af4:	4614      	mov	r4, r2
 8006af6:	461d      	mov	r5, r3
 8006af8:	69c7      	ldr	r7, [r0, #28]
 8006afa:	b097      	sub	sp, #92	@ 0x5c
 8006afc:	4683      	mov	fp, r0
 8006afe:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006b02:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8006b04:	b97f      	cbnz	r7, 8006b26 <_dtoa_r+0x36>
 8006b06:	2010      	movs	r0, #16
 8006b08:	f000 fe02 	bl	8007710 <malloc>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	f8cb 001c 	str.w	r0, [fp, #28]
 8006b12:	b920      	cbnz	r0, 8006b1e <_dtoa_r+0x2e>
 8006b14:	21ef      	movs	r1, #239	@ 0xef
 8006b16:	4ba8      	ldr	r3, [pc, #672]	@ (8006db8 <_dtoa_r+0x2c8>)
 8006b18:	48a8      	ldr	r0, [pc, #672]	@ (8006dbc <_dtoa_r+0x2cc>)
 8006b1a:	f001 fc59 	bl	80083d0 <__assert_func>
 8006b1e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006b22:	6007      	str	r7, [r0, #0]
 8006b24:	60c7      	str	r7, [r0, #12]
 8006b26:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006b2a:	6819      	ldr	r1, [r3, #0]
 8006b2c:	b159      	cbz	r1, 8006b46 <_dtoa_r+0x56>
 8006b2e:	685a      	ldr	r2, [r3, #4]
 8006b30:	2301      	movs	r3, #1
 8006b32:	4093      	lsls	r3, r2
 8006b34:	604a      	str	r2, [r1, #4]
 8006b36:	608b      	str	r3, [r1, #8]
 8006b38:	4658      	mov	r0, fp
 8006b3a:	f000 fedf 	bl	80078fc <_Bfree>
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006b44:	601a      	str	r2, [r3, #0]
 8006b46:	1e2b      	subs	r3, r5, #0
 8006b48:	bfaf      	iteee	ge
 8006b4a:	2300      	movge	r3, #0
 8006b4c:	2201      	movlt	r2, #1
 8006b4e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006b52:	9303      	strlt	r3, [sp, #12]
 8006b54:	bfa8      	it	ge
 8006b56:	6033      	strge	r3, [r6, #0]
 8006b58:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006b5c:	4b98      	ldr	r3, [pc, #608]	@ (8006dc0 <_dtoa_r+0x2d0>)
 8006b5e:	bfb8      	it	lt
 8006b60:	6032      	strlt	r2, [r6, #0]
 8006b62:	ea33 0308 	bics.w	r3, r3, r8
 8006b66:	d112      	bne.n	8006b8e <_dtoa_r+0x9e>
 8006b68:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006b6c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006b6e:	6013      	str	r3, [r2, #0]
 8006b70:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006b74:	4323      	orrs	r3, r4
 8006b76:	f000 8550 	beq.w	800761a <_dtoa_r+0xb2a>
 8006b7a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006b7c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8006dc4 <_dtoa_r+0x2d4>
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	f000 8552 	beq.w	800762a <_dtoa_r+0xb3a>
 8006b86:	f10a 0303 	add.w	r3, sl, #3
 8006b8a:	f000 bd4c 	b.w	8007626 <_dtoa_r+0xb36>
 8006b8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b92:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006b96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	f7f9 ff03 	bl	80009a8 <__aeabi_dcmpeq>
 8006ba2:	4607      	mov	r7, r0
 8006ba4:	b158      	cbz	r0, 8006bbe <_dtoa_r+0xce>
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006baa:	6013      	str	r3, [r2, #0]
 8006bac:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006bae:	b113      	cbz	r3, 8006bb6 <_dtoa_r+0xc6>
 8006bb0:	4b85      	ldr	r3, [pc, #532]	@ (8006dc8 <_dtoa_r+0x2d8>)
 8006bb2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006bb4:	6013      	str	r3, [r2, #0]
 8006bb6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8006dcc <_dtoa_r+0x2dc>
 8006bba:	f000 bd36 	b.w	800762a <_dtoa_r+0xb3a>
 8006bbe:	ab14      	add	r3, sp, #80	@ 0x50
 8006bc0:	9301      	str	r3, [sp, #4]
 8006bc2:	ab15      	add	r3, sp, #84	@ 0x54
 8006bc4:	9300      	str	r3, [sp, #0]
 8006bc6:	4658      	mov	r0, fp
 8006bc8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006bcc:	f001 f97e 	bl	8007ecc <__d2b>
 8006bd0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8006bd4:	4681      	mov	r9, r0
 8006bd6:	2e00      	cmp	r6, #0
 8006bd8:	d077      	beq.n	8006cca <_dtoa_r+0x1da>
 8006bda:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006bde:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006be0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006be4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006be8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006bec:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006bf0:	9712      	str	r7, [sp, #72]	@ 0x48
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	4b76      	ldr	r3, [pc, #472]	@ (8006dd0 <_dtoa_r+0x2e0>)
 8006bf8:	f7f9 fab6 	bl	8000168 <__aeabi_dsub>
 8006bfc:	a368      	add	r3, pc, #416	@ (adr r3, 8006da0 <_dtoa_r+0x2b0>)
 8006bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c02:	f7f9 fc69 	bl	80004d8 <__aeabi_dmul>
 8006c06:	a368      	add	r3, pc, #416	@ (adr r3, 8006da8 <_dtoa_r+0x2b8>)
 8006c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0c:	f7f9 faae 	bl	800016c <__adddf3>
 8006c10:	4604      	mov	r4, r0
 8006c12:	4630      	mov	r0, r6
 8006c14:	460d      	mov	r5, r1
 8006c16:	f7f9 fbf5 	bl	8000404 <__aeabi_i2d>
 8006c1a:	a365      	add	r3, pc, #404	@ (adr r3, 8006db0 <_dtoa_r+0x2c0>)
 8006c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c20:	f7f9 fc5a 	bl	80004d8 <__aeabi_dmul>
 8006c24:	4602      	mov	r2, r0
 8006c26:	460b      	mov	r3, r1
 8006c28:	4620      	mov	r0, r4
 8006c2a:	4629      	mov	r1, r5
 8006c2c:	f7f9 fa9e 	bl	800016c <__adddf3>
 8006c30:	4604      	mov	r4, r0
 8006c32:	460d      	mov	r5, r1
 8006c34:	f7f9 ff00 	bl	8000a38 <__aeabi_d2iz>
 8006c38:	2200      	movs	r2, #0
 8006c3a:	4607      	mov	r7, r0
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	4620      	mov	r0, r4
 8006c40:	4629      	mov	r1, r5
 8006c42:	f7f9 febb 	bl	80009bc <__aeabi_dcmplt>
 8006c46:	b140      	cbz	r0, 8006c5a <_dtoa_r+0x16a>
 8006c48:	4638      	mov	r0, r7
 8006c4a:	f7f9 fbdb 	bl	8000404 <__aeabi_i2d>
 8006c4e:	4622      	mov	r2, r4
 8006c50:	462b      	mov	r3, r5
 8006c52:	f7f9 fea9 	bl	80009a8 <__aeabi_dcmpeq>
 8006c56:	b900      	cbnz	r0, 8006c5a <_dtoa_r+0x16a>
 8006c58:	3f01      	subs	r7, #1
 8006c5a:	2f16      	cmp	r7, #22
 8006c5c:	d853      	bhi.n	8006d06 <_dtoa_r+0x216>
 8006c5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c62:	4b5c      	ldr	r3, [pc, #368]	@ (8006dd4 <_dtoa_r+0x2e4>)
 8006c64:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6c:	f7f9 fea6 	bl	80009bc <__aeabi_dcmplt>
 8006c70:	2800      	cmp	r0, #0
 8006c72:	d04a      	beq.n	8006d0a <_dtoa_r+0x21a>
 8006c74:	2300      	movs	r3, #0
 8006c76:	3f01      	subs	r7, #1
 8006c78:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006c7a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006c7c:	1b9b      	subs	r3, r3, r6
 8006c7e:	1e5a      	subs	r2, r3, #1
 8006c80:	bf46      	itte	mi
 8006c82:	f1c3 0801 	rsbmi	r8, r3, #1
 8006c86:	2300      	movmi	r3, #0
 8006c88:	f04f 0800 	movpl.w	r8, #0
 8006c8c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c8e:	bf48      	it	mi
 8006c90:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006c92:	2f00      	cmp	r7, #0
 8006c94:	db3b      	blt.n	8006d0e <_dtoa_r+0x21e>
 8006c96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c98:	970e      	str	r7, [sp, #56]	@ 0x38
 8006c9a:	443b      	add	r3, r7
 8006c9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ca2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006ca4:	2b09      	cmp	r3, #9
 8006ca6:	d866      	bhi.n	8006d76 <_dtoa_r+0x286>
 8006ca8:	2b05      	cmp	r3, #5
 8006caa:	bfc4      	itt	gt
 8006cac:	3b04      	subgt	r3, #4
 8006cae:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006cb0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006cb2:	bfc8      	it	gt
 8006cb4:	2400      	movgt	r4, #0
 8006cb6:	f1a3 0302 	sub.w	r3, r3, #2
 8006cba:	bfd8      	it	le
 8006cbc:	2401      	movle	r4, #1
 8006cbe:	2b03      	cmp	r3, #3
 8006cc0:	d864      	bhi.n	8006d8c <_dtoa_r+0x29c>
 8006cc2:	e8df f003 	tbb	[pc, r3]
 8006cc6:	382b      	.short	0x382b
 8006cc8:	5636      	.short	0x5636
 8006cca:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006cce:	441e      	add	r6, r3
 8006cd0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006cd4:	2b20      	cmp	r3, #32
 8006cd6:	bfc1      	itttt	gt
 8006cd8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006cdc:	fa08 f803 	lslgt.w	r8, r8, r3
 8006ce0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006ce4:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006ce8:	bfd6      	itet	le
 8006cea:	f1c3 0320 	rsble	r3, r3, #32
 8006cee:	ea48 0003 	orrgt.w	r0, r8, r3
 8006cf2:	fa04 f003 	lslle.w	r0, r4, r3
 8006cf6:	f7f9 fb75 	bl	80003e4 <__aeabi_ui2d>
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006d00:	3e01      	subs	r6, #1
 8006d02:	9212      	str	r2, [sp, #72]	@ 0x48
 8006d04:	e775      	b.n	8006bf2 <_dtoa_r+0x102>
 8006d06:	2301      	movs	r3, #1
 8006d08:	e7b6      	b.n	8006c78 <_dtoa_r+0x188>
 8006d0a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006d0c:	e7b5      	b.n	8006c7a <_dtoa_r+0x18a>
 8006d0e:	427b      	negs	r3, r7
 8006d10:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d12:	2300      	movs	r3, #0
 8006d14:	eba8 0807 	sub.w	r8, r8, r7
 8006d18:	930e      	str	r3, [sp, #56]	@ 0x38
 8006d1a:	e7c2      	b.n	8006ca2 <_dtoa_r+0x1b2>
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d20:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	dc35      	bgt.n	8006d92 <_dtoa_r+0x2a2>
 8006d26:	2301      	movs	r3, #1
 8006d28:	461a      	mov	r2, r3
 8006d2a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006d2e:	9221      	str	r2, [sp, #132]	@ 0x84
 8006d30:	e00b      	b.n	8006d4a <_dtoa_r+0x25a>
 8006d32:	2301      	movs	r3, #1
 8006d34:	e7f3      	b.n	8006d1e <_dtoa_r+0x22e>
 8006d36:	2300      	movs	r3, #0
 8006d38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d3a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006d3c:	18fb      	adds	r3, r7, r3
 8006d3e:	9308      	str	r3, [sp, #32]
 8006d40:	3301      	adds	r3, #1
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	9307      	str	r3, [sp, #28]
 8006d46:	bfb8      	it	lt
 8006d48:	2301      	movlt	r3, #1
 8006d4a:	2100      	movs	r1, #0
 8006d4c:	2204      	movs	r2, #4
 8006d4e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006d52:	f102 0514 	add.w	r5, r2, #20
 8006d56:	429d      	cmp	r5, r3
 8006d58:	d91f      	bls.n	8006d9a <_dtoa_r+0x2aa>
 8006d5a:	6041      	str	r1, [r0, #4]
 8006d5c:	4658      	mov	r0, fp
 8006d5e:	f000 fd8d 	bl	800787c <_Balloc>
 8006d62:	4682      	mov	sl, r0
 8006d64:	2800      	cmp	r0, #0
 8006d66:	d139      	bne.n	8006ddc <_dtoa_r+0x2ec>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	f240 11af 	movw	r1, #431	@ 0x1af
 8006d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8006dd8 <_dtoa_r+0x2e8>)
 8006d70:	e6d2      	b.n	8006b18 <_dtoa_r+0x28>
 8006d72:	2301      	movs	r3, #1
 8006d74:	e7e0      	b.n	8006d38 <_dtoa_r+0x248>
 8006d76:	2401      	movs	r4, #1
 8006d78:	2300      	movs	r3, #0
 8006d7a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006d7c:	9320      	str	r3, [sp, #128]	@ 0x80
 8006d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8006d82:	2200      	movs	r2, #0
 8006d84:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006d88:	2312      	movs	r3, #18
 8006d8a:	e7d0      	b.n	8006d2e <_dtoa_r+0x23e>
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d90:	e7f5      	b.n	8006d7e <_dtoa_r+0x28e>
 8006d92:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006d94:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006d98:	e7d7      	b.n	8006d4a <_dtoa_r+0x25a>
 8006d9a:	3101      	adds	r1, #1
 8006d9c:	0052      	lsls	r2, r2, #1
 8006d9e:	e7d8      	b.n	8006d52 <_dtoa_r+0x262>
 8006da0:	636f4361 	.word	0x636f4361
 8006da4:	3fd287a7 	.word	0x3fd287a7
 8006da8:	8b60c8b3 	.word	0x8b60c8b3
 8006dac:	3fc68a28 	.word	0x3fc68a28
 8006db0:	509f79fb 	.word	0x509f79fb
 8006db4:	3fd34413 	.word	0x3fd34413
 8006db8:	080092cb 	.word	0x080092cb
 8006dbc:	080092e2 	.word	0x080092e2
 8006dc0:	7ff00000 	.word	0x7ff00000
 8006dc4:	080092c7 	.word	0x080092c7
 8006dc8:	0800929b 	.word	0x0800929b
 8006dcc:	0800929a 	.word	0x0800929a
 8006dd0:	3ff80000 	.word	0x3ff80000
 8006dd4:	080093d8 	.word	0x080093d8
 8006dd8:	0800933a 	.word	0x0800933a
 8006ddc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006de0:	6018      	str	r0, [r3, #0]
 8006de2:	9b07      	ldr	r3, [sp, #28]
 8006de4:	2b0e      	cmp	r3, #14
 8006de6:	f200 80a4 	bhi.w	8006f32 <_dtoa_r+0x442>
 8006dea:	2c00      	cmp	r4, #0
 8006dec:	f000 80a1 	beq.w	8006f32 <_dtoa_r+0x442>
 8006df0:	2f00      	cmp	r7, #0
 8006df2:	dd33      	ble.n	8006e5c <_dtoa_r+0x36c>
 8006df4:	4b86      	ldr	r3, [pc, #536]	@ (8007010 <_dtoa_r+0x520>)
 8006df6:	f007 020f 	and.w	r2, r7, #15
 8006dfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006dfe:	05f8      	lsls	r0, r7, #23
 8006e00:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006e04:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006e08:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006e0c:	d516      	bpl.n	8006e3c <_dtoa_r+0x34c>
 8006e0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e12:	4b80      	ldr	r3, [pc, #512]	@ (8007014 <_dtoa_r+0x524>)
 8006e14:	2603      	movs	r6, #3
 8006e16:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006e1a:	f7f9 fc87 	bl	800072c <__aeabi_ddiv>
 8006e1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e22:	f004 040f 	and.w	r4, r4, #15
 8006e26:	4d7b      	ldr	r5, [pc, #492]	@ (8007014 <_dtoa_r+0x524>)
 8006e28:	b954      	cbnz	r4, 8006e40 <_dtoa_r+0x350>
 8006e2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e32:	f7f9 fc7b 	bl	800072c <__aeabi_ddiv>
 8006e36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e3a:	e028      	b.n	8006e8e <_dtoa_r+0x39e>
 8006e3c:	2602      	movs	r6, #2
 8006e3e:	e7f2      	b.n	8006e26 <_dtoa_r+0x336>
 8006e40:	07e1      	lsls	r1, r4, #31
 8006e42:	d508      	bpl.n	8006e56 <_dtoa_r+0x366>
 8006e44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e48:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006e4c:	f7f9 fb44 	bl	80004d8 <__aeabi_dmul>
 8006e50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e54:	3601      	adds	r6, #1
 8006e56:	1064      	asrs	r4, r4, #1
 8006e58:	3508      	adds	r5, #8
 8006e5a:	e7e5      	b.n	8006e28 <_dtoa_r+0x338>
 8006e5c:	f000 80d2 	beq.w	8007004 <_dtoa_r+0x514>
 8006e60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e64:	427c      	negs	r4, r7
 8006e66:	4b6a      	ldr	r3, [pc, #424]	@ (8007010 <_dtoa_r+0x520>)
 8006e68:	f004 020f 	and.w	r2, r4, #15
 8006e6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e74:	f7f9 fb30 	bl	80004d8 <__aeabi_dmul>
 8006e78:	2602      	movs	r6, #2
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e80:	4d64      	ldr	r5, [pc, #400]	@ (8007014 <_dtoa_r+0x524>)
 8006e82:	1124      	asrs	r4, r4, #4
 8006e84:	2c00      	cmp	r4, #0
 8006e86:	f040 80b2 	bne.w	8006fee <_dtoa_r+0x4fe>
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1d3      	bne.n	8006e36 <_dtoa_r+0x346>
 8006e8e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006e92:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	f000 80b7 	beq.w	8007008 <_dtoa_r+0x518>
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	4620      	mov	r0, r4
 8006e9e:	4629      	mov	r1, r5
 8006ea0:	4b5d      	ldr	r3, [pc, #372]	@ (8007018 <_dtoa_r+0x528>)
 8006ea2:	f7f9 fd8b 	bl	80009bc <__aeabi_dcmplt>
 8006ea6:	2800      	cmp	r0, #0
 8006ea8:	f000 80ae 	beq.w	8007008 <_dtoa_r+0x518>
 8006eac:	9b07      	ldr	r3, [sp, #28]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	f000 80aa 	beq.w	8007008 <_dtoa_r+0x518>
 8006eb4:	9b08      	ldr	r3, [sp, #32]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	dd37      	ble.n	8006f2a <_dtoa_r+0x43a>
 8006eba:	1e7b      	subs	r3, r7, #1
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	9304      	str	r3, [sp, #16]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	4629      	mov	r1, r5
 8006ec4:	4b55      	ldr	r3, [pc, #340]	@ (800701c <_dtoa_r+0x52c>)
 8006ec6:	f7f9 fb07 	bl	80004d8 <__aeabi_dmul>
 8006eca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ece:	9c08      	ldr	r4, [sp, #32]
 8006ed0:	3601      	adds	r6, #1
 8006ed2:	4630      	mov	r0, r6
 8006ed4:	f7f9 fa96 	bl	8000404 <__aeabi_i2d>
 8006ed8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006edc:	f7f9 fafc 	bl	80004d8 <__aeabi_dmul>
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	4b4f      	ldr	r3, [pc, #316]	@ (8007020 <_dtoa_r+0x530>)
 8006ee4:	f7f9 f942 	bl	800016c <__adddf3>
 8006ee8:	4605      	mov	r5, r0
 8006eea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006eee:	2c00      	cmp	r4, #0
 8006ef0:	f040 809a 	bne.w	8007028 <_dtoa_r+0x538>
 8006ef4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	4b4a      	ldr	r3, [pc, #296]	@ (8007024 <_dtoa_r+0x534>)
 8006efc:	f7f9 f934 	bl	8000168 <__aeabi_dsub>
 8006f00:	4602      	mov	r2, r0
 8006f02:	460b      	mov	r3, r1
 8006f04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006f08:	462a      	mov	r2, r5
 8006f0a:	4633      	mov	r3, r6
 8006f0c:	f7f9 fd74 	bl	80009f8 <__aeabi_dcmpgt>
 8006f10:	2800      	cmp	r0, #0
 8006f12:	f040 828e 	bne.w	8007432 <_dtoa_r+0x942>
 8006f16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f1a:	462a      	mov	r2, r5
 8006f1c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006f20:	f7f9 fd4c 	bl	80009bc <__aeabi_dcmplt>
 8006f24:	2800      	cmp	r0, #0
 8006f26:	f040 8127 	bne.w	8007178 <_dtoa_r+0x688>
 8006f2a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006f2e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006f32:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	f2c0 8163 	blt.w	8007200 <_dtoa_r+0x710>
 8006f3a:	2f0e      	cmp	r7, #14
 8006f3c:	f300 8160 	bgt.w	8007200 <_dtoa_r+0x710>
 8006f40:	4b33      	ldr	r3, [pc, #204]	@ (8007010 <_dtoa_r+0x520>)
 8006f42:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006f46:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006f4a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006f4e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	da03      	bge.n	8006f5c <_dtoa_r+0x46c>
 8006f54:	9b07      	ldr	r3, [sp, #28]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	f340 8100 	ble.w	800715c <_dtoa_r+0x66c>
 8006f5c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006f60:	4656      	mov	r6, sl
 8006f62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f66:	4620      	mov	r0, r4
 8006f68:	4629      	mov	r1, r5
 8006f6a:	f7f9 fbdf 	bl	800072c <__aeabi_ddiv>
 8006f6e:	f7f9 fd63 	bl	8000a38 <__aeabi_d2iz>
 8006f72:	4680      	mov	r8, r0
 8006f74:	f7f9 fa46 	bl	8000404 <__aeabi_i2d>
 8006f78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f7c:	f7f9 faac 	bl	80004d8 <__aeabi_dmul>
 8006f80:	4602      	mov	r2, r0
 8006f82:	460b      	mov	r3, r1
 8006f84:	4620      	mov	r0, r4
 8006f86:	4629      	mov	r1, r5
 8006f88:	f7f9 f8ee 	bl	8000168 <__aeabi_dsub>
 8006f8c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006f90:	9d07      	ldr	r5, [sp, #28]
 8006f92:	f806 4b01 	strb.w	r4, [r6], #1
 8006f96:	eba6 040a 	sub.w	r4, r6, sl
 8006f9a:	42a5      	cmp	r5, r4
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	460b      	mov	r3, r1
 8006fa0:	f040 8116 	bne.w	80071d0 <_dtoa_r+0x6e0>
 8006fa4:	f7f9 f8e2 	bl	800016c <__adddf3>
 8006fa8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006fac:	4604      	mov	r4, r0
 8006fae:	460d      	mov	r5, r1
 8006fb0:	f7f9 fd22 	bl	80009f8 <__aeabi_dcmpgt>
 8006fb4:	2800      	cmp	r0, #0
 8006fb6:	f040 80f8 	bne.w	80071aa <_dtoa_r+0x6ba>
 8006fba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006fbe:	4620      	mov	r0, r4
 8006fc0:	4629      	mov	r1, r5
 8006fc2:	f7f9 fcf1 	bl	80009a8 <__aeabi_dcmpeq>
 8006fc6:	b118      	cbz	r0, 8006fd0 <_dtoa_r+0x4e0>
 8006fc8:	f018 0f01 	tst.w	r8, #1
 8006fcc:	f040 80ed 	bne.w	80071aa <_dtoa_r+0x6ba>
 8006fd0:	4649      	mov	r1, r9
 8006fd2:	4658      	mov	r0, fp
 8006fd4:	f000 fc92 	bl	80078fc <_Bfree>
 8006fd8:	2300      	movs	r3, #0
 8006fda:	7033      	strb	r3, [r6, #0]
 8006fdc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006fde:	3701      	adds	r7, #1
 8006fe0:	601f      	str	r7, [r3, #0]
 8006fe2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	f000 8320 	beq.w	800762a <_dtoa_r+0xb3a>
 8006fea:	601e      	str	r6, [r3, #0]
 8006fec:	e31d      	b.n	800762a <_dtoa_r+0xb3a>
 8006fee:	07e2      	lsls	r2, r4, #31
 8006ff0:	d505      	bpl.n	8006ffe <_dtoa_r+0x50e>
 8006ff2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006ff6:	f7f9 fa6f 	bl	80004d8 <__aeabi_dmul>
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	3601      	adds	r6, #1
 8006ffe:	1064      	asrs	r4, r4, #1
 8007000:	3508      	adds	r5, #8
 8007002:	e73f      	b.n	8006e84 <_dtoa_r+0x394>
 8007004:	2602      	movs	r6, #2
 8007006:	e742      	b.n	8006e8e <_dtoa_r+0x39e>
 8007008:	9c07      	ldr	r4, [sp, #28]
 800700a:	9704      	str	r7, [sp, #16]
 800700c:	e761      	b.n	8006ed2 <_dtoa_r+0x3e2>
 800700e:	bf00      	nop
 8007010:	080093d8 	.word	0x080093d8
 8007014:	080093b0 	.word	0x080093b0
 8007018:	3ff00000 	.word	0x3ff00000
 800701c:	40240000 	.word	0x40240000
 8007020:	401c0000 	.word	0x401c0000
 8007024:	40140000 	.word	0x40140000
 8007028:	4b70      	ldr	r3, [pc, #448]	@ (80071ec <_dtoa_r+0x6fc>)
 800702a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800702c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007030:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007034:	4454      	add	r4, sl
 8007036:	2900      	cmp	r1, #0
 8007038:	d045      	beq.n	80070c6 <_dtoa_r+0x5d6>
 800703a:	2000      	movs	r0, #0
 800703c:	496c      	ldr	r1, [pc, #432]	@ (80071f0 <_dtoa_r+0x700>)
 800703e:	f7f9 fb75 	bl	800072c <__aeabi_ddiv>
 8007042:	4633      	mov	r3, r6
 8007044:	462a      	mov	r2, r5
 8007046:	f7f9 f88f 	bl	8000168 <__aeabi_dsub>
 800704a:	4656      	mov	r6, sl
 800704c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007050:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007054:	f7f9 fcf0 	bl	8000a38 <__aeabi_d2iz>
 8007058:	4605      	mov	r5, r0
 800705a:	f7f9 f9d3 	bl	8000404 <__aeabi_i2d>
 800705e:	4602      	mov	r2, r0
 8007060:	460b      	mov	r3, r1
 8007062:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007066:	f7f9 f87f 	bl	8000168 <__aeabi_dsub>
 800706a:	4602      	mov	r2, r0
 800706c:	460b      	mov	r3, r1
 800706e:	3530      	adds	r5, #48	@ 0x30
 8007070:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007074:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007078:	f806 5b01 	strb.w	r5, [r6], #1
 800707c:	f7f9 fc9e 	bl	80009bc <__aeabi_dcmplt>
 8007080:	2800      	cmp	r0, #0
 8007082:	d163      	bne.n	800714c <_dtoa_r+0x65c>
 8007084:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007088:	2000      	movs	r0, #0
 800708a:	495a      	ldr	r1, [pc, #360]	@ (80071f4 <_dtoa_r+0x704>)
 800708c:	f7f9 f86c 	bl	8000168 <__aeabi_dsub>
 8007090:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007094:	f7f9 fc92 	bl	80009bc <__aeabi_dcmplt>
 8007098:	2800      	cmp	r0, #0
 800709a:	f040 8087 	bne.w	80071ac <_dtoa_r+0x6bc>
 800709e:	42a6      	cmp	r6, r4
 80070a0:	f43f af43 	beq.w	8006f2a <_dtoa_r+0x43a>
 80070a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80070a8:	2200      	movs	r2, #0
 80070aa:	4b53      	ldr	r3, [pc, #332]	@ (80071f8 <_dtoa_r+0x708>)
 80070ac:	f7f9 fa14 	bl	80004d8 <__aeabi_dmul>
 80070b0:	2200      	movs	r2, #0
 80070b2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80070b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070ba:	4b4f      	ldr	r3, [pc, #316]	@ (80071f8 <_dtoa_r+0x708>)
 80070bc:	f7f9 fa0c 	bl	80004d8 <__aeabi_dmul>
 80070c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070c4:	e7c4      	b.n	8007050 <_dtoa_r+0x560>
 80070c6:	4631      	mov	r1, r6
 80070c8:	4628      	mov	r0, r5
 80070ca:	f7f9 fa05 	bl	80004d8 <__aeabi_dmul>
 80070ce:	4656      	mov	r6, sl
 80070d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80070d4:	9413      	str	r4, [sp, #76]	@ 0x4c
 80070d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070da:	f7f9 fcad 	bl	8000a38 <__aeabi_d2iz>
 80070de:	4605      	mov	r5, r0
 80070e0:	f7f9 f990 	bl	8000404 <__aeabi_i2d>
 80070e4:	4602      	mov	r2, r0
 80070e6:	460b      	mov	r3, r1
 80070e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070ec:	f7f9 f83c 	bl	8000168 <__aeabi_dsub>
 80070f0:	4602      	mov	r2, r0
 80070f2:	460b      	mov	r3, r1
 80070f4:	3530      	adds	r5, #48	@ 0x30
 80070f6:	f806 5b01 	strb.w	r5, [r6], #1
 80070fa:	42a6      	cmp	r6, r4
 80070fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007100:	f04f 0200 	mov.w	r2, #0
 8007104:	d124      	bne.n	8007150 <_dtoa_r+0x660>
 8007106:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800710a:	4b39      	ldr	r3, [pc, #228]	@ (80071f0 <_dtoa_r+0x700>)
 800710c:	f7f9 f82e 	bl	800016c <__adddf3>
 8007110:	4602      	mov	r2, r0
 8007112:	460b      	mov	r3, r1
 8007114:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007118:	f7f9 fc6e 	bl	80009f8 <__aeabi_dcmpgt>
 800711c:	2800      	cmp	r0, #0
 800711e:	d145      	bne.n	80071ac <_dtoa_r+0x6bc>
 8007120:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007124:	2000      	movs	r0, #0
 8007126:	4932      	ldr	r1, [pc, #200]	@ (80071f0 <_dtoa_r+0x700>)
 8007128:	f7f9 f81e 	bl	8000168 <__aeabi_dsub>
 800712c:	4602      	mov	r2, r0
 800712e:	460b      	mov	r3, r1
 8007130:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007134:	f7f9 fc42 	bl	80009bc <__aeabi_dcmplt>
 8007138:	2800      	cmp	r0, #0
 800713a:	f43f aef6 	beq.w	8006f2a <_dtoa_r+0x43a>
 800713e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007140:	1e73      	subs	r3, r6, #1
 8007142:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007144:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007148:	2b30      	cmp	r3, #48	@ 0x30
 800714a:	d0f8      	beq.n	800713e <_dtoa_r+0x64e>
 800714c:	9f04      	ldr	r7, [sp, #16]
 800714e:	e73f      	b.n	8006fd0 <_dtoa_r+0x4e0>
 8007150:	4b29      	ldr	r3, [pc, #164]	@ (80071f8 <_dtoa_r+0x708>)
 8007152:	f7f9 f9c1 	bl	80004d8 <__aeabi_dmul>
 8007156:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800715a:	e7bc      	b.n	80070d6 <_dtoa_r+0x5e6>
 800715c:	d10c      	bne.n	8007178 <_dtoa_r+0x688>
 800715e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007162:	2200      	movs	r2, #0
 8007164:	4b25      	ldr	r3, [pc, #148]	@ (80071fc <_dtoa_r+0x70c>)
 8007166:	f7f9 f9b7 	bl	80004d8 <__aeabi_dmul>
 800716a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800716e:	f7f9 fc39 	bl	80009e4 <__aeabi_dcmpge>
 8007172:	2800      	cmp	r0, #0
 8007174:	f000 815b 	beq.w	800742e <_dtoa_r+0x93e>
 8007178:	2400      	movs	r4, #0
 800717a:	4625      	mov	r5, r4
 800717c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800717e:	4656      	mov	r6, sl
 8007180:	43db      	mvns	r3, r3
 8007182:	9304      	str	r3, [sp, #16]
 8007184:	2700      	movs	r7, #0
 8007186:	4621      	mov	r1, r4
 8007188:	4658      	mov	r0, fp
 800718a:	f000 fbb7 	bl	80078fc <_Bfree>
 800718e:	2d00      	cmp	r5, #0
 8007190:	d0dc      	beq.n	800714c <_dtoa_r+0x65c>
 8007192:	b12f      	cbz	r7, 80071a0 <_dtoa_r+0x6b0>
 8007194:	42af      	cmp	r7, r5
 8007196:	d003      	beq.n	80071a0 <_dtoa_r+0x6b0>
 8007198:	4639      	mov	r1, r7
 800719a:	4658      	mov	r0, fp
 800719c:	f000 fbae 	bl	80078fc <_Bfree>
 80071a0:	4629      	mov	r1, r5
 80071a2:	4658      	mov	r0, fp
 80071a4:	f000 fbaa 	bl	80078fc <_Bfree>
 80071a8:	e7d0      	b.n	800714c <_dtoa_r+0x65c>
 80071aa:	9704      	str	r7, [sp, #16]
 80071ac:	4633      	mov	r3, r6
 80071ae:	461e      	mov	r6, r3
 80071b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80071b4:	2a39      	cmp	r2, #57	@ 0x39
 80071b6:	d107      	bne.n	80071c8 <_dtoa_r+0x6d8>
 80071b8:	459a      	cmp	sl, r3
 80071ba:	d1f8      	bne.n	80071ae <_dtoa_r+0x6be>
 80071bc:	9a04      	ldr	r2, [sp, #16]
 80071be:	3201      	adds	r2, #1
 80071c0:	9204      	str	r2, [sp, #16]
 80071c2:	2230      	movs	r2, #48	@ 0x30
 80071c4:	f88a 2000 	strb.w	r2, [sl]
 80071c8:	781a      	ldrb	r2, [r3, #0]
 80071ca:	3201      	adds	r2, #1
 80071cc:	701a      	strb	r2, [r3, #0]
 80071ce:	e7bd      	b.n	800714c <_dtoa_r+0x65c>
 80071d0:	2200      	movs	r2, #0
 80071d2:	4b09      	ldr	r3, [pc, #36]	@ (80071f8 <_dtoa_r+0x708>)
 80071d4:	f7f9 f980 	bl	80004d8 <__aeabi_dmul>
 80071d8:	2200      	movs	r2, #0
 80071da:	2300      	movs	r3, #0
 80071dc:	4604      	mov	r4, r0
 80071de:	460d      	mov	r5, r1
 80071e0:	f7f9 fbe2 	bl	80009a8 <__aeabi_dcmpeq>
 80071e4:	2800      	cmp	r0, #0
 80071e6:	f43f aebc 	beq.w	8006f62 <_dtoa_r+0x472>
 80071ea:	e6f1      	b.n	8006fd0 <_dtoa_r+0x4e0>
 80071ec:	080093d8 	.word	0x080093d8
 80071f0:	3fe00000 	.word	0x3fe00000
 80071f4:	3ff00000 	.word	0x3ff00000
 80071f8:	40240000 	.word	0x40240000
 80071fc:	40140000 	.word	0x40140000
 8007200:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007202:	2a00      	cmp	r2, #0
 8007204:	f000 80db 	beq.w	80073be <_dtoa_r+0x8ce>
 8007208:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800720a:	2a01      	cmp	r2, #1
 800720c:	f300 80bf 	bgt.w	800738e <_dtoa_r+0x89e>
 8007210:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007212:	2a00      	cmp	r2, #0
 8007214:	f000 80b7 	beq.w	8007386 <_dtoa_r+0x896>
 8007218:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800721c:	4646      	mov	r6, r8
 800721e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007220:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007222:	2101      	movs	r1, #1
 8007224:	441a      	add	r2, r3
 8007226:	4658      	mov	r0, fp
 8007228:	4498      	add	r8, r3
 800722a:	9209      	str	r2, [sp, #36]	@ 0x24
 800722c:	f000 fc1a 	bl	8007a64 <__i2b>
 8007230:	4605      	mov	r5, r0
 8007232:	b15e      	cbz	r6, 800724c <_dtoa_r+0x75c>
 8007234:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007236:	2b00      	cmp	r3, #0
 8007238:	dd08      	ble.n	800724c <_dtoa_r+0x75c>
 800723a:	42b3      	cmp	r3, r6
 800723c:	bfa8      	it	ge
 800723e:	4633      	movge	r3, r6
 8007240:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007242:	eba8 0803 	sub.w	r8, r8, r3
 8007246:	1af6      	subs	r6, r6, r3
 8007248:	1ad3      	subs	r3, r2, r3
 800724a:	9309      	str	r3, [sp, #36]	@ 0x24
 800724c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800724e:	b1f3      	cbz	r3, 800728e <_dtoa_r+0x79e>
 8007250:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007252:	2b00      	cmp	r3, #0
 8007254:	f000 80b7 	beq.w	80073c6 <_dtoa_r+0x8d6>
 8007258:	b18c      	cbz	r4, 800727e <_dtoa_r+0x78e>
 800725a:	4629      	mov	r1, r5
 800725c:	4622      	mov	r2, r4
 800725e:	4658      	mov	r0, fp
 8007260:	f000 fcbe 	bl	8007be0 <__pow5mult>
 8007264:	464a      	mov	r2, r9
 8007266:	4601      	mov	r1, r0
 8007268:	4605      	mov	r5, r0
 800726a:	4658      	mov	r0, fp
 800726c:	f000 fc10 	bl	8007a90 <__multiply>
 8007270:	4649      	mov	r1, r9
 8007272:	9004      	str	r0, [sp, #16]
 8007274:	4658      	mov	r0, fp
 8007276:	f000 fb41 	bl	80078fc <_Bfree>
 800727a:	9b04      	ldr	r3, [sp, #16]
 800727c:	4699      	mov	r9, r3
 800727e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007280:	1b1a      	subs	r2, r3, r4
 8007282:	d004      	beq.n	800728e <_dtoa_r+0x79e>
 8007284:	4649      	mov	r1, r9
 8007286:	4658      	mov	r0, fp
 8007288:	f000 fcaa 	bl	8007be0 <__pow5mult>
 800728c:	4681      	mov	r9, r0
 800728e:	2101      	movs	r1, #1
 8007290:	4658      	mov	r0, fp
 8007292:	f000 fbe7 	bl	8007a64 <__i2b>
 8007296:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007298:	4604      	mov	r4, r0
 800729a:	2b00      	cmp	r3, #0
 800729c:	f000 81c9 	beq.w	8007632 <_dtoa_r+0xb42>
 80072a0:	461a      	mov	r2, r3
 80072a2:	4601      	mov	r1, r0
 80072a4:	4658      	mov	r0, fp
 80072a6:	f000 fc9b 	bl	8007be0 <__pow5mult>
 80072aa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80072ac:	4604      	mov	r4, r0
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	f300 808f 	bgt.w	80073d2 <_dtoa_r+0x8e2>
 80072b4:	9b02      	ldr	r3, [sp, #8]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	f040 8087 	bne.w	80073ca <_dtoa_r+0x8da>
 80072bc:	9b03      	ldr	r3, [sp, #12]
 80072be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	f040 8083 	bne.w	80073ce <_dtoa_r+0x8de>
 80072c8:	9b03      	ldr	r3, [sp, #12]
 80072ca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80072ce:	0d1b      	lsrs	r3, r3, #20
 80072d0:	051b      	lsls	r3, r3, #20
 80072d2:	b12b      	cbz	r3, 80072e0 <_dtoa_r+0x7f0>
 80072d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072d6:	f108 0801 	add.w	r8, r8, #1
 80072da:	3301      	adds	r3, #1
 80072dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80072de:	2301      	movs	r3, #1
 80072e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80072e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	f000 81aa 	beq.w	800763e <_dtoa_r+0xb4e>
 80072ea:	6923      	ldr	r3, [r4, #16]
 80072ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80072f0:	6918      	ldr	r0, [r3, #16]
 80072f2:	f000 fb6b 	bl	80079cc <__hi0bits>
 80072f6:	f1c0 0020 	rsb	r0, r0, #32
 80072fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072fc:	4418      	add	r0, r3
 80072fe:	f010 001f 	ands.w	r0, r0, #31
 8007302:	d071      	beq.n	80073e8 <_dtoa_r+0x8f8>
 8007304:	f1c0 0320 	rsb	r3, r0, #32
 8007308:	2b04      	cmp	r3, #4
 800730a:	dd65      	ble.n	80073d8 <_dtoa_r+0x8e8>
 800730c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800730e:	f1c0 001c 	rsb	r0, r0, #28
 8007312:	4403      	add	r3, r0
 8007314:	4480      	add	r8, r0
 8007316:	4406      	add	r6, r0
 8007318:	9309      	str	r3, [sp, #36]	@ 0x24
 800731a:	f1b8 0f00 	cmp.w	r8, #0
 800731e:	dd05      	ble.n	800732c <_dtoa_r+0x83c>
 8007320:	4649      	mov	r1, r9
 8007322:	4642      	mov	r2, r8
 8007324:	4658      	mov	r0, fp
 8007326:	f000 fcb5 	bl	8007c94 <__lshift>
 800732a:	4681      	mov	r9, r0
 800732c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800732e:	2b00      	cmp	r3, #0
 8007330:	dd05      	ble.n	800733e <_dtoa_r+0x84e>
 8007332:	4621      	mov	r1, r4
 8007334:	461a      	mov	r2, r3
 8007336:	4658      	mov	r0, fp
 8007338:	f000 fcac 	bl	8007c94 <__lshift>
 800733c:	4604      	mov	r4, r0
 800733e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007340:	2b00      	cmp	r3, #0
 8007342:	d053      	beq.n	80073ec <_dtoa_r+0x8fc>
 8007344:	4621      	mov	r1, r4
 8007346:	4648      	mov	r0, r9
 8007348:	f000 fd10 	bl	8007d6c <__mcmp>
 800734c:	2800      	cmp	r0, #0
 800734e:	da4d      	bge.n	80073ec <_dtoa_r+0x8fc>
 8007350:	1e7b      	subs	r3, r7, #1
 8007352:	4649      	mov	r1, r9
 8007354:	9304      	str	r3, [sp, #16]
 8007356:	220a      	movs	r2, #10
 8007358:	2300      	movs	r3, #0
 800735a:	4658      	mov	r0, fp
 800735c:	f000 faf0 	bl	8007940 <__multadd>
 8007360:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007362:	4681      	mov	r9, r0
 8007364:	2b00      	cmp	r3, #0
 8007366:	f000 816c 	beq.w	8007642 <_dtoa_r+0xb52>
 800736a:	2300      	movs	r3, #0
 800736c:	4629      	mov	r1, r5
 800736e:	220a      	movs	r2, #10
 8007370:	4658      	mov	r0, fp
 8007372:	f000 fae5 	bl	8007940 <__multadd>
 8007376:	9b08      	ldr	r3, [sp, #32]
 8007378:	4605      	mov	r5, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	dc61      	bgt.n	8007442 <_dtoa_r+0x952>
 800737e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007380:	2b02      	cmp	r3, #2
 8007382:	dc3b      	bgt.n	80073fc <_dtoa_r+0x90c>
 8007384:	e05d      	b.n	8007442 <_dtoa_r+0x952>
 8007386:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007388:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800738c:	e746      	b.n	800721c <_dtoa_r+0x72c>
 800738e:	9b07      	ldr	r3, [sp, #28]
 8007390:	1e5c      	subs	r4, r3, #1
 8007392:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007394:	42a3      	cmp	r3, r4
 8007396:	bfbf      	itttt	lt
 8007398:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800739a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800739c:	1ae3      	sublt	r3, r4, r3
 800739e:	18d2      	addlt	r2, r2, r3
 80073a0:	bfa8      	it	ge
 80073a2:	1b1c      	subge	r4, r3, r4
 80073a4:	9b07      	ldr	r3, [sp, #28]
 80073a6:	bfbe      	ittt	lt
 80073a8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80073aa:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80073ac:	2400      	movlt	r4, #0
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	bfb5      	itete	lt
 80073b2:	eba8 0603 	sublt.w	r6, r8, r3
 80073b6:	4646      	movge	r6, r8
 80073b8:	2300      	movlt	r3, #0
 80073ba:	9b07      	ldrge	r3, [sp, #28]
 80073bc:	e730      	b.n	8007220 <_dtoa_r+0x730>
 80073be:	4646      	mov	r6, r8
 80073c0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80073c2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80073c4:	e735      	b.n	8007232 <_dtoa_r+0x742>
 80073c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80073c8:	e75c      	b.n	8007284 <_dtoa_r+0x794>
 80073ca:	2300      	movs	r3, #0
 80073cc:	e788      	b.n	80072e0 <_dtoa_r+0x7f0>
 80073ce:	9b02      	ldr	r3, [sp, #8]
 80073d0:	e786      	b.n	80072e0 <_dtoa_r+0x7f0>
 80073d2:	2300      	movs	r3, #0
 80073d4:	930a      	str	r3, [sp, #40]	@ 0x28
 80073d6:	e788      	b.n	80072ea <_dtoa_r+0x7fa>
 80073d8:	d09f      	beq.n	800731a <_dtoa_r+0x82a>
 80073da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073dc:	331c      	adds	r3, #28
 80073de:	441a      	add	r2, r3
 80073e0:	4498      	add	r8, r3
 80073e2:	441e      	add	r6, r3
 80073e4:	9209      	str	r2, [sp, #36]	@ 0x24
 80073e6:	e798      	b.n	800731a <_dtoa_r+0x82a>
 80073e8:	4603      	mov	r3, r0
 80073ea:	e7f6      	b.n	80073da <_dtoa_r+0x8ea>
 80073ec:	9b07      	ldr	r3, [sp, #28]
 80073ee:	9704      	str	r7, [sp, #16]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	dc20      	bgt.n	8007436 <_dtoa_r+0x946>
 80073f4:	9308      	str	r3, [sp, #32]
 80073f6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80073f8:	2b02      	cmp	r3, #2
 80073fa:	dd1e      	ble.n	800743a <_dtoa_r+0x94a>
 80073fc:	9b08      	ldr	r3, [sp, #32]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	f47f aebc 	bne.w	800717c <_dtoa_r+0x68c>
 8007404:	4621      	mov	r1, r4
 8007406:	2205      	movs	r2, #5
 8007408:	4658      	mov	r0, fp
 800740a:	f000 fa99 	bl	8007940 <__multadd>
 800740e:	4601      	mov	r1, r0
 8007410:	4604      	mov	r4, r0
 8007412:	4648      	mov	r0, r9
 8007414:	f000 fcaa 	bl	8007d6c <__mcmp>
 8007418:	2800      	cmp	r0, #0
 800741a:	f77f aeaf 	ble.w	800717c <_dtoa_r+0x68c>
 800741e:	2331      	movs	r3, #49	@ 0x31
 8007420:	4656      	mov	r6, sl
 8007422:	f806 3b01 	strb.w	r3, [r6], #1
 8007426:	9b04      	ldr	r3, [sp, #16]
 8007428:	3301      	adds	r3, #1
 800742a:	9304      	str	r3, [sp, #16]
 800742c:	e6aa      	b.n	8007184 <_dtoa_r+0x694>
 800742e:	9c07      	ldr	r4, [sp, #28]
 8007430:	9704      	str	r7, [sp, #16]
 8007432:	4625      	mov	r5, r4
 8007434:	e7f3      	b.n	800741e <_dtoa_r+0x92e>
 8007436:	9b07      	ldr	r3, [sp, #28]
 8007438:	9308      	str	r3, [sp, #32]
 800743a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800743c:	2b00      	cmp	r3, #0
 800743e:	f000 8104 	beq.w	800764a <_dtoa_r+0xb5a>
 8007442:	2e00      	cmp	r6, #0
 8007444:	dd05      	ble.n	8007452 <_dtoa_r+0x962>
 8007446:	4629      	mov	r1, r5
 8007448:	4632      	mov	r2, r6
 800744a:	4658      	mov	r0, fp
 800744c:	f000 fc22 	bl	8007c94 <__lshift>
 8007450:	4605      	mov	r5, r0
 8007452:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007454:	2b00      	cmp	r3, #0
 8007456:	d05a      	beq.n	800750e <_dtoa_r+0xa1e>
 8007458:	4658      	mov	r0, fp
 800745a:	6869      	ldr	r1, [r5, #4]
 800745c:	f000 fa0e 	bl	800787c <_Balloc>
 8007460:	4606      	mov	r6, r0
 8007462:	b928      	cbnz	r0, 8007470 <_dtoa_r+0x980>
 8007464:	4602      	mov	r2, r0
 8007466:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800746a:	4b83      	ldr	r3, [pc, #524]	@ (8007678 <_dtoa_r+0xb88>)
 800746c:	f7ff bb54 	b.w	8006b18 <_dtoa_r+0x28>
 8007470:	692a      	ldr	r2, [r5, #16]
 8007472:	f105 010c 	add.w	r1, r5, #12
 8007476:	3202      	adds	r2, #2
 8007478:	0092      	lsls	r2, r2, #2
 800747a:	300c      	adds	r0, #12
 800747c:	f7ff fa9f 	bl	80069be <memcpy>
 8007480:	2201      	movs	r2, #1
 8007482:	4631      	mov	r1, r6
 8007484:	4658      	mov	r0, fp
 8007486:	f000 fc05 	bl	8007c94 <__lshift>
 800748a:	462f      	mov	r7, r5
 800748c:	4605      	mov	r5, r0
 800748e:	f10a 0301 	add.w	r3, sl, #1
 8007492:	9307      	str	r3, [sp, #28]
 8007494:	9b08      	ldr	r3, [sp, #32]
 8007496:	4453      	add	r3, sl
 8007498:	930b      	str	r3, [sp, #44]	@ 0x2c
 800749a:	9b02      	ldr	r3, [sp, #8]
 800749c:	f003 0301 	and.w	r3, r3, #1
 80074a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80074a2:	9b07      	ldr	r3, [sp, #28]
 80074a4:	4621      	mov	r1, r4
 80074a6:	3b01      	subs	r3, #1
 80074a8:	4648      	mov	r0, r9
 80074aa:	9302      	str	r3, [sp, #8]
 80074ac:	f7ff fa95 	bl	80069da <quorem>
 80074b0:	4639      	mov	r1, r7
 80074b2:	9008      	str	r0, [sp, #32]
 80074b4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80074b8:	4648      	mov	r0, r9
 80074ba:	f000 fc57 	bl	8007d6c <__mcmp>
 80074be:	462a      	mov	r2, r5
 80074c0:	9009      	str	r0, [sp, #36]	@ 0x24
 80074c2:	4621      	mov	r1, r4
 80074c4:	4658      	mov	r0, fp
 80074c6:	f000 fc6d 	bl	8007da4 <__mdiff>
 80074ca:	68c2      	ldr	r2, [r0, #12]
 80074cc:	4606      	mov	r6, r0
 80074ce:	bb02      	cbnz	r2, 8007512 <_dtoa_r+0xa22>
 80074d0:	4601      	mov	r1, r0
 80074d2:	4648      	mov	r0, r9
 80074d4:	f000 fc4a 	bl	8007d6c <__mcmp>
 80074d8:	4602      	mov	r2, r0
 80074da:	4631      	mov	r1, r6
 80074dc:	4658      	mov	r0, fp
 80074de:	920c      	str	r2, [sp, #48]	@ 0x30
 80074e0:	f000 fa0c 	bl	80078fc <_Bfree>
 80074e4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80074e6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80074e8:	9e07      	ldr	r6, [sp, #28]
 80074ea:	ea43 0102 	orr.w	r1, r3, r2
 80074ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074f0:	4319      	orrs	r1, r3
 80074f2:	d110      	bne.n	8007516 <_dtoa_r+0xa26>
 80074f4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80074f8:	d029      	beq.n	800754e <_dtoa_r+0xa5e>
 80074fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	dd02      	ble.n	8007506 <_dtoa_r+0xa16>
 8007500:	9b08      	ldr	r3, [sp, #32]
 8007502:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007506:	9b02      	ldr	r3, [sp, #8]
 8007508:	f883 8000 	strb.w	r8, [r3]
 800750c:	e63b      	b.n	8007186 <_dtoa_r+0x696>
 800750e:	4628      	mov	r0, r5
 8007510:	e7bb      	b.n	800748a <_dtoa_r+0x99a>
 8007512:	2201      	movs	r2, #1
 8007514:	e7e1      	b.n	80074da <_dtoa_r+0x9ea>
 8007516:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007518:	2b00      	cmp	r3, #0
 800751a:	db04      	blt.n	8007526 <_dtoa_r+0xa36>
 800751c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800751e:	430b      	orrs	r3, r1
 8007520:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007522:	430b      	orrs	r3, r1
 8007524:	d120      	bne.n	8007568 <_dtoa_r+0xa78>
 8007526:	2a00      	cmp	r2, #0
 8007528:	dded      	ble.n	8007506 <_dtoa_r+0xa16>
 800752a:	4649      	mov	r1, r9
 800752c:	2201      	movs	r2, #1
 800752e:	4658      	mov	r0, fp
 8007530:	f000 fbb0 	bl	8007c94 <__lshift>
 8007534:	4621      	mov	r1, r4
 8007536:	4681      	mov	r9, r0
 8007538:	f000 fc18 	bl	8007d6c <__mcmp>
 800753c:	2800      	cmp	r0, #0
 800753e:	dc03      	bgt.n	8007548 <_dtoa_r+0xa58>
 8007540:	d1e1      	bne.n	8007506 <_dtoa_r+0xa16>
 8007542:	f018 0f01 	tst.w	r8, #1
 8007546:	d0de      	beq.n	8007506 <_dtoa_r+0xa16>
 8007548:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800754c:	d1d8      	bne.n	8007500 <_dtoa_r+0xa10>
 800754e:	2339      	movs	r3, #57	@ 0x39
 8007550:	9a02      	ldr	r2, [sp, #8]
 8007552:	7013      	strb	r3, [r2, #0]
 8007554:	4633      	mov	r3, r6
 8007556:	461e      	mov	r6, r3
 8007558:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800755c:	3b01      	subs	r3, #1
 800755e:	2a39      	cmp	r2, #57	@ 0x39
 8007560:	d052      	beq.n	8007608 <_dtoa_r+0xb18>
 8007562:	3201      	adds	r2, #1
 8007564:	701a      	strb	r2, [r3, #0]
 8007566:	e60e      	b.n	8007186 <_dtoa_r+0x696>
 8007568:	2a00      	cmp	r2, #0
 800756a:	dd07      	ble.n	800757c <_dtoa_r+0xa8c>
 800756c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007570:	d0ed      	beq.n	800754e <_dtoa_r+0xa5e>
 8007572:	9a02      	ldr	r2, [sp, #8]
 8007574:	f108 0301 	add.w	r3, r8, #1
 8007578:	7013      	strb	r3, [r2, #0]
 800757a:	e604      	b.n	8007186 <_dtoa_r+0x696>
 800757c:	9b07      	ldr	r3, [sp, #28]
 800757e:	9a07      	ldr	r2, [sp, #28]
 8007580:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007584:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007586:	4293      	cmp	r3, r2
 8007588:	d028      	beq.n	80075dc <_dtoa_r+0xaec>
 800758a:	4649      	mov	r1, r9
 800758c:	2300      	movs	r3, #0
 800758e:	220a      	movs	r2, #10
 8007590:	4658      	mov	r0, fp
 8007592:	f000 f9d5 	bl	8007940 <__multadd>
 8007596:	42af      	cmp	r7, r5
 8007598:	4681      	mov	r9, r0
 800759a:	f04f 0300 	mov.w	r3, #0
 800759e:	f04f 020a 	mov.w	r2, #10
 80075a2:	4639      	mov	r1, r7
 80075a4:	4658      	mov	r0, fp
 80075a6:	d107      	bne.n	80075b8 <_dtoa_r+0xac8>
 80075a8:	f000 f9ca 	bl	8007940 <__multadd>
 80075ac:	4607      	mov	r7, r0
 80075ae:	4605      	mov	r5, r0
 80075b0:	9b07      	ldr	r3, [sp, #28]
 80075b2:	3301      	adds	r3, #1
 80075b4:	9307      	str	r3, [sp, #28]
 80075b6:	e774      	b.n	80074a2 <_dtoa_r+0x9b2>
 80075b8:	f000 f9c2 	bl	8007940 <__multadd>
 80075bc:	4629      	mov	r1, r5
 80075be:	4607      	mov	r7, r0
 80075c0:	2300      	movs	r3, #0
 80075c2:	220a      	movs	r2, #10
 80075c4:	4658      	mov	r0, fp
 80075c6:	f000 f9bb 	bl	8007940 <__multadd>
 80075ca:	4605      	mov	r5, r0
 80075cc:	e7f0      	b.n	80075b0 <_dtoa_r+0xac0>
 80075ce:	9b08      	ldr	r3, [sp, #32]
 80075d0:	2700      	movs	r7, #0
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	bfcc      	ite	gt
 80075d6:	461e      	movgt	r6, r3
 80075d8:	2601      	movle	r6, #1
 80075da:	4456      	add	r6, sl
 80075dc:	4649      	mov	r1, r9
 80075de:	2201      	movs	r2, #1
 80075e0:	4658      	mov	r0, fp
 80075e2:	f000 fb57 	bl	8007c94 <__lshift>
 80075e6:	4621      	mov	r1, r4
 80075e8:	4681      	mov	r9, r0
 80075ea:	f000 fbbf 	bl	8007d6c <__mcmp>
 80075ee:	2800      	cmp	r0, #0
 80075f0:	dcb0      	bgt.n	8007554 <_dtoa_r+0xa64>
 80075f2:	d102      	bne.n	80075fa <_dtoa_r+0xb0a>
 80075f4:	f018 0f01 	tst.w	r8, #1
 80075f8:	d1ac      	bne.n	8007554 <_dtoa_r+0xa64>
 80075fa:	4633      	mov	r3, r6
 80075fc:	461e      	mov	r6, r3
 80075fe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007602:	2a30      	cmp	r2, #48	@ 0x30
 8007604:	d0fa      	beq.n	80075fc <_dtoa_r+0xb0c>
 8007606:	e5be      	b.n	8007186 <_dtoa_r+0x696>
 8007608:	459a      	cmp	sl, r3
 800760a:	d1a4      	bne.n	8007556 <_dtoa_r+0xa66>
 800760c:	9b04      	ldr	r3, [sp, #16]
 800760e:	3301      	adds	r3, #1
 8007610:	9304      	str	r3, [sp, #16]
 8007612:	2331      	movs	r3, #49	@ 0x31
 8007614:	f88a 3000 	strb.w	r3, [sl]
 8007618:	e5b5      	b.n	8007186 <_dtoa_r+0x696>
 800761a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800761c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800767c <_dtoa_r+0xb8c>
 8007620:	b11b      	cbz	r3, 800762a <_dtoa_r+0xb3a>
 8007622:	f10a 0308 	add.w	r3, sl, #8
 8007626:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007628:	6013      	str	r3, [r2, #0]
 800762a:	4650      	mov	r0, sl
 800762c:	b017      	add	sp, #92	@ 0x5c
 800762e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007632:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007634:	2b01      	cmp	r3, #1
 8007636:	f77f ae3d 	ble.w	80072b4 <_dtoa_r+0x7c4>
 800763a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800763c:	930a      	str	r3, [sp, #40]	@ 0x28
 800763e:	2001      	movs	r0, #1
 8007640:	e65b      	b.n	80072fa <_dtoa_r+0x80a>
 8007642:	9b08      	ldr	r3, [sp, #32]
 8007644:	2b00      	cmp	r3, #0
 8007646:	f77f aed6 	ble.w	80073f6 <_dtoa_r+0x906>
 800764a:	4656      	mov	r6, sl
 800764c:	4621      	mov	r1, r4
 800764e:	4648      	mov	r0, r9
 8007650:	f7ff f9c3 	bl	80069da <quorem>
 8007654:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007658:	9b08      	ldr	r3, [sp, #32]
 800765a:	f806 8b01 	strb.w	r8, [r6], #1
 800765e:	eba6 020a 	sub.w	r2, r6, sl
 8007662:	4293      	cmp	r3, r2
 8007664:	ddb3      	ble.n	80075ce <_dtoa_r+0xade>
 8007666:	4649      	mov	r1, r9
 8007668:	2300      	movs	r3, #0
 800766a:	220a      	movs	r2, #10
 800766c:	4658      	mov	r0, fp
 800766e:	f000 f967 	bl	8007940 <__multadd>
 8007672:	4681      	mov	r9, r0
 8007674:	e7ea      	b.n	800764c <_dtoa_r+0xb5c>
 8007676:	bf00      	nop
 8007678:	0800933a 	.word	0x0800933a
 800767c:	080092be 	.word	0x080092be

08007680 <_free_r>:
 8007680:	b538      	push	{r3, r4, r5, lr}
 8007682:	4605      	mov	r5, r0
 8007684:	2900      	cmp	r1, #0
 8007686:	d040      	beq.n	800770a <_free_r+0x8a>
 8007688:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800768c:	1f0c      	subs	r4, r1, #4
 800768e:	2b00      	cmp	r3, #0
 8007690:	bfb8      	it	lt
 8007692:	18e4      	addlt	r4, r4, r3
 8007694:	f000 f8e6 	bl	8007864 <__malloc_lock>
 8007698:	4a1c      	ldr	r2, [pc, #112]	@ (800770c <_free_r+0x8c>)
 800769a:	6813      	ldr	r3, [r2, #0]
 800769c:	b933      	cbnz	r3, 80076ac <_free_r+0x2c>
 800769e:	6063      	str	r3, [r4, #4]
 80076a0:	6014      	str	r4, [r2, #0]
 80076a2:	4628      	mov	r0, r5
 80076a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076a8:	f000 b8e2 	b.w	8007870 <__malloc_unlock>
 80076ac:	42a3      	cmp	r3, r4
 80076ae:	d908      	bls.n	80076c2 <_free_r+0x42>
 80076b0:	6820      	ldr	r0, [r4, #0]
 80076b2:	1821      	adds	r1, r4, r0
 80076b4:	428b      	cmp	r3, r1
 80076b6:	bf01      	itttt	eq
 80076b8:	6819      	ldreq	r1, [r3, #0]
 80076ba:	685b      	ldreq	r3, [r3, #4]
 80076bc:	1809      	addeq	r1, r1, r0
 80076be:	6021      	streq	r1, [r4, #0]
 80076c0:	e7ed      	b.n	800769e <_free_r+0x1e>
 80076c2:	461a      	mov	r2, r3
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	b10b      	cbz	r3, 80076cc <_free_r+0x4c>
 80076c8:	42a3      	cmp	r3, r4
 80076ca:	d9fa      	bls.n	80076c2 <_free_r+0x42>
 80076cc:	6811      	ldr	r1, [r2, #0]
 80076ce:	1850      	adds	r0, r2, r1
 80076d0:	42a0      	cmp	r0, r4
 80076d2:	d10b      	bne.n	80076ec <_free_r+0x6c>
 80076d4:	6820      	ldr	r0, [r4, #0]
 80076d6:	4401      	add	r1, r0
 80076d8:	1850      	adds	r0, r2, r1
 80076da:	4283      	cmp	r3, r0
 80076dc:	6011      	str	r1, [r2, #0]
 80076de:	d1e0      	bne.n	80076a2 <_free_r+0x22>
 80076e0:	6818      	ldr	r0, [r3, #0]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	4408      	add	r0, r1
 80076e6:	6010      	str	r0, [r2, #0]
 80076e8:	6053      	str	r3, [r2, #4]
 80076ea:	e7da      	b.n	80076a2 <_free_r+0x22>
 80076ec:	d902      	bls.n	80076f4 <_free_r+0x74>
 80076ee:	230c      	movs	r3, #12
 80076f0:	602b      	str	r3, [r5, #0]
 80076f2:	e7d6      	b.n	80076a2 <_free_r+0x22>
 80076f4:	6820      	ldr	r0, [r4, #0]
 80076f6:	1821      	adds	r1, r4, r0
 80076f8:	428b      	cmp	r3, r1
 80076fa:	bf01      	itttt	eq
 80076fc:	6819      	ldreq	r1, [r3, #0]
 80076fe:	685b      	ldreq	r3, [r3, #4]
 8007700:	1809      	addeq	r1, r1, r0
 8007702:	6021      	streq	r1, [r4, #0]
 8007704:	6063      	str	r3, [r4, #4]
 8007706:	6054      	str	r4, [r2, #4]
 8007708:	e7cb      	b.n	80076a2 <_free_r+0x22>
 800770a:	bd38      	pop	{r3, r4, r5, pc}
 800770c:	200005a8 	.word	0x200005a8

08007710 <malloc>:
 8007710:	4b02      	ldr	r3, [pc, #8]	@ (800771c <malloc+0xc>)
 8007712:	4601      	mov	r1, r0
 8007714:	6818      	ldr	r0, [r3, #0]
 8007716:	f000 b825 	b.w	8007764 <_malloc_r>
 800771a:	bf00      	nop
 800771c:	2000007c 	.word	0x2000007c

08007720 <sbrk_aligned>:
 8007720:	b570      	push	{r4, r5, r6, lr}
 8007722:	4e0f      	ldr	r6, [pc, #60]	@ (8007760 <sbrk_aligned+0x40>)
 8007724:	460c      	mov	r4, r1
 8007726:	6831      	ldr	r1, [r6, #0]
 8007728:	4605      	mov	r5, r0
 800772a:	b911      	cbnz	r1, 8007732 <sbrk_aligned+0x12>
 800772c:	f000 fe40 	bl	80083b0 <_sbrk_r>
 8007730:	6030      	str	r0, [r6, #0]
 8007732:	4621      	mov	r1, r4
 8007734:	4628      	mov	r0, r5
 8007736:	f000 fe3b 	bl	80083b0 <_sbrk_r>
 800773a:	1c43      	adds	r3, r0, #1
 800773c:	d103      	bne.n	8007746 <sbrk_aligned+0x26>
 800773e:	f04f 34ff 	mov.w	r4, #4294967295
 8007742:	4620      	mov	r0, r4
 8007744:	bd70      	pop	{r4, r5, r6, pc}
 8007746:	1cc4      	adds	r4, r0, #3
 8007748:	f024 0403 	bic.w	r4, r4, #3
 800774c:	42a0      	cmp	r0, r4
 800774e:	d0f8      	beq.n	8007742 <sbrk_aligned+0x22>
 8007750:	1a21      	subs	r1, r4, r0
 8007752:	4628      	mov	r0, r5
 8007754:	f000 fe2c 	bl	80083b0 <_sbrk_r>
 8007758:	3001      	adds	r0, #1
 800775a:	d1f2      	bne.n	8007742 <sbrk_aligned+0x22>
 800775c:	e7ef      	b.n	800773e <sbrk_aligned+0x1e>
 800775e:	bf00      	nop
 8007760:	200005a4 	.word	0x200005a4

08007764 <_malloc_r>:
 8007764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007768:	1ccd      	adds	r5, r1, #3
 800776a:	f025 0503 	bic.w	r5, r5, #3
 800776e:	3508      	adds	r5, #8
 8007770:	2d0c      	cmp	r5, #12
 8007772:	bf38      	it	cc
 8007774:	250c      	movcc	r5, #12
 8007776:	2d00      	cmp	r5, #0
 8007778:	4606      	mov	r6, r0
 800777a:	db01      	blt.n	8007780 <_malloc_r+0x1c>
 800777c:	42a9      	cmp	r1, r5
 800777e:	d904      	bls.n	800778a <_malloc_r+0x26>
 8007780:	230c      	movs	r3, #12
 8007782:	6033      	str	r3, [r6, #0]
 8007784:	2000      	movs	r0, #0
 8007786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800778a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007860 <_malloc_r+0xfc>
 800778e:	f000 f869 	bl	8007864 <__malloc_lock>
 8007792:	f8d8 3000 	ldr.w	r3, [r8]
 8007796:	461c      	mov	r4, r3
 8007798:	bb44      	cbnz	r4, 80077ec <_malloc_r+0x88>
 800779a:	4629      	mov	r1, r5
 800779c:	4630      	mov	r0, r6
 800779e:	f7ff ffbf 	bl	8007720 <sbrk_aligned>
 80077a2:	1c43      	adds	r3, r0, #1
 80077a4:	4604      	mov	r4, r0
 80077a6:	d158      	bne.n	800785a <_malloc_r+0xf6>
 80077a8:	f8d8 4000 	ldr.w	r4, [r8]
 80077ac:	4627      	mov	r7, r4
 80077ae:	2f00      	cmp	r7, #0
 80077b0:	d143      	bne.n	800783a <_malloc_r+0xd6>
 80077b2:	2c00      	cmp	r4, #0
 80077b4:	d04b      	beq.n	800784e <_malloc_r+0xea>
 80077b6:	6823      	ldr	r3, [r4, #0]
 80077b8:	4639      	mov	r1, r7
 80077ba:	4630      	mov	r0, r6
 80077bc:	eb04 0903 	add.w	r9, r4, r3
 80077c0:	f000 fdf6 	bl	80083b0 <_sbrk_r>
 80077c4:	4581      	cmp	r9, r0
 80077c6:	d142      	bne.n	800784e <_malloc_r+0xea>
 80077c8:	6821      	ldr	r1, [r4, #0]
 80077ca:	4630      	mov	r0, r6
 80077cc:	1a6d      	subs	r5, r5, r1
 80077ce:	4629      	mov	r1, r5
 80077d0:	f7ff ffa6 	bl	8007720 <sbrk_aligned>
 80077d4:	3001      	adds	r0, #1
 80077d6:	d03a      	beq.n	800784e <_malloc_r+0xea>
 80077d8:	6823      	ldr	r3, [r4, #0]
 80077da:	442b      	add	r3, r5
 80077dc:	6023      	str	r3, [r4, #0]
 80077de:	f8d8 3000 	ldr.w	r3, [r8]
 80077e2:	685a      	ldr	r2, [r3, #4]
 80077e4:	bb62      	cbnz	r2, 8007840 <_malloc_r+0xdc>
 80077e6:	f8c8 7000 	str.w	r7, [r8]
 80077ea:	e00f      	b.n	800780c <_malloc_r+0xa8>
 80077ec:	6822      	ldr	r2, [r4, #0]
 80077ee:	1b52      	subs	r2, r2, r5
 80077f0:	d420      	bmi.n	8007834 <_malloc_r+0xd0>
 80077f2:	2a0b      	cmp	r2, #11
 80077f4:	d917      	bls.n	8007826 <_malloc_r+0xc2>
 80077f6:	1961      	adds	r1, r4, r5
 80077f8:	42a3      	cmp	r3, r4
 80077fa:	6025      	str	r5, [r4, #0]
 80077fc:	bf18      	it	ne
 80077fe:	6059      	strne	r1, [r3, #4]
 8007800:	6863      	ldr	r3, [r4, #4]
 8007802:	bf08      	it	eq
 8007804:	f8c8 1000 	streq.w	r1, [r8]
 8007808:	5162      	str	r2, [r4, r5]
 800780a:	604b      	str	r3, [r1, #4]
 800780c:	4630      	mov	r0, r6
 800780e:	f000 f82f 	bl	8007870 <__malloc_unlock>
 8007812:	f104 000b 	add.w	r0, r4, #11
 8007816:	1d23      	adds	r3, r4, #4
 8007818:	f020 0007 	bic.w	r0, r0, #7
 800781c:	1ac2      	subs	r2, r0, r3
 800781e:	bf1c      	itt	ne
 8007820:	1a1b      	subne	r3, r3, r0
 8007822:	50a3      	strne	r3, [r4, r2]
 8007824:	e7af      	b.n	8007786 <_malloc_r+0x22>
 8007826:	6862      	ldr	r2, [r4, #4]
 8007828:	42a3      	cmp	r3, r4
 800782a:	bf0c      	ite	eq
 800782c:	f8c8 2000 	streq.w	r2, [r8]
 8007830:	605a      	strne	r2, [r3, #4]
 8007832:	e7eb      	b.n	800780c <_malloc_r+0xa8>
 8007834:	4623      	mov	r3, r4
 8007836:	6864      	ldr	r4, [r4, #4]
 8007838:	e7ae      	b.n	8007798 <_malloc_r+0x34>
 800783a:	463c      	mov	r4, r7
 800783c:	687f      	ldr	r7, [r7, #4]
 800783e:	e7b6      	b.n	80077ae <_malloc_r+0x4a>
 8007840:	461a      	mov	r2, r3
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	42a3      	cmp	r3, r4
 8007846:	d1fb      	bne.n	8007840 <_malloc_r+0xdc>
 8007848:	2300      	movs	r3, #0
 800784a:	6053      	str	r3, [r2, #4]
 800784c:	e7de      	b.n	800780c <_malloc_r+0xa8>
 800784e:	230c      	movs	r3, #12
 8007850:	4630      	mov	r0, r6
 8007852:	6033      	str	r3, [r6, #0]
 8007854:	f000 f80c 	bl	8007870 <__malloc_unlock>
 8007858:	e794      	b.n	8007784 <_malloc_r+0x20>
 800785a:	6005      	str	r5, [r0, #0]
 800785c:	e7d6      	b.n	800780c <_malloc_r+0xa8>
 800785e:	bf00      	nop
 8007860:	200005a8 	.word	0x200005a8

08007864 <__malloc_lock>:
 8007864:	4801      	ldr	r0, [pc, #4]	@ (800786c <__malloc_lock+0x8>)
 8007866:	f7ff b89a 	b.w	800699e <__retarget_lock_acquire_recursive>
 800786a:	bf00      	nop
 800786c:	200005a0 	.word	0x200005a0

08007870 <__malloc_unlock>:
 8007870:	4801      	ldr	r0, [pc, #4]	@ (8007878 <__malloc_unlock+0x8>)
 8007872:	f7ff b895 	b.w	80069a0 <__retarget_lock_release_recursive>
 8007876:	bf00      	nop
 8007878:	200005a0 	.word	0x200005a0

0800787c <_Balloc>:
 800787c:	b570      	push	{r4, r5, r6, lr}
 800787e:	69c6      	ldr	r6, [r0, #28]
 8007880:	4604      	mov	r4, r0
 8007882:	460d      	mov	r5, r1
 8007884:	b976      	cbnz	r6, 80078a4 <_Balloc+0x28>
 8007886:	2010      	movs	r0, #16
 8007888:	f7ff ff42 	bl	8007710 <malloc>
 800788c:	4602      	mov	r2, r0
 800788e:	61e0      	str	r0, [r4, #28]
 8007890:	b920      	cbnz	r0, 800789c <_Balloc+0x20>
 8007892:	216b      	movs	r1, #107	@ 0x6b
 8007894:	4b17      	ldr	r3, [pc, #92]	@ (80078f4 <_Balloc+0x78>)
 8007896:	4818      	ldr	r0, [pc, #96]	@ (80078f8 <_Balloc+0x7c>)
 8007898:	f000 fd9a 	bl	80083d0 <__assert_func>
 800789c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80078a0:	6006      	str	r6, [r0, #0]
 80078a2:	60c6      	str	r6, [r0, #12]
 80078a4:	69e6      	ldr	r6, [r4, #28]
 80078a6:	68f3      	ldr	r3, [r6, #12]
 80078a8:	b183      	cbz	r3, 80078cc <_Balloc+0x50>
 80078aa:	69e3      	ldr	r3, [r4, #28]
 80078ac:	68db      	ldr	r3, [r3, #12]
 80078ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80078b2:	b9b8      	cbnz	r0, 80078e4 <_Balloc+0x68>
 80078b4:	2101      	movs	r1, #1
 80078b6:	fa01 f605 	lsl.w	r6, r1, r5
 80078ba:	1d72      	adds	r2, r6, #5
 80078bc:	4620      	mov	r0, r4
 80078be:	0092      	lsls	r2, r2, #2
 80078c0:	f000 fda4 	bl	800840c <_calloc_r>
 80078c4:	b160      	cbz	r0, 80078e0 <_Balloc+0x64>
 80078c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80078ca:	e00e      	b.n	80078ea <_Balloc+0x6e>
 80078cc:	2221      	movs	r2, #33	@ 0x21
 80078ce:	2104      	movs	r1, #4
 80078d0:	4620      	mov	r0, r4
 80078d2:	f000 fd9b 	bl	800840c <_calloc_r>
 80078d6:	69e3      	ldr	r3, [r4, #28]
 80078d8:	60f0      	str	r0, [r6, #12]
 80078da:	68db      	ldr	r3, [r3, #12]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d1e4      	bne.n	80078aa <_Balloc+0x2e>
 80078e0:	2000      	movs	r0, #0
 80078e2:	bd70      	pop	{r4, r5, r6, pc}
 80078e4:	6802      	ldr	r2, [r0, #0]
 80078e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80078ea:	2300      	movs	r3, #0
 80078ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80078f0:	e7f7      	b.n	80078e2 <_Balloc+0x66>
 80078f2:	bf00      	nop
 80078f4:	080092cb 	.word	0x080092cb
 80078f8:	0800934b 	.word	0x0800934b

080078fc <_Bfree>:
 80078fc:	b570      	push	{r4, r5, r6, lr}
 80078fe:	69c6      	ldr	r6, [r0, #28]
 8007900:	4605      	mov	r5, r0
 8007902:	460c      	mov	r4, r1
 8007904:	b976      	cbnz	r6, 8007924 <_Bfree+0x28>
 8007906:	2010      	movs	r0, #16
 8007908:	f7ff ff02 	bl	8007710 <malloc>
 800790c:	4602      	mov	r2, r0
 800790e:	61e8      	str	r0, [r5, #28]
 8007910:	b920      	cbnz	r0, 800791c <_Bfree+0x20>
 8007912:	218f      	movs	r1, #143	@ 0x8f
 8007914:	4b08      	ldr	r3, [pc, #32]	@ (8007938 <_Bfree+0x3c>)
 8007916:	4809      	ldr	r0, [pc, #36]	@ (800793c <_Bfree+0x40>)
 8007918:	f000 fd5a 	bl	80083d0 <__assert_func>
 800791c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007920:	6006      	str	r6, [r0, #0]
 8007922:	60c6      	str	r6, [r0, #12]
 8007924:	b13c      	cbz	r4, 8007936 <_Bfree+0x3a>
 8007926:	69eb      	ldr	r3, [r5, #28]
 8007928:	6862      	ldr	r2, [r4, #4]
 800792a:	68db      	ldr	r3, [r3, #12]
 800792c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007930:	6021      	str	r1, [r4, #0]
 8007932:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007936:	bd70      	pop	{r4, r5, r6, pc}
 8007938:	080092cb 	.word	0x080092cb
 800793c:	0800934b 	.word	0x0800934b

08007940 <__multadd>:
 8007940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007944:	4607      	mov	r7, r0
 8007946:	460c      	mov	r4, r1
 8007948:	461e      	mov	r6, r3
 800794a:	2000      	movs	r0, #0
 800794c:	690d      	ldr	r5, [r1, #16]
 800794e:	f101 0c14 	add.w	ip, r1, #20
 8007952:	f8dc 3000 	ldr.w	r3, [ip]
 8007956:	3001      	adds	r0, #1
 8007958:	b299      	uxth	r1, r3
 800795a:	fb02 6101 	mla	r1, r2, r1, r6
 800795e:	0c1e      	lsrs	r6, r3, #16
 8007960:	0c0b      	lsrs	r3, r1, #16
 8007962:	fb02 3306 	mla	r3, r2, r6, r3
 8007966:	b289      	uxth	r1, r1
 8007968:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800796c:	4285      	cmp	r5, r0
 800796e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007972:	f84c 1b04 	str.w	r1, [ip], #4
 8007976:	dcec      	bgt.n	8007952 <__multadd+0x12>
 8007978:	b30e      	cbz	r6, 80079be <__multadd+0x7e>
 800797a:	68a3      	ldr	r3, [r4, #8]
 800797c:	42ab      	cmp	r3, r5
 800797e:	dc19      	bgt.n	80079b4 <__multadd+0x74>
 8007980:	6861      	ldr	r1, [r4, #4]
 8007982:	4638      	mov	r0, r7
 8007984:	3101      	adds	r1, #1
 8007986:	f7ff ff79 	bl	800787c <_Balloc>
 800798a:	4680      	mov	r8, r0
 800798c:	b928      	cbnz	r0, 800799a <__multadd+0x5a>
 800798e:	4602      	mov	r2, r0
 8007990:	21ba      	movs	r1, #186	@ 0xba
 8007992:	4b0c      	ldr	r3, [pc, #48]	@ (80079c4 <__multadd+0x84>)
 8007994:	480c      	ldr	r0, [pc, #48]	@ (80079c8 <__multadd+0x88>)
 8007996:	f000 fd1b 	bl	80083d0 <__assert_func>
 800799a:	6922      	ldr	r2, [r4, #16]
 800799c:	f104 010c 	add.w	r1, r4, #12
 80079a0:	3202      	adds	r2, #2
 80079a2:	0092      	lsls	r2, r2, #2
 80079a4:	300c      	adds	r0, #12
 80079a6:	f7ff f80a 	bl	80069be <memcpy>
 80079aa:	4621      	mov	r1, r4
 80079ac:	4638      	mov	r0, r7
 80079ae:	f7ff ffa5 	bl	80078fc <_Bfree>
 80079b2:	4644      	mov	r4, r8
 80079b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80079b8:	3501      	adds	r5, #1
 80079ba:	615e      	str	r6, [r3, #20]
 80079bc:	6125      	str	r5, [r4, #16]
 80079be:	4620      	mov	r0, r4
 80079c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079c4:	0800933a 	.word	0x0800933a
 80079c8:	0800934b 	.word	0x0800934b

080079cc <__hi0bits>:
 80079cc:	4603      	mov	r3, r0
 80079ce:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80079d2:	bf3a      	itte	cc
 80079d4:	0403      	lslcc	r3, r0, #16
 80079d6:	2010      	movcc	r0, #16
 80079d8:	2000      	movcs	r0, #0
 80079da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80079de:	bf3c      	itt	cc
 80079e0:	021b      	lslcc	r3, r3, #8
 80079e2:	3008      	addcc	r0, #8
 80079e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80079e8:	bf3c      	itt	cc
 80079ea:	011b      	lslcc	r3, r3, #4
 80079ec:	3004      	addcc	r0, #4
 80079ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079f2:	bf3c      	itt	cc
 80079f4:	009b      	lslcc	r3, r3, #2
 80079f6:	3002      	addcc	r0, #2
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	db05      	blt.n	8007a08 <__hi0bits+0x3c>
 80079fc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007a00:	f100 0001 	add.w	r0, r0, #1
 8007a04:	bf08      	it	eq
 8007a06:	2020      	moveq	r0, #32
 8007a08:	4770      	bx	lr

08007a0a <__lo0bits>:
 8007a0a:	6803      	ldr	r3, [r0, #0]
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	f013 0007 	ands.w	r0, r3, #7
 8007a12:	d00b      	beq.n	8007a2c <__lo0bits+0x22>
 8007a14:	07d9      	lsls	r1, r3, #31
 8007a16:	d421      	bmi.n	8007a5c <__lo0bits+0x52>
 8007a18:	0798      	lsls	r0, r3, #30
 8007a1a:	bf49      	itett	mi
 8007a1c:	085b      	lsrmi	r3, r3, #1
 8007a1e:	089b      	lsrpl	r3, r3, #2
 8007a20:	2001      	movmi	r0, #1
 8007a22:	6013      	strmi	r3, [r2, #0]
 8007a24:	bf5c      	itt	pl
 8007a26:	2002      	movpl	r0, #2
 8007a28:	6013      	strpl	r3, [r2, #0]
 8007a2a:	4770      	bx	lr
 8007a2c:	b299      	uxth	r1, r3
 8007a2e:	b909      	cbnz	r1, 8007a34 <__lo0bits+0x2a>
 8007a30:	2010      	movs	r0, #16
 8007a32:	0c1b      	lsrs	r3, r3, #16
 8007a34:	b2d9      	uxtb	r1, r3
 8007a36:	b909      	cbnz	r1, 8007a3c <__lo0bits+0x32>
 8007a38:	3008      	adds	r0, #8
 8007a3a:	0a1b      	lsrs	r3, r3, #8
 8007a3c:	0719      	lsls	r1, r3, #28
 8007a3e:	bf04      	itt	eq
 8007a40:	091b      	lsreq	r3, r3, #4
 8007a42:	3004      	addeq	r0, #4
 8007a44:	0799      	lsls	r1, r3, #30
 8007a46:	bf04      	itt	eq
 8007a48:	089b      	lsreq	r3, r3, #2
 8007a4a:	3002      	addeq	r0, #2
 8007a4c:	07d9      	lsls	r1, r3, #31
 8007a4e:	d403      	bmi.n	8007a58 <__lo0bits+0x4e>
 8007a50:	085b      	lsrs	r3, r3, #1
 8007a52:	f100 0001 	add.w	r0, r0, #1
 8007a56:	d003      	beq.n	8007a60 <__lo0bits+0x56>
 8007a58:	6013      	str	r3, [r2, #0]
 8007a5a:	4770      	bx	lr
 8007a5c:	2000      	movs	r0, #0
 8007a5e:	4770      	bx	lr
 8007a60:	2020      	movs	r0, #32
 8007a62:	4770      	bx	lr

08007a64 <__i2b>:
 8007a64:	b510      	push	{r4, lr}
 8007a66:	460c      	mov	r4, r1
 8007a68:	2101      	movs	r1, #1
 8007a6a:	f7ff ff07 	bl	800787c <_Balloc>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	b928      	cbnz	r0, 8007a7e <__i2b+0x1a>
 8007a72:	f240 1145 	movw	r1, #325	@ 0x145
 8007a76:	4b04      	ldr	r3, [pc, #16]	@ (8007a88 <__i2b+0x24>)
 8007a78:	4804      	ldr	r0, [pc, #16]	@ (8007a8c <__i2b+0x28>)
 8007a7a:	f000 fca9 	bl	80083d0 <__assert_func>
 8007a7e:	2301      	movs	r3, #1
 8007a80:	6144      	str	r4, [r0, #20]
 8007a82:	6103      	str	r3, [r0, #16]
 8007a84:	bd10      	pop	{r4, pc}
 8007a86:	bf00      	nop
 8007a88:	0800933a 	.word	0x0800933a
 8007a8c:	0800934b 	.word	0x0800934b

08007a90 <__multiply>:
 8007a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a94:	4614      	mov	r4, r2
 8007a96:	690a      	ldr	r2, [r1, #16]
 8007a98:	6923      	ldr	r3, [r4, #16]
 8007a9a:	460f      	mov	r7, r1
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	bfa2      	ittt	ge
 8007aa0:	4623      	movge	r3, r4
 8007aa2:	460c      	movge	r4, r1
 8007aa4:	461f      	movge	r7, r3
 8007aa6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007aaa:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007aae:	68a3      	ldr	r3, [r4, #8]
 8007ab0:	6861      	ldr	r1, [r4, #4]
 8007ab2:	eb0a 0609 	add.w	r6, sl, r9
 8007ab6:	42b3      	cmp	r3, r6
 8007ab8:	b085      	sub	sp, #20
 8007aba:	bfb8      	it	lt
 8007abc:	3101      	addlt	r1, #1
 8007abe:	f7ff fedd 	bl	800787c <_Balloc>
 8007ac2:	b930      	cbnz	r0, 8007ad2 <__multiply+0x42>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007aca:	4b43      	ldr	r3, [pc, #268]	@ (8007bd8 <__multiply+0x148>)
 8007acc:	4843      	ldr	r0, [pc, #268]	@ (8007bdc <__multiply+0x14c>)
 8007ace:	f000 fc7f 	bl	80083d0 <__assert_func>
 8007ad2:	f100 0514 	add.w	r5, r0, #20
 8007ad6:	462b      	mov	r3, r5
 8007ad8:	2200      	movs	r2, #0
 8007ada:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007ade:	4543      	cmp	r3, r8
 8007ae0:	d321      	bcc.n	8007b26 <__multiply+0x96>
 8007ae2:	f107 0114 	add.w	r1, r7, #20
 8007ae6:	f104 0214 	add.w	r2, r4, #20
 8007aea:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007aee:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007af2:	9302      	str	r3, [sp, #8]
 8007af4:	1b13      	subs	r3, r2, r4
 8007af6:	3b15      	subs	r3, #21
 8007af8:	f023 0303 	bic.w	r3, r3, #3
 8007afc:	3304      	adds	r3, #4
 8007afe:	f104 0715 	add.w	r7, r4, #21
 8007b02:	42ba      	cmp	r2, r7
 8007b04:	bf38      	it	cc
 8007b06:	2304      	movcc	r3, #4
 8007b08:	9301      	str	r3, [sp, #4]
 8007b0a:	9b02      	ldr	r3, [sp, #8]
 8007b0c:	9103      	str	r1, [sp, #12]
 8007b0e:	428b      	cmp	r3, r1
 8007b10:	d80c      	bhi.n	8007b2c <__multiply+0x9c>
 8007b12:	2e00      	cmp	r6, #0
 8007b14:	dd03      	ble.n	8007b1e <__multiply+0x8e>
 8007b16:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d05a      	beq.n	8007bd4 <__multiply+0x144>
 8007b1e:	6106      	str	r6, [r0, #16]
 8007b20:	b005      	add	sp, #20
 8007b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b26:	f843 2b04 	str.w	r2, [r3], #4
 8007b2a:	e7d8      	b.n	8007ade <__multiply+0x4e>
 8007b2c:	f8b1 a000 	ldrh.w	sl, [r1]
 8007b30:	f1ba 0f00 	cmp.w	sl, #0
 8007b34:	d023      	beq.n	8007b7e <__multiply+0xee>
 8007b36:	46a9      	mov	r9, r5
 8007b38:	f04f 0c00 	mov.w	ip, #0
 8007b3c:	f104 0e14 	add.w	lr, r4, #20
 8007b40:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007b44:	f8d9 3000 	ldr.w	r3, [r9]
 8007b48:	fa1f fb87 	uxth.w	fp, r7
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	fb0a 330b 	mla	r3, sl, fp, r3
 8007b52:	4463      	add	r3, ip
 8007b54:	f8d9 c000 	ldr.w	ip, [r9]
 8007b58:	0c3f      	lsrs	r7, r7, #16
 8007b5a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007b5e:	fb0a c707 	mla	r7, sl, r7, ip
 8007b62:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007b6c:	4572      	cmp	r2, lr
 8007b6e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007b72:	f849 3b04 	str.w	r3, [r9], #4
 8007b76:	d8e3      	bhi.n	8007b40 <__multiply+0xb0>
 8007b78:	9b01      	ldr	r3, [sp, #4]
 8007b7a:	f845 c003 	str.w	ip, [r5, r3]
 8007b7e:	9b03      	ldr	r3, [sp, #12]
 8007b80:	3104      	adds	r1, #4
 8007b82:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007b86:	f1b9 0f00 	cmp.w	r9, #0
 8007b8a:	d021      	beq.n	8007bd0 <__multiply+0x140>
 8007b8c:	46ae      	mov	lr, r5
 8007b8e:	f04f 0a00 	mov.w	sl, #0
 8007b92:	682b      	ldr	r3, [r5, #0]
 8007b94:	f104 0c14 	add.w	ip, r4, #20
 8007b98:	f8bc b000 	ldrh.w	fp, [ip]
 8007b9c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	fb09 770b 	mla	r7, r9, fp, r7
 8007ba6:	4457      	add	r7, sl
 8007ba8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007bac:	f84e 3b04 	str.w	r3, [lr], #4
 8007bb0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007bb4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007bb8:	f8be 3000 	ldrh.w	r3, [lr]
 8007bbc:	4562      	cmp	r2, ip
 8007bbe:	fb09 330a 	mla	r3, r9, sl, r3
 8007bc2:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007bc6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007bca:	d8e5      	bhi.n	8007b98 <__multiply+0x108>
 8007bcc:	9f01      	ldr	r7, [sp, #4]
 8007bce:	51eb      	str	r3, [r5, r7]
 8007bd0:	3504      	adds	r5, #4
 8007bd2:	e79a      	b.n	8007b0a <__multiply+0x7a>
 8007bd4:	3e01      	subs	r6, #1
 8007bd6:	e79c      	b.n	8007b12 <__multiply+0x82>
 8007bd8:	0800933a 	.word	0x0800933a
 8007bdc:	0800934b 	.word	0x0800934b

08007be0 <__pow5mult>:
 8007be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007be4:	4615      	mov	r5, r2
 8007be6:	f012 0203 	ands.w	r2, r2, #3
 8007bea:	4607      	mov	r7, r0
 8007bec:	460e      	mov	r6, r1
 8007bee:	d007      	beq.n	8007c00 <__pow5mult+0x20>
 8007bf0:	4c25      	ldr	r4, [pc, #148]	@ (8007c88 <__pow5mult+0xa8>)
 8007bf2:	3a01      	subs	r2, #1
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007bfa:	f7ff fea1 	bl	8007940 <__multadd>
 8007bfe:	4606      	mov	r6, r0
 8007c00:	10ad      	asrs	r5, r5, #2
 8007c02:	d03d      	beq.n	8007c80 <__pow5mult+0xa0>
 8007c04:	69fc      	ldr	r4, [r7, #28]
 8007c06:	b97c      	cbnz	r4, 8007c28 <__pow5mult+0x48>
 8007c08:	2010      	movs	r0, #16
 8007c0a:	f7ff fd81 	bl	8007710 <malloc>
 8007c0e:	4602      	mov	r2, r0
 8007c10:	61f8      	str	r0, [r7, #28]
 8007c12:	b928      	cbnz	r0, 8007c20 <__pow5mult+0x40>
 8007c14:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007c18:	4b1c      	ldr	r3, [pc, #112]	@ (8007c8c <__pow5mult+0xac>)
 8007c1a:	481d      	ldr	r0, [pc, #116]	@ (8007c90 <__pow5mult+0xb0>)
 8007c1c:	f000 fbd8 	bl	80083d0 <__assert_func>
 8007c20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007c24:	6004      	str	r4, [r0, #0]
 8007c26:	60c4      	str	r4, [r0, #12]
 8007c28:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007c2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007c30:	b94c      	cbnz	r4, 8007c46 <__pow5mult+0x66>
 8007c32:	f240 2171 	movw	r1, #625	@ 0x271
 8007c36:	4638      	mov	r0, r7
 8007c38:	f7ff ff14 	bl	8007a64 <__i2b>
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	4604      	mov	r4, r0
 8007c40:	f8c8 0008 	str.w	r0, [r8, #8]
 8007c44:	6003      	str	r3, [r0, #0]
 8007c46:	f04f 0900 	mov.w	r9, #0
 8007c4a:	07eb      	lsls	r3, r5, #31
 8007c4c:	d50a      	bpl.n	8007c64 <__pow5mult+0x84>
 8007c4e:	4631      	mov	r1, r6
 8007c50:	4622      	mov	r2, r4
 8007c52:	4638      	mov	r0, r7
 8007c54:	f7ff ff1c 	bl	8007a90 <__multiply>
 8007c58:	4680      	mov	r8, r0
 8007c5a:	4631      	mov	r1, r6
 8007c5c:	4638      	mov	r0, r7
 8007c5e:	f7ff fe4d 	bl	80078fc <_Bfree>
 8007c62:	4646      	mov	r6, r8
 8007c64:	106d      	asrs	r5, r5, #1
 8007c66:	d00b      	beq.n	8007c80 <__pow5mult+0xa0>
 8007c68:	6820      	ldr	r0, [r4, #0]
 8007c6a:	b938      	cbnz	r0, 8007c7c <__pow5mult+0x9c>
 8007c6c:	4622      	mov	r2, r4
 8007c6e:	4621      	mov	r1, r4
 8007c70:	4638      	mov	r0, r7
 8007c72:	f7ff ff0d 	bl	8007a90 <__multiply>
 8007c76:	6020      	str	r0, [r4, #0]
 8007c78:	f8c0 9000 	str.w	r9, [r0]
 8007c7c:	4604      	mov	r4, r0
 8007c7e:	e7e4      	b.n	8007c4a <__pow5mult+0x6a>
 8007c80:	4630      	mov	r0, r6
 8007c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c86:	bf00      	nop
 8007c88:	080093a4 	.word	0x080093a4
 8007c8c:	080092cb 	.word	0x080092cb
 8007c90:	0800934b 	.word	0x0800934b

08007c94 <__lshift>:
 8007c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c98:	460c      	mov	r4, r1
 8007c9a:	4607      	mov	r7, r0
 8007c9c:	4691      	mov	r9, r2
 8007c9e:	6923      	ldr	r3, [r4, #16]
 8007ca0:	6849      	ldr	r1, [r1, #4]
 8007ca2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007ca6:	68a3      	ldr	r3, [r4, #8]
 8007ca8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007cac:	f108 0601 	add.w	r6, r8, #1
 8007cb0:	42b3      	cmp	r3, r6
 8007cb2:	db0b      	blt.n	8007ccc <__lshift+0x38>
 8007cb4:	4638      	mov	r0, r7
 8007cb6:	f7ff fde1 	bl	800787c <_Balloc>
 8007cba:	4605      	mov	r5, r0
 8007cbc:	b948      	cbnz	r0, 8007cd2 <__lshift+0x3e>
 8007cbe:	4602      	mov	r2, r0
 8007cc0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007cc4:	4b27      	ldr	r3, [pc, #156]	@ (8007d64 <__lshift+0xd0>)
 8007cc6:	4828      	ldr	r0, [pc, #160]	@ (8007d68 <__lshift+0xd4>)
 8007cc8:	f000 fb82 	bl	80083d0 <__assert_func>
 8007ccc:	3101      	adds	r1, #1
 8007cce:	005b      	lsls	r3, r3, #1
 8007cd0:	e7ee      	b.n	8007cb0 <__lshift+0x1c>
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	f100 0114 	add.w	r1, r0, #20
 8007cd8:	f100 0210 	add.w	r2, r0, #16
 8007cdc:	4618      	mov	r0, r3
 8007cde:	4553      	cmp	r3, sl
 8007ce0:	db33      	blt.n	8007d4a <__lshift+0xb6>
 8007ce2:	6920      	ldr	r0, [r4, #16]
 8007ce4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007ce8:	f104 0314 	add.w	r3, r4, #20
 8007cec:	f019 091f 	ands.w	r9, r9, #31
 8007cf0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007cf4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007cf8:	d02b      	beq.n	8007d52 <__lshift+0xbe>
 8007cfa:	468a      	mov	sl, r1
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	f1c9 0e20 	rsb	lr, r9, #32
 8007d02:	6818      	ldr	r0, [r3, #0]
 8007d04:	fa00 f009 	lsl.w	r0, r0, r9
 8007d08:	4310      	orrs	r0, r2
 8007d0a:	f84a 0b04 	str.w	r0, [sl], #4
 8007d0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d12:	459c      	cmp	ip, r3
 8007d14:	fa22 f20e 	lsr.w	r2, r2, lr
 8007d18:	d8f3      	bhi.n	8007d02 <__lshift+0x6e>
 8007d1a:	ebac 0304 	sub.w	r3, ip, r4
 8007d1e:	3b15      	subs	r3, #21
 8007d20:	f023 0303 	bic.w	r3, r3, #3
 8007d24:	3304      	adds	r3, #4
 8007d26:	f104 0015 	add.w	r0, r4, #21
 8007d2a:	4584      	cmp	ip, r0
 8007d2c:	bf38      	it	cc
 8007d2e:	2304      	movcc	r3, #4
 8007d30:	50ca      	str	r2, [r1, r3]
 8007d32:	b10a      	cbz	r2, 8007d38 <__lshift+0xa4>
 8007d34:	f108 0602 	add.w	r6, r8, #2
 8007d38:	3e01      	subs	r6, #1
 8007d3a:	4638      	mov	r0, r7
 8007d3c:	4621      	mov	r1, r4
 8007d3e:	612e      	str	r6, [r5, #16]
 8007d40:	f7ff fddc 	bl	80078fc <_Bfree>
 8007d44:	4628      	mov	r0, r5
 8007d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d4a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007d4e:	3301      	adds	r3, #1
 8007d50:	e7c5      	b.n	8007cde <__lshift+0x4a>
 8007d52:	3904      	subs	r1, #4
 8007d54:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d58:	459c      	cmp	ip, r3
 8007d5a:	f841 2f04 	str.w	r2, [r1, #4]!
 8007d5e:	d8f9      	bhi.n	8007d54 <__lshift+0xc0>
 8007d60:	e7ea      	b.n	8007d38 <__lshift+0xa4>
 8007d62:	bf00      	nop
 8007d64:	0800933a 	.word	0x0800933a
 8007d68:	0800934b 	.word	0x0800934b

08007d6c <__mcmp>:
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	690a      	ldr	r2, [r1, #16]
 8007d70:	6900      	ldr	r0, [r0, #16]
 8007d72:	b530      	push	{r4, r5, lr}
 8007d74:	1a80      	subs	r0, r0, r2
 8007d76:	d10e      	bne.n	8007d96 <__mcmp+0x2a>
 8007d78:	3314      	adds	r3, #20
 8007d7a:	3114      	adds	r1, #20
 8007d7c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007d80:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007d84:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007d88:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007d8c:	4295      	cmp	r5, r2
 8007d8e:	d003      	beq.n	8007d98 <__mcmp+0x2c>
 8007d90:	d205      	bcs.n	8007d9e <__mcmp+0x32>
 8007d92:	f04f 30ff 	mov.w	r0, #4294967295
 8007d96:	bd30      	pop	{r4, r5, pc}
 8007d98:	42a3      	cmp	r3, r4
 8007d9a:	d3f3      	bcc.n	8007d84 <__mcmp+0x18>
 8007d9c:	e7fb      	b.n	8007d96 <__mcmp+0x2a>
 8007d9e:	2001      	movs	r0, #1
 8007da0:	e7f9      	b.n	8007d96 <__mcmp+0x2a>
	...

08007da4 <__mdiff>:
 8007da4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007da8:	4689      	mov	r9, r1
 8007daa:	4606      	mov	r6, r0
 8007dac:	4611      	mov	r1, r2
 8007dae:	4648      	mov	r0, r9
 8007db0:	4614      	mov	r4, r2
 8007db2:	f7ff ffdb 	bl	8007d6c <__mcmp>
 8007db6:	1e05      	subs	r5, r0, #0
 8007db8:	d112      	bne.n	8007de0 <__mdiff+0x3c>
 8007dba:	4629      	mov	r1, r5
 8007dbc:	4630      	mov	r0, r6
 8007dbe:	f7ff fd5d 	bl	800787c <_Balloc>
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	b928      	cbnz	r0, 8007dd2 <__mdiff+0x2e>
 8007dc6:	f240 2137 	movw	r1, #567	@ 0x237
 8007dca:	4b3e      	ldr	r3, [pc, #248]	@ (8007ec4 <__mdiff+0x120>)
 8007dcc:	483e      	ldr	r0, [pc, #248]	@ (8007ec8 <__mdiff+0x124>)
 8007dce:	f000 faff 	bl	80083d0 <__assert_func>
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007dd8:	4610      	mov	r0, r2
 8007dda:	b003      	add	sp, #12
 8007ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007de0:	bfbc      	itt	lt
 8007de2:	464b      	movlt	r3, r9
 8007de4:	46a1      	movlt	r9, r4
 8007de6:	4630      	mov	r0, r6
 8007de8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007dec:	bfba      	itte	lt
 8007dee:	461c      	movlt	r4, r3
 8007df0:	2501      	movlt	r5, #1
 8007df2:	2500      	movge	r5, #0
 8007df4:	f7ff fd42 	bl	800787c <_Balloc>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	b918      	cbnz	r0, 8007e04 <__mdiff+0x60>
 8007dfc:	f240 2145 	movw	r1, #581	@ 0x245
 8007e00:	4b30      	ldr	r3, [pc, #192]	@ (8007ec4 <__mdiff+0x120>)
 8007e02:	e7e3      	b.n	8007dcc <__mdiff+0x28>
 8007e04:	f100 0b14 	add.w	fp, r0, #20
 8007e08:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007e0c:	f109 0310 	add.w	r3, r9, #16
 8007e10:	60c5      	str	r5, [r0, #12]
 8007e12:	f04f 0c00 	mov.w	ip, #0
 8007e16:	f109 0514 	add.w	r5, r9, #20
 8007e1a:	46d9      	mov	r9, fp
 8007e1c:	6926      	ldr	r6, [r4, #16]
 8007e1e:	f104 0e14 	add.w	lr, r4, #20
 8007e22:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007e26:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007e2a:	9301      	str	r3, [sp, #4]
 8007e2c:	9b01      	ldr	r3, [sp, #4]
 8007e2e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007e32:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007e36:	b281      	uxth	r1, r0
 8007e38:	9301      	str	r3, [sp, #4]
 8007e3a:	fa1f f38a 	uxth.w	r3, sl
 8007e3e:	1a5b      	subs	r3, r3, r1
 8007e40:	0c00      	lsrs	r0, r0, #16
 8007e42:	4463      	add	r3, ip
 8007e44:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007e48:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007e52:	4576      	cmp	r6, lr
 8007e54:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007e58:	f849 3b04 	str.w	r3, [r9], #4
 8007e5c:	d8e6      	bhi.n	8007e2c <__mdiff+0x88>
 8007e5e:	1b33      	subs	r3, r6, r4
 8007e60:	3b15      	subs	r3, #21
 8007e62:	f023 0303 	bic.w	r3, r3, #3
 8007e66:	3415      	adds	r4, #21
 8007e68:	3304      	adds	r3, #4
 8007e6a:	42a6      	cmp	r6, r4
 8007e6c:	bf38      	it	cc
 8007e6e:	2304      	movcc	r3, #4
 8007e70:	441d      	add	r5, r3
 8007e72:	445b      	add	r3, fp
 8007e74:	461e      	mov	r6, r3
 8007e76:	462c      	mov	r4, r5
 8007e78:	4544      	cmp	r4, r8
 8007e7a:	d30e      	bcc.n	8007e9a <__mdiff+0xf6>
 8007e7c:	f108 0103 	add.w	r1, r8, #3
 8007e80:	1b49      	subs	r1, r1, r5
 8007e82:	f021 0103 	bic.w	r1, r1, #3
 8007e86:	3d03      	subs	r5, #3
 8007e88:	45a8      	cmp	r8, r5
 8007e8a:	bf38      	it	cc
 8007e8c:	2100      	movcc	r1, #0
 8007e8e:	440b      	add	r3, r1
 8007e90:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007e94:	b199      	cbz	r1, 8007ebe <__mdiff+0x11a>
 8007e96:	6117      	str	r7, [r2, #16]
 8007e98:	e79e      	b.n	8007dd8 <__mdiff+0x34>
 8007e9a:	46e6      	mov	lr, ip
 8007e9c:	f854 1b04 	ldr.w	r1, [r4], #4
 8007ea0:	fa1f fc81 	uxth.w	ip, r1
 8007ea4:	44f4      	add	ip, lr
 8007ea6:	0c08      	lsrs	r0, r1, #16
 8007ea8:	4471      	add	r1, lr
 8007eaa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007eae:	b289      	uxth	r1, r1
 8007eb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007eb4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007eb8:	f846 1b04 	str.w	r1, [r6], #4
 8007ebc:	e7dc      	b.n	8007e78 <__mdiff+0xd4>
 8007ebe:	3f01      	subs	r7, #1
 8007ec0:	e7e6      	b.n	8007e90 <__mdiff+0xec>
 8007ec2:	bf00      	nop
 8007ec4:	0800933a 	.word	0x0800933a
 8007ec8:	0800934b 	.word	0x0800934b

08007ecc <__d2b>:
 8007ecc:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007ed0:	2101      	movs	r1, #1
 8007ed2:	4690      	mov	r8, r2
 8007ed4:	4699      	mov	r9, r3
 8007ed6:	9e08      	ldr	r6, [sp, #32]
 8007ed8:	f7ff fcd0 	bl	800787c <_Balloc>
 8007edc:	4604      	mov	r4, r0
 8007ede:	b930      	cbnz	r0, 8007eee <__d2b+0x22>
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	f240 310f 	movw	r1, #783	@ 0x30f
 8007ee6:	4b23      	ldr	r3, [pc, #140]	@ (8007f74 <__d2b+0xa8>)
 8007ee8:	4823      	ldr	r0, [pc, #140]	@ (8007f78 <__d2b+0xac>)
 8007eea:	f000 fa71 	bl	80083d0 <__assert_func>
 8007eee:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007ef2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007ef6:	b10d      	cbz	r5, 8007efc <__d2b+0x30>
 8007ef8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007efc:	9301      	str	r3, [sp, #4]
 8007efe:	f1b8 0300 	subs.w	r3, r8, #0
 8007f02:	d024      	beq.n	8007f4e <__d2b+0x82>
 8007f04:	4668      	mov	r0, sp
 8007f06:	9300      	str	r3, [sp, #0]
 8007f08:	f7ff fd7f 	bl	8007a0a <__lo0bits>
 8007f0c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007f10:	b1d8      	cbz	r0, 8007f4a <__d2b+0x7e>
 8007f12:	f1c0 0320 	rsb	r3, r0, #32
 8007f16:	fa02 f303 	lsl.w	r3, r2, r3
 8007f1a:	430b      	orrs	r3, r1
 8007f1c:	40c2      	lsrs	r2, r0
 8007f1e:	6163      	str	r3, [r4, #20]
 8007f20:	9201      	str	r2, [sp, #4]
 8007f22:	9b01      	ldr	r3, [sp, #4]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	bf0c      	ite	eq
 8007f28:	2201      	moveq	r2, #1
 8007f2a:	2202      	movne	r2, #2
 8007f2c:	61a3      	str	r3, [r4, #24]
 8007f2e:	6122      	str	r2, [r4, #16]
 8007f30:	b1ad      	cbz	r5, 8007f5e <__d2b+0x92>
 8007f32:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007f36:	4405      	add	r5, r0
 8007f38:	6035      	str	r5, [r6, #0]
 8007f3a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007f3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f40:	6018      	str	r0, [r3, #0]
 8007f42:	4620      	mov	r0, r4
 8007f44:	b002      	add	sp, #8
 8007f46:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007f4a:	6161      	str	r1, [r4, #20]
 8007f4c:	e7e9      	b.n	8007f22 <__d2b+0x56>
 8007f4e:	a801      	add	r0, sp, #4
 8007f50:	f7ff fd5b 	bl	8007a0a <__lo0bits>
 8007f54:	9b01      	ldr	r3, [sp, #4]
 8007f56:	2201      	movs	r2, #1
 8007f58:	6163      	str	r3, [r4, #20]
 8007f5a:	3020      	adds	r0, #32
 8007f5c:	e7e7      	b.n	8007f2e <__d2b+0x62>
 8007f5e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007f62:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007f66:	6030      	str	r0, [r6, #0]
 8007f68:	6918      	ldr	r0, [r3, #16]
 8007f6a:	f7ff fd2f 	bl	80079cc <__hi0bits>
 8007f6e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007f72:	e7e4      	b.n	8007f3e <__d2b+0x72>
 8007f74:	0800933a 	.word	0x0800933a
 8007f78:	0800934b 	.word	0x0800934b

08007f7c <__ssputs_r>:
 8007f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f80:	461f      	mov	r7, r3
 8007f82:	688e      	ldr	r6, [r1, #8]
 8007f84:	4682      	mov	sl, r0
 8007f86:	42be      	cmp	r6, r7
 8007f88:	460c      	mov	r4, r1
 8007f8a:	4690      	mov	r8, r2
 8007f8c:	680b      	ldr	r3, [r1, #0]
 8007f8e:	d82d      	bhi.n	8007fec <__ssputs_r+0x70>
 8007f90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007f94:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007f98:	d026      	beq.n	8007fe8 <__ssputs_r+0x6c>
 8007f9a:	6965      	ldr	r5, [r4, #20]
 8007f9c:	6909      	ldr	r1, [r1, #16]
 8007f9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007fa2:	eba3 0901 	sub.w	r9, r3, r1
 8007fa6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007faa:	1c7b      	adds	r3, r7, #1
 8007fac:	444b      	add	r3, r9
 8007fae:	106d      	asrs	r5, r5, #1
 8007fb0:	429d      	cmp	r5, r3
 8007fb2:	bf38      	it	cc
 8007fb4:	461d      	movcc	r5, r3
 8007fb6:	0553      	lsls	r3, r2, #21
 8007fb8:	d527      	bpl.n	800800a <__ssputs_r+0x8e>
 8007fba:	4629      	mov	r1, r5
 8007fbc:	f7ff fbd2 	bl	8007764 <_malloc_r>
 8007fc0:	4606      	mov	r6, r0
 8007fc2:	b360      	cbz	r0, 800801e <__ssputs_r+0xa2>
 8007fc4:	464a      	mov	r2, r9
 8007fc6:	6921      	ldr	r1, [r4, #16]
 8007fc8:	f7fe fcf9 	bl	80069be <memcpy>
 8007fcc:	89a3      	ldrh	r3, [r4, #12]
 8007fce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007fd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fd6:	81a3      	strh	r3, [r4, #12]
 8007fd8:	6126      	str	r6, [r4, #16]
 8007fda:	444e      	add	r6, r9
 8007fdc:	6026      	str	r6, [r4, #0]
 8007fde:	463e      	mov	r6, r7
 8007fe0:	6165      	str	r5, [r4, #20]
 8007fe2:	eba5 0509 	sub.w	r5, r5, r9
 8007fe6:	60a5      	str	r5, [r4, #8]
 8007fe8:	42be      	cmp	r6, r7
 8007fea:	d900      	bls.n	8007fee <__ssputs_r+0x72>
 8007fec:	463e      	mov	r6, r7
 8007fee:	4632      	mov	r2, r6
 8007ff0:	4641      	mov	r1, r8
 8007ff2:	6820      	ldr	r0, [r4, #0]
 8007ff4:	f000 f9c2 	bl	800837c <memmove>
 8007ff8:	2000      	movs	r0, #0
 8007ffa:	68a3      	ldr	r3, [r4, #8]
 8007ffc:	1b9b      	subs	r3, r3, r6
 8007ffe:	60a3      	str	r3, [r4, #8]
 8008000:	6823      	ldr	r3, [r4, #0]
 8008002:	4433      	add	r3, r6
 8008004:	6023      	str	r3, [r4, #0]
 8008006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800800a:	462a      	mov	r2, r5
 800800c:	f000 fa24 	bl	8008458 <_realloc_r>
 8008010:	4606      	mov	r6, r0
 8008012:	2800      	cmp	r0, #0
 8008014:	d1e0      	bne.n	8007fd8 <__ssputs_r+0x5c>
 8008016:	4650      	mov	r0, sl
 8008018:	6921      	ldr	r1, [r4, #16]
 800801a:	f7ff fb31 	bl	8007680 <_free_r>
 800801e:	230c      	movs	r3, #12
 8008020:	f8ca 3000 	str.w	r3, [sl]
 8008024:	89a3      	ldrh	r3, [r4, #12]
 8008026:	f04f 30ff 	mov.w	r0, #4294967295
 800802a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800802e:	81a3      	strh	r3, [r4, #12]
 8008030:	e7e9      	b.n	8008006 <__ssputs_r+0x8a>
	...

08008034 <_svfiprintf_r>:
 8008034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008038:	4698      	mov	r8, r3
 800803a:	898b      	ldrh	r3, [r1, #12]
 800803c:	4607      	mov	r7, r0
 800803e:	061b      	lsls	r3, r3, #24
 8008040:	460d      	mov	r5, r1
 8008042:	4614      	mov	r4, r2
 8008044:	b09d      	sub	sp, #116	@ 0x74
 8008046:	d510      	bpl.n	800806a <_svfiprintf_r+0x36>
 8008048:	690b      	ldr	r3, [r1, #16]
 800804a:	b973      	cbnz	r3, 800806a <_svfiprintf_r+0x36>
 800804c:	2140      	movs	r1, #64	@ 0x40
 800804e:	f7ff fb89 	bl	8007764 <_malloc_r>
 8008052:	6028      	str	r0, [r5, #0]
 8008054:	6128      	str	r0, [r5, #16]
 8008056:	b930      	cbnz	r0, 8008066 <_svfiprintf_r+0x32>
 8008058:	230c      	movs	r3, #12
 800805a:	603b      	str	r3, [r7, #0]
 800805c:	f04f 30ff 	mov.w	r0, #4294967295
 8008060:	b01d      	add	sp, #116	@ 0x74
 8008062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008066:	2340      	movs	r3, #64	@ 0x40
 8008068:	616b      	str	r3, [r5, #20]
 800806a:	2300      	movs	r3, #0
 800806c:	9309      	str	r3, [sp, #36]	@ 0x24
 800806e:	2320      	movs	r3, #32
 8008070:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008074:	2330      	movs	r3, #48	@ 0x30
 8008076:	f04f 0901 	mov.w	r9, #1
 800807a:	f8cd 800c 	str.w	r8, [sp, #12]
 800807e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008218 <_svfiprintf_r+0x1e4>
 8008082:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008086:	4623      	mov	r3, r4
 8008088:	469a      	mov	sl, r3
 800808a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800808e:	b10a      	cbz	r2, 8008094 <_svfiprintf_r+0x60>
 8008090:	2a25      	cmp	r2, #37	@ 0x25
 8008092:	d1f9      	bne.n	8008088 <_svfiprintf_r+0x54>
 8008094:	ebba 0b04 	subs.w	fp, sl, r4
 8008098:	d00b      	beq.n	80080b2 <_svfiprintf_r+0x7e>
 800809a:	465b      	mov	r3, fp
 800809c:	4622      	mov	r2, r4
 800809e:	4629      	mov	r1, r5
 80080a0:	4638      	mov	r0, r7
 80080a2:	f7ff ff6b 	bl	8007f7c <__ssputs_r>
 80080a6:	3001      	adds	r0, #1
 80080a8:	f000 80a7 	beq.w	80081fa <_svfiprintf_r+0x1c6>
 80080ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080ae:	445a      	add	r2, fp
 80080b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80080b2:	f89a 3000 	ldrb.w	r3, [sl]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	f000 809f 	beq.w	80081fa <_svfiprintf_r+0x1c6>
 80080bc:	2300      	movs	r3, #0
 80080be:	f04f 32ff 	mov.w	r2, #4294967295
 80080c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080c6:	f10a 0a01 	add.w	sl, sl, #1
 80080ca:	9304      	str	r3, [sp, #16]
 80080cc:	9307      	str	r3, [sp, #28]
 80080ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80080d2:	931a      	str	r3, [sp, #104]	@ 0x68
 80080d4:	4654      	mov	r4, sl
 80080d6:	2205      	movs	r2, #5
 80080d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080dc:	484e      	ldr	r0, [pc, #312]	@ (8008218 <_svfiprintf_r+0x1e4>)
 80080de:	f7fe fc60 	bl	80069a2 <memchr>
 80080e2:	9a04      	ldr	r2, [sp, #16]
 80080e4:	b9d8      	cbnz	r0, 800811e <_svfiprintf_r+0xea>
 80080e6:	06d0      	lsls	r0, r2, #27
 80080e8:	bf44      	itt	mi
 80080ea:	2320      	movmi	r3, #32
 80080ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080f0:	0711      	lsls	r1, r2, #28
 80080f2:	bf44      	itt	mi
 80080f4:	232b      	movmi	r3, #43	@ 0x2b
 80080f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080fa:	f89a 3000 	ldrb.w	r3, [sl]
 80080fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8008100:	d015      	beq.n	800812e <_svfiprintf_r+0xfa>
 8008102:	4654      	mov	r4, sl
 8008104:	2000      	movs	r0, #0
 8008106:	f04f 0c0a 	mov.w	ip, #10
 800810a:	9a07      	ldr	r2, [sp, #28]
 800810c:	4621      	mov	r1, r4
 800810e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008112:	3b30      	subs	r3, #48	@ 0x30
 8008114:	2b09      	cmp	r3, #9
 8008116:	d94b      	bls.n	80081b0 <_svfiprintf_r+0x17c>
 8008118:	b1b0      	cbz	r0, 8008148 <_svfiprintf_r+0x114>
 800811a:	9207      	str	r2, [sp, #28]
 800811c:	e014      	b.n	8008148 <_svfiprintf_r+0x114>
 800811e:	eba0 0308 	sub.w	r3, r0, r8
 8008122:	fa09 f303 	lsl.w	r3, r9, r3
 8008126:	4313      	orrs	r3, r2
 8008128:	46a2      	mov	sl, r4
 800812a:	9304      	str	r3, [sp, #16]
 800812c:	e7d2      	b.n	80080d4 <_svfiprintf_r+0xa0>
 800812e:	9b03      	ldr	r3, [sp, #12]
 8008130:	1d19      	adds	r1, r3, #4
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	9103      	str	r1, [sp, #12]
 8008136:	2b00      	cmp	r3, #0
 8008138:	bfbb      	ittet	lt
 800813a:	425b      	neglt	r3, r3
 800813c:	f042 0202 	orrlt.w	r2, r2, #2
 8008140:	9307      	strge	r3, [sp, #28]
 8008142:	9307      	strlt	r3, [sp, #28]
 8008144:	bfb8      	it	lt
 8008146:	9204      	strlt	r2, [sp, #16]
 8008148:	7823      	ldrb	r3, [r4, #0]
 800814a:	2b2e      	cmp	r3, #46	@ 0x2e
 800814c:	d10a      	bne.n	8008164 <_svfiprintf_r+0x130>
 800814e:	7863      	ldrb	r3, [r4, #1]
 8008150:	2b2a      	cmp	r3, #42	@ 0x2a
 8008152:	d132      	bne.n	80081ba <_svfiprintf_r+0x186>
 8008154:	9b03      	ldr	r3, [sp, #12]
 8008156:	3402      	adds	r4, #2
 8008158:	1d1a      	adds	r2, r3, #4
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	9203      	str	r2, [sp, #12]
 800815e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008162:	9305      	str	r3, [sp, #20]
 8008164:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800821c <_svfiprintf_r+0x1e8>
 8008168:	2203      	movs	r2, #3
 800816a:	4650      	mov	r0, sl
 800816c:	7821      	ldrb	r1, [r4, #0]
 800816e:	f7fe fc18 	bl	80069a2 <memchr>
 8008172:	b138      	cbz	r0, 8008184 <_svfiprintf_r+0x150>
 8008174:	2240      	movs	r2, #64	@ 0x40
 8008176:	9b04      	ldr	r3, [sp, #16]
 8008178:	eba0 000a 	sub.w	r0, r0, sl
 800817c:	4082      	lsls	r2, r0
 800817e:	4313      	orrs	r3, r2
 8008180:	3401      	adds	r4, #1
 8008182:	9304      	str	r3, [sp, #16]
 8008184:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008188:	2206      	movs	r2, #6
 800818a:	4825      	ldr	r0, [pc, #148]	@ (8008220 <_svfiprintf_r+0x1ec>)
 800818c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008190:	f7fe fc07 	bl	80069a2 <memchr>
 8008194:	2800      	cmp	r0, #0
 8008196:	d036      	beq.n	8008206 <_svfiprintf_r+0x1d2>
 8008198:	4b22      	ldr	r3, [pc, #136]	@ (8008224 <_svfiprintf_r+0x1f0>)
 800819a:	bb1b      	cbnz	r3, 80081e4 <_svfiprintf_r+0x1b0>
 800819c:	9b03      	ldr	r3, [sp, #12]
 800819e:	3307      	adds	r3, #7
 80081a0:	f023 0307 	bic.w	r3, r3, #7
 80081a4:	3308      	adds	r3, #8
 80081a6:	9303      	str	r3, [sp, #12]
 80081a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081aa:	4433      	add	r3, r6
 80081ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80081ae:	e76a      	b.n	8008086 <_svfiprintf_r+0x52>
 80081b0:	460c      	mov	r4, r1
 80081b2:	2001      	movs	r0, #1
 80081b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80081b8:	e7a8      	b.n	800810c <_svfiprintf_r+0xd8>
 80081ba:	2300      	movs	r3, #0
 80081bc:	f04f 0c0a 	mov.w	ip, #10
 80081c0:	4619      	mov	r1, r3
 80081c2:	3401      	adds	r4, #1
 80081c4:	9305      	str	r3, [sp, #20]
 80081c6:	4620      	mov	r0, r4
 80081c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081cc:	3a30      	subs	r2, #48	@ 0x30
 80081ce:	2a09      	cmp	r2, #9
 80081d0:	d903      	bls.n	80081da <_svfiprintf_r+0x1a6>
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d0c6      	beq.n	8008164 <_svfiprintf_r+0x130>
 80081d6:	9105      	str	r1, [sp, #20]
 80081d8:	e7c4      	b.n	8008164 <_svfiprintf_r+0x130>
 80081da:	4604      	mov	r4, r0
 80081dc:	2301      	movs	r3, #1
 80081de:	fb0c 2101 	mla	r1, ip, r1, r2
 80081e2:	e7f0      	b.n	80081c6 <_svfiprintf_r+0x192>
 80081e4:	ab03      	add	r3, sp, #12
 80081e6:	9300      	str	r3, [sp, #0]
 80081e8:	462a      	mov	r2, r5
 80081ea:	4638      	mov	r0, r7
 80081ec:	4b0e      	ldr	r3, [pc, #56]	@ (8008228 <_svfiprintf_r+0x1f4>)
 80081ee:	a904      	add	r1, sp, #16
 80081f0:	f7fd fe54 	bl	8005e9c <_printf_float>
 80081f4:	1c42      	adds	r2, r0, #1
 80081f6:	4606      	mov	r6, r0
 80081f8:	d1d6      	bne.n	80081a8 <_svfiprintf_r+0x174>
 80081fa:	89ab      	ldrh	r3, [r5, #12]
 80081fc:	065b      	lsls	r3, r3, #25
 80081fe:	f53f af2d 	bmi.w	800805c <_svfiprintf_r+0x28>
 8008202:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008204:	e72c      	b.n	8008060 <_svfiprintf_r+0x2c>
 8008206:	ab03      	add	r3, sp, #12
 8008208:	9300      	str	r3, [sp, #0]
 800820a:	462a      	mov	r2, r5
 800820c:	4638      	mov	r0, r7
 800820e:	4b06      	ldr	r3, [pc, #24]	@ (8008228 <_svfiprintf_r+0x1f4>)
 8008210:	a904      	add	r1, sp, #16
 8008212:	f7fe f8e1 	bl	80063d8 <_printf_i>
 8008216:	e7ed      	b.n	80081f4 <_svfiprintf_r+0x1c0>
 8008218:	080094a0 	.word	0x080094a0
 800821c:	080094a6 	.word	0x080094a6
 8008220:	080094aa 	.word	0x080094aa
 8008224:	08005e9d 	.word	0x08005e9d
 8008228:	08007f7d 	.word	0x08007f7d

0800822c <__sflush_r>:
 800822c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008232:	0716      	lsls	r6, r2, #28
 8008234:	4605      	mov	r5, r0
 8008236:	460c      	mov	r4, r1
 8008238:	d454      	bmi.n	80082e4 <__sflush_r+0xb8>
 800823a:	684b      	ldr	r3, [r1, #4]
 800823c:	2b00      	cmp	r3, #0
 800823e:	dc02      	bgt.n	8008246 <__sflush_r+0x1a>
 8008240:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008242:	2b00      	cmp	r3, #0
 8008244:	dd48      	ble.n	80082d8 <__sflush_r+0xac>
 8008246:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008248:	2e00      	cmp	r6, #0
 800824a:	d045      	beq.n	80082d8 <__sflush_r+0xac>
 800824c:	2300      	movs	r3, #0
 800824e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008252:	682f      	ldr	r7, [r5, #0]
 8008254:	6a21      	ldr	r1, [r4, #32]
 8008256:	602b      	str	r3, [r5, #0]
 8008258:	d030      	beq.n	80082bc <__sflush_r+0x90>
 800825a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800825c:	89a3      	ldrh	r3, [r4, #12]
 800825e:	0759      	lsls	r1, r3, #29
 8008260:	d505      	bpl.n	800826e <__sflush_r+0x42>
 8008262:	6863      	ldr	r3, [r4, #4]
 8008264:	1ad2      	subs	r2, r2, r3
 8008266:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008268:	b10b      	cbz	r3, 800826e <__sflush_r+0x42>
 800826a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800826c:	1ad2      	subs	r2, r2, r3
 800826e:	2300      	movs	r3, #0
 8008270:	4628      	mov	r0, r5
 8008272:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008274:	6a21      	ldr	r1, [r4, #32]
 8008276:	47b0      	blx	r6
 8008278:	1c43      	adds	r3, r0, #1
 800827a:	89a3      	ldrh	r3, [r4, #12]
 800827c:	d106      	bne.n	800828c <__sflush_r+0x60>
 800827e:	6829      	ldr	r1, [r5, #0]
 8008280:	291d      	cmp	r1, #29
 8008282:	d82b      	bhi.n	80082dc <__sflush_r+0xb0>
 8008284:	4a28      	ldr	r2, [pc, #160]	@ (8008328 <__sflush_r+0xfc>)
 8008286:	410a      	asrs	r2, r1
 8008288:	07d6      	lsls	r6, r2, #31
 800828a:	d427      	bmi.n	80082dc <__sflush_r+0xb0>
 800828c:	2200      	movs	r2, #0
 800828e:	6062      	str	r2, [r4, #4]
 8008290:	6922      	ldr	r2, [r4, #16]
 8008292:	04d9      	lsls	r1, r3, #19
 8008294:	6022      	str	r2, [r4, #0]
 8008296:	d504      	bpl.n	80082a2 <__sflush_r+0x76>
 8008298:	1c42      	adds	r2, r0, #1
 800829a:	d101      	bne.n	80082a0 <__sflush_r+0x74>
 800829c:	682b      	ldr	r3, [r5, #0]
 800829e:	b903      	cbnz	r3, 80082a2 <__sflush_r+0x76>
 80082a0:	6560      	str	r0, [r4, #84]	@ 0x54
 80082a2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80082a4:	602f      	str	r7, [r5, #0]
 80082a6:	b1b9      	cbz	r1, 80082d8 <__sflush_r+0xac>
 80082a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80082ac:	4299      	cmp	r1, r3
 80082ae:	d002      	beq.n	80082b6 <__sflush_r+0x8a>
 80082b0:	4628      	mov	r0, r5
 80082b2:	f7ff f9e5 	bl	8007680 <_free_r>
 80082b6:	2300      	movs	r3, #0
 80082b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80082ba:	e00d      	b.n	80082d8 <__sflush_r+0xac>
 80082bc:	2301      	movs	r3, #1
 80082be:	4628      	mov	r0, r5
 80082c0:	47b0      	blx	r6
 80082c2:	4602      	mov	r2, r0
 80082c4:	1c50      	adds	r0, r2, #1
 80082c6:	d1c9      	bne.n	800825c <__sflush_r+0x30>
 80082c8:	682b      	ldr	r3, [r5, #0]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d0c6      	beq.n	800825c <__sflush_r+0x30>
 80082ce:	2b1d      	cmp	r3, #29
 80082d0:	d001      	beq.n	80082d6 <__sflush_r+0xaa>
 80082d2:	2b16      	cmp	r3, #22
 80082d4:	d11d      	bne.n	8008312 <__sflush_r+0xe6>
 80082d6:	602f      	str	r7, [r5, #0]
 80082d8:	2000      	movs	r0, #0
 80082da:	e021      	b.n	8008320 <__sflush_r+0xf4>
 80082dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082e0:	b21b      	sxth	r3, r3
 80082e2:	e01a      	b.n	800831a <__sflush_r+0xee>
 80082e4:	690f      	ldr	r7, [r1, #16]
 80082e6:	2f00      	cmp	r7, #0
 80082e8:	d0f6      	beq.n	80082d8 <__sflush_r+0xac>
 80082ea:	0793      	lsls	r3, r2, #30
 80082ec:	bf18      	it	ne
 80082ee:	2300      	movne	r3, #0
 80082f0:	680e      	ldr	r6, [r1, #0]
 80082f2:	bf08      	it	eq
 80082f4:	694b      	ldreq	r3, [r1, #20]
 80082f6:	1bf6      	subs	r6, r6, r7
 80082f8:	600f      	str	r7, [r1, #0]
 80082fa:	608b      	str	r3, [r1, #8]
 80082fc:	2e00      	cmp	r6, #0
 80082fe:	ddeb      	ble.n	80082d8 <__sflush_r+0xac>
 8008300:	4633      	mov	r3, r6
 8008302:	463a      	mov	r2, r7
 8008304:	4628      	mov	r0, r5
 8008306:	6a21      	ldr	r1, [r4, #32]
 8008308:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800830c:	47e0      	blx	ip
 800830e:	2800      	cmp	r0, #0
 8008310:	dc07      	bgt.n	8008322 <__sflush_r+0xf6>
 8008312:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008316:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800831a:	f04f 30ff 	mov.w	r0, #4294967295
 800831e:	81a3      	strh	r3, [r4, #12]
 8008320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008322:	4407      	add	r7, r0
 8008324:	1a36      	subs	r6, r6, r0
 8008326:	e7e9      	b.n	80082fc <__sflush_r+0xd0>
 8008328:	dfbffffe 	.word	0xdfbffffe

0800832c <_fflush_r>:
 800832c:	b538      	push	{r3, r4, r5, lr}
 800832e:	690b      	ldr	r3, [r1, #16]
 8008330:	4605      	mov	r5, r0
 8008332:	460c      	mov	r4, r1
 8008334:	b913      	cbnz	r3, 800833c <_fflush_r+0x10>
 8008336:	2500      	movs	r5, #0
 8008338:	4628      	mov	r0, r5
 800833a:	bd38      	pop	{r3, r4, r5, pc}
 800833c:	b118      	cbz	r0, 8008346 <_fflush_r+0x1a>
 800833e:	6a03      	ldr	r3, [r0, #32]
 8008340:	b90b      	cbnz	r3, 8008346 <_fflush_r+0x1a>
 8008342:	f7fe f9f5 	bl	8006730 <__sinit>
 8008346:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d0f3      	beq.n	8008336 <_fflush_r+0xa>
 800834e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008350:	07d0      	lsls	r0, r2, #31
 8008352:	d404      	bmi.n	800835e <_fflush_r+0x32>
 8008354:	0599      	lsls	r1, r3, #22
 8008356:	d402      	bmi.n	800835e <_fflush_r+0x32>
 8008358:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800835a:	f7fe fb20 	bl	800699e <__retarget_lock_acquire_recursive>
 800835e:	4628      	mov	r0, r5
 8008360:	4621      	mov	r1, r4
 8008362:	f7ff ff63 	bl	800822c <__sflush_r>
 8008366:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008368:	4605      	mov	r5, r0
 800836a:	07da      	lsls	r2, r3, #31
 800836c:	d4e4      	bmi.n	8008338 <_fflush_r+0xc>
 800836e:	89a3      	ldrh	r3, [r4, #12]
 8008370:	059b      	lsls	r3, r3, #22
 8008372:	d4e1      	bmi.n	8008338 <_fflush_r+0xc>
 8008374:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008376:	f7fe fb13 	bl	80069a0 <__retarget_lock_release_recursive>
 800837a:	e7dd      	b.n	8008338 <_fflush_r+0xc>

0800837c <memmove>:
 800837c:	4288      	cmp	r0, r1
 800837e:	b510      	push	{r4, lr}
 8008380:	eb01 0402 	add.w	r4, r1, r2
 8008384:	d902      	bls.n	800838c <memmove+0x10>
 8008386:	4284      	cmp	r4, r0
 8008388:	4623      	mov	r3, r4
 800838a:	d807      	bhi.n	800839c <memmove+0x20>
 800838c:	1e43      	subs	r3, r0, #1
 800838e:	42a1      	cmp	r1, r4
 8008390:	d008      	beq.n	80083a4 <memmove+0x28>
 8008392:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008396:	f803 2f01 	strb.w	r2, [r3, #1]!
 800839a:	e7f8      	b.n	800838e <memmove+0x12>
 800839c:	4601      	mov	r1, r0
 800839e:	4402      	add	r2, r0
 80083a0:	428a      	cmp	r2, r1
 80083a2:	d100      	bne.n	80083a6 <memmove+0x2a>
 80083a4:	bd10      	pop	{r4, pc}
 80083a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80083aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80083ae:	e7f7      	b.n	80083a0 <memmove+0x24>

080083b0 <_sbrk_r>:
 80083b0:	b538      	push	{r3, r4, r5, lr}
 80083b2:	2300      	movs	r3, #0
 80083b4:	4d05      	ldr	r5, [pc, #20]	@ (80083cc <_sbrk_r+0x1c>)
 80083b6:	4604      	mov	r4, r0
 80083b8:	4608      	mov	r0, r1
 80083ba:	602b      	str	r3, [r5, #0]
 80083bc:	f7fb f86c 	bl	8003498 <_sbrk>
 80083c0:	1c43      	adds	r3, r0, #1
 80083c2:	d102      	bne.n	80083ca <_sbrk_r+0x1a>
 80083c4:	682b      	ldr	r3, [r5, #0]
 80083c6:	b103      	cbz	r3, 80083ca <_sbrk_r+0x1a>
 80083c8:	6023      	str	r3, [r4, #0]
 80083ca:	bd38      	pop	{r3, r4, r5, pc}
 80083cc:	2000059c 	.word	0x2000059c

080083d0 <__assert_func>:
 80083d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80083d2:	4614      	mov	r4, r2
 80083d4:	461a      	mov	r2, r3
 80083d6:	4b09      	ldr	r3, [pc, #36]	@ (80083fc <__assert_func+0x2c>)
 80083d8:	4605      	mov	r5, r0
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	68d8      	ldr	r0, [r3, #12]
 80083de:	b954      	cbnz	r4, 80083f6 <__assert_func+0x26>
 80083e0:	4b07      	ldr	r3, [pc, #28]	@ (8008400 <__assert_func+0x30>)
 80083e2:	461c      	mov	r4, r3
 80083e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80083e8:	9100      	str	r1, [sp, #0]
 80083ea:	462b      	mov	r3, r5
 80083ec:	4905      	ldr	r1, [pc, #20]	@ (8008404 <__assert_func+0x34>)
 80083ee:	f000 f86f 	bl	80084d0 <fiprintf>
 80083f2:	f000 f87f 	bl	80084f4 <abort>
 80083f6:	4b04      	ldr	r3, [pc, #16]	@ (8008408 <__assert_func+0x38>)
 80083f8:	e7f4      	b.n	80083e4 <__assert_func+0x14>
 80083fa:	bf00      	nop
 80083fc:	2000007c 	.word	0x2000007c
 8008400:	080094f6 	.word	0x080094f6
 8008404:	080094c8 	.word	0x080094c8
 8008408:	080094bb 	.word	0x080094bb

0800840c <_calloc_r>:
 800840c:	b570      	push	{r4, r5, r6, lr}
 800840e:	fba1 5402 	umull	r5, r4, r1, r2
 8008412:	b93c      	cbnz	r4, 8008424 <_calloc_r+0x18>
 8008414:	4629      	mov	r1, r5
 8008416:	f7ff f9a5 	bl	8007764 <_malloc_r>
 800841a:	4606      	mov	r6, r0
 800841c:	b928      	cbnz	r0, 800842a <_calloc_r+0x1e>
 800841e:	2600      	movs	r6, #0
 8008420:	4630      	mov	r0, r6
 8008422:	bd70      	pop	{r4, r5, r6, pc}
 8008424:	220c      	movs	r2, #12
 8008426:	6002      	str	r2, [r0, #0]
 8008428:	e7f9      	b.n	800841e <_calloc_r+0x12>
 800842a:	462a      	mov	r2, r5
 800842c:	4621      	mov	r1, r4
 800842e:	f7fe fa39 	bl	80068a4 <memset>
 8008432:	e7f5      	b.n	8008420 <_calloc_r+0x14>

08008434 <__ascii_mbtowc>:
 8008434:	b082      	sub	sp, #8
 8008436:	b901      	cbnz	r1, 800843a <__ascii_mbtowc+0x6>
 8008438:	a901      	add	r1, sp, #4
 800843a:	b142      	cbz	r2, 800844e <__ascii_mbtowc+0x1a>
 800843c:	b14b      	cbz	r3, 8008452 <__ascii_mbtowc+0x1e>
 800843e:	7813      	ldrb	r3, [r2, #0]
 8008440:	600b      	str	r3, [r1, #0]
 8008442:	7812      	ldrb	r2, [r2, #0]
 8008444:	1e10      	subs	r0, r2, #0
 8008446:	bf18      	it	ne
 8008448:	2001      	movne	r0, #1
 800844a:	b002      	add	sp, #8
 800844c:	4770      	bx	lr
 800844e:	4610      	mov	r0, r2
 8008450:	e7fb      	b.n	800844a <__ascii_mbtowc+0x16>
 8008452:	f06f 0001 	mvn.w	r0, #1
 8008456:	e7f8      	b.n	800844a <__ascii_mbtowc+0x16>

08008458 <_realloc_r>:
 8008458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800845c:	4680      	mov	r8, r0
 800845e:	4615      	mov	r5, r2
 8008460:	460c      	mov	r4, r1
 8008462:	b921      	cbnz	r1, 800846e <_realloc_r+0x16>
 8008464:	4611      	mov	r1, r2
 8008466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800846a:	f7ff b97b 	b.w	8007764 <_malloc_r>
 800846e:	b92a      	cbnz	r2, 800847c <_realloc_r+0x24>
 8008470:	f7ff f906 	bl	8007680 <_free_r>
 8008474:	2400      	movs	r4, #0
 8008476:	4620      	mov	r0, r4
 8008478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800847c:	f000 f841 	bl	8008502 <_malloc_usable_size_r>
 8008480:	4285      	cmp	r5, r0
 8008482:	4606      	mov	r6, r0
 8008484:	d802      	bhi.n	800848c <_realloc_r+0x34>
 8008486:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800848a:	d8f4      	bhi.n	8008476 <_realloc_r+0x1e>
 800848c:	4629      	mov	r1, r5
 800848e:	4640      	mov	r0, r8
 8008490:	f7ff f968 	bl	8007764 <_malloc_r>
 8008494:	4607      	mov	r7, r0
 8008496:	2800      	cmp	r0, #0
 8008498:	d0ec      	beq.n	8008474 <_realloc_r+0x1c>
 800849a:	42b5      	cmp	r5, r6
 800849c:	462a      	mov	r2, r5
 800849e:	4621      	mov	r1, r4
 80084a0:	bf28      	it	cs
 80084a2:	4632      	movcs	r2, r6
 80084a4:	f7fe fa8b 	bl	80069be <memcpy>
 80084a8:	4621      	mov	r1, r4
 80084aa:	4640      	mov	r0, r8
 80084ac:	f7ff f8e8 	bl	8007680 <_free_r>
 80084b0:	463c      	mov	r4, r7
 80084b2:	e7e0      	b.n	8008476 <_realloc_r+0x1e>

080084b4 <__ascii_wctomb>:
 80084b4:	4603      	mov	r3, r0
 80084b6:	4608      	mov	r0, r1
 80084b8:	b141      	cbz	r1, 80084cc <__ascii_wctomb+0x18>
 80084ba:	2aff      	cmp	r2, #255	@ 0xff
 80084bc:	d904      	bls.n	80084c8 <__ascii_wctomb+0x14>
 80084be:	228a      	movs	r2, #138	@ 0x8a
 80084c0:	f04f 30ff 	mov.w	r0, #4294967295
 80084c4:	601a      	str	r2, [r3, #0]
 80084c6:	4770      	bx	lr
 80084c8:	2001      	movs	r0, #1
 80084ca:	700a      	strb	r2, [r1, #0]
 80084cc:	4770      	bx	lr
	...

080084d0 <fiprintf>:
 80084d0:	b40e      	push	{r1, r2, r3}
 80084d2:	b503      	push	{r0, r1, lr}
 80084d4:	4601      	mov	r1, r0
 80084d6:	ab03      	add	r3, sp, #12
 80084d8:	4805      	ldr	r0, [pc, #20]	@ (80084f0 <fiprintf+0x20>)
 80084da:	f853 2b04 	ldr.w	r2, [r3], #4
 80084de:	6800      	ldr	r0, [r0, #0]
 80084e0:	9301      	str	r3, [sp, #4]
 80084e2:	f000 f83d 	bl	8008560 <_vfiprintf_r>
 80084e6:	b002      	add	sp, #8
 80084e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80084ec:	b003      	add	sp, #12
 80084ee:	4770      	bx	lr
 80084f0:	2000007c 	.word	0x2000007c

080084f4 <abort>:
 80084f4:	2006      	movs	r0, #6
 80084f6:	b508      	push	{r3, lr}
 80084f8:	f000 fa06 	bl	8008908 <raise>
 80084fc:	2001      	movs	r0, #1
 80084fe:	f7fa ff56 	bl	80033ae <_exit>

08008502 <_malloc_usable_size_r>:
 8008502:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008506:	1f18      	subs	r0, r3, #4
 8008508:	2b00      	cmp	r3, #0
 800850a:	bfbc      	itt	lt
 800850c:	580b      	ldrlt	r3, [r1, r0]
 800850e:	18c0      	addlt	r0, r0, r3
 8008510:	4770      	bx	lr

08008512 <__sfputc_r>:
 8008512:	6893      	ldr	r3, [r2, #8]
 8008514:	b410      	push	{r4}
 8008516:	3b01      	subs	r3, #1
 8008518:	2b00      	cmp	r3, #0
 800851a:	6093      	str	r3, [r2, #8]
 800851c:	da07      	bge.n	800852e <__sfputc_r+0x1c>
 800851e:	6994      	ldr	r4, [r2, #24]
 8008520:	42a3      	cmp	r3, r4
 8008522:	db01      	blt.n	8008528 <__sfputc_r+0x16>
 8008524:	290a      	cmp	r1, #10
 8008526:	d102      	bne.n	800852e <__sfputc_r+0x1c>
 8008528:	bc10      	pop	{r4}
 800852a:	f000 b931 	b.w	8008790 <__swbuf_r>
 800852e:	6813      	ldr	r3, [r2, #0]
 8008530:	1c58      	adds	r0, r3, #1
 8008532:	6010      	str	r0, [r2, #0]
 8008534:	7019      	strb	r1, [r3, #0]
 8008536:	4608      	mov	r0, r1
 8008538:	bc10      	pop	{r4}
 800853a:	4770      	bx	lr

0800853c <__sfputs_r>:
 800853c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800853e:	4606      	mov	r6, r0
 8008540:	460f      	mov	r7, r1
 8008542:	4614      	mov	r4, r2
 8008544:	18d5      	adds	r5, r2, r3
 8008546:	42ac      	cmp	r4, r5
 8008548:	d101      	bne.n	800854e <__sfputs_r+0x12>
 800854a:	2000      	movs	r0, #0
 800854c:	e007      	b.n	800855e <__sfputs_r+0x22>
 800854e:	463a      	mov	r2, r7
 8008550:	4630      	mov	r0, r6
 8008552:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008556:	f7ff ffdc 	bl	8008512 <__sfputc_r>
 800855a:	1c43      	adds	r3, r0, #1
 800855c:	d1f3      	bne.n	8008546 <__sfputs_r+0xa>
 800855e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008560 <_vfiprintf_r>:
 8008560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008564:	460d      	mov	r5, r1
 8008566:	4614      	mov	r4, r2
 8008568:	4698      	mov	r8, r3
 800856a:	4606      	mov	r6, r0
 800856c:	b09d      	sub	sp, #116	@ 0x74
 800856e:	b118      	cbz	r0, 8008578 <_vfiprintf_r+0x18>
 8008570:	6a03      	ldr	r3, [r0, #32]
 8008572:	b90b      	cbnz	r3, 8008578 <_vfiprintf_r+0x18>
 8008574:	f7fe f8dc 	bl	8006730 <__sinit>
 8008578:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800857a:	07d9      	lsls	r1, r3, #31
 800857c:	d405      	bmi.n	800858a <_vfiprintf_r+0x2a>
 800857e:	89ab      	ldrh	r3, [r5, #12]
 8008580:	059a      	lsls	r2, r3, #22
 8008582:	d402      	bmi.n	800858a <_vfiprintf_r+0x2a>
 8008584:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008586:	f7fe fa0a 	bl	800699e <__retarget_lock_acquire_recursive>
 800858a:	89ab      	ldrh	r3, [r5, #12]
 800858c:	071b      	lsls	r3, r3, #28
 800858e:	d501      	bpl.n	8008594 <_vfiprintf_r+0x34>
 8008590:	692b      	ldr	r3, [r5, #16]
 8008592:	b99b      	cbnz	r3, 80085bc <_vfiprintf_r+0x5c>
 8008594:	4629      	mov	r1, r5
 8008596:	4630      	mov	r0, r6
 8008598:	f000 f938 	bl	800880c <__swsetup_r>
 800859c:	b170      	cbz	r0, 80085bc <_vfiprintf_r+0x5c>
 800859e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80085a0:	07dc      	lsls	r4, r3, #31
 80085a2:	d504      	bpl.n	80085ae <_vfiprintf_r+0x4e>
 80085a4:	f04f 30ff 	mov.w	r0, #4294967295
 80085a8:	b01d      	add	sp, #116	@ 0x74
 80085aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085ae:	89ab      	ldrh	r3, [r5, #12]
 80085b0:	0598      	lsls	r0, r3, #22
 80085b2:	d4f7      	bmi.n	80085a4 <_vfiprintf_r+0x44>
 80085b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80085b6:	f7fe f9f3 	bl	80069a0 <__retarget_lock_release_recursive>
 80085ba:	e7f3      	b.n	80085a4 <_vfiprintf_r+0x44>
 80085bc:	2300      	movs	r3, #0
 80085be:	9309      	str	r3, [sp, #36]	@ 0x24
 80085c0:	2320      	movs	r3, #32
 80085c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80085c6:	2330      	movs	r3, #48	@ 0x30
 80085c8:	f04f 0901 	mov.w	r9, #1
 80085cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80085d0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800877c <_vfiprintf_r+0x21c>
 80085d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80085d8:	4623      	mov	r3, r4
 80085da:	469a      	mov	sl, r3
 80085dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085e0:	b10a      	cbz	r2, 80085e6 <_vfiprintf_r+0x86>
 80085e2:	2a25      	cmp	r2, #37	@ 0x25
 80085e4:	d1f9      	bne.n	80085da <_vfiprintf_r+0x7a>
 80085e6:	ebba 0b04 	subs.w	fp, sl, r4
 80085ea:	d00b      	beq.n	8008604 <_vfiprintf_r+0xa4>
 80085ec:	465b      	mov	r3, fp
 80085ee:	4622      	mov	r2, r4
 80085f0:	4629      	mov	r1, r5
 80085f2:	4630      	mov	r0, r6
 80085f4:	f7ff ffa2 	bl	800853c <__sfputs_r>
 80085f8:	3001      	adds	r0, #1
 80085fa:	f000 80a7 	beq.w	800874c <_vfiprintf_r+0x1ec>
 80085fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008600:	445a      	add	r2, fp
 8008602:	9209      	str	r2, [sp, #36]	@ 0x24
 8008604:	f89a 3000 	ldrb.w	r3, [sl]
 8008608:	2b00      	cmp	r3, #0
 800860a:	f000 809f 	beq.w	800874c <_vfiprintf_r+0x1ec>
 800860e:	2300      	movs	r3, #0
 8008610:	f04f 32ff 	mov.w	r2, #4294967295
 8008614:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008618:	f10a 0a01 	add.w	sl, sl, #1
 800861c:	9304      	str	r3, [sp, #16]
 800861e:	9307      	str	r3, [sp, #28]
 8008620:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008624:	931a      	str	r3, [sp, #104]	@ 0x68
 8008626:	4654      	mov	r4, sl
 8008628:	2205      	movs	r2, #5
 800862a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800862e:	4853      	ldr	r0, [pc, #332]	@ (800877c <_vfiprintf_r+0x21c>)
 8008630:	f7fe f9b7 	bl	80069a2 <memchr>
 8008634:	9a04      	ldr	r2, [sp, #16]
 8008636:	b9d8      	cbnz	r0, 8008670 <_vfiprintf_r+0x110>
 8008638:	06d1      	lsls	r1, r2, #27
 800863a:	bf44      	itt	mi
 800863c:	2320      	movmi	r3, #32
 800863e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008642:	0713      	lsls	r3, r2, #28
 8008644:	bf44      	itt	mi
 8008646:	232b      	movmi	r3, #43	@ 0x2b
 8008648:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800864c:	f89a 3000 	ldrb.w	r3, [sl]
 8008650:	2b2a      	cmp	r3, #42	@ 0x2a
 8008652:	d015      	beq.n	8008680 <_vfiprintf_r+0x120>
 8008654:	4654      	mov	r4, sl
 8008656:	2000      	movs	r0, #0
 8008658:	f04f 0c0a 	mov.w	ip, #10
 800865c:	9a07      	ldr	r2, [sp, #28]
 800865e:	4621      	mov	r1, r4
 8008660:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008664:	3b30      	subs	r3, #48	@ 0x30
 8008666:	2b09      	cmp	r3, #9
 8008668:	d94b      	bls.n	8008702 <_vfiprintf_r+0x1a2>
 800866a:	b1b0      	cbz	r0, 800869a <_vfiprintf_r+0x13a>
 800866c:	9207      	str	r2, [sp, #28]
 800866e:	e014      	b.n	800869a <_vfiprintf_r+0x13a>
 8008670:	eba0 0308 	sub.w	r3, r0, r8
 8008674:	fa09 f303 	lsl.w	r3, r9, r3
 8008678:	4313      	orrs	r3, r2
 800867a:	46a2      	mov	sl, r4
 800867c:	9304      	str	r3, [sp, #16]
 800867e:	e7d2      	b.n	8008626 <_vfiprintf_r+0xc6>
 8008680:	9b03      	ldr	r3, [sp, #12]
 8008682:	1d19      	adds	r1, r3, #4
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	9103      	str	r1, [sp, #12]
 8008688:	2b00      	cmp	r3, #0
 800868a:	bfbb      	ittet	lt
 800868c:	425b      	neglt	r3, r3
 800868e:	f042 0202 	orrlt.w	r2, r2, #2
 8008692:	9307      	strge	r3, [sp, #28]
 8008694:	9307      	strlt	r3, [sp, #28]
 8008696:	bfb8      	it	lt
 8008698:	9204      	strlt	r2, [sp, #16]
 800869a:	7823      	ldrb	r3, [r4, #0]
 800869c:	2b2e      	cmp	r3, #46	@ 0x2e
 800869e:	d10a      	bne.n	80086b6 <_vfiprintf_r+0x156>
 80086a0:	7863      	ldrb	r3, [r4, #1]
 80086a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80086a4:	d132      	bne.n	800870c <_vfiprintf_r+0x1ac>
 80086a6:	9b03      	ldr	r3, [sp, #12]
 80086a8:	3402      	adds	r4, #2
 80086aa:	1d1a      	adds	r2, r3, #4
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	9203      	str	r2, [sp, #12]
 80086b0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80086b4:	9305      	str	r3, [sp, #20]
 80086b6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008780 <_vfiprintf_r+0x220>
 80086ba:	2203      	movs	r2, #3
 80086bc:	4650      	mov	r0, sl
 80086be:	7821      	ldrb	r1, [r4, #0]
 80086c0:	f7fe f96f 	bl	80069a2 <memchr>
 80086c4:	b138      	cbz	r0, 80086d6 <_vfiprintf_r+0x176>
 80086c6:	2240      	movs	r2, #64	@ 0x40
 80086c8:	9b04      	ldr	r3, [sp, #16]
 80086ca:	eba0 000a 	sub.w	r0, r0, sl
 80086ce:	4082      	lsls	r2, r0
 80086d0:	4313      	orrs	r3, r2
 80086d2:	3401      	adds	r4, #1
 80086d4:	9304      	str	r3, [sp, #16]
 80086d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086da:	2206      	movs	r2, #6
 80086dc:	4829      	ldr	r0, [pc, #164]	@ (8008784 <_vfiprintf_r+0x224>)
 80086de:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80086e2:	f7fe f95e 	bl	80069a2 <memchr>
 80086e6:	2800      	cmp	r0, #0
 80086e8:	d03f      	beq.n	800876a <_vfiprintf_r+0x20a>
 80086ea:	4b27      	ldr	r3, [pc, #156]	@ (8008788 <_vfiprintf_r+0x228>)
 80086ec:	bb1b      	cbnz	r3, 8008736 <_vfiprintf_r+0x1d6>
 80086ee:	9b03      	ldr	r3, [sp, #12]
 80086f0:	3307      	adds	r3, #7
 80086f2:	f023 0307 	bic.w	r3, r3, #7
 80086f6:	3308      	adds	r3, #8
 80086f8:	9303      	str	r3, [sp, #12]
 80086fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086fc:	443b      	add	r3, r7
 80086fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8008700:	e76a      	b.n	80085d8 <_vfiprintf_r+0x78>
 8008702:	460c      	mov	r4, r1
 8008704:	2001      	movs	r0, #1
 8008706:	fb0c 3202 	mla	r2, ip, r2, r3
 800870a:	e7a8      	b.n	800865e <_vfiprintf_r+0xfe>
 800870c:	2300      	movs	r3, #0
 800870e:	f04f 0c0a 	mov.w	ip, #10
 8008712:	4619      	mov	r1, r3
 8008714:	3401      	adds	r4, #1
 8008716:	9305      	str	r3, [sp, #20]
 8008718:	4620      	mov	r0, r4
 800871a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800871e:	3a30      	subs	r2, #48	@ 0x30
 8008720:	2a09      	cmp	r2, #9
 8008722:	d903      	bls.n	800872c <_vfiprintf_r+0x1cc>
 8008724:	2b00      	cmp	r3, #0
 8008726:	d0c6      	beq.n	80086b6 <_vfiprintf_r+0x156>
 8008728:	9105      	str	r1, [sp, #20]
 800872a:	e7c4      	b.n	80086b6 <_vfiprintf_r+0x156>
 800872c:	4604      	mov	r4, r0
 800872e:	2301      	movs	r3, #1
 8008730:	fb0c 2101 	mla	r1, ip, r1, r2
 8008734:	e7f0      	b.n	8008718 <_vfiprintf_r+0x1b8>
 8008736:	ab03      	add	r3, sp, #12
 8008738:	9300      	str	r3, [sp, #0]
 800873a:	462a      	mov	r2, r5
 800873c:	4630      	mov	r0, r6
 800873e:	4b13      	ldr	r3, [pc, #76]	@ (800878c <_vfiprintf_r+0x22c>)
 8008740:	a904      	add	r1, sp, #16
 8008742:	f7fd fbab 	bl	8005e9c <_printf_float>
 8008746:	4607      	mov	r7, r0
 8008748:	1c78      	adds	r0, r7, #1
 800874a:	d1d6      	bne.n	80086fa <_vfiprintf_r+0x19a>
 800874c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800874e:	07d9      	lsls	r1, r3, #31
 8008750:	d405      	bmi.n	800875e <_vfiprintf_r+0x1fe>
 8008752:	89ab      	ldrh	r3, [r5, #12]
 8008754:	059a      	lsls	r2, r3, #22
 8008756:	d402      	bmi.n	800875e <_vfiprintf_r+0x1fe>
 8008758:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800875a:	f7fe f921 	bl	80069a0 <__retarget_lock_release_recursive>
 800875e:	89ab      	ldrh	r3, [r5, #12]
 8008760:	065b      	lsls	r3, r3, #25
 8008762:	f53f af1f 	bmi.w	80085a4 <_vfiprintf_r+0x44>
 8008766:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008768:	e71e      	b.n	80085a8 <_vfiprintf_r+0x48>
 800876a:	ab03      	add	r3, sp, #12
 800876c:	9300      	str	r3, [sp, #0]
 800876e:	462a      	mov	r2, r5
 8008770:	4630      	mov	r0, r6
 8008772:	4b06      	ldr	r3, [pc, #24]	@ (800878c <_vfiprintf_r+0x22c>)
 8008774:	a904      	add	r1, sp, #16
 8008776:	f7fd fe2f 	bl	80063d8 <_printf_i>
 800877a:	e7e4      	b.n	8008746 <_vfiprintf_r+0x1e6>
 800877c:	080094a0 	.word	0x080094a0
 8008780:	080094a6 	.word	0x080094a6
 8008784:	080094aa 	.word	0x080094aa
 8008788:	08005e9d 	.word	0x08005e9d
 800878c:	0800853d 	.word	0x0800853d

08008790 <__swbuf_r>:
 8008790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008792:	460e      	mov	r6, r1
 8008794:	4614      	mov	r4, r2
 8008796:	4605      	mov	r5, r0
 8008798:	b118      	cbz	r0, 80087a2 <__swbuf_r+0x12>
 800879a:	6a03      	ldr	r3, [r0, #32]
 800879c:	b90b      	cbnz	r3, 80087a2 <__swbuf_r+0x12>
 800879e:	f7fd ffc7 	bl	8006730 <__sinit>
 80087a2:	69a3      	ldr	r3, [r4, #24]
 80087a4:	60a3      	str	r3, [r4, #8]
 80087a6:	89a3      	ldrh	r3, [r4, #12]
 80087a8:	071a      	lsls	r2, r3, #28
 80087aa:	d501      	bpl.n	80087b0 <__swbuf_r+0x20>
 80087ac:	6923      	ldr	r3, [r4, #16]
 80087ae:	b943      	cbnz	r3, 80087c2 <__swbuf_r+0x32>
 80087b0:	4621      	mov	r1, r4
 80087b2:	4628      	mov	r0, r5
 80087b4:	f000 f82a 	bl	800880c <__swsetup_r>
 80087b8:	b118      	cbz	r0, 80087c2 <__swbuf_r+0x32>
 80087ba:	f04f 37ff 	mov.w	r7, #4294967295
 80087be:	4638      	mov	r0, r7
 80087c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087c2:	6823      	ldr	r3, [r4, #0]
 80087c4:	6922      	ldr	r2, [r4, #16]
 80087c6:	b2f6      	uxtb	r6, r6
 80087c8:	1a98      	subs	r0, r3, r2
 80087ca:	6963      	ldr	r3, [r4, #20]
 80087cc:	4637      	mov	r7, r6
 80087ce:	4283      	cmp	r3, r0
 80087d0:	dc05      	bgt.n	80087de <__swbuf_r+0x4e>
 80087d2:	4621      	mov	r1, r4
 80087d4:	4628      	mov	r0, r5
 80087d6:	f7ff fda9 	bl	800832c <_fflush_r>
 80087da:	2800      	cmp	r0, #0
 80087dc:	d1ed      	bne.n	80087ba <__swbuf_r+0x2a>
 80087de:	68a3      	ldr	r3, [r4, #8]
 80087e0:	3b01      	subs	r3, #1
 80087e2:	60a3      	str	r3, [r4, #8]
 80087e4:	6823      	ldr	r3, [r4, #0]
 80087e6:	1c5a      	adds	r2, r3, #1
 80087e8:	6022      	str	r2, [r4, #0]
 80087ea:	701e      	strb	r6, [r3, #0]
 80087ec:	6962      	ldr	r2, [r4, #20]
 80087ee:	1c43      	adds	r3, r0, #1
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d004      	beq.n	80087fe <__swbuf_r+0x6e>
 80087f4:	89a3      	ldrh	r3, [r4, #12]
 80087f6:	07db      	lsls	r3, r3, #31
 80087f8:	d5e1      	bpl.n	80087be <__swbuf_r+0x2e>
 80087fa:	2e0a      	cmp	r6, #10
 80087fc:	d1df      	bne.n	80087be <__swbuf_r+0x2e>
 80087fe:	4621      	mov	r1, r4
 8008800:	4628      	mov	r0, r5
 8008802:	f7ff fd93 	bl	800832c <_fflush_r>
 8008806:	2800      	cmp	r0, #0
 8008808:	d0d9      	beq.n	80087be <__swbuf_r+0x2e>
 800880a:	e7d6      	b.n	80087ba <__swbuf_r+0x2a>

0800880c <__swsetup_r>:
 800880c:	b538      	push	{r3, r4, r5, lr}
 800880e:	4b29      	ldr	r3, [pc, #164]	@ (80088b4 <__swsetup_r+0xa8>)
 8008810:	4605      	mov	r5, r0
 8008812:	6818      	ldr	r0, [r3, #0]
 8008814:	460c      	mov	r4, r1
 8008816:	b118      	cbz	r0, 8008820 <__swsetup_r+0x14>
 8008818:	6a03      	ldr	r3, [r0, #32]
 800881a:	b90b      	cbnz	r3, 8008820 <__swsetup_r+0x14>
 800881c:	f7fd ff88 	bl	8006730 <__sinit>
 8008820:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008824:	0719      	lsls	r1, r3, #28
 8008826:	d422      	bmi.n	800886e <__swsetup_r+0x62>
 8008828:	06da      	lsls	r2, r3, #27
 800882a:	d407      	bmi.n	800883c <__swsetup_r+0x30>
 800882c:	2209      	movs	r2, #9
 800882e:	602a      	str	r2, [r5, #0]
 8008830:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008834:	f04f 30ff 	mov.w	r0, #4294967295
 8008838:	81a3      	strh	r3, [r4, #12]
 800883a:	e033      	b.n	80088a4 <__swsetup_r+0x98>
 800883c:	0758      	lsls	r0, r3, #29
 800883e:	d512      	bpl.n	8008866 <__swsetup_r+0x5a>
 8008840:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008842:	b141      	cbz	r1, 8008856 <__swsetup_r+0x4a>
 8008844:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008848:	4299      	cmp	r1, r3
 800884a:	d002      	beq.n	8008852 <__swsetup_r+0x46>
 800884c:	4628      	mov	r0, r5
 800884e:	f7fe ff17 	bl	8007680 <_free_r>
 8008852:	2300      	movs	r3, #0
 8008854:	6363      	str	r3, [r4, #52]	@ 0x34
 8008856:	89a3      	ldrh	r3, [r4, #12]
 8008858:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800885c:	81a3      	strh	r3, [r4, #12]
 800885e:	2300      	movs	r3, #0
 8008860:	6063      	str	r3, [r4, #4]
 8008862:	6923      	ldr	r3, [r4, #16]
 8008864:	6023      	str	r3, [r4, #0]
 8008866:	89a3      	ldrh	r3, [r4, #12]
 8008868:	f043 0308 	orr.w	r3, r3, #8
 800886c:	81a3      	strh	r3, [r4, #12]
 800886e:	6923      	ldr	r3, [r4, #16]
 8008870:	b94b      	cbnz	r3, 8008886 <__swsetup_r+0x7a>
 8008872:	89a3      	ldrh	r3, [r4, #12]
 8008874:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008878:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800887c:	d003      	beq.n	8008886 <__swsetup_r+0x7a>
 800887e:	4621      	mov	r1, r4
 8008880:	4628      	mov	r0, r5
 8008882:	f000 f882 	bl	800898a <__smakebuf_r>
 8008886:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800888a:	f013 0201 	ands.w	r2, r3, #1
 800888e:	d00a      	beq.n	80088a6 <__swsetup_r+0x9a>
 8008890:	2200      	movs	r2, #0
 8008892:	60a2      	str	r2, [r4, #8]
 8008894:	6962      	ldr	r2, [r4, #20]
 8008896:	4252      	negs	r2, r2
 8008898:	61a2      	str	r2, [r4, #24]
 800889a:	6922      	ldr	r2, [r4, #16]
 800889c:	b942      	cbnz	r2, 80088b0 <__swsetup_r+0xa4>
 800889e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80088a2:	d1c5      	bne.n	8008830 <__swsetup_r+0x24>
 80088a4:	bd38      	pop	{r3, r4, r5, pc}
 80088a6:	0799      	lsls	r1, r3, #30
 80088a8:	bf58      	it	pl
 80088aa:	6962      	ldrpl	r2, [r4, #20]
 80088ac:	60a2      	str	r2, [r4, #8]
 80088ae:	e7f4      	b.n	800889a <__swsetup_r+0x8e>
 80088b0:	2000      	movs	r0, #0
 80088b2:	e7f7      	b.n	80088a4 <__swsetup_r+0x98>
 80088b4:	2000007c 	.word	0x2000007c

080088b8 <_raise_r>:
 80088b8:	291f      	cmp	r1, #31
 80088ba:	b538      	push	{r3, r4, r5, lr}
 80088bc:	4605      	mov	r5, r0
 80088be:	460c      	mov	r4, r1
 80088c0:	d904      	bls.n	80088cc <_raise_r+0x14>
 80088c2:	2316      	movs	r3, #22
 80088c4:	6003      	str	r3, [r0, #0]
 80088c6:	f04f 30ff 	mov.w	r0, #4294967295
 80088ca:	bd38      	pop	{r3, r4, r5, pc}
 80088cc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80088ce:	b112      	cbz	r2, 80088d6 <_raise_r+0x1e>
 80088d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80088d4:	b94b      	cbnz	r3, 80088ea <_raise_r+0x32>
 80088d6:	4628      	mov	r0, r5
 80088d8:	f000 f830 	bl	800893c <_getpid_r>
 80088dc:	4622      	mov	r2, r4
 80088de:	4601      	mov	r1, r0
 80088e0:	4628      	mov	r0, r5
 80088e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088e6:	f000 b817 	b.w	8008918 <_kill_r>
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d00a      	beq.n	8008904 <_raise_r+0x4c>
 80088ee:	1c59      	adds	r1, r3, #1
 80088f0:	d103      	bne.n	80088fa <_raise_r+0x42>
 80088f2:	2316      	movs	r3, #22
 80088f4:	6003      	str	r3, [r0, #0]
 80088f6:	2001      	movs	r0, #1
 80088f8:	e7e7      	b.n	80088ca <_raise_r+0x12>
 80088fa:	2100      	movs	r1, #0
 80088fc:	4620      	mov	r0, r4
 80088fe:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008902:	4798      	blx	r3
 8008904:	2000      	movs	r0, #0
 8008906:	e7e0      	b.n	80088ca <_raise_r+0x12>

08008908 <raise>:
 8008908:	4b02      	ldr	r3, [pc, #8]	@ (8008914 <raise+0xc>)
 800890a:	4601      	mov	r1, r0
 800890c:	6818      	ldr	r0, [r3, #0]
 800890e:	f7ff bfd3 	b.w	80088b8 <_raise_r>
 8008912:	bf00      	nop
 8008914:	2000007c 	.word	0x2000007c

08008918 <_kill_r>:
 8008918:	b538      	push	{r3, r4, r5, lr}
 800891a:	2300      	movs	r3, #0
 800891c:	4d06      	ldr	r5, [pc, #24]	@ (8008938 <_kill_r+0x20>)
 800891e:	4604      	mov	r4, r0
 8008920:	4608      	mov	r0, r1
 8008922:	4611      	mov	r1, r2
 8008924:	602b      	str	r3, [r5, #0]
 8008926:	f7fa fd32 	bl	800338e <_kill>
 800892a:	1c43      	adds	r3, r0, #1
 800892c:	d102      	bne.n	8008934 <_kill_r+0x1c>
 800892e:	682b      	ldr	r3, [r5, #0]
 8008930:	b103      	cbz	r3, 8008934 <_kill_r+0x1c>
 8008932:	6023      	str	r3, [r4, #0]
 8008934:	bd38      	pop	{r3, r4, r5, pc}
 8008936:	bf00      	nop
 8008938:	2000059c 	.word	0x2000059c

0800893c <_getpid_r>:
 800893c:	f7fa bd20 	b.w	8003380 <_getpid>

08008940 <__swhatbuf_r>:
 8008940:	b570      	push	{r4, r5, r6, lr}
 8008942:	460c      	mov	r4, r1
 8008944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008948:	4615      	mov	r5, r2
 800894a:	2900      	cmp	r1, #0
 800894c:	461e      	mov	r6, r3
 800894e:	b096      	sub	sp, #88	@ 0x58
 8008950:	da0c      	bge.n	800896c <__swhatbuf_r+0x2c>
 8008952:	89a3      	ldrh	r3, [r4, #12]
 8008954:	2100      	movs	r1, #0
 8008956:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800895a:	bf14      	ite	ne
 800895c:	2340      	movne	r3, #64	@ 0x40
 800895e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008962:	2000      	movs	r0, #0
 8008964:	6031      	str	r1, [r6, #0]
 8008966:	602b      	str	r3, [r5, #0]
 8008968:	b016      	add	sp, #88	@ 0x58
 800896a:	bd70      	pop	{r4, r5, r6, pc}
 800896c:	466a      	mov	r2, sp
 800896e:	f000 f849 	bl	8008a04 <_fstat_r>
 8008972:	2800      	cmp	r0, #0
 8008974:	dbed      	blt.n	8008952 <__swhatbuf_r+0x12>
 8008976:	9901      	ldr	r1, [sp, #4]
 8008978:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800897c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008980:	4259      	negs	r1, r3
 8008982:	4159      	adcs	r1, r3
 8008984:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008988:	e7eb      	b.n	8008962 <__swhatbuf_r+0x22>

0800898a <__smakebuf_r>:
 800898a:	898b      	ldrh	r3, [r1, #12]
 800898c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800898e:	079d      	lsls	r5, r3, #30
 8008990:	4606      	mov	r6, r0
 8008992:	460c      	mov	r4, r1
 8008994:	d507      	bpl.n	80089a6 <__smakebuf_r+0x1c>
 8008996:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800899a:	6023      	str	r3, [r4, #0]
 800899c:	6123      	str	r3, [r4, #16]
 800899e:	2301      	movs	r3, #1
 80089a0:	6163      	str	r3, [r4, #20]
 80089a2:	b003      	add	sp, #12
 80089a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089a6:	466a      	mov	r2, sp
 80089a8:	ab01      	add	r3, sp, #4
 80089aa:	f7ff ffc9 	bl	8008940 <__swhatbuf_r>
 80089ae:	9f00      	ldr	r7, [sp, #0]
 80089b0:	4605      	mov	r5, r0
 80089b2:	4639      	mov	r1, r7
 80089b4:	4630      	mov	r0, r6
 80089b6:	f7fe fed5 	bl	8007764 <_malloc_r>
 80089ba:	b948      	cbnz	r0, 80089d0 <__smakebuf_r+0x46>
 80089bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089c0:	059a      	lsls	r2, r3, #22
 80089c2:	d4ee      	bmi.n	80089a2 <__smakebuf_r+0x18>
 80089c4:	f023 0303 	bic.w	r3, r3, #3
 80089c8:	f043 0302 	orr.w	r3, r3, #2
 80089cc:	81a3      	strh	r3, [r4, #12]
 80089ce:	e7e2      	b.n	8008996 <__smakebuf_r+0xc>
 80089d0:	89a3      	ldrh	r3, [r4, #12]
 80089d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80089d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089da:	81a3      	strh	r3, [r4, #12]
 80089dc:	9b01      	ldr	r3, [sp, #4]
 80089de:	6020      	str	r0, [r4, #0]
 80089e0:	b15b      	cbz	r3, 80089fa <__smakebuf_r+0x70>
 80089e2:	4630      	mov	r0, r6
 80089e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089e8:	f000 f81e 	bl	8008a28 <_isatty_r>
 80089ec:	b128      	cbz	r0, 80089fa <__smakebuf_r+0x70>
 80089ee:	89a3      	ldrh	r3, [r4, #12]
 80089f0:	f023 0303 	bic.w	r3, r3, #3
 80089f4:	f043 0301 	orr.w	r3, r3, #1
 80089f8:	81a3      	strh	r3, [r4, #12]
 80089fa:	89a3      	ldrh	r3, [r4, #12]
 80089fc:	431d      	orrs	r5, r3
 80089fe:	81a5      	strh	r5, [r4, #12]
 8008a00:	e7cf      	b.n	80089a2 <__smakebuf_r+0x18>
	...

08008a04 <_fstat_r>:
 8008a04:	b538      	push	{r3, r4, r5, lr}
 8008a06:	2300      	movs	r3, #0
 8008a08:	4d06      	ldr	r5, [pc, #24]	@ (8008a24 <_fstat_r+0x20>)
 8008a0a:	4604      	mov	r4, r0
 8008a0c:	4608      	mov	r0, r1
 8008a0e:	4611      	mov	r1, r2
 8008a10:	602b      	str	r3, [r5, #0]
 8008a12:	f7fa fd1b 	bl	800344c <_fstat>
 8008a16:	1c43      	adds	r3, r0, #1
 8008a18:	d102      	bne.n	8008a20 <_fstat_r+0x1c>
 8008a1a:	682b      	ldr	r3, [r5, #0]
 8008a1c:	b103      	cbz	r3, 8008a20 <_fstat_r+0x1c>
 8008a1e:	6023      	str	r3, [r4, #0]
 8008a20:	bd38      	pop	{r3, r4, r5, pc}
 8008a22:	bf00      	nop
 8008a24:	2000059c 	.word	0x2000059c

08008a28 <_isatty_r>:
 8008a28:	b538      	push	{r3, r4, r5, lr}
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	4d05      	ldr	r5, [pc, #20]	@ (8008a44 <_isatty_r+0x1c>)
 8008a2e:	4604      	mov	r4, r0
 8008a30:	4608      	mov	r0, r1
 8008a32:	602b      	str	r3, [r5, #0]
 8008a34:	f7fa fd19 	bl	800346a <_isatty>
 8008a38:	1c43      	adds	r3, r0, #1
 8008a3a:	d102      	bne.n	8008a42 <_isatty_r+0x1a>
 8008a3c:	682b      	ldr	r3, [r5, #0]
 8008a3e:	b103      	cbz	r3, 8008a42 <_isatty_r+0x1a>
 8008a40:	6023      	str	r3, [r4, #0]
 8008a42:	bd38      	pop	{r3, r4, r5, pc}
 8008a44:	2000059c 	.word	0x2000059c

08008a48 <log10>:
 8008a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a4a:	4604      	mov	r4, r0
 8008a4c:	460d      	mov	r5, r1
 8008a4e:	f000 f833 	bl	8008ab8 <__ieee754_log10>
 8008a52:	4622      	mov	r2, r4
 8008a54:	4606      	mov	r6, r0
 8008a56:	460f      	mov	r7, r1
 8008a58:	462b      	mov	r3, r5
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	4629      	mov	r1, r5
 8008a5e:	f7f7 ffd5 	bl	8000a0c <__aeabi_dcmpun>
 8008a62:	b998      	cbnz	r0, 8008a8c <log10+0x44>
 8008a64:	2200      	movs	r2, #0
 8008a66:	2300      	movs	r3, #0
 8008a68:	4620      	mov	r0, r4
 8008a6a:	4629      	mov	r1, r5
 8008a6c:	f7f7 ffb0 	bl	80009d0 <__aeabi_dcmple>
 8008a70:	b160      	cbz	r0, 8008a8c <log10+0x44>
 8008a72:	2200      	movs	r2, #0
 8008a74:	2300      	movs	r3, #0
 8008a76:	4620      	mov	r0, r4
 8008a78:	4629      	mov	r1, r5
 8008a7a:	f7f7 ff95 	bl	80009a8 <__aeabi_dcmpeq>
 8008a7e:	b140      	cbz	r0, 8008a92 <log10+0x4a>
 8008a80:	f7fd ff62 	bl	8006948 <__errno>
 8008a84:	2322      	movs	r3, #34	@ 0x22
 8008a86:	2600      	movs	r6, #0
 8008a88:	4f06      	ldr	r7, [pc, #24]	@ (8008aa4 <log10+0x5c>)
 8008a8a:	6003      	str	r3, [r0, #0]
 8008a8c:	4630      	mov	r0, r6
 8008a8e:	4639      	mov	r1, r7
 8008a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a92:	f7fd ff59 	bl	8006948 <__errno>
 8008a96:	2321      	movs	r3, #33	@ 0x21
 8008a98:	6003      	str	r3, [r0, #0]
 8008a9a:	4803      	ldr	r0, [pc, #12]	@ (8008aa8 <log10+0x60>)
 8008a9c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008aa0:	f000 b804 	b.w	8008aac <nan>
 8008aa4:	fff00000 	.word	0xfff00000
 8008aa8:	080094f6 	.word	0x080094f6

08008aac <nan>:
 8008aac:	2000      	movs	r0, #0
 8008aae:	4901      	ldr	r1, [pc, #4]	@ (8008ab4 <nan+0x8>)
 8008ab0:	4770      	bx	lr
 8008ab2:	bf00      	nop
 8008ab4:	7ff80000 	.word	0x7ff80000

08008ab8 <__ieee754_log10>:
 8008ab8:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8008abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ac0:	4604      	mov	r4, r0
 8008ac2:	460d      	mov	r5, r1
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	da26      	bge.n	8008b16 <__ieee754_log10+0x5e>
 8008ac8:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8008acc:	4302      	orrs	r2, r0
 8008ace:	d107      	bne.n	8008ae0 <__ieee754_log10+0x28>
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	2000      	movs	r0, #0
 8008ad6:	4932      	ldr	r1, [pc, #200]	@ (8008ba0 <__ieee754_log10+0xe8>)
 8008ad8:	f7f7 fe28 	bl	800072c <__aeabi_ddiv>
 8008adc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ae0:	2900      	cmp	r1, #0
 8008ae2:	da05      	bge.n	8008af0 <__ieee754_log10+0x38>
 8008ae4:	4602      	mov	r2, r0
 8008ae6:	f7f7 fb3f 	bl	8000168 <__aeabi_dsub>
 8008aea:	2200      	movs	r2, #0
 8008aec:	2300      	movs	r3, #0
 8008aee:	e7f3      	b.n	8008ad8 <__ieee754_log10+0x20>
 8008af0:	2200      	movs	r2, #0
 8008af2:	4b2c      	ldr	r3, [pc, #176]	@ (8008ba4 <__ieee754_log10+0xec>)
 8008af4:	f7f7 fcf0 	bl	80004d8 <__aeabi_dmul>
 8008af8:	f06f 0235 	mvn.w	r2, #53	@ 0x35
 8008afc:	4604      	mov	r4, r0
 8008afe:	460d      	mov	r5, r1
 8008b00:	460b      	mov	r3, r1
 8008b02:	4929      	ldr	r1, [pc, #164]	@ (8008ba8 <__ieee754_log10+0xf0>)
 8008b04:	428b      	cmp	r3, r1
 8008b06:	dd08      	ble.n	8008b1a <__ieee754_log10+0x62>
 8008b08:	4622      	mov	r2, r4
 8008b0a:	462b      	mov	r3, r5
 8008b0c:	4620      	mov	r0, r4
 8008b0e:	4629      	mov	r1, r5
 8008b10:	f7f7 fb2c 	bl	800016c <__adddf3>
 8008b14:	e7e2      	b.n	8008adc <__ieee754_log10+0x24>
 8008b16:	2200      	movs	r2, #0
 8008b18:	e7f3      	b.n	8008b02 <__ieee754_log10+0x4a>
 8008b1a:	1518      	asrs	r0, r3, #20
 8008b1c:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 8008b20:	4410      	add	r0, r2
 8008b22:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8008b26:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8008b2a:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8008b2e:	f7f7 fc69 	bl	8000404 <__aeabi_i2d>
 8008b32:	f5c9 737f 	rsb	r3, r9, #1020	@ 0x3fc
 8008b36:	3303      	adds	r3, #3
 8008b38:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 8008b3c:	a312      	add	r3, pc, #72	@ (adr r3, 8008b88 <__ieee754_log10+0xd0>)
 8008b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b42:	4606      	mov	r6, r0
 8008b44:	460f      	mov	r7, r1
 8008b46:	f7f7 fcc7 	bl	80004d8 <__aeabi_dmul>
 8008b4a:	4680      	mov	r8, r0
 8008b4c:	4689      	mov	r9, r1
 8008b4e:	4620      	mov	r0, r4
 8008b50:	4629      	mov	r1, r5
 8008b52:	f000 f82d 	bl	8008bb0 <__ieee754_log>
 8008b56:	a30e      	add	r3, pc, #56	@ (adr r3, 8008b90 <__ieee754_log10+0xd8>)
 8008b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b5c:	f7f7 fcbc 	bl	80004d8 <__aeabi_dmul>
 8008b60:	4642      	mov	r2, r8
 8008b62:	464b      	mov	r3, r9
 8008b64:	f7f7 fb02 	bl	800016c <__adddf3>
 8008b68:	a30b      	add	r3, pc, #44	@ (adr r3, 8008b98 <__ieee754_log10+0xe0>)
 8008b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b6e:	4604      	mov	r4, r0
 8008b70:	460d      	mov	r5, r1
 8008b72:	4630      	mov	r0, r6
 8008b74:	4639      	mov	r1, r7
 8008b76:	f7f7 fcaf 	bl	80004d8 <__aeabi_dmul>
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	460b      	mov	r3, r1
 8008b7e:	4620      	mov	r0, r4
 8008b80:	4629      	mov	r1, r5
 8008b82:	e7c5      	b.n	8008b10 <__ieee754_log10+0x58>
 8008b84:	f3af 8000 	nop.w
 8008b88:	11f12b36 	.word	0x11f12b36
 8008b8c:	3d59fef3 	.word	0x3d59fef3
 8008b90:	1526e50e 	.word	0x1526e50e
 8008b94:	3fdbcb7b 	.word	0x3fdbcb7b
 8008b98:	509f6000 	.word	0x509f6000
 8008b9c:	3fd34413 	.word	0x3fd34413
 8008ba0:	c3500000 	.word	0xc3500000
 8008ba4:	43500000 	.word	0x43500000
 8008ba8:	7fefffff 	.word	0x7fefffff
 8008bac:	00000000 	.word	0x00000000

08008bb0 <__ieee754_log>:
 8008bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bb4:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8008bb8:	4602      	mov	r2, r0
 8008bba:	460b      	mov	r3, r1
 8008bbc:	460d      	mov	r5, r1
 8008bbe:	b087      	sub	sp, #28
 8008bc0:	da24      	bge.n	8008c0c <__ieee754_log+0x5c>
 8008bc2:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8008bc6:	4304      	orrs	r4, r0
 8008bc8:	d108      	bne.n	8008bdc <__ieee754_log+0x2c>
 8008bca:	2200      	movs	r2, #0
 8008bcc:	2300      	movs	r3, #0
 8008bce:	2000      	movs	r0, #0
 8008bd0:	49cb      	ldr	r1, [pc, #812]	@ (8008f00 <__ieee754_log+0x350>)
 8008bd2:	f7f7 fdab 	bl	800072c <__aeabi_ddiv>
 8008bd6:	b007      	add	sp, #28
 8008bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bdc:	2900      	cmp	r1, #0
 8008bde:	da04      	bge.n	8008bea <__ieee754_log+0x3a>
 8008be0:	f7f7 fac2 	bl	8000168 <__aeabi_dsub>
 8008be4:	2200      	movs	r2, #0
 8008be6:	2300      	movs	r3, #0
 8008be8:	e7f3      	b.n	8008bd2 <__ieee754_log+0x22>
 8008bea:	2200      	movs	r2, #0
 8008bec:	4bc5      	ldr	r3, [pc, #788]	@ (8008f04 <__ieee754_log+0x354>)
 8008bee:	f7f7 fc73 	bl	80004d8 <__aeabi_dmul>
 8008bf2:	460b      	mov	r3, r1
 8008bf4:	460d      	mov	r5, r1
 8008bf6:	4602      	mov	r2, r0
 8008bf8:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 8008bfc:	48c2      	ldr	r0, [pc, #776]	@ (8008f08 <__ieee754_log+0x358>)
 8008bfe:	4285      	cmp	r5, r0
 8008c00:	dd06      	ble.n	8008c10 <__ieee754_log+0x60>
 8008c02:	4610      	mov	r0, r2
 8008c04:	4619      	mov	r1, r3
 8008c06:	f7f7 fab1 	bl	800016c <__adddf3>
 8008c0a:	e7e4      	b.n	8008bd6 <__ieee754_log+0x26>
 8008c0c:	2100      	movs	r1, #0
 8008c0e:	e7f5      	b.n	8008bfc <__ieee754_log+0x4c>
 8008c10:	152c      	asrs	r4, r5, #20
 8008c12:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 8008c16:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8008c1a:	440c      	add	r4, r1
 8008c1c:	f505 2115 	add.w	r1, r5, #610304	@ 0x95000
 8008c20:	f601 7164 	addw	r1, r1, #3940	@ 0xf64
 8008c24:	f401 1680 	and.w	r6, r1, #1048576	@ 0x100000
 8008c28:	f086 517f 	eor.w	r1, r6, #1069547520	@ 0x3fc00000
 8008c2c:	f481 1140 	eor.w	r1, r1, #3145728	@ 0x300000
 8008c30:	ea41 0305 	orr.w	r3, r1, r5
 8008c34:	4610      	mov	r0, r2
 8008c36:	4619      	mov	r1, r3
 8008c38:	2200      	movs	r2, #0
 8008c3a:	4bb4      	ldr	r3, [pc, #720]	@ (8008f0c <__ieee754_log+0x35c>)
 8008c3c:	f7f7 fa94 	bl	8000168 <__aeabi_dsub>
 8008c40:	1cab      	adds	r3, r5, #2
 8008c42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c46:	2b02      	cmp	r3, #2
 8008c48:	4682      	mov	sl, r0
 8008c4a:	468b      	mov	fp, r1
 8008c4c:	f04f 0200 	mov.w	r2, #0
 8008c50:	eb04 5416 	add.w	r4, r4, r6, lsr #20
 8008c54:	dc53      	bgt.n	8008cfe <__ieee754_log+0x14e>
 8008c56:	2300      	movs	r3, #0
 8008c58:	f7f7 fea6 	bl	80009a8 <__aeabi_dcmpeq>
 8008c5c:	b1d0      	cbz	r0, 8008c94 <__ieee754_log+0xe4>
 8008c5e:	2c00      	cmp	r4, #0
 8008c60:	f000 8120 	beq.w	8008ea4 <__ieee754_log+0x2f4>
 8008c64:	4620      	mov	r0, r4
 8008c66:	f7f7 fbcd 	bl	8000404 <__aeabi_i2d>
 8008c6a:	a391      	add	r3, pc, #580	@ (adr r3, 8008eb0 <__ieee754_log+0x300>)
 8008c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c70:	4606      	mov	r6, r0
 8008c72:	460f      	mov	r7, r1
 8008c74:	f7f7 fc30 	bl	80004d8 <__aeabi_dmul>
 8008c78:	a38f      	add	r3, pc, #572	@ (adr r3, 8008eb8 <__ieee754_log+0x308>)
 8008c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c7e:	4604      	mov	r4, r0
 8008c80:	460d      	mov	r5, r1
 8008c82:	4630      	mov	r0, r6
 8008c84:	4639      	mov	r1, r7
 8008c86:	f7f7 fc27 	bl	80004d8 <__aeabi_dmul>
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	460b      	mov	r3, r1
 8008c8e:	4620      	mov	r0, r4
 8008c90:	4629      	mov	r1, r5
 8008c92:	e7b8      	b.n	8008c06 <__ieee754_log+0x56>
 8008c94:	a38a      	add	r3, pc, #552	@ (adr r3, 8008ec0 <__ieee754_log+0x310>)
 8008c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c9a:	4650      	mov	r0, sl
 8008c9c:	4659      	mov	r1, fp
 8008c9e:	f7f7 fc1b 	bl	80004d8 <__aeabi_dmul>
 8008ca2:	4602      	mov	r2, r0
 8008ca4:	460b      	mov	r3, r1
 8008ca6:	2000      	movs	r0, #0
 8008ca8:	4999      	ldr	r1, [pc, #612]	@ (8008f10 <__ieee754_log+0x360>)
 8008caa:	f7f7 fa5d 	bl	8000168 <__aeabi_dsub>
 8008cae:	4652      	mov	r2, sl
 8008cb0:	4606      	mov	r6, r0
 8008cb2:	460f      	mov	r7, r1
 8008cb4:	465b      	mov	r3, fp
 8008cb6:	4650      	mov	r0, sl
 8008cb8:	4659      	mov	r1, fp
 8008cba:	f7f7 fc0d 	bl	80004d8 <__aeabi_dmul>
 8008cbe:	4602      	mov	r2, r0
 8008cc0:	460b      	mov	r3, r1
 8008cc2:	4630      	mov	r0, r6
 8008cc4:	4639      	mov	r1, r7
 8008cc6:	f7f7 fc07 	bl	80004d8 <__aeabi_dmul>
 8008cca:	4606      	mov	r6, r0
 8008ccc:	460f      	mov	r7, r1
 8008cce:	b914      	cbnz	r4, 8008cd6 <__ieee754_log+0x126>
 8008cd0:	4632      	mov	r2, r6
 8008cd2:	463b      	mov	r3, r7
 8008cd4:	e0a0      	b.n	8008e18 <__ieee754_log+0x268>
 8008cd6:	4620      	mov	r0, r4
 8008cd8:	f7f7 fb94 	bl	8000404 <__aeabi_i2d>
 8008cdc:	a374      	add	r3, pc, #464	@ (adr r3, 8008eb0 <__ieee754_log+0x300>)
 8008cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce2:	4680      	mov	r8, r0
 8008ce4:	4689      	mov	r9, r1
 8008ce6:	f7f7 fbf7 	bl	80004d8 <__aeabi_dmul>
 8008cea:	a373      	add	r3, pc, #460	@ (adr r3, 8008eb8 <__ieee754_log+0x308>)
 8008cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf0:	4604      	mov	r4, r0
 8008cf2:	460d      	mov	r5, r1
 8008cf4:	4640      	mov	r0, r8
 8008cf6:	4649      	mov	r1, r9
 8008cf8:	f7f7 fbee 	bl	80004d8 <__aeabi_dmul>
 8008cfc:	e0a5      	b.n	8008e4a <__ieee754_log+0x29a>
 8008cfe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008d02:	f7f7 fa33 	bl	800016c <__adddf3>
 8008d06:	4602      	mov	r2, r0
 8008d08:	460b      	mov	r3, r1
 8008d0a:	4650      	mov	r0, sl
 8008d0c:	4659      	mov	r1, fp
 8008d0e:	f7f7 fd0d 	bl	800072c <__aeabi_ddiv>
 8008d12:	e9cd 0100 	strd	r0, r1, [sp]
 8008d16:	4620      	mov	r0, r4
 8008d18:	f7f7 fb74 	bl	8000404 <__aeabi_i2d>
 8008d1c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d24:	4610      	mov	r0, r2
 8008d26:	4619      	mov	r1, r3
 8008d28:	f7f7 fbd6 	bl	80004d8 <__aeabi_dmul>
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	460b      	mov	r3, r1
 8008d30:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008d34:	f7f7 fbd0 	bl	80004d8 <__aeabi_dmul>
 8008d38:	a363      	add	r3, pc, #396	@ (adr r3, 8008ec8 <__ieee754_log+0x318>)
 8008d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d3e:	4680      	mov	r8, r0
 8008d40:	4689      	mov	r9, r1
 8008d42:	f7f7 fbc9 	bl	80004d8 <__aeabi_dmul>
 8008d46:	a362      	add	r3, pc, #392	@ (adr r3, 8008ed0 <__ieee754_log+0x320>)
 8008d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d4c:	f7f7 fa0e 	bl	800016c <__adddf3>
 8008d50:	4642      	mov	r2, r8
 8008d52:	464b      	mov	r3, r9
 8008d54:	f7f7 fbc0 	bl	80004d8 <__aeabi_dmul>
 8008d58:	a35f      	add	r3, pc, #380	@ (adr r3, 8008ed8 <__ieee754_log+0x328>)
 8008d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d5e:	f7f7 fa05 	bl	800016c <__adddf3>
 8008d62:	4642      	mov	r2, r8
 8008d64:	464b      	mov	r3, r9
 8008d66:	f7f7 fbb7 	bl	80004d8 <__aeabi_dmul>
 8008d6a:	a35d      	add	r3, pc, #372	@ (adr r3, 8008ee0 <__ieee754_log+0x330>)
 8008d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d70:	f7f7 f9fc 	bl	800016c <__adddf3>
 8008d74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d78:	f7f7 fbae 	bl	80004d8 <__aeabi_dmul>
 8008d7c:	a35a      	add	r3, pc, #360	@ (adr r3, 8008ee8 <__ieee754_log+0x338>)
 8008d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d82:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d86:	4640      	mov	r0, r8
 8008d88:	4649      	mov	r1, r9
 8008d8a:	f7f7 fba5 	bl	80004d8 <__aeabi_dmul>
 8008d8e:	a358      	add	r3, pc, #352	@ (adr r3, 8008ef0 <__ieee754_log+0x340>)
 8008d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d94:	f7f7 f9ea 	bl	800016c <__adddf3>
 8008d98:	4642      	mov	r2, r8
 8008d9a:	464b      	mov	r3, r9
 8008d9c:	f7f7 fb9c 	bl	80004d8 <__aeabi_dmul>
 8008da0:	a355      	add	r3, pc, #340	@ (adr r3, 8008ef8 <__ieee754_log+0x348>)
 8008da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da6:	f7f7 f9e1 	bl	800016c <__adddf3>
 8008daa:	4642      	mov	r2, r8
 8008dac:	464b      	mov	r3, r9
 8008dae:	f7f7 fb93 	bl	80004d8 <__aeabi_dmul>
 8008db2:	4602      	mov	r2, r0
 8008db4:	460b      	mov	r3, r1
 8008db6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008dba:	f7f7 f9d7 	bl	800016c <__adddf3>
 8008dbe:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 8008dc2:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 8008dc6:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 8008dca:	3551      	adds	r5, #81	@ 0x51
 8008dcc:	4335      	orrs	r5, r6
 8008dce:	2d00      	cmp	r5, #0
 8008dd0:	4680      	mov	r8, r0
 8008dd2:	4689      	mov	r9, r1
 8008dd4:	dd48      	ble.n	8008e68 <__ieee754_log+0x2b8>
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	4b4d      	ldr	r3, [pc, #308]	@ (8008f10 <__ieee754_log+0x360>)
 8008dda:	4650      	mov	r0, sl
 8008ddc:	4659      	mov	r1, fp
 8008dde:	f7f7 fb7b 	bl	80004d8 <__aeabi_dmul>
 8008de2:	4652      	mov	r2, sl
 8008de4:	465b      	mov	r3, fp
 8008de6:	f7f7 fb77 	bl	80004d8 <__aeabi_dmul>
 8008dea:	4602      	mov	r2, r0
 8008dec:	460b      	mov	r3, r1
 8008dee:	4606      	mov	r6, r0
 8008df0:	460f      	mov	r7, r1
 8008df2:	4640      	mov	r0, r8
 8008df4:	4649      	mov	r1, r9
 8008df6:	f7f7 f9b9 	bl	800016c <__adddf3>
 8008dfa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008dfe:	f7f7 fb6b 	bl	80004d8 <__aeabi_dmul>
 8008e02:	4680      	mov	r8, r0
 8008e04:	4689      	mov	r9, r1
 8008e06:	b964      	cbnz	r4, 8008e22 <__ieee754_log+0x272>
 8008e08:	4602      	mov	r2, r0
 8008e0a:	460b      	mov	r3, r1
 8008e0c:	4630      	mov	r0, r6
 8008e0e:	4639      	mov	r1, r7
 8008e10:	f7f7 f9aa 	bl	8000168 <__aeabi_dsub>
 8008e14:	4602      	mov	r2, r0
 8008e16:	460b      	mov	r3, r1
 8008e18:	4650      	mov	r0, sl
 8008e1a:	4659      	mov	r1, fp
 8008e1c:	f7f7 f9a4 	bl	8000168 <__aeabi_dsub>
 8008e20:	e6d9      	b.n	8008bd6 <__ieee754_log+0x26>
 8008e22:	a323      	add	r3, pc, #140	@ (adr r3, 8008eb0 <__ieee754_log+0x300>)
 8008e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e2c:	f7f7 fb54 	bl	80004d8 <__aeabi_dmul>
 8008e30:	a321      	add	r3, pc, #132	@ (adr r3, 8008eb8 <__ieee754_log+0x308>)
 8008e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e36:	4604      	mov	r4, r0
 8008e38:	460d      	mov	r5, r1
 8008e3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e3e:	f7f7 fb4b 	bl	80004d8 <__aeabi_dmul>
 8008e42:	4642      	mov	r2, r8
 8008e44:	464b      	mov	r3, r9
 8008e46:	f7f7 f991 	bl	800016c <__adddf3>
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	460b      	mov	r3, r1
 8008e4e:	4630      	mov	r0, r6
 8008e50:	4639      	mov	r1, r7
 8008e52:	f7f7 f989 	bl	8000168 <__aeabi_dsub>
 8008e56:	4652      	mov	r2, sl
 8008e58:	465b      	mov	r3, fp
 8008e5a:	f7f7 f985 	bl	8000168 <__aeabi_dsub>
 8008e5e:	4602      	mov	r2, r0
 8008e60:	460b      	mov	r3, r1
 8008e62:	4620      	mov	r0, r4
 8008e64:	4629      	mov	r1, r5
 8008e66:	e7d9      	b.n	8008e1c <__ieee754_log+0x26c>
 8008e68:	4602      	mov	r2, r0
 8008e6a:	460b      	mov	r3, r1
 8008e6c:	4650      	mov	r0, sl
 8008e6e:	4659      	mov	r1, fp
 8008e70:	f7f7 f97a 	bl	8000168 <__aeabi_dsub>
 8008e74:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e78:	f7f7 fb2e 	bl	80004d8 <__aeabi_dmul>
 8008e7c:	4606      	mov	r6, r0
 8008e7e:	460f      	mov	r7, r1
 8008e80:	2c00      	cmp	r4, #0
 8008e82:	f43f af25 	beq.w	8008cd0 <__ieee754_log+0x120>
 8008e86:	a30a      	add	r3, pc, #40	@ (adr r3, 8008eb0 <__ieee754_log+0x300>)
 8008e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e90:	f7f7 fb22 	bl	80004d8 <__aeabi_dmul>
 8008e94:	a308      	add	r3, pc, #32	@ (adr r3, 8008eb8 <__ieee754_log+0x308>)
 8008e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e9a:	4604      	mov	r4, r0
 8008e9c:	460d      	mov	r5, r1
 8008e9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ea2:	e729      	b.n	8008cf8 <__ieee754_log+0x148>
 8008ea4:	2000      	movs	r0, #0
 8008ea6:	2100      	movs	r1, #0
 8008ea8:	e695      	b.n	8008bd6 <__ieee754_log+0x26>
 8008eaa:	bf00      	nop
 8008eac:	f3af 8000 	nop.w
 8008eb0:	fee00000 	.word	0xfee00000
 8008eb4:	3fe62e42 	.word	0x3fe62e42
 8008eb8:	35793c76 	.word	0x35793c76
 8008ebc:	3dea39ef 	.word	0x3dea39ef
 8008ec0:	55555555 	.word	0x55555555
 8008ec4:	3fd55555 	.word	0x3fd55555
 8008ec8:	df3e5244 	.word	0xdf3e5244
 8008ecc:	3fc2f112 	.word	0x3fc2f112
 8008ed0:	96cb03de 	.word	0x96cb03de
 8008ed4:	3fc74664 	.word	0x3fc74664
 8008ed8:	94229359 	.word	0x94229359
 8008edc:	3fd24924 	.word	0x3fd24924
 8008ee0:	55555593 	.word	0x55555593
 8008ee4:	3fe55555 	.word	0x3fe55555
 8008ee8:	d078c69f 	.word	0xd078c69f
 8008eec:	3fc39a09 	.word	0x3fc39a09
 8008ef0:	1d8e78af 	.word	0x1d8e78af
 8008ef4:	3fcc71c5 	.word	0x3fcc71c5
 8008ef8:	9997fa04 	.word	0x9997fa04
 8008efc:	3fd99999 	.word	0x3fd99999
 8008f00:	c3500000 	.word	0xc3500000
 8008f04:	43500000 	.word	0x43500000
 8008f08:	7fefffff 	.word	0x7fefffff
 8008f0c:	3ff00000 	.word	0x3ff00000
 8008f10:	3fe00000 	.word	0x3fe00000

08008f14 <_init>:
 8008f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f16:	bf00      	nop
 8008f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f1a:	bc08      	pop	{r3}
 8008f1c:	469e      	mov	lr, r3
 8008f1e:	4770      	bx	lr

08008f20 <_fini>:
 8008f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f22:	bf00      	nop
 8008f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f26:	bc08      	pop	{r3}
 8008f28:	469e      	mov	lr, r3
 8008f2a:	4770      	bx	lr
