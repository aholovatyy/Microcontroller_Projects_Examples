
thermometer_hygrometer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002efe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000003cc  00800060  00002efe  00002f92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  0080042c  0080042c  0000335e  2**0
                  ALLOC
  3 .debug_aranges 00000100  00000000  00000000  0000335e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000005ca  00000000  00000000  0000345e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000024d4  00000000  00000000  00003a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b4f  00000000  00000000  00005efc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001f44  00000000  00000000  00006a4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000500  00000000  00000000  00008990  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000073e  00000000  00000000  00008e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000012ea  00000000  00000000  000095ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000270  00000000  00000000  0000a8b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__ctors_end>
       4:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
       8:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
       c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      10:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      14:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      18:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      1c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      20:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      24:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      28:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      2c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      30:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      34:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      38:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      3c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      40:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      44:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      48:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      4c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      50:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      54:	08 00       	.word	0x0008	; ????
      56:	00 00       	nop
      58:	be 92       	st	-X, r11
      5a:	24 49       	sbci	r18, 0x94	; 148
      5c:	12 3e       	cpi	r17, 0xE2	; 226
      5e:	ab aa       	std	Y+51, r10	; 0x33
      60:	aa 2a       	or	r10, r26
      62:	be cd       	rjmp	.-1156   	; 0xfffffbe0 <__eeprom_end+0xff7efbe0>
      64:	cc cc       	rjmp	.-1640   	; 0xfffff9fe <__eeprom_end+0xff7ef9fe>
      66:	4c 3e       	cpi	r20, 0xEC	; 236
      68:	00 00       	nop
      6a:	00 80       	ld	r0, Z
      6c:	be ab       	std	Y+54, r27	; 0x36
      6e:	aa aa       	std	Y+50, r10	; 0x32
      70:	aa 3e       	cpi	r26, 0xEA	; 234
      72:	00 00       	nop
      74:	00 00       	nop
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	00 00       	nop
      7e:	00 00       	nop
      80:	00 08       	sbc	r0, r0
      82:	41 78       	andi	r20, 0x81	; 129
      84:	d3 bb       	out	0x13, r29	; 19
      86:	43 87       	std	Z+11, r20	; 0x0b
      88:	d1 13       	cpse	r29, r17
      8a:	3d 19       	sub	r19, r13
      8c:	0e 3c       	cpi	r16, 0xCE	; 206
      8e:	c3 bd       	out	0x23, r28	; 35
      90:	42 82       	std	Z+2, r4	; 0x02
      92:	ad 2b       	or	r26, r29
      94:	3e 68       	ori	r19, 0x8E	; 142
      96:	ec 82       	std	Y+4, r14	; 0x04
      98:	76 be       	out	0x36, r7	; 54
      9a:	d9 8f       	std	Y+25, r29	; 0x19
      9c:	e1 a9       	ldd	r30, Z+49	; 0x31
      9e:	3e 4c       	sbci	r19, 0xCE	; 206
      a0:	80 ef       	ldi	r24, 0xF0	; 240
      a2:	ff be       	out	0x3f, r15	; 63
      a4:	01 c4       	rjmp	.+2050   	; 0x8a8 <__stack+0x49>
      a6:	ff 7f       	andi	r31, 0xFF	; 255
      a8:	3f 00       	.word	0x003f	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop

000000ae <__c.1790>:
      ae:	6e 61 6e 00                                         nan.

000000b2 <__c.1788>:
      b2:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      c2:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      d2:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      e2:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      f2:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     102:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     112:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     122:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     132:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     142:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     152:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     162:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     172:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     182:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     192:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1a2:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001b0 <__ctors_end>:
     1b0:	11 24       	eor	r1, r1
     1b2:	1f be       	out	0x3f, r1	; 63
     1b4:	cf e5       	ldi	r28, 0x5F	; 95
     1b6:	d8 e0       	ldi	r29, 0x08	; 8
     1b8:	de bf       	out	0x3e, r29	; 62
     1ba:	cd bf       	out	0x3d, r28	; 61

000001bc <__do_copy_data>:
     1bc:	14 e0       	ldi	r17, 0x04	; 4
     1be:	a0 e6       	ldi	r26, 0x60	; 96
     1c0:	b0 e0       	ldi	r27, 0x00	; 0
     1c2:	ee ef       	ldi	r30, 0xFE	; 254
     1c4:	fe e2       	ldi	r31, 0x2E	; 46
     1c6:	02 c0       	rjmp	.+4      	; 0x1cc <.do_copy_data_start>

000001c8 <.do_copy_data_loop>:
     1c8:	05 90       	lpm	r0, Z+
     1ca:	0d 92       	st	X+, r0

000001cc <.do_copy_data_start>:
     1cc:	ac 32       	cpi	r26, 0x2C	; 44
     1ce:	b1 07       	cpc	r27, r17
     1d0:	d9 f7       	brne	.-10     	; 0x1c8 <.do_copy_data_loop>

000001d2 <__do_clear_bss>:
     1d2:	14 e0       	ldi	r17, 0x04	; 4
     1d4:	ac e2       	ldi	r26, 0x2C	; 44
     1d6:	b4 e0       	ldi	r27, 0x04	; 4
     1d8:	01 c0       	rjmp	.+2      	; 0x1dc <.do_clear_bss_start>

000001da <.do_clear_bss_loop>:
     1da:	1d 92       	st	X+, r1

000001dc <.do_clear_bss_start>:
     1dc:	a7 33       	cpi	r26, 0x37	; 55
     1de:	b1 07       	cpc	r27, r17
     1e0:	e1 f7       	brne	.-8      	; 0x1da <.do_clear_bss_loop>
     1e2:	0e 94 60 04 	call	0x8c0	; 0x8c0 <main>
     1e6:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <_exit>

000001ea <__bad_interrupt>:
     1ea:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ee <GetButtonStatus>:

unsigned char PREV_PINB = 0xFF;

unsigned char GetButtonStatus(unsigned char button)
{
  return (!(PINB & (1 << button)));  
     1ee:	26 b3       	in	r18, 0x16	; 22
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <GetButtonStatus+0xa>
     1f4:	35 95       	asr	r19
     1f6:	27 95       	ror	r18
     1f8:	8a 95       	dec	r24
     1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <GetButtonStatus+0x6>
     1fc:	20 95       	com	r18
}
     1fe:	82 2f       	mov	r24, r18
     200:	81 70       	andi	r24, 0x01	; 1
     202:	08 95       	ret

00000204 <GetPrevButtonStatus>:

unsigned char GetPrevButtonStatus(unsigned char button)
{
     204:	20 91 0a 01 	lds	r18, 0x010A
     208:	30 e0       	ldi	r19, 0x00	; 0
     20a:	02 c0       	rjmp	.+4      	; 0x210 <GetPrevButtonStatus+0xc>
     20c:	35 95       	asr	r19
     20e:	27 95       	ror	r18
     210:	8a 95       	dec	r24
     212:	e2 f7       	brpl	.-8      	; 0x20c <GetPrevButtonStatus+0x8>
     214:	20 95       	com	r18
  return (!(PREV_PINB & (1 << button)));  
}
     216:	82 2f       	mov	r24, r18
     218:	81 70       	andi	r24, 0x01	; 1
     21a:	08 95       	ret

0000021c <SetTempUnit>:
  }   
}


void SetTempUnit(void)
{
     21c:	ef 92       	push	r14
     21e:	ff 92       	push	r15
     220:	0f 93       	push	r16
     222:	1f 93       	push	r17
     224:	df 93       	push	r29
     226:	cf 93       	push	r28
     228:	00 d0       	rcall	.+0      	; 0x22a <SetTempUnit+0xe>
     22a:	00 d0       	rcall	.+0      	; 0x22c <SetTempUnit+0x10>
     22c:	00 d0       	rcall	.+0      	; 0x22e <SetTempUnit+0x12>
     22e:	cd b7       	in	r28, 0x3d	; 61
     230:	de b7       	in	r29, 0x3e	; 62
  char *menu_items[] = {"    ÷ÂÎ¸Òiˇ  ", "   ‘‡ÂÌ„ÂÈÚ‡", "     ÂÎ¸‚iÌ‡  "};
     232:	de 01       	movw	r26, r28
     234:	11 96       	adiw	r26, 0x01	; 1
     236:	e5 ea       	ldi	r30, 0xA5	; 165
     238:	f1 e0       	ldi	r31, 0x01	; 1
     23a:	86 e0       	ldi	r24, 0x06	; 6
     23c:	01 90       	ld	r0, Z+
     23e:	0d 92       	st	X+, r0
     240:	81 50       	subi	r24, 0x01	; 1
     242:	e1 f7       	brne	.-8      	; 0x23c <SetTempUnit+0x20>
  int i = 0;
  LCDGotoXY(0,0);
     244:	60 e0       	ldi	r22, 0x00	; 0
     246:	0e 94 a5 07 	call	0xf4a	; 0xf4a <LCDGotoXY>
  LCDstring("ÿ ¿À¿ ¬»Ã. “≈Ãœ."); 
     24a:	80 e6       	ldi	r24, 0x60	; 96
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	0e 94 89 07 	call	0xf12	; 0xf12 <LCDstring>
     252:	00 e0       	ldi	r16, 0x00	; 0
     254:	10 e0       	ldi	r17, 0x00	; 0

  while(1)
  {    
    PREV_PINB = PINB;
    LCDGotoXY(0,1);
    LCDstring(menu_items[i]);
     256:	7e 01       	movw	r14, r28
     258:	08 94       	sec
     25a:	e1 1c       	adc	r14, r1
     25c:	f1 1c       	adc	r15, r1
  LCDGotoXY(0,0);
  LCDstring("ÿ ¿À¿ ¬»Ã. “≈Ãœ."); 

  while(1)
  {    
    PREV_PINB = PINB;
     25e:	86 b3       	in	r24, 0x16	; 22
     260:	80 93 0a 01 	sts	0x010A, r24
    LCDGotoXY(0,1);
     264:	80 e0       	ldi	r24, 0x00	; 0
     266:	61 e0       	ldi	r22, 0x01	; 1
     268:	0e 94 a5 07 	call	0xf4a	; 0xf4a <LCDGotoXY>
    LCDstring(menu_items[i]);
     26c:	f8 01       	movw	r30, r16
     26e:	ee 0f       	add	r30, r30
     270:	ff 1f       	adc	r31, r31
     272:	ee 0d       	add	r30, r14
     274:	ff 1d       	adc	r31, r15
     276:	80 81       	ld	r24, Z
     278:	91 81       	ldd	r25, Z+1	; 0x01
     27a:	0e 94 89 07 	call	0xf12	; 0xf12 <LCDstring>
	
    if (GetButtonStatus(SELECT_PLUS_BTN))  // Ì‡ÚËÒÌÛÚ‡ ÍÌÓÔÍ‡ SELECT+?
     27e:	b1 99       	sbic	0x16, 1	; 22
     280:	0c c0       	rjmp	.+24     	; 0x29a <SetTempUnit+0x7e>
    {  
      if (!GetPrevButtonStatus(SELECT_PLUS_BTN))
     282:	80 91 0a 01 	lds	r24, 0x010A
     286:	81 ff       	sbrs	r24, 1
     288:	08 c0       	rjmp	.+16     	; 0x29a <SetTempUnit+0x7e>
      {
        if (i < 2)
     28a:	02 30       	cpi	r16, 0x02	; 2
     28c:	11 05       	cpc	r17, r1
     28e:	1c f0       	brlt	.+6      	; 0x296 <SetTempUnit+0x7a>
     290:	00 e0       	ldi	r16, 0x00	; 0
     292:	10 e0       	ldi	r17, 0x00	; 0
     294:	02 c0       	rjmp	.+4      	; 0x29a <SetTempUnit+0x7e>
		  i++;
     296:	0f 5f       	subi	r16, 0xFF	; 255
     298:	1f 4f       	sbci	r17, 0xFF	; 255
		else i = 0;
      }
    }
    if (GetButtonStatus(SELECT_MINUS_BTN)) // Ì‡ÚËÒÌÛÚ‡ ÍÌÓÔÍ‡ SELECT-?
     29a:	b2 99       	sbic	0x16, 2	; 22
     29c:	0c c0       	rjmp	.+24     	; 0x2b6 <SetTempUnit+0x9a>
    {  
      if (!GetPrevButtonStatus(SELECT_MINUS_BTN))
     29e:	80 91 0a 01 	lds	r24, 0x010A
     2a2:	82 ff       	sbrs	r24, 2
     2a4:	08 c0       	rjmp	.+16     	; 0x2b6 <SetTempUnit+0x9a>
      {
        if (i > 0)	
     2a6:	01 15       	cp	r16, r1
     2a8:	11 05       	cpc	r17, r1
     2aa:	19 f4       	brne	.+6      	; 0x2b2 <SetTempUnit+0x96>
     2ac:	02 e0       	ldi	r16, 0x02	; 2
     2ae:	10 e0       	ldi	r17, 0x00	; 0
     2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <SetTempUnit+0x9a>
		  i--;
     2b2:	01 50       	subi	r16, 0x01	; 1
     2b4:	10 40       	sbci	r17, 0x00	; 0
		else
		  i = 2;
      }
    }              
    if (GetButtonStatus(MENU_ENTER_BTN)) // Ì‡ÚËÒÌÛÚ‡ ÍÌÓÔÍ‡ MENU_ENTER?
     2b6:	b0 99       	sbic	0x16, 0	; 22
     2b8:	09 c0       	rjmp	.+18     	; 0x2cc <SetTempUnit+0xb0>
    {  
      if (!GetPrevButtonStatus(MENU_ENTER_BTN))
     2ba:	80 91 0a 01 	lds	r24, 0x010A
     2be:	80 ff       	sbrs	r24, 0
     2c0:	05 c0       	rjmp	.+10     	; 0x2cc <SetTempUnit+0xb0>
      {
        temp_scale = i; 
     2c2:	10 93 2d 04 	sts	0x042D, r17
     2c6:	00 93 2c 04 	sts	0x042C, r16
     2ca:	09 c0       	rjmp	.+18     	; 0x2de <SetTempUnit+0xc2>
		return;
      }
    }      
  
    if (GetButtonStatus(EXIT_BTN)) // Ì‡ÚËÒÌÛÚ‡ ÍÌÓÔÍ‡ EXIT?
     2cc:	b3 99       	sbic	0x16, 3	; 22
     2ce:	c7 cf       	rjmp	.-114    	; 0x25e <SetTempUnit+0x42>
    {
      if (!GetPrevButtonStatus(EXIT_BTN))
     2d0:	80 91 0a 01 	lds	r24, 0x010A
     2d4:	83 ff       	sbrs	r24, 3
     2d6:	c3 cf       	rjmp	.-122    	; 0x25e <SetTempUnit+0x42>
      {
	    PREV_PINB = PINB;	    
     2d8:	86 b3       	in	r24, 0x16	; 22
     2da:	80 93 0a 01 	sts	0x010A, r24
        return;
	  }
    }        
    
  }
}
     2de:	26 96       	adiw	r28, 0x06	; 6
     2e0:	0f b6       	in	r0, 0x3f	; 63
     2e2:	f8 94       	cli
     2e4:	de bf       	out	0x3e, r29	; 62
     2e6:	0f be       	out	0x3f, r0	; 63
     2e8:	cd bf       	out	0x3d, r28	; 61
     2ea:	cf 91       	pop	r28
     2ec:	df 91       	pop	r29
     2ee:	1f 91       	pop	r17
     2f0:	0f 91       	pop	r16
     2f2:	ff 90       	pop	r15
     2f4:	ef 90       	pop	r14
     2f6:	08 95       	ret

000002f8 <SetDate>:
  }
  
}

void SetDate(void)
{
     2f8:	5f 92       	push	r5
     2fa:	6f 92       	push	r6
     2fc:	7f 92       	push	r7
     2fe:	8f 92       	push	r8
     300:	9f 92       	push	r9
     302:	af 92       	push	r10
     304:	bf 92       	push	r11
     306:	cf 92       	push	r12
     308:	df 92       	push	r13
     30a:	ef 92       	push	r14
     30c:	ff 92       	push	r15
     30e:	0f 93       	push	r16
     310:	1f 93       	push	r17
     312:	df 93       	push	r29
     314:	cf 93       	push	r28
     316:	cd b7       	in	r28, 0x3d	; 61
     318:	de b7       	in	r29, 0x3e	; 62
     31a:	2f 97       	sbiw	r28, 0x0f	; 15
     31c:	0f b6       	in	r0, 0x3f	; 63
     31e:	f8 94       	cli
     320:	de bf       	out	0x3e, r29	; 62
     322:	0f be       	out	0x3f, r0	; 63
     324:	cd bf       	out	0x3d, r28	; 61
  unsigned char date = 0, month = 0, year = 0;
     326:	19 82       	std	Y+1, r1	; 0x01
     328:	1a 82       	std	Y+2, r1	; 0x02
     32a:	1b 82       	std	Y+3, r1	; 0x03
  char *items[] = {"‰‰", "ÏÏ", "", "^^"};
     32c:	de 01       	movw	r26, r28
     32e:	18 96       	adiw	r26, 0x08	; 8
     330:	e7 eb       	ldi	r30, 0xB7	; 183
     332:	f1 e0       	ldi	r31, 0x01	; 1
     334:	88 e0       	ldi	r24, 0x08	; 8
     336:	01 90       	ld	r0, Z+
     338:	0d 92       	st	X+, r0
     33a:	81 50       	subi	r24, 0x01	; 1
     33c:	e1 f7       	brne	.-8      	; 0x336 <SetDate+0x3e>
  uint8_t x[] = {1, 4, 7, 11}, i = 0;
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	8c 83       	std	Y+4, r24	; 0x04
     342:	84 e0       	ldi	r24, 0x04	; 4
     344:	8d 83       	std	Y+5, r24	; 0x05
     346:	87 e0       	ldi	r24, 0x07	; 7
     348:	8e 83       	std	Y+6, r24	; 0x06
     34a:	8b e0       	ldi	r24, 0x0B	; 11
     34c:	8f 83       	std	Y+7, r24	; 0x07
  
  rtc_get_date(&date,&month,&year);
     34e:	8e 01       	movw	r16, r28
     350:	0f 5f       	subi	r16, 0xFF	; 255
     352:	1f 4f       	sbci	r17, 0xFF	; 255
     354:	c8 01       	movw	r24, r16
     356:	be 01       	movw	r22, r28
     358:	6e 5f       	subi	r22, 0xFE	; 254
     35a:	7f 4f       	sbci	r23, 0xFF	; 255
     35c:	ae 01       	movw	r20, r28
     35e:	4d 5f       	subi	r20, 0xFD	; 253
     360:	5f 4f       	sbci	r21, 0xFF	; 255
     362:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <rtc_get_date>
     366:	ff 24       	eor	r15, r15
    LCDsendChar((48+year/10));
    LCDsendChar((48+year%10));
	LCDsendChar(' ');
	LCDstring("<OK>");
	
	LCDGotoXY(x[i],1);    
     368:	64 e0       	ldi	r22, 0x04	; 4
     36a:	a6 2e       	mov	r10, r22
     36c:	b1 2c       	mov	r11, r1
     36e:	ac 0e       	add	r10, r28
     370:	bd 1e       	adc	r11, r29
    LCDstring(items[i]);
     372:	48 01       	movw	r8, r16
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     374:	58 ec       	ldi	r21, 0xC8	; 200
     376:	c5 2e       	mov	r12, r21
     378:	d1 2c       	mov	r13, r1
		   break;
		   
		   case 1:
		     if (month != 0)
		       month--;
		     else month = 12;
     37a:	4c e0       	ldi	r20, 0x0C	; 12
     37c:	64 2e       	mov	r6, r20
        switch (i)
		{
           case 0:
		     if (date != 0)
		       date--;
		     else date = 31;
     37e:	3f e1       	ldi	r19, 0x1F	; 31
     380:	53 2e       	mov	r5, r19
		   break;
		   
		   case 2:
		     if (year != 0)
		       year--;
		     else year = 99;
     382:	23 e6       	ldi	r18, 0x63	; 99
     384:	72 2e       	mov	r7, r18
  
  rtc_get_date(&date,&month,&year);
  
  while(1)
  {
    PREV_PINB = PINB;
     386:	86 b3       	in	r24, 0x16	; 22
     388:	80 93 0a 01 	sts	0x010A, r24
    
    LCDGotoXY(1,0);    
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	60 e0       	ldi	r22, 0x00	; 0
     390:	0e 94 a5 07 	call	0xf4a	; 0xf4a <LCDGotoXY>
    LCDsendChar((48+date/10));
     394:	89 81       	ldd	r24, Y+1	; 0x01
     396:	6a e0       	ldi	r22, 0x0A	; 10
     398:	0e 94 77 15 	call	0x2aee	; 0x2aee <__udivmodqi4>
     39c:	80 5d       	subi	r24, 0xD0	; 208
     39e:	0e 94 11 07 	call	0xe22	; 0xe22 <LCDsendChar>
    LCDsendChar((48+date%10));	
     3a2:	89 81       	ldd	r24, Y+1	; 0x01
     3a4:	6a e0       	ldi	r22, 0x0A	; 10
     3a6:	0e 94 77 15 	call	0x2aee	; 0x2aee <__udivmodqi4>
     3aa:	89 2f       	mov	r24, r25
     3ac:	80 5d       	subi	r24, 0xD0	; 208
     3ae:	0e 94 11 07 	call	0xe22	; 0xe22 <LCDsendChar>
    LCDsendChar('/');
     3b2:	8f e2       	ldi	r24, 0x2F	; 47
     3b4:	0e 94 11 07 	call	0xe22	; 0xe22 <LCDsendChar>
    LCDsendChar((48+month/10));
     3b8:	8a 81       	ldd	r24, Y+2	; 0x02
     3ba:	6a e0       	ldi	r22, 0x0A	; 10
     3bc:	0e 94 77 15 	call	0x2aee	; 0x2aee <__udivmodqi4>
     3c0:	80 5d       	subi	r24, 0xD0	; 208
     3c2:	0e 94 11 07 	call	0xe22	; 0xe22 <LCDsendChar>
    LCDsendChar((48+month%10));	
     3c6:	8a 81       	ldd	r24, Y+2	; 0x02
     3c8:	6a e0       	ldi	r22, 0x0A	; 10
     3ca:	0e 94 77 15 	call	0x2aee	; 0x2aee <__udivmodqi4>
     3ce:	89 2f       	mov	r24, r25
     3d0:	80 5d       	subi	r24, 0xD0	; 208
     3d2:	0e 94 11 07 	call	0xe22	; 0xe22 <LCDsendChar>
    LCDsendChar('/');
     3d6:	8f e2       	ldi	r24, 0x2F	; 47
     3d8:	0e 94 11 07 	call	0xe22	; 0xe22 <LCDsendChar>
    LCDsendChar((48+year/10));
     3dc:	8b 81       	ldd	r24, Y+3	; 0x03
     3de:	6a e0       	ldi	r22, 0x0A	; 10
     3e0:	0e 94 77 15 	call	0x2aee	; 0x2aee <__udivmodqi4>
     3e4:	80 5d       	subi	r24, 0xD0	; 208
     3e6:	0e 94 11 07 	call	0xe22	; 0xe22 <LCDsendChar>
    LCDsendChar((48+year%10));
     3ea:	8b 81       	ldd	r24, Y+3	; 0x03
     3ec:	6a e0       	ldi	r22, 0x0A	; 10
     3ee:	0e 94 77 15 	call	0x2aee	; 0x2aee <__udivmodqi4>
     3f2:	89 2f       	mov	r24, r25
     3f4:	80 5d       	subi	r24, 0xD0	; 208
     3f6:	0e 94 11 07 	call	0xe22	; 0xe22 <LCDsendChar>
	LCDsendChar(' ');
     3fa:	80 e2       	ldi	r24, 0x20	; 32
     3fc:	0e 94 11 07 	call	0xe22	; 0xe22 <LCDsendChar>
	LCDstring("<OK>");
     400:	81 e7       	ldi	r24, 0x71	; 113
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	0e 94 89 07 	call	0xf12	; 0xf12 <LCDstring>
	
	LCDGotoXY(x[i],1);    
     408:	0f 2d       	mov	r16, r15
     40a:	10 e0       	ldi	r17, 0x00	; 0
     40c:	f5 01       	movw	r30, r10
     40e:	e0 0f       	add	r30, r16
     410:	f1 1f       	adc	r31, r17
     412:	e0 80       	ld	r14, Z
     414:	8e 2d       	mov	r24, r14
     416:	61 e0       	ldi	r22, 0x01	; 1
     418:	0e 94 a5 07 	call	0xf4a	; 0xf4a <LCDGotoXY>
    LCDstring(items[i]);
     41c:	00 0f       	add	r16, r16
     41e:	11 1f       	adc	r17, r17
     420:	08 0d       	add	r16, r8
     422:	19 1d       	adc	r17, r9
     424:	f8 01       	movw	r30, r16
     426:	87 81       	ldd	r24, Z+7	; 0x07
     428:	90 85       	ldd	r25, Z+8	; 0x08
     42a:	0e 94 89 07 	call	0xf12	; 0xf12 <LCDstring>

	
    if (GetButtonStatus(SELECT_PLUS_BTN))  // Ì‡ÚËÒÌÛÚ‡ ÍÌÓÔÍ‡ SELECT+?
     42e:	b1 99       	sbic	0x16, 1	; 22
     430:	2a c0       	rjmp	.+84     	; 0x486 <SetDate+0x18e>
     432:	80 ed       	ldi	r24, 0xD0	; 208
     434:	97 e0       	ldi	r25, 0x07	; 7
     436:	f6 01       	movw	r30, r12
     438:	31 97       	sbiw	r30, 0x01	; 1
     43a:	f1 f7       	brne	.-4      	; 0x438 <SetDate+0x140>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     43c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     43e:	d9 f7       	brne	.-10     	; 0x436 <SetDate+0x13e>
    {  
      /*if (!GetPrevButtonStatus(SELECT_PLUS_BTN))
      {*/
	    _delay_ms(200);
		switch (i)
     440:	f1 e0       	ldi	r31, 0x01	; 1
     442:	ff 16       	cp	r15, r31
     444:	89 f0       	breq	.+34     	; 0x468 <SetDate+0x170>
     446:	ff 16       	cp	r15, r31
     448:	38 f0       	brcs	.+14     	; 0x458 <SetDate+0x160>
     44a:	82 e0       	ldi	r24, 0x02	; 2
     44c:	f8 16       	cp	r15, r24
     44e:	a1 f0       	breq	.+40     	; 0x478 <SetDate+0x180>
     450:	e3 e0       	ldi	r30, 0x03	; 3
     452:	fe 16       	cp	r15, r30
     454:	c1 f4       	brne	.+48     	; 0x486 <SetDate+0x18e>
     456:	41 c0       	rjmp	.+130    	; 0x4da <SetDate+0x1e2>
		{
		   case 0:
             if (date < 31)
     458:	89 81       	ldd	r24, Y+1	; 0x01
     45a:	8f 31       	cpi	r24, 0x1F	; 31
     45c:	18 f4       	brcc	.+6      	; 0x464 <SetDate+0x16c>
		       date++;
     45e:	8f 5f       	subi	r24, 0xFF	; 255
     460:	89 83       	std	Y+1, r24	; 0x01
     462:	11 c0       	rjmp	.+34     	; 0x486 <SetDate+0x18e>
		     else date = 0;
     464:	19 82       	std	Y+1, r1	; 0x01
     466:	0f c0       	rjmp	.+30     	; 0x486 <SetDate+0x18e>
		   break;  
		   
		   case 1:
		     if (month < 12)
     468:	8a 81       	ldd	r24, Y+2	; 0x02
     46a:	8c 30       	cpi	r24, 0x0C	; 12
     46c:	18 f4       	brcc	.+6      	; 0x474 <SetDate+0x17c>
		       month++;
     46e:	8f 5f       	subi	r24, 0xFF	; 255
     470:	8a 83       	std	Y+2, r24	; 0x02
     472:	09 c0       	rjmp	.+18     	; 0x486 <SetDate+0x18e>
		     else month = 0;
     474:	1a 82       	std	Y+2, r1	; 0x02
     476:	07 c0       	rjmp	.+14     	; 0x486 <SetDate+0x18e>
		   break; 
		   
		   case 2:
		     if (year < 99)
     478:	8b 81       	ldd	r24, Y+3	; 0x03
     47a:	83 36       	cpi	r24, 0x63	; 99
     47c:	18 f4       	brcc	.+6      	; 0x484 <SetDate+0x18c>
		       year++;
     47e:	8f 5f       	subi	r24, 0xFF	; 255
     480:	8b 83       	std	Y+3, r24	; 0x03
     482:	01 c0       	rjmp	.+2      	; 0x486 <SetDate+0x18e>
		     else year = 0;
     484:	1b 82       	std	Y+3, r1	; 0x03
		}        
	
    }
	
	
    if (GetButtonStatus(SELECT_MINUS_BTN)) // Ì‡ÚËÒÌÛÚ‡ ÍÌÓÔÍ‡ SELECT-?
     486:	b2 99       	sbic	0x16, 2	; 22
     488:	33 c0       	rjmp	.+102    	; 0x4f0 <SetDate+0x1f8>
    {  
      if (!GetPrevButtonStatus(SELECT_MINUS_BTN))
     48a:	80 91 0a 01 	lds	r24, 0x010A
     48e:	82 ff       	sbrs	r24, 2
     490:	2f c0       	rjmp	.+94     	; 0x4f0 <SetDate+0x1f8>
      {
        switch (i)
     492:	f1 e0       	ldi	r31, 0x01	; 1
     494:	ff 16       	cp	r15, r31
     496:	89 f0       	breq	.+34     	; 0x4ba <SetDate+0x1c2>
     498:	ff 16       	cp	r15, r31
     49a:	38 f0       	brcs	.+14     	; 0x4aa <SetDate+0x1b2>
     49c:	82 e0       	ldi	r24, 0x02	; 2
     49e:	f8 16       	cp	r15, r24
     4a0:	a1 f0       	breq	.+40     	; 0x4ca <SetDate+0x1d2>
     4a2:	e3 e0       	ldi	r30, 0x03	; 3
     4a4:	fe 16       	cp	r15, r30
     4a6:	21 f5       	brne	.+72     	; 0x4f0 <SetDate+0x1f8>
     4a8:	18 c0       	rjmp	.+48     	; 0x4da <SetDate+0x1e2>
		{
           case 0:
		     if (date != 0)
     4aa:	89 81       	ldd	r24, Y+1	; 0x01
     4ac:	88 23       	and	r24, r24
     4ae:	19 f0       	breq	.+6      	; 0x4b6 <SetDate+0x1be>
		       date--;
     4b0:	81 50       	subi	r24, 0x01	; 1
     4b2:	89 83       	std	Y+1, r24	; 0x01
     4b4:	1d c0       	rjmp	.+58     	; 0x4f0 <SetDate+0x1f8>
		     else date = 31;
     4b6:	59 82       	std	Y+1, r5	; 0x01
     4b8:	1b c0       	rjmp	.+54     	; 0x4f0 <SetDate+0x1f8>
		   break;
		   
		   case 1:
		     if (month != 0)
     4ba:	8a 81       	ldd	r24, Y+2	; 0x02
     4bc:	88 23       	and	r24, r24
     4be:	19 f0       	breq	.+6      	; 0x4c6 <SetDate+0x1ce>
		       month--;
     4c0:	81 50       	subi	r24, 0x01	; 1
     4c2:	8a 83       	std	Y+2, r24	; 0x02
     4c4:	15 c0       	rjmp	.+42     	; 0x4f0 <SetDate+0x1f8>
		     else month = 12;
     4c6:	6a 82       	std	Y+2, r6	; 0x02
     4c8:	13 c0       	rjmp	.+38     	; 0x4f0 <SetDate+0x1f8>
		   break;
		   
		   case 2:
		     if (year != 0)
     4ca:	8b 81       	ldd	r24, Y+3	; 0x03
     4cc:	88 23       	and	r24, r24
     4ce:	19 f0       	breq	.+6      	; 0x4d6 <SetDate+0x1de>
		       year--;
     4d0:	81 50       	subi	r24, 0x01	; 1
     4d2:	8b 83       	std	Y+3, r24	; 0x03
     4d4:	0d c0       	rjmp	.+26     	; 0x4f0 <SetDate+0x1f8>
		     else year = 99;
     4d6:	7b 82       	std	Y+3, r7	; 0x03
     4d8:	0b c0       	rjmp	.+22     	; 0x4f0 <SetDate+0x1f8>
		   break;
		   
		   case 3:
		     rtc_set_date(&date, &month, &year);     
     4da:	ce 01       	movw	r24, r28
     4dc:	01 96       	adiw	r24, 0x01	; 1
     4de:	be 01       	movw	r22, r28
     4e0:	6e 5f       	subi	r22, 0xFE	; 254
     4e2:	7f 4f       	sbci	r23, 0xFF	; 255
     4e4:	ae 01       	movw	r20, r28
     4e6:	4d 5f       	subi	r20, 0xFD	; 253
     4e8:	5f 4f       	sbci	r21, 0xFF	; 255
     4ea:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <rtc_set_date>
     4ee:	19 c0       	rjmp	.+50     	; 0x522 <SetDate+0x22a>
	
      }  
    
    }        
   
    if (GetButtonStatus(MENU_ENTER_BTN)) // Ì‡ÚËÒÌÛÚ‡ ÍÌÓÔÍ‡ MENU_ENTER?
     4f0:	b0 99       	sbic	0x16, 0	; 22
     4f2:	12 c0       	rjmp	.+36     	; 0x518 <SetDate+0x220>
    {  
      if (!GetPrevButtonStatus(MENU_ENTER_BTN))
     4f4:	80 91 0a 01 	lds	r24, 0x010A
     4f8:	80 ff       	sbrs	r24, 0
     4fa:	0e c0       	rjmp	.+28     	; 0x518 <SetDate+0x220>
      {
        LCDGotoXY(x[i],1);    
     4fc:	8e 2d       	mov	r24, r14
     4fe:	61 e0       	ldi	r22, 0x01	; 1
     500:	0e 94 a5 07 	call	0xf4a	; 0xf4a <LCDGotoXY>
        LCDstring("  ");
     504:	86 e7       	ldi	r24, 0x76	; 118
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	0e 94 89 07 	call	0xf12	; 0xf12 <LCDstring>
    	
        if (i < 3)
     50c:	f2 e0       	ldi	r31, 0x02	; 2
     50e:	ff 15       	cp	r31, r15
     510:	10 f4       	brcc	.+4      	; 0x516 <SetDate+0x21e>
     512:	ff 24       	eor	r15, r15
     514:	01 c0       	rjmp	.+2      	; 0x518 <SetDate+0x220>
		  i++;	
     516:	f3 94       	inc	r15
		else		   
		  i = 0;
	  }
    }   
    
    if (GetButtonStatus(EXIT_BTN)) // Ì‡ÚËÒÌÛÚ‡ ÍÌÓÔÍ‡ EXIT?
     518:	b3 99       	sbic	0x16, 3	; 22
     51a:	35 cf       	rjmp	.-406    	; 0x386 <SetDate+0x8e>
    {
	  PREV_PINB = PINB;
     51c:	86 b3       	in	r24, 0x16	; 22
     51e:	80 93 0a 01 	sts	0x010A, r24
      return;
    }                           
  }   
}
     522:	2f 96       	adiw	r28, 0x0f	; 15
     524:	0f b6       	in	r0, 0x3f	; 63
     526:	f8 94       	cli
     528:	de bf       	out	0x3e, r29	; 62
     52a:	0f be       	out	0x3f, r0	; 63
     52c:	cd bf       	out	0x3d, r28	; 61
     52e:	cf 91       	pop	r28
     530:	df 91       	pop	r29
     532:	1f 91       	pop	r17
     534:	0f 91       	pop	r16
     536:	ff 90       	pop	r15
     538:	ef 90       	pop	r14
     53a:	df 90       	pop	r13
     53c:	cf 90       	pop	r12
     53e:	bf 90       	pop	r11
     540:	af 90       	pop	r10
     542:	9f 90       	pop	r9
     544:	8f 90       	pop	r8
     546:	7f 90       	pop	r7
     548:	6f 90       	pop	r6
     54a:	5f 90       	pop	r5
     54c:	08 95       	ret

0000054e <SetTime>:
{
  return (!(PREV_PINB & (1 << button)));  
}
  
void SetTime(void)
{
     54e:	6f 92       	push	r6
     550:	7f 92       	push	r7
     552:	8f 92       	push	r8
     554:	9f 92       	push	r9
     556:	af 92       	push	r10
     558:	bf 92       	push	r11
     55a:	cf 92       	push	r12
     55c:	df 92       	push	r13
     55e:	ef 92       	push	r14
     560:	ff 92       	push	r15
     562:	0f 93       	push	r16
     564:	1f 93       	push	r17
     566:	df 93       	push	r29
     568:	cf 93       	push	r28
     56a:	cd b7       	in	r28, 0x3d	; 61
     56c:	de b7       	in	r29, 0x3e	; 62
     56e:	60 97       	sbiw	r28, 0x10	; 16
     570:	0f b6       	in	r0, 0x3f	; 63
     572:	f8 94       	cli
     574:	de bf       	out	0x3e, r29	; 62
     576:	0f be       	out	0x3f, r0	; 63
     578:	cd bf       	out	0x3d, r28	; 61
  unsigned char hour = 0, min = 0, sec = 0, wd = 0;
     57a:	19 82       	std	Y+1, r1	; 0x01
     57c:	1a 82       	std	Y+2, r1	; 0x02
     57e:	1b 82       	std	Y+3, r1	; 0x03
     580:	1c 82       	std	Y+4, r1	; 0x04
  char *items[] = {"„„", "ıı", "ÒÒ", "^^"};
     582:	de 01       	movw	r26, r28
     584:	19 96       	adiw	r26, 0x09	; 9
     586:	e8 ec       	ldi	r30, 0xC8	; 200
     588:	f1 e0       	ldi	r31, 0x01	; 1
     58a:	88 e0       	ldi	r24, 0x08	; 8
     58c:	01 90       	ld	r0, Z+
     58e:	0d 92       	st	X+, r0
     590:	81 50       	subi	r24, 0x01	; 1
     592:	e1 f7       	brne	.-8      	; 0x58c <SetTime+0x3e>
  uint8_t x[] = {1, 4, 7, 11}, i = 0;
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	8d 83       	std	Y+5, r24	; 0x05
     598:	84 e0       	ldi	r24, 0x04	; 4
     59a:	8e 83       	std	Y+6, r24	; 0x06
     59c:	87 e0       	ldi	r24, 0x07	; 7
     59e:	8f 83       	std	Y+7, r24	; 0x07
     5a0:	8b e0       	ldi	r24, 0x0B	; 11
     5a2:	88 87       	std	Y+8, r24	; 0x08
  
  rtc_get_time(&hour, &min, &sec, &wd);  // ÔÓ˜ËÚ‡ÚË ÔÓÚÓ˜ÌËÈ ˜‡Ò 
     5a4:	8e 01       	movw	r16, r28
     5a6:	0f 5f       	subi	r16, 0xFF	; 255
     5a8:	1f 4f       	sbci	r17, 0xFF	; 255
     5aa:	c8 01       	movw	r24, r16
     5ac:	be 01       	movw	r22, r28
     5ae:	6e 5f       	subi	r22, 0xFE	; 254
     5b0:	7f 4f       	sbci	r23, 0xFF	; 255
     5b2:	ae 01       	movw	r20, r28
     5b4:	4d 5f       	subi	r20, 0xFD	; 253
     5b6:	5f 4f       	sbci	r21, 0xFF	; 255
     5b8:	9e 01       	movw	r18, r28
     5ba:	2c 5f       	subi	r18, 0xFC	; 252
     5bc:	3f 4f       	sbci	r19, 0xFF	; 255
     5be:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <rtc_get_time>
     5c2:	ff 24       	eor	r15, r15
    LCDsendChar((48+sec/10));
    LCDsendChar((48+sec%10));
	LCDsendChar(' ');
	LCDstring("<OK>");
	
	LCDGotoXY(x[i],1);    
     5c4:	b5 e0       	ldi	r27, 0x05	; 5
     5c6:	8b 2e       	mov	r8, r27
     5c8:	91 2c       	mov	r9, r1
     5ca:	8c 0e       	add	r8, r28
     5cc:	9d 1e       	adc	r9, r29
    LCDstring(items[i]);
     5ce:	58 01       	movw	r10, r16
     5d0:	a8 ec       	ldi	r26, 0xC8	; 200
     5d2:	ca 2e       	mov	r12, r26
     5d4:	d1 2c       	mov	r13, r1
		}  
		else if (i == 2)
		{
		  if (sec != 0)
		    sec--;
		  else sec = 59;
     5d6:	fb e3       	ldi	r31, 0x3B	; 59
     5d8:	7f 2e       	mov	r7, r31
      {
        if (i == 0)
		{
          if (hour != 0)
		    hour--;
		  else hour = 23;
     5da:	e7 e1       	ldi	r30, 0x17	; 23
     5dc:	6e 2e       	mov	r6, r30
  uint8_t x[] = {1, 4, 7, 11}, i = 0;
  
  rtc_get_time(&hour, &min, &sec, &wd);  // ÔÓ˜ËÚ‡ÚË ÔÓÚÓ˜ÌËÈ ˜‡Ò 
  while(1)
  {
    PREV_PINB = PINB;
     5de:	86 b3       	in	r24, 0x16	; 22
     5e0:	80 93 0a 01 	sts	0x010A, r24
    
    LCDGotoXY(1,0);    
     5e4:	81 e0       	ldi	r24, 0x01	; 1
     5e6:	60 e0       	ldi	r22, 0x00	; 0
     5e8:	0e 94 a5 07 	call	0xf4a	; 0xf4a <LCDGotoXY>
    LCDsendChar((48+hour/10));
     5ec:	89 81       	ldd	r24, Y+1	; 0x01
     5ee:	6a e0       	ldi	r22, 0x0A	; 10
     5f0:	0e 94 77 15 	call	0x2aee	; 0x2aee <__udivmodqi4>
     5f4:	80 5d       	subi	r24, 0xD0	; 208
     5f6:	0e 94 11 07 	call	0xe22	; 0xe22 <LCDsendChar>
    LCDsendChar((48+hour%10));	
     5fa:	89 81       	ldd	r24, Y+1	; 0x01
     5fc:	6a e0       	ldi	r22, 0x0A	; 10
     5fe:	0e 94 77 15 	call	0x2aee	; 0x2aee <__udivmodqi4>
     602:	89 2f       	mov	r24, r25
     604:	80 5d       	subi	r24, 0xD0	; 208
     606:	0e 94 11 07 	call	0xe22	; 0xe22 <LCDsendChar>
    LCDsendChar(':');
     60a:	8a e3       	ldi	r24, 0x3A	; 58
     60c:	0e 94 11 07 	call	0xe22	; 0xe22 <LCDsendChar>
    LCDsendChar((48+min/10));
     610:	8a 81       	ldd	r24, Y+2	; 0x02
     612:	6a e0       	ldi	r22, 0x0A	; 10
     614:	0e 94 77 15 	call	0x2aee	; 0x2aee <__udivmodqi4>
     618:	80 5d       	subi	r24, 0xD0	; 208
     61a:	0e 94 11 07 	call	0xe22	; 0xe22 <LCDsendChar>
    LCDsendChar((48+min%10));	
     61e:	8a 81       	ldd	r24, Y+2	; 0x02
     620:	6a e0       	ldi	r22, 0x0A	; 10
     622:	0e 94 77 15 	call	0x2aee	; 0x2aee <__udivmodqi4>
     626:	89 2f       	mov	r24, r25
     628:	80 5d       	subi	r24, 0xD0	; 208
     62a:	0e 94 11 07 	call	0xe22	; 0xe22 <LCDsendChar>
    LCDsendChar(':');
     62e:	8a e3       	ldi	r24, 0x3A	; 58
     630:	0e 94 11 07 	call	0xe22	; 0xe22 <LCDsendChar>
    LCDsendChar((48+sec/10));
     634:	8b 81       	ldd	r24, Y+3	; 0x03
     636:	6a e0       	ldi	r22, 0x0A	; 10
     638:	0e 94 77 15 	call	0x2aee	; 0x2aee <__udivmodqi4>
     63c:	80 5d       	subi	r24, 0xD0	; 208
     63e:	0e 94 11 07 	call	0xe22	; 0xe22 <LCDsendChar>
    LCDsendChar((48+sec%10));
     642:	8b 81       	ldd	r24, Y+3	; 0x03
     644:	6a e0       	ldi	r22, 0x0A	; 10
     646:	0e 94 77 15 	call	0x2aee	; 0x2aee <__udivmodqi4>
     64a:	89 2f       	mov	r24, r25
     64c:	80 5d       	subi	r24, 0xD0	; 208
     64e:	0e 94 11 07 	call	0xe22	; 0xe22 <LCDsendChar>
	LCDsendChar(' ');
     652:	80 e2       	ldi	r24, 0x20	; 32
     654:	0e 94 11 07 	call	0xe22	; 0xe22 <LCDsendChar>
	LCDstring("<OK>");
     658:	81 e7       	ldi	r24, 0x71	; 113
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	0e 94 89 07 	call	0xf12	; 0xf12 <LCDstring>
	
	LCDGotoXY(x[i],1);    
     660:	0f 2d       	mov	r16, r15
     662:	10 e0       	ldi	r17, 0x00	; 0
     664:	f4 01       	movw	r30, r8
     666:	e0 0f       	add	r30, r16
     668:	f1 1f       	adc	r31, r17
     66a:	e0 80       	ld	r14, Z
     66c:	8e 2d       	mov	r24, r14
     66e:	61 e0       	ldi	r22, 0x01	; 1
     670:	0e 94 a5 07 	call	0xf4a	; 0xf4a <LCDGotoXY>
    LCDstring(items[i]);
     674:	00 0f       	add	r16, r16
     676:	11 1f       	adc	r17, r17
     678:	0a 0d       	add	r16, r10
     67a:	1b 1d       	adc	r17, r11
     67c:	f8 01       	movw	r30, r16
     67e:	80 85       	ldd	r24, Z+8	; 0x08
     680:	91 85       	ldd	r25, Z+9	; 0x09
     682:	0e 94 89 07 	call	0xf12	; 0xf12 <LCDstring>
    	
    if (GetButtonStatus(SELECT_PLUS_BTN)) // Ì‡ÚËÒÌÛÚ‡ ÍÌÓÔÍ‡ SELECT+?
     686:	b1 99       	sbic	0x16, 1	; 22
     688:	2a c0       	rjmp	.+84     	; 0x6de <SetTime+0x190>
     68a:	80 ed       	ldi	r24, 0xD0	; 208
     68c:	97 e0       	ldi	r25, 0x07	; 7
     68e:	f6 01       	movw	r30, r12
     690:	31 97       	sbiw	r30, 0x01	; 1
     692:	f1 f7       	brne	.-4      	; 0x690 <SetTime+0x142>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     694:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     696:	d9 f7       	brne	.-10     	; 0x68e <SetTime+0x140>
    {  
      /*if (!GetPrevButtonStatus(SELECT_PLUS_BTN))
      {*/
	    _delay_ms(200);
        if (i == 0)
     698:	ff 20       	and	r15, r15
     69a:	41 f4       	brne	.+16     	; 0x6ac <SetTime+0x15e>
		{
          if (hour < 23)
     69c:	89 81       	ldd	r24, Y+1	; 0x01
     69e:	87 31       	cpi	r24, 0x17	; 23
     6a0:	18 f4       	brcc	.+6      	; 0x6a8 <SetTime+0x15a>
		    hour++;
     6a2:	8f 5f       	subi	r24, 0xFF	; 255
     6a4:	89 83       	std	Y+1, r24	; 0x01
     6a6:	1b c0       	rjmp	.+54     	; 0x6de <SetTime+0x190>
		  else hour = 0;
     6a8:	19 82       	std	Y+1, r1	; 0x01
     6aa:	19 c0       	rjmp	.+50     	; 0x6de <SetTime+0x190>
		}
        else if (i == 1)
     6ac:	f1 e0       	ldi	r31, 0x01	; 1
     6ae:	ff 16       	cp	r15, r31
     6b0:	41 f4       	brne	.+16     	; 0x6c2 <SetTime+0x174>
		{
		  if (min<59)
     6b2:	8a 81       	ldd	r24, Y+2	; 0x02
     6b4:	8b 33       	cpi	r24, 0x3B	; 59
     6b6:	18 f4       	brcc	.+6      	; 0x6be <SetTime+0x170>
		    min++;
     6b8:	8f 5f       	subi	r24, 0xFF	; 255
     6ba:	8a 83       	std	Y+2, r24	; 0x02
     6bc:	10 c0       	rjmp	.+32     	; 0x6de <SetTime+0x190>
		  else min=0;
     6be:	1a 82       	std	Y+2, r1	; 0x02
     6c0:	0e c0       	rjmp	.+28     	; 0x6de <SetTime+0x190>
		}  
		else if (i == 2)
     6c2:	82 e0       	ldi	r24, 0x02	; 2
     6c4:	f8 16       	cp	r15, r24
     6c6:	41 f4       	brne	.+16     	; 0x6d8 <SetTime+0x18a>
		{
		  if (sec < 59)
     6c8:	8b 81       	ldd	r24, Y+3	; 0x03
     6ca:	8b 33       	cpi	r24, 0x3B	; 59
     6cc:	18 f4       	brcc	.+6      	; 0x6d4 <SetTime+0x186>
		    sec++;
     6ce:	8f 5f       	subi	r24, 0xFF	; 255
     6d0:	8b 83       	std	Y+3, r24	; 0x03
     6d2:	05 c0       	rjmp	.+10     	; 0x6de <SetTime+0x190>
		  else sec = 0;
     6d4:	1b 82       	std	Y+3, r1	; 0x03
     6d6:	03 c0       	rjmp	.+6      	; 0x6de <SetTime+0x190>
		}  
        else if (i == 3) // OK selection
     6d8:	e3 e0       	ldi	r30, 0x03	; 3
     6da:	fe 16       	cp	r15, r30
     6dc:	49 f1       	breq	.+82     	; 0x730 <SetTime+0x1e2>
		  i = 0;*/
          rtc_set_time(hour, min, sec, wd);
		  return;		
        }
    }
    if (GetButtonStatus(SELECT_MINUS_BTN)) // Ì‡ÚËÒÌÛÚ‡ ÍÌÓÔÍ‡ SELECT-?
     6de:	b2 99       	sbic	0x16, 2	; 22
     6e0:	2e c0       	rjmp	.+92     	; 0x73e <SetTime+0x1f0>
    {  
      if (!GetPrevButtonStatus(SELECT_MINUS_BTN))
     6e2:	80 91 0a 01 	lds	r24, 0x010A
     6e6:	82 ff       	sbrs	r24, 2
     6e8:	2a c0       	rjmp	.+84     	; 0x73e <SetTime+0x1f0>
      {
        if (i == 0)
     6ea:	ff 20       	and	r15, r15
     6ec:	41 f4       	brne	.+16     	; 0x6fe <SetTime+0x1b0>
		{
          if (hour != 0)
     6ee:	89 81       	ldd	r24, Y+1	; 0x01
     6f0:	88 23       	and	r24, r24
     6f2:	19 f0       	breq	.+6      	; 0x6fa <SetTime+0x1ac>
		    hour--;
     6f4:	81 50       	subi	r24, 0x01	; 1
     6f6:	89 83       	std	Y+1, r24	; 0x01
     6f8:	22 c0       	rjmp	.+68     	; 0x73e <SetTime+0x1f0>
		  else hour = 23;
     6fa:	69 82       	std	Y+1, r6	; 0x01
     6fc:	20 c0       	rjmp	.+64     	; 0x73e <SetTime+0x1f0>
		}
		else if (i == 1)
     6fe:	f1 e0       	ldi	r31, 0x01	; 1
     700:	ff 16       	cp	r15, r31
     702:	41 f4       	brne	.+16     	; 0x714 <SetTime+0x1c6>
		{
		  if (min != 0)
     704:	8a 81       	ldd	r24, Y+2	; 0x02
     706:	88 23       	and	r24, r24
     708:	19 f0       	breq	.+6      	; 0x710 <SetTime+0x1c2>
		    min--;
     70a:	81 50       	subi	r24, 0x01	; 1
     70c:	8a 83       	std	Y+2, r24	; 0x02
     70e:	17 c0       	rjmp	.+46     	; 0x73e <SetTime+0x1f0>
		  else min = 59;
     710:	7a 82       	std	Y+2, r7	; 0x02
     712:	15 c0       	rjmp	.+42     	; 0x73e <SetTime+0x1f0>
		}  
		else if (i == 2)
     714:	82 e0       	ldi	r24, 0x02	; 2
     716:	f8 16       	cp	r15, r24
     718:	41 f4       	brne	.+16     	; 0x72a <SetTime+0x1dc>
		{
		  if (sec != 0)
     71a:	8b 81       	ldd	r24, Y+3	; 0x03
     71c:	88 23       	and	r24, r24
     71e:	19 f0       	breq	.+6      	; 0x726 <SetTime+0x1d8>
		    sec--;
     720:	81 50       	subi	r24, 0x01	; 1
     722:	8b 83       	std	Y+3, r24	; 0x03
     724:	0c c0       	rjmp	.+24     	; 0x73e <SetTime+0x1f0>
		  else sec = 59;
     726:	7b 82       	std	Y+3, r7	; 0x03
     728:	0a c0       	rjmp	.+20     	; 0x73e <SetTime+0x1f0>
		}  
		else if (i == 3) // <OK> 
     72a:	e3 e0       	ldi	r30, 0x03	; 3
     72c:	fe 16       	cp	r15, r30
     72e:	39 f4       	brne	.+14     	; 0x73e <SetTime+0x1f0>
		{
		  /*LCDGotoXY(x[i],1);    
          LCDstring("  ");
		  i = 2;*/
		  rtc_set_time(hour, min, sec, wd);
     730:	89 81       	ldd	r24, Y+1	; 0x01
     732:	6a 81       	ldd	r22, Y+2	; 0x02
     734:	4b 81       	ldd	r20, Y+3	; 0x03
     736:	2c 81       	ldd	r18, Y+4	; 0x04
     738:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <rtc_set_time>
     73c:	19 c0       	rjmp	.+50     	; 0x770 <SetTime+0x222>
		}
		
      }
    }              
   
    if (GetButtonStatus(MENU_ENTER_BTN)) // Ì‡ÚËÒÌÛÚ‡ ÍÌÓÔÍ‡ MENU_ENTER?
     73e:	b0 99       	sbic	0x16, 0	; 22
     740:	12 c0       	rjmp	.+36     	; 0x766 <SetTime+0x218>
    {  
      if (!GetPrevButtonStatus(MENU_ENTER_BTN))
     742:	80 91 0a 01 	lds	r24, 0x010A
     746:	80 ff       	sbrs	r24, 0
     748:	0e c0       	rjmp	.+28     	; 0x766 <SetTime+0x218>
	  {
	    LCDGotoXY(x[i],1);    
     74a:	8e 2d       	mov	r24, r14
     74c:	61 e0       	ldi	r22, 0x01	; 1
     74e:	0e 94 a5 07 	call	0xf4a	; 0xf4a <LCDGotoXY>
        LCDstring("  ");
     752:	86 e7       	ldi	r24, 0x76	; 118
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	0e 94 89 07 	call	0xf12	; 0xf12 <LCDstring>
    	
        if (i < 3)
     75a:	f2 e0       	ldi	r31, 0x02	; 2
     75c:	ff 15       	cp	r31, r15
     75e:	10 f4       	brcc	.+4      	; 0x764 <SetTime+0x216>
     760:	ff 24       	eor	r15, r15
     762:	01 c0       	rjmp	.+2      	; 0x766 <SetTime+0x218>
		  i++;
     764:	f3 94       	inc	r15
		else		   
		  i = 0;
	  }
    }   
    
    if (GetButtonStatus(EXIT_BTN)) // Ì‡ÚËÒÌÛÚ‡ ÍÌÓÔÍ‡ EXIT?
     766:	b3 99       	sbic	0x16, 3	; 22
     768:	3a cf       	rjmp	.-396    	; 0x5de <SetTime+0x90>
    {
	  PREV_PINB = PINB;	  
     76a:	86 b3       	in	r24, 0x16	; 22
     76c:	80 93 0a 01 	sts	0x010A, r24
      return;
    }                          
  }
  
}
     770:	60 96       	adiw	r28, 0x10	; 16
     772:	0f b6       	in	r0, 0x3f	; 63
     774:	f8 94       	cli
     776:	de bf       	out	0x3e, r29	; 62
     778:	0f be       	out	0x3f, r0	; 63
     77a:	cd bf       	out	0x3d, r28	; 61
     77c:	cf 91       	pop	r28
     77e:	df 91       	pop	r29
     780:	1f 91       	pop	r17
     782:	0f 91       	pop	r16
     784:	ff 90       	pop	r15
     786:	ef 90       	pop	r14
     788:	df 90       	pop	r13
     78a:	cf 90       	pop	r12
     78c:	bf 90       	pop	r11
     78e:	af 90       	pop	r10
     790:	9f 90       	pop	r9
     792:	8f 90       	pop	r8
     794:	7f 90       	pop	r7
     796:	6f 90       	pop	r6
     798:	08 95       	ret

0000079a <MainMenu>:
    
  }
}

void MainMenu(void)
{
     79a:	ef 92       	push	r14
     79c:	ff 92       	push	r15
     79e:	0f 93       	push	r16
     7a0:	1f 93       	push	r17
     7a2:	df 93       	push	r29
     7a4:	cf 93       	push	r28
     7a6:	cd b7       	in	r28, 0x3d	; 61
     7a8:	de b7       	in	r29, 0x3e	; 62
     7aa:	28 97       	sbiw	r28, 0x08	; 8
     7ac:	0f b6       	in	r0, 0x3f	; 63
     7ae:	f8 94       	cli
     7b0:	de bf       	out	0x3e, r29	; 62
     7b2:	0f be       	out	0x3f, r0	; 63
     7b4:	cd bf       	out	0x3d, r28	; 61
  char *menu_items[]={" ¬ÒÚ‡ÌÓ‚ËÚË ˜‡Ò ", "¬ÒÚ‡ÌÓ‚ËÚË ‰‡ÚÛ ", "Œ‰ËÌËˆi ÚÂÏÔ-Ë ", "     ¬ËÈÚË      "};
     7b6:	de 01       	movw	r26, r28
     7b8:	11 96       	adiw	r26, 0x01	; 1
     7ba:	e2 e7       	ldi	r30, 0x72	; 114
     7bc:	f1 e0       	ldi	r31, 0x01	; 1
     7be:	88 e0       	ldi	r24, 0x08	; 8
     7c0:	01 90       	ld	r0, Z+
     7c2:	0d 92       	st	X+, r0
     7c4:	81 50       	subi	r24, 0x01	; 1
     7c6:	e1 f7       	brne	.-8      	; 0x7c0 <MainMenu+0x26>
  int i = 0;
  LCDGotoXY(0,0);
     7c8:	60 e0       	ldi	r22, 0x00	; 0
     7ca:	0e 94 a5 07 	call	0xf4a	; 0xf4a <LCDGotoXY>
  LCDstring("* √ŒÀŒ¬Õ≈ Ã≈Õﬁ *"); //("√ÓÎÓ‚ÌÂ ÏÂÌ˛");
     7ce:	89 e7       	ldi	r24, 0x79	; 121
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	0e 94 89 07 	call	0xf12	; 0xf12 <LCDstring>
     7d6:	00 e0       	ldi	r16, 0x00	; 0
     7d8:	10 e0       	ldi	r17, 0x00	; 0
  while(1)
  {    
    PREV_PINB = PINB;
    LCDGotoXY(0,1);
    LCDstring(menu_items[i]);
     7da:	7e 01       	movw	r14, r28
     7dc:	08 94       	sec
     7de:	e1 1c       	adc	r14, r1
     7e0:	f1 1c       	adc	r15, r1
  int i = 0;
  LCDGotoXY(0,0);
  LCDstring("* √ŒÀŒ¬Õ≈ Ã≈Õﬁ *"); //("√ÓÎÓ‚ÌÂ ÏÂÌ˛");
  while(1)
  {    
    PREV_PINB = PINB;
     7e2:	86 b3       	in	r24, 0x16	; 22
     7e4:	80 93 0a 01 	sts	0x010A, r24
    LCDGotoXY(0,1);
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	61 e0       	ldi	r22, 0x01	; 1
     7ec:	0e 94 a5 07 	call	0xf4a	; 0xf4a <LCDGotoXY>
    LCDstring(menu_items[i]);
     7f0:	f8 01       	movw	r30, r16
     7f2:	ee 0f       	add	r30, r30
     7f4:	ff 1f       	adc	r31, r31
     7f6:	ee 0d       	add	r30, r14
     7f8:	ff 1d       	adc	r31, r15
     7fa:	80 81       	ld	r24, Z
     7fc:	91 81       	ldd	r25, Z+1	; 0x01
     7fe:	0e 94 89 07 	call	0xf12	; 0xf12 <LCDstring>
    if (GetButtonStatus(SELECT_PLUS_BTN))  // Ì‡ÚËÒÌÛÚ‡ ÍÌÓÔÍ‡ SELECT+?
     802:	b1 99       	sbic	0x16, 1	; 22
     804:	0c c0       	rjmp	.+24     	; 0x81e <MainMenu+0x84>
    {  
      if (!GetPrevButtonStatus(SELECT_PLUS_BTN))
     806:	80 91 0a 01 	lds	r24, 0x010A
     80a:	81 ff       	sbrs	r24, 1
     80c:	08 c0       	rjmp	.+16     	; 0x81e <MainMenu+0x84>
      {
        if (i < 3)
     80e:	03 30       	cpi	r16, 0x03	; 3
     810:	11 05       	cpc	r17, r1
     812:	1c f0       	brlt	.+6      	; 0x81a <MainMenu+0x80>
     814:	00 e0       	ldi	r16, 0x00	; 0
     816:	10 e0       	ldi	r17, 0x00	; 0
     818:	02 c0       	rjmp	.+4      	; 0x81e <MainMenu+0x84>
		  i++;
     81a:	0f 5f       	subi	r16, 0xFF	; 255
     81c:	1f 4f       	sbci	r17, 0xFF	; 255
		else i = 0;
      }
    }
    if (GetButtonStatus(SELECT_MINUS_BTN)) // Ì‡ÚËÒÌÛÚ‡ ÍÌÓÔÍ‡ SELECT-?
     81e:	b2 99       	sbic	0x16, 2	; 22
     820:	0c c0       	rjmp	.+24     	; 0x83a <MainMenu+0xa0>
    {  
      if (!GetPrevButtonStatus(SELECT_MINUS_BTN))
     822:	80 91 0a 01 	lds	r24, 0x010A
     826:	82 ff       	sbrs	r24, 2
     828:	08 c0       	rjmp	.+16     	; 0x83a <MainMenu+0xa0>
      {
        if (i > 0)	
     82a:	01 15       	cp	r16, r1
     82c:	11 05       	cpc	r17, r1
     82e:	19 f4       	brne	.+6      	; 0x836 <MainMenu+0x9c>
     830:	03 e0       	ldi	r16, 0x03	; 3
     832:	10 e0       	ldi	r17, 0x00	; 0
     834:	02 c0       	rjmp	.+4      	; 0x83a <MainMenu+0xa0>
		  i--;
     836:	01 50       	subi	r16, 0x01	; 1
     838:	10 40       	sbci	r17, 0x00	; 0
		else
		  i = 3;
      }
    }              
    if (GetButtonStatus(MENU_ENTER_BTN)) // Ì‡ÚËÒÌÛÚ‡ ÍÌÓÔÍ‡ MENU_ENTER?
     83a:	b0 99       	sbic	0x16, 0	; 22
     83c:	29 c0       	rjmp	.+82     	; 0x890 <__stack+0x31>
    {  
      if (!GetPrevButtonStatus(MENU_ENTER_BTN))
     83e:	80 91 0a 01 	lds	r24, 0x010A
     842:	80 ff       	sbrs	r24, 0
     844:	25 c0       	rjmp	.+74     	; 0x890 <__stack+0x31>
      {
        LCDclr(); 
     846:	0e 94 81 07 	call	0xf02	; 0xf02 <LCDclr>
        switch (i)
     84a:	01 30       	cpi	r16, 0x01	; 1
     84c:	11 05       	cpc	r17, r1
     84e:	89 f0       	breq	.+34     	; 0x872 <__stack+0x13>
     850:	02 30       	cpi	r16, 0x02	; 2
     852:	11 05       	cpc	r17, r1
     854:	24 f4       	brge	.+8      	; 0x85e <MainMenu+0xc4>
     856:	01 15       	cp	r16, r1
     858:	11 05       	cpc	r17, r1
     85a:	41 f0       	breq	.+16     	; 0x86c <__stack+0xd>
     85c:	0f c0       	rjmp	.+30     	; 0x87c <__stack+0x1d>
     85e:	02 30       	cpi	r16, 0x02	; 2
     860:	11 05       	cpc	r17, r1
     862:	51 f0       	breq	.+20     	; 0x878 <__stack+0x19>
     864:	03 30       	cpi	r16, 0x03	; 3
     866:	11 05       	cpc	r17, r1
     868:	49 f4       	brne	.+18     	; 0x87c <__stack+0x1d>
     86a:	1d c0       	rjmp	.+58     	; 0x8a6 <__stack+0x47>
		{
		  case 0: SetTime(); break;
     86c:	0e 94 a7 02 	call	0x54e	; 0x54e <SetTime>
     870:	05 c0       	rjmp	.+10     	; 0x87c <__stack+0x1d>
		  case 1: SetDate(); break;
     872:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <SetDate>
     876:	02 c0       	rjmp	.+4      	; 0x87c <__stack+0x1d>
		  case 2: SetTempUnit(); break;
     878:	0e 94 0e 01 	call	0x21c	; 0x21c <SetTempUnit>
		  case 3: return;
		}   
		LCDclr(); 
     87c:	0e 94 81 07 	call	0xf02	; 0xf02 <LCDclr>
		LCDGotoXY(0,0);
     880:	80 e0       	ldi	r24, 0x00	; 0
     882:	60 e0       	ldi	r22, 0x00	; 0
     884:	0e 94 a5 07 	call	0xf4a	; 0xf4a <LCDGotoXY>
		LCDstring("* √ŒÀŒ¬Õ≈ Ã≈Õﬁ *");
     888:	89 e7       	ldi	r24, 0x79	; 121
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	0e 94 89 07 	call	0xf12	; 0xf12 <LCDstring>
      }
    }      
  
    if (GetButtonStatus(EXIT_BTN)) // Ì‡ÚËÒÌÛÚ‡ ÍÌÓÔÍ‡ EXIT?
     890:	b3 99       	sbic	0x16, 3	; 22
     892:	a7 cf       	rjmp	.-178    	; 0x7e2 <MainMenu+0x48>
    {
      if (!GetPrevButtonStatus(EXIT_BTN))
     894:	80 91 0a 01 	lds	r24, 0x010A
     898:	83 ff       	sbrs	r24, 3
     89a:	a3 cf       	rjmp	.-186    	; 0x7e2 <MainMenu+0x48>
      {
	    PREV_PINB = PINB;
     89c:	86 b3       	in	r24, 0x16	; 22
     89e:	80 93 0a 01 	sts	0x010A, r24
	    LCDclr();
     8a2:	0e 94 81 07 	call	0xf02	; 0xf02 <LCDclr>
        return;
	  }
    }        
    
  }
}
     8a6:	28 96       	adiw	r28, 0x08	; 8
     8a8:	0f b6       	in	r0, 0x3f	; 63
     8aa:	f8 94       	cli
     8ac:	de bf       	out	0x3e, r29	; 62
     8ae:	0f be       	out	0x3f, r0	; 63
     8b0:	cd bf       	out	0x3d, r28	; 61
     8b2:	cf 91       	pop	r28
     8b4:	df 91       	pop	r29
     8b6:	1f 91       	pop	r17
     8b8:	0f 91       	pop	r16
     8ba:	ff 90       	pop	r15
     8bc:	ef 90       	pop	r14
     8be:	08 95       	ret

000008c0 <main>:


int main(void)
{  
     8c0:	2f 92       	push	r2
     8c2:	3f 92       	push	r3
     8c4:	4f 92       	push	r4
     8c6:	5f 92       	push	r5
     8c8:	6f 92       	push	r6
     8ca:	7f 92       	push	r7
     8cc:	8f 92       	push	r8
     8ce:	9f 92       	push	r9
     8d0:	af 92       	push	r10
     8d2:	bf 92       	push	r11
     8d4:	cf 92       	push	r12
     8d6:	df 92       	push	r13
     8d8:	ef 92       	push	r14
     8da:	ff 92       	push	r15
     8dc:	0f 93       	push	r16
     8de:	1f 93       	push	r17
     8e0:	df 93       	push	r29
     8e2:	cf 93       	push	r28
     8e4:	cd b7       	in	r28, 0x3d	; 61
     8e6:	de b7       	in	r29, 0x3e	; 62
     8e8:	c4 54       	subi	r28, 0x44	; 68
     8ea:	d0 40       	sbci	r29, 0x00	; 0
     8ec:	0f b6       	in	r0, 0x3f	; 63
     8ee:	f8 94       	cli
     8f0:	de bf       	out	0x3e, r29	; 62
     8f2:	0f be       	out	0x3f, r0	; 63
     8f4:	cd bf       	out	0x3d, r28	; 61
  value humi_val, temp_val;
  float t=0,dew_point=0;
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	b0 e0       	ldi	r27, 0x00	; 0
     8fe:	8a 8b       	std	Y+18, r24	; 0x12
     900:	9b 8b       	std	Y+19, r25	; 0x13
     902:	ac 8b       	std	Y+20, r26	; 0x14
     904:	bd 8b       	std	Y+21, r27	; 0x15
  unsigned char error, checksum, value = 1;
     906:	81 e0       	ldi	r24, 0x01	; 1
     908:	8a 83       	std	Y+2, r24	; 0x02
  char lcd_buffer[33];
  unsigned char hour, min, sec, wd, prev_sec = 0, colon_symbol = ':';
  unsigned char date, month, year;
  char *weekdays[]={"Õ‰","œÌ","¬Ú","—","◊Ú","œÚ","—·"};  
     90a:	de 01       	movw	r26, r28
     90c:	56 96       	adiw	r26, 0x16	; 22
     90e:	e0 e2       	ldi	r30, 0x20	; 32
     910:	f1 e0       	ldi	r31, 0x01	; 1
     912:	8e e0       	ldi	r24, 0x0E	; 14
     914:	01 90       	ld	r0, Z+
     916:	0d 92       	st	X+, r0
     918:	81 50       	subi	r24, 0x01	; 1
     91a:	e1 f7       	brne	.-8      	; 0x914 <main+0x54>
  char *monthes[]={"—i˜.","À˛Ú.","¡Â."," ‚iÚ.","“‡‚.","◊Â‚.","ÀËÔ.","—ÂÔ.","¬Â.","∆Ó‚Ú.","ÀËÒÚ.","√Û‰."};
     
  sht_init();  
     91c:	0e 94 98 08 	call	0x1130	; 0x1130 <sht_init>
  s_connectionreset();  
     920:	0e 94 0e 09 	call	0x121c	; 0x121c <s_connectionreset>
  therm_init(-55, 125, THERM_9BIT_RES);   
     924:	89 ec       	ldi	r24, 0xC9	; 201
     926:	6d e7       	ldi	r22, 0x7D	; 125
     928:	40 e0       	ldi	r20, 0x00	; 0
     92a:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <therm_init>
  //i2c_init();  
  rtc_init(0,1,0);  
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	61 e0       	ldi	r22, 0x01	; 1
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <rtc_init>
  /* ≥Ì≥ˆ≥‡Î≥Á‡ˆ≥ˇ – ƒ  */
   LCDinit();
     938:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LCDinit>
   LCDcursorOFF();  
     93c:	0e 94 13 08 	call	0x1026	; 0x1026 <LCDcursorOFF>
  // Print on first line
  LCDGotoXY(3,0);	
     940:	83 e0       	ldi	r24, 0x03	; 3
     942:	60 e0       	ldi	r22, 0x00	; 0
     944:	0e 94 a5 07 	call	0xf4a	; 0xf4a <LCDGotoXY>
  LCDstring("“ÂÏÓÏÂÚ-");  
     948:	8a e8       	ldi	r24, 0x8A	; 138
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	0e 94 89 07 	call	0xf12	; 0xf12 <LCDstring>
  LCDGotoXY(3,1);
     950:	83 e0       	ldi	r24, 0x03	; 3
     952:	61 e0       	ldi	r22, 0x01	; 1
     954:	0e 94 a5 07 	call	0xf4a	; 0xf4a <LCDGotoXY>
  LCDstring("„i„ÓÏÂÚ");
     958:	85 e9       	ldi	r24, 0x95	; 149
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	0e 94 89 07 	call	0xf12	; 0xf12 <LCDstring>
     960:	80 e1       	ldi	r24, 0x10	; 16
     962:	97 e2       	ldi	r25, 0x27	; 39
     964:	28 ec       	ldi	r18, 0xC8	; 200
     966:	30 e0       	ldi	r19, 0x00	; 0
     968:	f9 01       	movw	r30, r18
     96a:	31 97       	sbiw	r30, 0x01	; 1
     96c:	f1 f7       	brne	.-4      	; 0x96a <main+0xaa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     96e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     970:	d9 f7       	brne	.-10     	; 0x968 <main+0xa8>
  _delay_ms(1000);
  LCDclr();
     972:	0e 94 81 07 	call	0xf02	; 0xf02 <LCDclr>
  LCDGotoXY(2,0);	
     976:	82 e0       	ldi	r24, 0x02	; 2
     978:	60 e0       	ldi	r22, 0x00	; 0
     97a:	0e 94 a5 07 	call	0xf4a	; 0xf4a <LCDGotoXY>
  LCDstring("Á „Ó‰ËÌÌËÍÓÏ");  
     97e:	8f e9       	ldi	r24, 0x9F	; 159
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	0e 94 89 07 	call	0xf12	; 0xf12 <LCDstring>
  LCDGotoXY(1,1);
     986:	81 e0       	ldi	r24, 0x01	; 1
     988:	61 e0       	ldi	r22, 0x01	; 1
     98a:	0e 94 a5 07 	call	0xf4a	; 0xf4a <LCDGotoXY>
  LCDstring("Ì‡ Ã  ATmega32");
     98e:	8c ea       	ldi	r24, 0xAC	; 172
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	0e 94 89 07 	call	0xf12	; 0xf12 <LCDstring>
     996:	80 e1       	ldi	r24, 0x10	; 16
     998:	97 e2       	ldi	r25, 0x27	; 39
     99a:	28 ec       	ldi	r18, 0xC8	; 200
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	f9 01       	movw	r30, r18
     9a0:	31 97       	sbiw	r30, 0x01	; 1
     9a2:	f1 f7       	brne	.-4      	; 0x9a0 <main+0xe0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9a4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9a6:	d9 f7       	brne	.-10     	; 0x99e <main+0xde>
  _delay_ms(1000);
  LCDclr();
     9a8:	0e 94 81 07 	call	0xf02	; 0xf02 <LCDclr>
  LCDGotoXY(1,0);
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	60 e0       	ldi	r22, 0x00	; 0
     9b0:	0e 94 a5 07 	call	0xf4a	; 0xf4a <LCDGotoXY>
  LCDstring("–ÓÁÓ·Ë‚: ");  
     9b4:	8b eb       	ldi	r24, 0xBB	; 187
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	0e 94 89 07 	call	0xf12	; 0xf12 <LCDstring>
  LCDGotoXY(1,1);
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	61 e0       	ldi	r22, 0x01	; 1
     9c0:	0e 94 a5 07 	call	0xf4a	; 0xf4a <LCDGotoXY>
  LCDstring("ŒÎÂÍÒiÈ ‘Â‰ËÍ"); 
     9c4:	86 ec       	ldi	r24, 0xC6	; 198
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	0e 94 89 07 	call	0xf12	; 0xf12 <LCDstring>
     9cc:	80 e1       	ldi	r24, 0x10	; 16
     9ce:	97 e2       	ldi	r25, 0x27	; 39
     9d0:	28 ec       	ldi	r18, 0xC8	; 200
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	f9 01       	movw	r30, r18
     9d6:	31 97       	sbiw	r30, 0x01	; 1
     9d8:	f1 f7       	brne	.-4      	; 0x9d6 <main+0x116>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9da:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9dc:	d9 f7       	brne	.-10     	; 0x9d4 <main+0x114>
  _delay_ms(1000);
  LCDclr();	
     9de:	0e 94 81 07 	call	0xf02	; 0xf02 <LCDclr>
  LCDGotoXY(0,1);	                
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	61 e0       	ldi	r22, 0x01	; 1
     9e6:	0e 94 a5 07 	call	0xf4a	; 0xf4a <LCDGotoXY>
  //set SHTXX sensor resolution for temperature 12 bit and for humidity 8 bit 
  s_write_statusreg(&value);
     9ea:	8e 01       	movw	r16, r28
     9ec:	0e 5f       	subi	r16, 0xFE	; 254
     9ee:	1f 4f       	sbci	r17, 0xFF	; 255
     9f0:	c8 01       	movw	r24, r16
     9f2:	0e 94 48 09 	call	0x1290	; 0x1290 <s_write_statusreg>
  s_read_statusreg(&value, &checksum);  
     9f6:	c8 01       	movw	r24, r16
     9f8:	8e 01       	movw	r16, r28
     9fa:	0f 5f       	subi	r16, 0xFF	; 255
     9fc:	1f 4f       	sbci	r17, 0xFF	; 255
     9fe:	b8 01       	movw	r22, r16
     a00:	0e 94 2a 09 	call	0x1254	; 0x1254 <s_read_statusreg>
     a04:	cc 24       	eor	r12, r12
     a06:	fa e3       	ldi	r31, 0x3A	; 58
     a08:	df 2e       	mov	r13, r31
  while(1)
  { 
    therm_read_temperature(&t); //measure temperature from DS18B20	
    error=0;
    error+=s_measure((unsigned char*) &humi_val.i,&checksum,HUMI);  //measure humidity
     a0a:	ea e0       	ldi	r30, 0x0A	; 10
     a0c:	4e 2e       	mov	r4, r30
     a0e:	51 2c       	mov	r5, r1
     a10:	4c 0e       	add	r4, r28
     a12:	5d 1e       	adc	r5, r29
     a14:	48 01       	movw	r8, r16
    error+=s_measure((unsigned char*) &temp_val.i,&checksum,TEMP);  //measure temperature
     a16:	7e e0       	ldi	r23, 0x0E	; 14
     a18:	67 2e       	mov	r6, r23
     a1a:	71 2c       	mov	r7, r1
     a1c:	6c 0e       	add	r6, r28
     a1e:	7d 1e       	adc	r7, r29
	      LCDGotoXY(0,0);
	      LCDstring(lcd_buffer);
	      LCDstring("K ");
        break;       
      }	  
	  sprintf(lcd_buffer,"%3.1f%% ", (double)humi_val.f);
     a20:	64 e2       	ldi	r22, 0x24	; 36
     a22:	e6 2e       	mov	r14, r22
     a24:	f1 2c       	mov	r15, r1
     a26:	ec 0e       	add	r14, r28
     a28:	fd 1e       	adc	r15, r29
	      LCDsendChar(0xdf);
	      LCDstring("C ");
        break; 
        case 1: 
		  t = (9.0/5.0)*t+32.0;
          sprintf(lcd_buffer,"%+3.1f", (double)t);
     a2a:	54 ed       	ldi	r21, 0xD4	; 212
     a2c:	a5 2e       	mov	r10, r21
     a2e:	50 e0       	ldi	r21, 0x00	; 0
     a30:	b5 2e       	mov	r11, r21
	// ‚Ë‚Ó‰ËÏÓ ˜‡Ò
	sprintf(lcd_buffer, "%u%u%c%u%u ", hour/10,hour%10, colon_symbol, min/10,min%10);
    LCDGotoXY(0,1);	  
	LCDstring(lcd_buffer);
	// ‚Ë‚Ó‰ËÏÓ ‰‡ÚÛ
	sprintf(lcd_buffer, "%u%u.%u%u.20%u%u", date/10,date%10, month/10,month%10, year/10,year%10);
     a32:	49 ef       	ldi	r20, 0xF9	; 249
     a34:	24 2e       	mov	r2, r20
     a36:	40 e0       	ldi	r20, 0x00	; 0
     a38:	34 2e       	mov	r3, r20
  //set SHTXX sensor resolution for temperature 12 bit and for humidity 8 bit 
  s_write_statusreg(&value);
  s_read_statusreg(&value, &checksum);  
  while(1)
  { 
    therm_read_temperature(&t); //measure temperature from DS18B20	
     a3a:	ce 01       	movw	r24, r28
     a3c:	42 96       	adiw	r24, 0x12	; 18
     a3e:	0e 94 ba 0b 	call	0x1774	; 0x1774 <therm_read_temperature>
    error=0;
    error+=s_measure((unsigned char*) &humi_val.i,&checksum,HUMI);  //measure humidity
     a42:	c2 01       	movw	r24, r4
     a44:	b4 01       	movw	r22, r8
     a46:	41 e0       	ldi	r20, 0x01	; 1
     a48:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <s_measure>
     a4c:	18 2f       	mov	r17, r24
    error+=s_measure((unsigned char*) &temp_val.i,&checksum,TEMP);  //measure temperature
     a4e:	c3 01       	movw	r24, r6
     a50:	b4 01       	movw	r22, r8
     a52:	40 e0       	ldi	r20, 0x00	; 0
     a54:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <s_measure>
    if (error!=0) 
     a58:	18 0f       	add	r17, r24
     a5a:	19 f0       	breq	.+6      	; 0xa62 <main+0x1a2>
      s_connectionreset(); //in case of an error: connection reset
     a5c:	0e 94 0e 09 	call	0x121c	; 0x121c <s_connectionreset>
     a60:	10 c1       	rjmp	.+544    	; 0xc82 <main+0x3c2>
    else
    { 
      humi_val.f = (float)humi_val.i;    //converts integer to float
     a62:	6a 85       	ldd	r22, Y+10	; 0x0a
     a64:	7b 85       	ldd	r23, Y+11	; 0x0b
     a66:	80 e0       	ldi	r24, 0x00	; 0
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <__floatunsisf>
     a6e:	6a 87       	std	Y+10, r22	; 0x0a
     a70:	7b 87       	std	Y+11, r23	; 0x0b
     a72:	8c 87       	std	Y+12, r24	; 0x0c
     a74:	9d 87       	std	Y+13, r25	; 0x0d
      temp_val.f = (float)temp_val.i;    //converts integer to float
     a76:	6e 85       	ldd	r22, Y+14	; 0x0e
     a78:	7f 85       	ldd	r23, Y+15	; 0x0f
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <__floatunsisf>
     a82:	6e 87       	std	Y+14, r22	; 0x0e
     a84:	7f 87       	std	Y+15, r23	; 0x0f
     a86:	88 8b       	std	Y+16, r24	; 0x10
     a88:	99 8b       	std	Y+17, r25	; 0x11
      calc_sth11(&humi_val.f,&temp_val.f);   //calculate humidity, temperature
     a8a:	c2 01       	movw	r24, r4
     a8c:	b3 01       	movw	r22, r6
     a8e:	0e 94 9d 09 	call	0x133a	; 0x133a <calc_sth11>
      dew_point = calc_dewpoint(humi_val.f,temp_val.f); //calculate dew point      
     a92:	6a 85       	ldd	r22, Y+10	; 0x0a
     a94:	7b 85       	ldd	r23, Y+11	; 0x0b
     a96:	8c 85       	ldd	r24, Y+12	; 0x0c
     a98:	9d 85       	ldd	r25, Y+13	; 0x0d
     a9a:	2e 85       	ldd	r18, Y+14	; 0x0e
     a9c:	3f 85       	ldd	r19, Y+15	; 0x0f
     a9e:	48 89       	ldd	r20, Y+16	; 0x10
     aa0:	59 89       	ldd	r21, Y+17	; 0x11
     aa2:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <calc_dewpoint>
	  // ‚Ë‚Ó‰ËÏÓ ÚÂÏÔÂ‡ÚÛÛ Á ‰‡‚‡˜‡ ÚÂÏÔÂ‡ÚÛË ds18b20 ≥ ‚ÓÎÓ„≥ÒÚ¸ Á ‰‡‚‡˜‡ SHTXX
	  switch (temp_scale)
     aa6:	80 91 2c 04 	lds	r24, 0x042C
     aaa:	90 91 2d 04 	lds	r25, 0x042D
     aae:	81 30       	cpi	r24, 0x01	; 1
     ab0:	91 05       	cpc	r25, r1
     ab2:	d9 f1       	breq	.+118    	; 0xb2a <main+0x26a>
     ab4:	82 30       	cpi	r24, 0x02	; 2
     ab6:	91 05       	cpc	r25, r1
     ab8:	09 f4       	brne	.+2      	; 0xabc <main+0x1fc>
     aba:	7c c0       	rjmp	.+248    	; 0xbb4 <main+0x2f4>
     abc:	89 2b       	or	r24, r25
     abe:	09 f0       	breq	.+2      	; 0xac2 <main+0x202>
     ac0:	b6 c0       	rjmp	.+364    	; 0xc2e <main+0x36e>
      {
        case 0: 
          sprintf(lcd_buffer,"%+3.1f", (double)t);
     ac2:	2d b7       	in	r18, 0x3d	; 61
     ac4:	3e b7       	in	r19, 0x3e	; 62
     ac6:	28 50       	subi	r18, 0x08	; 8
     ac8:	30 40       	sbci	r19, 0x00	; 0
     aca:	0f b6       	in	r0, 0x3f	; 63
     acc:	f8 94       	cli
     ace:	3e bf       	out	0x3e, r19	; 62
     ad0:	0f be       	out	0x3f, r0	; 63
     ad2:	2d bf       	out	0x3d, r18	; 61
     ad4:	ed b7       	in	r30, 0x3d	; 61
     ad6:	fe b7       	in	r31, 0x3e	; 62
     ad8:	31 96       	adiw	r30, 0x01	; 1
     ada:	ad b7       	in	r26, 0x3d	; 61
     adc:	be b7       	in	r27, 0x3e	; 62
     ade:	12 96       	adiw	r26, 0x02	; 2
     ae0:	fc 92       	st	X, r15
     ae2:	ee 92       	st	-X, r14
     ae4:	11 97       	sbiw	r26, 0x01	; 1
     ae6:	b3 82       	std	Z+3, r11	; 0x03
     ae8:	a2 82       	std	Z+2, r10	; 0x02
     aea:	8a 89       	ldd	r24, Y+18	; 0x12
     aec:	9b 89       	ldd	r25, Y+19	; 0x13
     aee:	ac 89       	ldd	r26, Y+20	; 0x14
     af0:	bd 89       	ldd	r27, Y+21	; 0x15
     af2:	84 83       	std	Z+4, r24	; 0x04
     af4:	95 83       	std	Z+5, r25	; 0x05
     af6:	a6 83       	std	Z+6, r26	; 0x06
     af8:	b7 83       	std	Z+7, r27	; 0x07
     afa:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <sprintf>
	      LCDGotoXY(0,0);
     afe:	2d b7       	in	r18, 0x3d	; 61
     b00:	3e b7       	in	r19, 0x3e	; 62
     b02:	28 5f       	subi	r18, 0xF8	; 248
     b04:	3f 4f       	sbci	r19, 0xFF	; 255
     b06:	0f b6       	in	r0, 0x3f	; 63
     b08:	f8 94       	cli
     b0a:	3e bf       	out	0x3e, r19	; 62
     b0c:	0f be       	out	0x3f, r0	; 63
     b0e:	2d bf       	out	0x3d, r18	; 61
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	60 e0       	ldi	r22, 0x00	; 0
     b14:	0e 94 a5 07 	call	0xf4a	; 0xf4a <LCDGotoXY>
	      LCDstring(lcd_buffer);
     b18:	c7 01       	movw	r24, r14
     b1a:	0e 94 89 07 	call	0xf12	; 0xf12 <LCDstring>
	      LCDsendChar(0xdf);
     b1e:	8f ed       	ldi	r24, 0xDF	; 223
     b20:	0e 94 11 07 	call	0xe22	; 0xe22 <LCDsendChar>
	      LCDstring("C ");
     b24:	8b ed       	ldi	r24, 0xDB	; 219
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	80 c0       	rjmp	.+256    	; 0xc2a <main+0x36a>
        break; 
        case 1: 
		  t = (9.0/5.0)*t+32.0;
     b2a:	6a 89       	ldd	r22, Y+18	; 0x12
     b2c:	7b 89       	ldd	r23, Y+19	; 0x13
     b2e:	8c 89       	ldd	r24, Y+20	; 0x14
     b30:	9d 89       	ldd	r25, Y+21	; 0x15
     b32:	26 e6       	ldi	r18, 0x66	; 102
     b34:	36 e6       	ldi	r19, 0x66	; 102
     b36:	46 ee       	ldi	r20, 0xE6	; 230
     b38:	5f e3       	ldi	r21, 0x3F	; 63
     b3a:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <__mulsf3>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	52 e4       	ldi	r21, 0x42	; 66
     b46:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <__addsf3>
     b4a:	9b 01       	movw	r18, r22
     b4c:	ac 01       	movw	r20, r24
     b4e:	2a 8b       	std	Y+18, r18	; 0x12
     b50:	3b 8b       	std	Y+19, r19	; 0x13
     b52:	4c 8b       	std	Y+20, r20	; 0x14
     b54:	5d 8b       	std	Y+21, r21	; 0x15
          sprintf(lcd_buffer,"%+3.1f", (double)t);
     b56:	ad b7       	in	r26, 0x3d	; 61
     b58:	be b7       	in	r27, 0x3e	; 62
     b5a:	18 97       	sbiw	r26, 0x08	; 8
     b5c:	0f b6       	in	r0, 0x3f	; 63
     b5e:	f8 94       	cli
     b60:	be bf       	out	0x3e, r27	; 62
     b62:	0f be       	out	0x3f, r0	; 63
     b64:	ad bf       	out	0x3d, r26	; 61
     b66:	ed b7       	in	r30, 0x3d	; 61
     b68:	fe b7       	in	r31, 0x3e	; 62
     b6a:	31 96       	adiw	r30, 0x01	; 1
     b6c:	12 96       	adiw	r26, 0x02	; 2
     b6e:	fc 92       	st	X, r15
     b70:	ee 92       	st	-X, r14
     b72:	11 97       	sbiw	r26, 0x01	; 1
     b74:	b3 82       	std	Z+3, r11	; 0x03
     b76:	a2 82       	std	Z+2, r10	; 0x02
     b78:	cb 01       	movw	r24, r22
     b7a:	da 01       	movw	r26, r20
     b7c:	84 83       	std	Z+4, r24	; 0x04
     b7e:	95 83       	std	Z+5, r25	; 0x05
     b80:	a6 83       	std	Z+6, r26	; 0x06
     b82:	b7 83       	std	Z+7, r27	; 0x07
     b84:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <sprintf>
	      LCDGotoXY(0,0);
     b88:	2d b7       	in	r18, 0x3d	; 61
     b8a:	3e b7       	in	r19, 0x3e	; 62
     b8c:	28 5f       	subi	r18, 0xF8	; 248
     b8e:	3f 4f       	sbci	r19, 0xFF	; 255
     b90:	0f b6       	in	r0, 0x3f	; 63
     b92:	f8 94       	cli
     b94:	3e bf       	out	0x3e, r19	; 62
     b96:	0f be       	out	0x3f, r0	; 63
     b98:	2d bf       	out	0x3d, r18	; 61
     b9a:	80 e0       	ldi	r24, 0x00	; 0
     b9c:	60 e0       	ldi	r22, 0x00	; 0
     b9e:	0e 94 a5 07 	call	0xf4a	; 0xf4a <LCDGotoXY>
	      LCDstring(lcd_buffer);
     ba2:	c7 01       	movw	r24, r14
     ba4:	0e 94 89 07 	call	0xf12	; 0xf12 <LCDstring>
	      LCDsendChar(0xdf);
     ba8:	8f ed       	ldi	r24, 0xDF	; 223
     baa:	0e 94 11 07 	call	0xe22	; 0xe22 <LCDsendChar>
	      LCDstring("F ");
     bae:	8e ed       	ldi	r24, 0xDE	; 222
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	3b c0       	rjmp	.+118    	; 0xc2a <main+0x36a>
        break;
        case 2:
          t += 274.15;
     bb4:	6a 89       	ldd	r22, Y+18	; 0x12
     bb6:	7b 89       	ldd	r23, Y+19	; 0x13
     bb8:	8c 89       	ldd	r24, Y+20	; 0x14
     bba:	9d 89       	ldd	r25, Y+21	; 0x15
     bbc:	23 e3       	ldi	r18, 0x33	; 51
     bbe:	33 e1       	ldi	r19, 0x13	; 19
     bc0:	49 e8       	ldi	r20, 0x89	; 137
     bc2:	53 e4       	ldi	r21, 0x43	; 67
     bc4:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <__addsf3>
     bc8:	9b 01       	movw	r18, r22
     bca:	ac 01       	movw	r20, r24
     bcc:	2a 8b       	std	Y+18, r18	; 0x12
     bce:	3b 8b       	std	Y+19, r19	; 0x13
     bd0:	4c 8b       	std	Y+20, r20	; 0x14
     bd2:	5d 8b       	std	Y+21, r21	; 0x15
		  sprintf(lcd_buffer,"%+3.1f", (double)t);
     bd4:	ad b7       	in	r26, 0x3d	; 61
     bd6:	be b7       	in	r27, 0x3e	; 62
     bd8:	18 97       	sbiw	r26, 0x08	; 8
     bda:	0f b6       	in	r0, 0x3f	; 63
     bdc:	f8 94       	cli
     bde:	be bf       	out	0x3e, r27	; 62
     be0:	0f be       	out	0x3f, r0	; 63
     be2:	ad bf       	out	0x3d, r26	; 61
     be4:	ed b7       	in	r30, 0x3d	; 61
     be6:	fe b7       	in	r31, 0x3e	; 62
     be8:	31 96       	adiw	r30, 0x01	; 1
     bea:	12 96       	adiw	r26, 0x02	; 2
     bec:	fc 92       	st	X, r15
     bee:	ee 92       	st	-X, r14
     bf0:	11 97       	sbiw	r26, 0x01	; 1
     bf2:	b3 82       	std	Z+3, r11	; 0x03
     bf4:	a2 82       	std	Z+2, r10	; 0x02
     bf6:	cb 01       	movw	r24, r22
     bf8:	da 01       	movw	r26, r20
     bfa:	84 83       	std	Z+4, r24	; 0x04
     bfc:	95 83       	std	Z+5, r25	; 0x05
     bfe:	a6 83       	std	Z+6, r26	; 0x06
     c00:	b7 83       	std	Z+7, r27	; 0x07
     c02:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <sprintf>
	      LCDGotoXY(0,0);
     c06:	2d b7       	in	r18, 0x3d	; 61
     c08:	3e b7       	in	r19, 0x3e	; 62
     c0a:	28 5f       	subi	r18, 0xF8	; 248
     c0c:	3f 4f       	sbci	r19, 0xFF	; 255
     c0e:	0f b6       	in	r0, 0x3f	; 63
     c10:	f8 94       	cli
     c12:	3e bf       	out	0x3e, r19	; 62
     c14:	0f be       	out	0x3f, r0	; 63
     c16:	2d bf       	out	0x3d, r18	; 61
     c18:	80 e0       	ldi	r24, 0x00	; 0
     c1a:	60 e0       	ldi	r22, 0x00	; 0
     c1c:	0e 94 a5 07 	call	0xf4a	; 0xf4a <LCDGotoXY>
	      LCDstring(lcd_buffer);
     c20:	c7 01       	movw	r24, r14
     c22:	0e 94 89 07 	call	0xf12	; 0xf12 <LCDstring>
	      LCDstring("K ");
     c26:	81 ee       	ldi	r24, 0xE1	; 225
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	0e 94 89 07 	call	0xf12	; 0xf12 <LCDstring>
        break;       
      }	  
	  sprintf(lcd_buffer,"%3.1f%% ", (double)humi_val.f);
     c2e:	8d b7       	in	r24, 0x3d	; 61
     c30:	9e b7       	in	r25, 0x3e	; 62
     c32:	08 97       	sbiw	r24, 0x08	; 8
     c34:	0f b6       	in	r0, 0x3f	; 63
     c36:	f8 94       	cli
     c38:	9e bf       	out	0x3e, r25	; 62
     c3a:	0f be       	out	0x3f, r0	; 63
     c3c:	8d bf       	out	0x3d, r24	; 61
     c3e:	ed b7       	in	r30, 0x3d	; 61
     c40:	fe b7       	in	r31, 0x3e	; 62
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	ad b7       	in	r26, 0x3d	; 61
     c46:	be b7       	in	r27, 0x3e	; 62
     c48:	12 96       	adiw	r26, 0x02	; 2
     c4a:	fc 92       	st	X, r15
     c4c:	ee 92       	st	-X, r14
     c4e:	11 97       	sbiw	r26, 0x01	; 1
     c50:	24 ee       	ldi	r18, 0xE4	; 228
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	33 83       	std	Z+3, r19	; 0x03
     c56:	22 83       	std	Z+2, r18	; 0x02
     c58:	8a 85       	ldd	r24, Y+10	; 0x0a
     c5a:	9b 85       	ldd	r25, Y+11	; 0x0b
     c5c:	ac 85       	ldd	r26, Y+12	; 0x0c
     c5e:	bd 85       	ldd	r27, Y+13	; 0x0d
     c60:	84 83       	std	Z+4, r24	; 0x04
     c62:	95 83       	std	Z+5, r25	; 0x05
     c64:	a6 83       	std	Z+6, r26	; 0x06
     c66:	b7 83       	std	Z+7, r27	; 0x07
     c68:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <sprintf>
      LCDstring(lcd_buffer);	  	  
     c6c:	8d b7       	in	r24, 0x3d	; 61
     c6e:	9e b7       	in	r25, 0x3e	; 62
     c70:	08 96       	adiw	r24, 0x08	; 8
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	f8 94       	cli
     c76:	9e bf       	out	0x3e, r25	; 62
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	8d bf       	out	0x3d, r24	; 61
     c7c:	c7 01       	movw	r24, r14
     c7e:	0e 94 89 07 	call	0xf12	; 0xf12 <LCDstring>
    }
	rtc_get_time(&hour, &min, &sec, &wd);
     c82:	ce 01       	movw	r24, r28
     c84:	03 96       	adiw	r24, 0x03	; 3
     c86:	be 01       	movw	r22, r28
     c88:	6c 5f       	subi	r22, 0xFC	; 252
     c8a:	7f 4f       	sbci	r23, 0xFF	; 255
     c8c:	ae 01       	movw	r20, r28
     c8e:	4b 5f       	subi	r20, 0xFB	; 251
     c90:	5f 4f       	sbci	r21, 0xFF	; 255
     c92:	9e 01       	movw	r18, r28
     c94:	2a 5f       	subi	r18, 0xFA	; 250
     c96:	3f 4f       	sbci	r19, 0xFF	; 255
     c98:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <rtc_get_time>
	rtc_get_date(&date, &month, &year);
     c9c:	ce 01       	movw	r24, r28
     c9e:	07 96       	adiw	r24, 0x07	; 7
     ca0:	be 01       	movw	r22, r28
     ca2:	68 5f       	subi	r22, 0xF8	; 248
     ca4:	7f 4f       	sbci	r23, 0xFF	; 255
     ca6:	ae 01       	movw	r20, r28
     ca8:	47 5f       	subi	r20, 0xF7	; 247
     caa:	5f 4f       	sbci	r21, 0xFF	; 255
     cac:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <rtc_get_date>
	LCDstring(weekdays[wd-1]);
     cb0:	ee 81       	ldd	r30, Y+6	; 0x06
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	31 97       	sbiw	r30, 0x01	; 1
     cb6:	ee 0f       	add	r30, r30
     cb8:	ff 1f       	adc	r31, r31
     cba:	e8 0d       	add	r30, r8
     cbc:	f9 1d       	adc	r31, r9
     cbe:	85 89       	ldd	r24, Z+21	; 0x15
     cc0:	96 89       	ldd	r25, Z+22	; 0x16
     cc2:	0e 94 89 07 	call	0xf12	; 0xf12 <LCDstring>
	LCDsendChar(' ');
     cc6:	80 e2       	ldi	r24, 0x20	; 32
     cc8:	0e 94 11 07 	call	0xe22	; 0xe22 <LCDsendChar>
	if (prev_sec != sec)
     ccc:	1d 81       	ldd	r17, Y+5	; 0x05
     cce:	c1 16       	cp	r12, r17
     cd0:	41 f0       	breq	.+16     	; 0xce2 <main+0x422>
	{
	   prev_sec = sec;
	   if (colon_symbol == ':') 
     cd2:	9a e3       	ldi	r25, 0x3A	; 58
     cd4:	d9 16       	cp	r13, r25
     cd6:	19 f0       	breq	.+6      	; 0xcde <main+0x41e>
     cd8:	2a e3       	ldi	r18, 0x3A	; 58
     cda:	d2 2e       	mov	r13, r18
     cdc:	02 c0       	rjmp	.+4      	; 0xce2 <main+0x422>
     cde:	90 e2       	ldi	r25, 0x20	; 32
     ce0:	d9 2e       	mov	r13, r25
	     colon_symbol = ' ';
	   else
	     colon_symbol = ':';
	}
	// ‚Ë‚Ó‰ËÏÓ ˜‡Ò
	sprintf(lcd_buffer, "%u%u%c%u%u ", hour/10,hour%10, colon_symbol, min/10,min%10);
     ce2:	2b 81       	ldd	r18, Y+3	; 0x03
     ce4:	3c 81       	ldd	r19, Y+4	; 0x04
     ce6:	ad b7       	in	r26, 0x3d	; 61
     ce8:	be b7       	in	r27, 0x3e	; 62
     cea:	1e 97       	sbiw	r26, 0x0e	; 14
     cec:	0f b6       	in	r0, 0x3f	; 63
     cee:	f8 94       	cli
     cf0:	be bf       	out	0x3e, r27	; 62
     cf2:	0f be       	out	0x3f, r0	; 63
     cf4:	ad bf       	out	0x3d, r26	; 61
     cf6:	ed b7       	in	r30, 0x3d	; 61
     cf8:	fe b7       	in	r31, 0x3e	; 62
     cfa:	31 96       	adiw	r30, 0x01	; 1
     cfc:	12 96       	adiw	r26, 0x02	; 2
     cfe:	fc 92       	st	X, r15
     d00:	ee 92       	st	-X, r14
     d02:	11 97       	sbiw	r26, 0x01	; 1
     d04:	8d ee       	ldi	r24, 0xED	; 237
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	93 83       	std	Z+3, r25	; 0x03
     d0a:	82 83       	std	Z+2, r24	; 0x02
     d0c:	82 2f       	mov	r24, r18
     d0e:	6a e0       	ldi	r22, 0x0A	; 10
     d10:	0e 94 77 15 	call	0x2aee	; 0x2aee <__udivmodqi4>
     d14:	84 83       	std	Z+4, r24	; 0x04
     d16:	15 82       	std	Z+5, r1	; 0x05
     d18:	82 2f       	mov	r24, r18
     d1a:	0e 94 77 15 	call	0x2aee	; 0x2aee <__udivmodqi4>
     d1e:	96 83       	std	Z+6, r25	; 0x06
     d20:	17 82       	std	Z+7, r1	; 0x07
     d22:	d0 86       	std	Z+8, r13	; 0x08
     d24:	11 86       	std	Z+9, r1	; 0x09
     d26:	83 2f       	mov	r24, r19
     d28:	0e 94 77 15 	call	0x2aee	; 0x2aee <__udivmodqi4>
     d2c:	82 87       	std	Z+10, r24	; 0x0a
     d2e:	13 86       	std	Z+11, r1	; 0x0b
     d30:	83 2f       	mov	r24, r19
     d32:	0e 94 77 15 	call	0x2aee	; 0x2aee <__udivmodqi4>
     d36:	94 87       	std	Z+12, r25	; 0x0c
     d38:	15 86       	std	Z+13, r1	; 0x0d
     d3a:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <sprintf>
    LCDGotoXY(0,1);	  
     d3e:	ad b7       	in	r26, 0x3d	; 61
     d40:	be b7       	in	r27, 0x3e	; 62
     d42:	1e 96       	adiw	r26, 0x0e	; 14
     d44:	0f b6       	in	r0, 0x3f	; 63
     d46:	f8 94       	cli
     d48:	be bf       	out	0x3e, r27	; 62
     d4a:	0f be       	out	0x3f, r0	; 63
     d4c:	ad bf       	out	0x3d, r26	; 61
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	61 e0       	ldi	r22, 0x01	; 1
     d52:	0e 94 a5 07 	call	0xf4a	; 0xf4a <LCDGotoXY>
	LCDstring(lcd_buffer);
     d56:	c7 01       	movw	r24, r14
     d58:	0e 94 89 07 	call	0xf12	; 0xf12 <LCDstring>
	// ‚Ë‚Ó‰ËÏÓ ‰‡ÚÛ
	sprintf(lcd_buffer, "%u%u.%u%u.20%u%u", date/10,date%10, month/10,month%10, year/10,year%10);
     d5c:	2f 81       	ldd	r18, Y+7	; 0x07
     d5e:	38 85       	ldd	r19, Y+8	; 0x08
     d60:	49 85       	ldd	r20, Y+9	; 0x09
     d62:	8d b7       	in	r24, 0x3d	; 61
     d64:	9e b7       	in	r25, 0x3e	; 62
     d66:	40 97       	sbiw	r24, 0x10	; 16
     d68:	0f b6       	in	r0, 0x3f	; 63
     d6a:	f8 94       	cli
     d6c:	9e bf       	out	0x3e, r25	; 62
     d6e:	0f be       	out	0x3f, r0	; 63
     d70:	8d bf       	out	0x3d, r24	; 61
     d72:	ed b7       	in	r30, 0x3d	; 61
     d74:	fe b7       	in	r31, 0x3e	; 62
     d76:	31 96       	adiw	r30, 0x01	; 1
     d78:	ad b7       	in	r26, 0x3d	; 61
     d7a:	be b7       	in	r27, 0x3e	; 62
     d7c:	12 96       	adiw	r26, 0x02	; 2
     d7e:	fc 92       	st	X, r15
     d80:	ee 92       	st	-X, r14
     d82:	11 97       	sbiw	r26, 0x01	; 1
     d84:	33 82       	std	Z+3, r3	; 0x03
     d86:	22 82       	std	Z+2, r2	; 0x02
     d88:	82 2f       	mov	r24, r18
     d8a:	6a e0       	ldi	r22, 0x0A	; 10
     d8c:	0e 94 77 15 	call	0x2aee	; 0x2aee <__udivmodqi4>
     d90:	84 83       	std	Z+4, r24	; 0x04
     d92:	15 82       	std	Z+5, r1	; 0x05
     d94:	82 2f       	mov	r24, r18
     d96:	0e 94 77 15 	call	0x2aee	; 0x2aee <__udivmodqi4>
     d9a:	96 83       	std	Z+6, r25	; 0x06
     d9c:	17 82       	std	Z+7, r1	; 0x07
     d9e:	83 2f       	mov	r24, r19
     da0:	0e 94 77 15 	call	0x2aee	; 0x2aee <__udivmodqi4>
     da4:	80 87       	std	Z+8, r24	; 0x08
     da6:	11 86       	std	Z+9, r1	; 0x09
     da8:	83 2f       	mov	r24, r19
     daa:	0e 94 77 15 	call	0x2aee	; 0x2aee <__udivmodqi4>
     dae:	92 87       	std	Z+10, r25	; 0x0a
     db0:	13 86       	std	Z+11, r1	; 0x0b
     db2:	84 2f       	mov	r24, r20
     db4:	0e 94 77 15 	call	0x2aee	; 0x2aee <__udivmodqi4>
     db8:	84 87       	std	Z+12, r24	; 0x0c
     dba:	15 86       	std	Z+13, r1	; 0x0d
     dbc:	84 2f       	mov	r24, r20
     dbe:	0e 94 77 15 	call	0x2aee	; 0x2aee <__udivmodqi4>
     dc2:	96 87       	std	Z+14, r25	; 0x0e
     dc4:	17 86       	std	Z+15, r1	; 0x0f
     dc6:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <sprintf>
    LCDstring(lcd_buffer);        
     dca:	2d b7       	in	r18, 0x3d	; 61
     dcc:	3e b7       	in	r19, 0x3e	; 62
     dce:	20 5f       	subi	r18, 0xF0	; 240
     dd0:	3f 4f       	sbci	r19, 0xFF	; 255
     dd2:	0f b6       	in	r0, 0x3f	; 63
     dd4:	f8 94       	cli
     dd6:	3e bf       	out	0x3e, r19	; 62
     dd8:	0f be       	out	0x3f, r0	; 63
     dda:	2d bf       	out	0x3d, r18	; 61
     ddc:	c7 01       	movw	r24, r14
     dde:	0e 94 89 07 	call	0xf12	; 0xf12 <LCDstring>
	
	if (GetButtonStatus(MENU_ENTER_BTN)) //enter
     de2:	b0 99       	sbic	0x16, 0	; 22
     de4:	08 c0       	rjmp	.+16     	; 0xdf6 <main+0x536>
    {  
      if (!GetPrevButtonStatus(MENU_ENTER_BTN))
     de6:	80 91 0a 01 	lds	r24, 0x010A
     dea:	80 ff       	sbrs	r24, 0
     dec:	04 c0       	rjmp	.+8      	; 0xdf6 <main+0x536>
      {
        LCDclr();        
     dee:	0e 94 81 07 	call	0xf02	; 0xf02 <LCDclr>
        MainMenu(); 
     df2:	0e 94 cd 03 	call	0x79a	; 0x79a <MainMenu>
     df6:	88 eb       	ldi	r24, 0xB8	; 184
     df8:	9b e0       	ldi	r25, 0x0B	; 11
     dfa:	e8 ec       	ldi	r30, 0xC8	; 200
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	31 97       	sbiw	r30, 0x01	; 1
     e00:	f1 f7       	brne	.-4      	; 0xdfe <main+0x53e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e02:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e04:	d1 f7       	brne	.-12     	; 0xdfa <main+0x53a>
     e06:	c1 2e       	mov	r12, r17
     e08:	18 ce       	rjmp	.-976    	; 0xa3a <main+0x17a>

00000e0a <LCDstrLen>:
		__ticks = (uint16_t)__tmp;
	_delay_loop_2(__ticks);
}
*/
uint8_t LCDstrLen(char *s)
{
     e0a:	ac 01       	movw	r20, r24
     e0c:	20 e0       	ldi	r18, 0x00	; 0
     e0e:	01 c0       	rjmp	.+2      	; 0xe12 <LCDstrLen+0x8>
	uint8_t i=0;
	while (s[i]!='\0') i++;
     e10:	2f 5f       	subi	r18, 0xFF	; 255
     e12:	fa 01       	movw	r30, r20
     e14:	e2 0f       	add	r30, r18
     e16:	f1 1d       	adc	r31, r1
     e18:	80 81       	ld	r24, Z
     e1a:	88 23       	and	r24, r24
     e1c:	c9 f7       	brne	.-14     	; 0xe10 <LCDstrLen+0x6>
	return i;
}
     e1e:	82 2f       	mov	r24, r18
     e20:	08 95       	ret

00000e22 <LCDsendChar>:

void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{
	//ch=(ch&0b00001111);
	//ch=~ch;
	LDP=(ch&0b11110000);
     e22:	28 2f       	mov	r18, r24
     e24:	20 7f       	andi	r18, 0xF0	; 240
     e26:	2b bb       	out	0x1b, r18	; 27
	LCP|=1<<LCD_RS;
     e28:	d8 9a       	sbi	0x1b, 0	; 27
	LCP|=1<<LCD_E;		
     e2a:	da 9a       	sbi	0x1b, 2	; 27
     e2c:	20 ed       	ldi	r18, 0xD0	; 208
     e2e:	37 e0       	ldi	r19, 0x07	; 7
     e30:	f9 01       	movw	r30, r18
     e32:	31 97       	sbiw	r30, 0x01	; 1
     e34:	f1 f7       	brne	.-4      	; 0xe32 <LCDsendChar+0x10>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     e36:	da 98       	cbi	0x1b, 2	; 27
	LCP&=~(1<<LCD_RS);
     e38:	d8 98       	cbi	0x1b, 0	; 27
     e3a:	f9 01       	movw	r30, r18
     e3c:	31 97       	sbiw	r30, 0x01	; 1
     e3e:	f1 f7       	brne	.-4      	; 0xe3c <LCDsendChar+0x1a>
	_delay_ms(1);
	LDP=((ch&0b00001111)<<4);
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	44 e0       	ldi	r20, 0x04	; 4
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	4a 95       	dec	r20
     e4a:	e1 f7       	brne	.-8      	; 0xe44 <LCDsendChar+0x22>
     e4c:	8b bb       	out	0x1b, r24	; 27
	LCP|=1<<LCD_RS;
     e4e:	d8 9a       	sbi	0x1b, 0	; 27
	LCP|=1<<LCD_E;		
     e50:	da 9a       	sbi	0x1b, 2	; 27
     e52:	c9 01       	movw	r24, r18
     e54:	01 97       	sbiw	r24, 0x01	; 1
     e56:	f1 f7       	brne	.-4      	; 0xe54 <LCDsendChar+0x32>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);	
     e58:	da 98       	cbi	0x1b, 2	; 27
	LCP&=~(1<<LCD_RS);
     e5a:	d8 98       	cbi	0x1b, 0	; 27
     e5c:	c9 01       	movw	r24, r18
     e5e:	01 97       	sbiw	r24, 0x01	; 1
     e60:	f1 f7       	brne	.-4      	; 0xe5e <LCDsendChar+0x3c>
	_delay_ms(1);
}
     e62:	08 95       	ret

00000e64 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
	LDP=(cmd&0b11110000);
     e64:	28 2f       	mov	r18, r24
     e66:	20 7f       	andi	r18, 0xF0	; 240
     e68:	2b bb       	out	0x1b, r18	; 27
	LCP|=1<<LCD_E;		
     e6a:	da 9a       	sbi	0x1b, 2	; 27
     e6c:	20 ed       	ldi	r18, 0xD0	; 208
     e6e:	37 e0       	ldi	r19, 0x07	; 7
     e70:	f9 01       	movw	r30, r18
     e72:	31 97       	sbiw	r30, 0x01	; 1
     e74:	f1 f7       	brne	.-4      	; 0xe72 <LCDsendCommand+0xe>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     e76:	da 98       	cbi	0x1b, 2	; 27
     e78:	f9 01       	movw	r30, r18
     e7a:	31 97       	sbiw	r30, 0x01	; 1
     e7c:	f1 f7       	brne	.-4      	; 0xe7a <LCDsendCommand+0x16>
	_delay_ms(1);
	LDP=((cmd&0b00001111)<<4);	
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	54 e0       	ldi	r21, 0x04	; 4
     e82:	88 0f       	add	r24, r24
     e84:	99 1f       	adc	r25, r25
     e86:	5a 95       	dec	r21
     e88:	e1 f7       	brne	.-8      	; 0xe82 <LCDsendCommand+0x1e>
     e8a:	8b bb       	out	0x1b, r24	; 27
	LCP|=1<<LCD_E;		
     e8c:	da 9a       	sbi	0x1b, 2	; 27
     e8e:	c9 01       	movw	r24, r18
     e90:	01 97       	sbiw	r24, 0x01	; 1
     e92:	f1 f7       	brne	.-4      	; 0xe90 <LCDsendCommand+0x2c>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     e94:	da 98       	cbi	0x1b, 2	; 27
     e96:	c9 01       	movw	r24, r18
     e98:	01 97       	sbiw	r24, 0x01	; 1
     e9a:	f1 f7       	brne	.-4      	; 0xe98 <LCDsendCommand+0x34>
	_delay_ms(1);
}
     e9c:	08 95       	ret

00000e9e <LCDinit>:
     e9e:	80 e3       	ldi	r24, 0x30	; 48
     ea0:	95 e7       	ldi	r25, 0x75	; 117
     ea2:	01 97       	sbiw	r24, 0x01	; 1
     ea4:	f1 f7       	brne	.-4      	; 0xea2 <LCDinit+0x4>
void LCDinit(void)//Initializes LCD
{
	_delay_ms(15);
	LDP=0x00;
     ea6:	1b ba       	out	0x1b, r1	; 27
	LCP=0x00;
     ea8:	1b ba       	out	0x1b, r1	; 27
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     eaa:	8a b3       	in	r24, 0x1a	; 26
     eac:	80 6f       	ori	r24, 0xF0	; 240
     eae:	8a bb       	out	0x1a, r24	; 26
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     eb0:	8a b3       	in	r24, 0x1a	; 26
     eb2:	87 60       	ori	r24, 0x07	; 7
     eb4:	8a bb       	out	0x1a, r24	; 26
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     eb6:	80 e3       	ldi	r24, 0x30	; 48
     eb8:	8b bb       	out	0x1b, r24	; 27
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     eba:	da 9a       	sbi	0x1b, 2	; 27
     ebc:	20 ed       	ldi	r18, 0xD0	; 208
     ebe:	37 e0       	ldi	r19, 0x07	; 7
     ec0:	f9 01       	movw	r30, r18
     ec2:	31 97       	sbiw	r30, 0x01	; 1
     ec4:	f1 f7       	brne	.-4      	; 0xec2 <LCDinit+0x24>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     ec6:	da 98       	cbi	0x1b, 2	; 27
     ec8:	f9 01       	movw	r30, r18
     eca:	31 97       	sbiw	r30, 0x01	; 1
     ecc:	f1 f7       	brne	.-4      	; 0xeca <LCDinit+0x2c>
	_delay_ms(1);
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     ece:	8b bb       	out	0x1b, r24	; 27
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     ed0:	da 9a       	sbi	0x1b, 2	; 27
     ed2:	c9 01       	movw	r24, r18
     ed4:	01 97       	sbiw	r24, 0x01	; 1
     ed6:	f1 f7       	brne	.-4      	; 0xed4 <LCDinit+0x36>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     ed8:	da 98       	cbi	0x1b, 2	; 27
     eda:	c9 01       	movw	r24, r18
     edc:	01 97       	sbiw	r24, 0x01	; 1
     ede:	f1 f7       	brne	.-4      	; 0xedc <LCDinit+0x3e>
	_delay_ms(1);
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
     ee0:	80 e2       	ldi	r24, 0x20	; 32
     ee2:	8b bb       	out	0x1b, r24	; 27
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     ee4:	da 9a       	sbi	0x1b, 2	; 27
     ee6:	c9 01       	movw	r24, r18
     ee8:	01 97       	sbiw	r24, 0x01	; 1
     eea:	f1 f7       	brne	.-4      	; 0xee8 <LCDinit+0x4a>
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
     eec:	da 98       	cbi	0x1b, 2	; 27
     eee:	c9 01       	movw	r24, r18
     ef0:	01 97       	sbiw	r24, 0x01	; 1
     ef2:	f1 f7       	brne	.-4      	; 0xef0 <LCDinit+0x52>
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
     ef4:	88 e2       	ldi	r24, 0x28	; 40
     ef6:	0e 94 32 07 	call	0xe64	; 0xe64 <LCDsendCommand>
   //-----increment address, cursor shift------
	LCDsendCommand(0b00001110);
     efa:	8e e0       	ldi	r24, 0x0E	; 14
     efc:	0e 94 32 07 	call	0xe64	; 0xe64 <LCDsendCommand>


}			
     f00:	08 95       	ret

00000f02 <LCDclr>:
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	0e 94 32 07 	call	0xe64	; 0xe64 <LCDsendCommand>
}
     f08:	08 95       	ret

00000f0a <LCDhome>:
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
     f0a:	82 e0       	ldi	r24, 0x02	; 2
     f0c:	0e 94 32 07 	call	0xe64	; 0xe64 <LCDsendCommand>
}
     f10:	08 95       	ret

00000f12 <LCDstring>:
	}	
	while(i++<33) LCDsendChar(' ');
}*/

void LCDstring(char* data)	//Outputs string to LCD
{
     f12:	1f 93       	push	r17
     f14:	cf 93       	push	r28
     f16:	df 93       	push	r29
     f18:	ec 01       	movw	r28, r24
	register uint8_t i=0;//, j=0; 
//	uint8_t nline=0;
	
	// check to make sure we have a good pointer
	if (!data) return;
     f1a:	00 97       	sbiw	r24, 0x00	; 0
     f1c:	91 f0       	breq	.+36     	; 0xf42 <LCDstring+0x30>
     f1e:	10 e0       	ldi	r17, 0x00	; 0
     f20:	0a c0       	rjmp	.+20     	; 0xf36 <LCDstring+0x24>
			
			
			//LCDsendChar(data[i]);
		//}
		
		if (data[i] < 0xC0)
     f22:	80 3c       	cpi	r24, 0xC0	; 192
     f24:	28 f0       	brcs	.+10     	; 0xf30 <LCDstring+0x1e>
        {
          LCDsendChar(data[i]);
        }
        else
        {
          LCDsendChar(ANSI1251_CO_FF[(unsigned char)(data[i])-0xC0]);
     f26:	e8 2f       	mov	r30, r24
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	e0 5f       	subi	r30, 0xF0	; 240
     f2c:	fc 4f       	sbci	r31, 0xFC	; 252
     f2e:	80 81       	ld	r24, Z
     f30:	0e 94 11 07 	call	0xe22	; 0xe22 <LCDsendChar>
        }
		
		i++;
     f34:	1f 5f       	subi	r17, 0xFF	; 255
	
	// check to make sure we have a good pointer
	if (!data) return;
	
	// print data
	while (data[i] != '\0') 
     f36:	fe 01       	movw	r30, r28
     f38:	e1 0f       	add	r30, r17
     f3a:	f1 1d       	adc	r31, r1
     f3c:	80 81       	ld	r24, Z
     f3e:	88 23       	and	r24, r24
     f40:	81 f7       	brne	.-32     	; 0xf22 <LCDstring+0x10>
          LCDsendChar(ANSI1251_CO_FF[(unsigned char)(data[i])-0xC0]);
        }
		
		i++;
    }	
}
     f42:	df 91       	pop	r29
     f44:	cf 91       	pop	r28
     f46:	1f 91       	pop	r17
     f48:	08 95       	ret

00000f4a <LCDGotoXY>:

void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
     f4a:	62 30       	cpi	r22, 0x02	; 2
     f4c:	31 f0       	breq	.+12     	; 0xf5a <LCDGotoXY+0x10>
     f4e:	63 30       	cpi	r22, 0x03	; 3
     f50:	31 f0       	breq	.+12     	; 0xf5e <LCDGotoXY+0x14>
     f52:	61 30       	cpi	r22, 0x01	; 1
     f54:	29 f4       	brne	.+10     	; 0xf60 <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     f56:	80 5c       	subi	r24, 0xC0	; 192
     f58:	03 c0       	rjmp	.+6      	; 0xf60 <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     f5a:	8c 5e       	subi	r24, 0xEC	; 236
     f5c:	01 c0       	rjmp	.+2      	; 0xf60 <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     f5e:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
     f60:	80 68       	ori	r24, 0x80	; 128
     f62:	0e 94 32 07 	call	0xe64	; 0xe64 <LCDsendCommand>
	
}
     f66:	08 95       	ret

00000f68 <CopyStringtoLCD>:
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
     f68:	1f 93       	push	r17
     f6a:	cf 93       	push	r28
     f6c:	df 93       	push	r29
     f6e:	ec 01       	movw	r28, r24
     f70:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
     f72:	64 2f       	mov	r22, r20
     f74:	0e 94 a5 07 	call	0xf4a	; 0xf4a <LCDGotoXY>
     f78:	10 e0       	ldi	r17, 0x00	; 0
     f7a:	03 c0       	rjmp	.+6      	; 0xf82 <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
     f7c:	0e 94 11 07 	call	0xe22	; 0xe22 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     f80:	1f 5f       	subi	r17, 0xFF	; 255
     f82:	fe 01       	movw	r30, r28
     f84:	e1 0f       	add	r30, r17
     f86:	f1 1d       	adc	r31, r1
     f88:	84 91       	lpm	r24, Z+
     f8a:	88 23       	and	r24, r24
     f8c:	b9 f7       	brne	.-18     	; 0xf7c <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
     f8e:	df 91       	pop	r29
     f90:	cf 91       	pop	r28
     f92:	1f 91       	pop	r17
     f94:	08 95       	ret

00000f96 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     f96:	ef 92       	push	r14
     f98:	ff 92       	push	r15
     f9a:	0f 93       	push	r16
     f9c:	1f 93       	push	r17
     f9e:	cf 93       	push	r28
     fa0:	df 93       	push	r29
     fa2:	7c 01       	movw	r14, r24
     fa4:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
     fa6:	11 0f       	add	r17, r17
     fa8:	11 0f       	add	r17, r17
     faa:	11 0f       	add	r17, r17
     fac:	10 64       	ori	r17, 0x40	; 64
     fae:	c0 e0       	ldi	r28, 0x00	; 0
     fb0:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
     fb2:	f7 01       	movw	r30, r14
     fb4:	ec 0f       	add	r30, r28
     fb6:	fd 1f       	adc	r31, r29
     fb8:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
     fba:	81 2f       	mov	r24, r17
     fbc:	8c 0f       	add	r24, r28
     fbe:	0e 94 32 07 	call	0xe64	; 0xe64 <LCDsendCommand>
		LCDsendChar(pcc);
     fc2:	80 2f       	mov	r24, r16
     fc4:	0e 94 11 07 	call	0xe22	; 0xe22 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
     fc8:	21 96       	adiw	r28, 0x01	; 1
     fca:	c8 30       	cpi	r28, 0x08	; 8
     fcc:	d1 05       	cpc	r29, r1
     fce:	89 f7       	brne	.-30     	; 0xfb2 <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
     fd0:	df 91       	pop	r29
     fd2:	cf 91       	pop	r28
     fd4:	1f 91       	pop	r17
     fd6:	0f 91       	pop	r16
     fd8:	ff 90       	pop	r15
     fda:	ef 90       	pop	r14
     fdc:	08 95       	ret

00000fde <LCDshiftLeft>:

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
     fde:	0f 93       	push	r16
     fe0:	1f 93       	push	r17
     fe2:	08 2f       	mov	r16, r24
     fe4:	10 e0       	ldi	r17, 0x00	; 0
     fe6:	04 c0       	rjmp	.+8      	; 0xff0 <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
     fe8:	8e e1       	ldi	r24, 0x1E	; 30
     fea:	0e 94 32 07 	call	0xe64	; 0xe64 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
     fee:	1f 5f       	subi	r17, 0xFF	; 255
     ff0:	10 17       	cp	r17, r16
     ff2:	d0 f3       	brcs	.-12     	; 0xfe8 <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
     ff4:	1f 91       	pop	r17
     ff6:	0f 91       	pop	r16
     ff8:	08 95       	ret

00000ffa <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
     ffa:	0f 93       	push	r16
     ffc:	1f 93       	push	r17
     ffe:	08 2f       	mov	r16, r24
    1000:	10 e0       	ldi	r17, 0x00	; 0
    1002:	04 c0       	rjmp	.+8      	; 0x100c <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
    1004:	88 e1       	ldi	r24, 0x18	; 24
    1006:	0e 94 32 07 	call	0xe64	; 0xe64 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
    100a:	1f 5f       	subi	r17, 0xFF	; 255
    100c:	10 17       	cp	r17, r16
    100e:	d0 f3       	brcs	.-12     	; 0x1004 <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
    1010:	1f 91       	pop	r17
    1012:	0f 91       	pop	r16
    1014:	08 95       	ret

00001016 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
    1016:	8e e0       	ldi	r24, 0x0E	; 14
    1018:	0e 94 32 07 	call	0xe64	; 0xe64 <LCDsendCommand>
}
    101c:	08 95       	ret

0000101e <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
    101e:	8f e0       	ldi	r24, 0x0F	; 15
    1020:	0e 94 32 07 	call	0xe64	; 0xe64 <LCDsendCommand>
}
    1024:	08 95       	ret

00001026 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
    1026:	8c e0       	ldi	r24, 0x0C	; 12
    1028:	0e 94 32 07 	call	0xe64	; 0xe64 <LCDsendCommand>
}
    102c:	08 95       	ret

0000102e <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
    102e:	88 e0       	ldi	r24, 0x08	; 8
    1030:	0e 94 32 07 	call	0xe64	; 0xe64 <LCDsendCommand>
}
    1034:	08 95       	ret

00001036 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
    1036:	8c e0       	ldi	r24, 0x0C	; 12
    1038:	0e 94 32 07 	call	0xe64	; 0xe64 <LCDsendCommand>
}
    103c:	08 95       	ret

0000103e <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
    103e:	0f 93       	push	r16
    1040:	1f 93       	push	r17
    1042:	08 2f       	mov	r16, r24
    1044:	10 e0       	ldi	r17, 0x00	; 0
    1046:	04 c0       	rjmp	.+8      	; 0x1050 <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
    1048:	80 e1       	ldi	r24, 0x10	; 16
    104a:	0e 94 32 07 	call	0xe64	; 0xe64 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    104e:	1f 5f       	subi	r17, 0xFF	; 255
    1050:	10 17       	cp	r17, r16
    1052:	d0 f3       	brcs	.-12     	; 0x1048 <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
    1054:	1f 91       	pop	r17
    1056:	0f 91       	pop	r16
    1058:	08 95       	ret

0000105a <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
    105a:	0f 93       	push	r16
    105c:	1f 93       	push	r17
    105e:	08 2f       	mov	r16, r24
    1060:	10 e0       	ldi	r17, 0x00	; 0
    1062:	04 c0       	rjmp	.+8      	; 0x106c <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
    1064:	84 e1       	ldi	r24, 0x14	; 20
    1066:	0e 94 32 07 	call	0xe64	; 0xe64 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
    106a:	1f 5f       	subi	r17, 0xFF	; 255
    106c:	10 17       	cp	r17, r16
    106e:	d0 f3       	brcs	.-12     	; 0x1064 <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
    1070:	1f 91       	pop	r17
    1072:	0f 91       	pop	r16
    1074:	08 95       	ret

00001076 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
    1076:	ef 92       	push	r14
    1078:	ff 92       	push	r15
    107a:	0f 93       	push	r16
    107c:	1f 93       	push	r17
    107e:	df 93       	push	r29
    1080:	cf 93       	push	r28
    1082:	00 d0       	rcall	.+0      	; 0x1084 <LCDWriteInt+0xe>
    1084:	00 d0       	rcall	.+0      	; 0x1086 <LCDWriteInt+0x10>
    1086:	0f 92       	push	r0
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
    108c:	9c 01       	movw	r18, r24
    108e:	8b 01       	movw	r16, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
    1090:	fe 01       	movw	r30, r28
    1092:	31 96       	adiw	r30, 0x01	; 1
    1094:	85 e0       	ldi	r24, 0x05	; 5
    1096:	df 01       	movw	r26, r30
    1098:	1d 92       	st	X+, r1
    109a:	8a 95       	dec	r24
    109c:	e9 f7       	brne	.-6      	; 0x1098 <LCDWriteInt+0x22>
    109e:	fe 01       	movw	r30, r28
    10a0:	35 96       	adiw	r30, 0x05	; 5
    10a2:	0d c0       	rjmp	.+26     	; 0x10be <LCDWriteInt+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
    10a4:	c9 01       	movw	r24, r18
    10a6:	6a e0       	ldi	r22, 0x0A	; 10
    10a8:	70 e0       	ldi	r23, 0x00	; 0
    10aa:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__divmodhi4>
    10ae:	80 83       	st	Z, r24
	val=val/10;
    10b0:	c9 01       	movw	r24, r18
    10b2:	6a e0       	ldi	r22, 0x0A	; 10
    10b4:	70 e0       	ldi	r23, 0x00	; 0
    10b6:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__divmodhi4>
    10ba:	9b 01       	movw	r18, r22
    10bc:	31 97       	sbiw	r30, 0x01	; 1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
    10be:	21 15       	cp	r18, r1
    10c0:	31 05       	cpc	r19, r1
    10c2:	81 f7       	brne	.-32     	; 0x10a4 <LCDWriteInt+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
    10c4:	bf ef       	ldi	r27, 0xFF	; 255
    10c6:	0f 3f       	cpi	r16, 0xFF	; 255
    10c8:	1b 07       	cpc	r17, r27
    10ca:	79 f4       	brne	.+30     	; 0x10ea <LCDWriteInt+0x74>
    10cc:	20 e0       	ldi	r18, 0x00	; 0
    10ce:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
    10d0:	ae 01       	movw	r20, r28
    10d2:	4f 5f       	subi	r20, 0xFF	; 255
    10d4:	5f 4f       	sbci	r21, 0xFF	; 255
    10d6:	02 c0       	rjmp	.+4      	; 0x10dc <LCDWriteInt+0x66>
    10d8:	2f 5f       	subi	r18, 0xFF	; 255
    10da:	3f 4f       	sbci	r19, 0xFF	; 255
    10dc:	fa 01       	movw	r30, r20
    10de:	e2 0f       	add	r30, r18
    10e0:	f3 1f       	adc	r31, r19
    10e2:	80 81       	ld	r24, Z
    10e4:	88 23       	and	r24, r24
    10e6:	c1 f3       	breq	.-16     	; 0x10d8 <LCDWriteInt+0x62>
    10e8:	04 c0       	rjmp	.+8      	; 0x10f2 <LCDWriteInt+0x7c>
	else
		j=5-field_length;
    10ea:	25 e0       	ldi	r18, 0x05	; 5
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	20 1b       	sub	r18, r16
    10f0:	31 0b       	sbc	r19, r17
    10f2:	7e 01       	movw	r14, r28
    10f4:	08 94       	sec
    10f6:	e1 1c       	adc	r14, r1
    10f8:	f1 1c       	adc	r15, r1
    10fa:	e2 0e       	add	r14, r18
    10fc:	f3 1e       	adc	r15, r19
    10fe:	89 01       	movw	r16, r18
    1100:	08 c0       	rjmp	.+16     	; 0x1112 <LCDWriteInt+0x9c>

	if(val<0) LCDsendChar('-');
	for(i=j;i<5;i++)
	{
	  LCDsendChar(48+str[i]);
    1102:	f7 01       	movw	r30, r14
    1104:	81 91       	ld	r24, Z+
    1106:	7f 01       	movw	r14, r30
    1108:	80 5d       	subi	r24, 0xD0	; 208
    110a:	0e 94 11 07 	call	0xe22	; 0xe22 <LCDsendChar>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDsendChar('-');
	for(i=j;i<5;i++)
    110e:	0f 5f       	subi	r16, 0xFF	; 255
    1110:	1f 4f       	sbci	r17, 0xFF	; 255
    1112:	05 30       	cpi	r16, 0x05	; 5
    1114:	11 05       	cpc	r17, r1
    1116:	ac f3       	brlt	.-22     	; 0x1102 <LCDWriteInt+0x8c>
	{
	  LCDsendChar(48+str[i]);
	}
}
    1118:	0f 90       	pop	r0
    111a:	0f 90       	pop	r0
    111c:	0f 90       	pop	r0
    111e:	0f 90       	pop	r0
    1120:	0f 90       	pop	r0
    1122:	cf 91       	pop	r28
    1124:	df 91       	pop	r29
    1126:	1f 91       	pop	r17
    1128:	0f 91       	pop	r16
    112a:	ff 90       	pop	r15
    112c:	ef 90       	pop	r14
    112e:	08 95       	ret

00001130 <sht_init>:
const float T1=+0.01;             // for 12 Bit @ 5V
const float T2=+0.00128;          // for 12 Bit @ 5V

void sht_init(void)
{
  SHT_PORT=0x00;
    1130:	15 ba       	out	0x15, r1	; 21
  SHT_DDR=1<<SHT_SCK;    
    1132:	84 e0       	ldi	r24, 0x04	; 4
    1134:	84 bb       	out	0x14, r24	; 20
}  
    1136:	08 95       	ret

00001138 <s_write_byte>:

//----------------------------------------------------------------------------------
char s_write_byte(unsigned char value)
//----------------------------------------------------------------------------------
// writes a byte on the Sensibus and checks the acknowledge 
{ 
    1138:	58 2f       	mov	r21, r24
  unsigned char i,error=0;  
  SHT_OUTPUT_MODE();    
    113a:	a3 9a       	sbi	0x14, 3	; 20
    113c:	90 e8       	ldi	r25, 0x80	; 128
    113e:	20 e0       	ldi	r18, 0x00	; 0
    1140:	30 e0       	ldi	r19, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1142:	72 e0       	ldi	r23, 0x02	; 2
  for (i=0x80;i>0;i/=2)             //shift bit for masking
  { 
    if (i & value) SHT_DATA_HIGH(); //masking value with i , write to SENSI-BUS
    1144:	6d e0       	ldi	r22, 0x0D	; 13
    1146:	89 2f       	mov	r24, r25
    1148:	85 23       	and	r24, r21
    114a:	11 f0       	breq	.+4      	; 0x1150 <s_write_byte+0x18>
    114c:	ab 9a       	sbi	0x15, 3	; 21
    114e:	01 c0       	rjmp	.+2      	; 0x1152 <s_write_byte+0x1a>
    else 
     SHT_DATA_LOW();
    1150:	ab 98       	cbi	0x15, 3	; 21
    1152:	42 e0       	ldi	r20, 0x02	; 2
    1154:	87 2f       	mov	r24, r23
    1156:	8a 95       	dec	r24
    1158:	f1 f7       	brne	.-4      	; 0x1156 <s_write_byte+0x1e>
    _delay_us(1);                             
    SHT_SCK_HIGH(); //clk for SENSI-BUS
    115a:	aa 9a       	sbi	0x15, 2	; 21
    115c:	86 2f       	mov	r24, r22
    115e:	8a 95       	dec	r24
    1160:	f1 f7       	brne	.-4      	; 0x115e <s_write_byte+0x26>
    _delay_us(5);    //pulswith approx. 5 us  	   
    SHT_SCK_LOW();
    1162:	aa 98       	cbi	0x15, 2	; 21
//----------------------------------------------------------------------------------
// writes a byte on the Sensibus and checks the acknowledge 
{ 
  unsigned char i,error=0;  
  SHT_OUTPUT_MODE();    
  for (i=0x80;i>0;i/=2)             //shift bit for masking
    1164:	96 95       	lsr	r25
    1166:	2f 5f       	subi	r18, 0xFF	; 255
    1168:	3f 4f       	sbci	r19, 0xFF	; 255
    116a:	28 30       	cpi	r18, 0x08	; 8
    116c:	31 05       	cpc	r19, r1
    116e:	59 f7       	brne	.-42     	; 0x1146 <s_write_byte+0xe>
    _delay_us(1);                             
    SHT_SCK_HIGH(); //clk for SENSI-BUS
    _delay_us(5);    //pulswith approx. 5 us  	   
    SHT_SCK_LOW();
  }
  SHT_INPUT_MODE(); //release DATA-line    
    1170:	a3 98       	cbi	0x14, 3	; 20
    1172:	84 2f       	mov	r24, r20
    1174:	8a 95       	dec	r24
    1176:	f1 f7       	brne	.-4      	; 0x1174 <s_write_byte+0x3c>
  _delay_us(1);  
  SHT_SCK_HIGH(); //clk #9 for ack 
    1178:	aa 9a       	sbi	0x15, 2	; 21
    117a:	84 2f       	mov	r24, r20
    117c:	8a 95       	dec	r24
    117e:	f1 f7       	brne	.-4      	; 0x117c <s_write_byte+0x44>
  _delay_us(1);
  error=(SHT_PIN&(1<<SHT_DATA));                       //check ack (DATA will be pulled down by SHT11)
    1180:	83 b3       	in	r24, 0x13	; 19
  SHT_SCK_LOW();
    1182:	aa 98       	cbi	0x15, 2	; 21
    1184:	94 2f       	mov	r25, r20
    1186:	9a 95       	dec	r25
    1188:	f1 f7       	brne	.-4      	; 0x1186 <s_write_byte+0x4e>
  _delay_us(1);
  return error;                     //error=1 in case of no acknowledge
}
    118a:	88 70       	andi	r24, 0x08	; 8
    118c:	08 95       	ret

0000118e <s_read_byte>:

//----------------------------------------------------------------------------------
char s_read_byte(unsigned char ack)
//----------------------------------------------------------------------------------
// reads a byte form the Sensibus and gives an acknowledge in case of "ack=1" 
{ 
    118e:	68 2f       	mov	r22, r24
  unsigned char i,val=0;
  SHT_INPUT_MODE(); //release DATA-line
    1190:	a3 98       	cbi	0x14, 3	; 20
    1192:	40 e8       	ldi	r20, 0x80	; 128
    1194:	80 e0       	ldi	r24, 0x00	; 0
    1196:	20 e0       	ldi	r18, 0x00	; 0
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	52 e0       	ldi	r21, 0x02	; 2
  for (i=0x80;i>0;i/=2)  //shift bit for masking
  { 
    SHT_SCK_HIGH();    //clk for SENSI-BUS
    119c:	aa 9a       	sbi	0x15, 2	; 21
    119e:	95 2f       	mov	r25, r21
    11a0:	9a 95       	dec	r25
    11a2:	f1 f7       	brne	.-4      	; 0x11a0 <s_read_byte+0x12>
    _delay_us(1);     
    if ((SHT_PIN & (1<<SHT_DATA))) val=(val | i);        //read bit  
    11a4:	9b 99       	sbic	0x13, 3	; 19
    11a6:	84 2b       	or	r24, r20
    SHT_SCK_LOW();   
    11a8:	aa 98       	cbi	0x15, 2	; 21
    11aa:	95 2f       	mov	r25, r21
    11ac:	9a 95       	dec	r25
    11ae:	f1 f7       	brne	.-4      	; 0x11ac <s_read_byte+0x1e>
//----------------------------------------------------------------------------------
// reads a byte form the Sensibus and gives an acknowledge in case of "ack=1" 
{ 
  unsigned char i,val=0;
  SHT_INPUT_MODE(); //release DATA-line
  for (i=0x80;i>0;i/=2)  //shift bit for masking
    11b0:	46 95       	lsr	r20
    11b2:	2f 5f       	subi	r18, 0xFF	; 255
    11b4:	3f 4f       	sbci	r19, 0xFF	; 255
    11b6:	28 30       	cpi	r18, 0x08	; 8
    11b8:	31 05       	cpc	r19, r1
    11ba:	81 f7       	brne	.-32     	; 0x119c <s_read_byte+0xe>
    _delay_us(1);     
    if ((SHT_PIN & (1<<SHT_DATA))) val=(val | i);        //read bit  
    SHT_SCK_LOW();   
    _delay_us(1);					 
  }   
  if (ack) //in case of "ack==1" pull down DATA-Line
    11bc:	66 23       	and	r22, r22
    11be:	29 f0       	breq	.+10     	; 0x11ca <s_read_byte+0x3c>
  {
   SHT_OUTPUT_MODE();   
    11c0:	a3 9a       	sbi	0x14, 3	; 20
   SHT_DATA_LOW();
    11c2:	ab 98       	cbi	0x15, 3	; 21
    11c4:	92 e0       	ldi	r25, 0x02	; 2
    11c6:	9a 95       	dec	r25
    11c8:	f1 f7       	brne	.-4      	; 0x11c6 <s_read_byte+0x38>
   _delay_us(1);   
  }
  SHT_SCK_HIGH();        //clk #9 for ack
    11ca:	aa 9a       	sbi	0x15, 2	; 21
    11cc:	9d e0       	ldi	r25, 0x0D	; 13
    11ce:	9a 95       	dec	r25
    11d0:	f1 f7       	brne	.-4      	; 0x11ce <s_read_byte+0x40>
  _delay_us(5);  //pulswith approx. 5 us 
  SHT_SCK_LOW(); 
    11d2:	aa 98       	cbi	0x15, 2	; 21
    11d4:	92 e0       	ldi	r25, 0x02	; 2
    11d6:	9a 95       	dec	r25
    11d8:	f1 f7       	brne	.-4      	; 0x11d6 <s_read_byte+0x48>
  _delay_us(1);
  SHT_INPUT_MODE(); //release DATA-line
    11da:	a3 98       	cbi	0x14, 3	; 20
  return val;
}
    11dc:	08 95       	ret

000011de <s_transstart>:
// DATA:      |_______|
//           ___     ___
// SCK : ___|   |___|   |______
{                
  //Initial state
  SHT_OUTPUT_MODE(); 
    11de:	a3 9a       	sbi	0x14, 3	; 20
  SHT_DATA_HIGH();
    11e0:	ab 9a       	sbi	0x15, 3	; 21
  SHT_SCK_LOW(); 
    11e2:	aa 98       	cbi	0x15, 2	; 21
    11e4:	82 e0       	ldi	r24, 0x02	; 2
    11e6:	98 2f       	mov	r25, r24
    11e8:	9a 95       	dec	r25
    11ea:	f1 f7       	brne	.-4      	; 0x11e8 <s_transstart+0xa>
  _delay_us(1);
 
  SHT_SCK_HIGH(); 
    11ec:	aa 9a       	sbi	0x15, 2	; 21
    11ee:	98 2f       	mov	r25, r24
    11f0:	9a 95       	dec	r25
    11f2:	f1 f7       	brne	.-4      	; 0x11f0 <s_transstart+0x12>
  _delay_us(1);    
  
  SHT_DATA_LOW();
    11f4:	ab 98       	cbi	0x15, 3	; 21
    11f6:	98 2f       	mov	r25, r24
    11f8:	9a 95       	dec	r25
    11fa:	f1 f7       	brne	.-4      	; 0x11f8 <s_transstart+0x1a>
  _delay_us(1);
   
  SHT_SCK_LOW();
    11fc:	aa 98       	cbi	0x15, 2	; 21
    11fe:	9d e0       	ldi	r25, 0x0D	; 13
    1200:	9a 95       	dec	r25
    1202:	f1 f7       	brne	.-4      	; 0x1200 <s_transstart+0x22>
  _delay_us(5);
   
  SHT_SCK_HIGH();
    1204:	aa 9a       	sbi	0x15, 2	; 21
    1206:	98 2f       	mov	r25, r24
    1208:	9a 95       	dec	r25
    120a:	f1 f7       	brne	.-4      	; 0x1208 <s_transstart+0x2a>
  _delay_us(1);
   
  SHT_DATA_HIGH();
    120c:	ab 9a       	sbi	0x15, 3	; 21
    120e:	98 2f       	mov	r25, r24
    1210:	9a 95       	dec	r25
    1212:	f1 f7       	brne	.-4      	; 0x1210 <s_transstart+0x32>
  _delay_us(1);   
  SHT_SCK_LOW();
    1214:	aa 98       	cbi	0x15, 2	; 21
    1216:	8a 95       	dec	r24
    1218:	f1 f7       	brne	.-4      	; 0x1216 <s_transstart+0x38>
  _delay_us(1);		   
}
    121a:	08 95       	ret

0000121c <s_connectionreset>:
//          _    _    _    _    _    _    _    _    _        ___     ___
// SCK : __| |__| |__| |__| |__| |__| |__| |__| |__| |______|   |___|   |______
{  
  unsigned char i; 
  //Initial state
  SHT_OUTPUT_MODE(); 
    121c:	a3 9a       	sbi	0x14, 3	; 20
  SHT_DATA_HIGH();
    121e:	ab 9a       	sbi	0x15, 3	; 21
  SHT_SCK_LOW(); 
    1220:	aa 98       	cbi	0x15, 2	; 21
    1222:	82 e0       	ldi	r24, 0x02	; 2
    1224:	8a 95       	dec	r24
    1226:	f1 f7       	brne	.-4      	; 0x1224 <s_connectionreset+0x8>
    1228:	90 e0       	ldi	r25, 0x00	; 0
  _delay_us(1);      
  for(i=0;i<9;i++)                  //9 SCK cycles
  { 
    SHT_SCK_HIGH();
    122a:	22 e0       	ldi	r18, 0x02	; 2
    122c:	aa 9a       	sbi	0x15, 2	; 21
    122e:	82 2f       	mov	r24, r18
    1230:	8a 95       	dec	r24
    1232:	f1 f7       	brne	.-4      	; 0x1230 <s_connectionreset+0x14>
    _delay_us(1);   
    SHT_SCK_LOW();  
    1234:	aa 98       	cbi	0x15, 2	; 21
    1236:	82 2f       	mov	r24, r18
    1238:	8a 95       	dec	r24
    123a:	f1 f7       	brne	.-4      	; 0x1238 <s_connectionreset+0x1c>
  //Initial state
  SHT_OUTPUT_MODE(); 
  SHT_DATA_HIGH();
  SHT_SCK_LOW(); 
  _delay_us(1);      
  for(i=0;i<9;i++)                  //9 SCK cycles
    123c:	9f 5f       	subi	r25, 0xFF	; 255
    123e:	99 30       	cpi	r25, 0x09	; 9
    1240:	a9 f7       	brne	.-22     	; 0x122c <s_connectionreset+0x10>
    SHT_SCK_HIGH();
    _delay_us(1);   
    SHT_SCK_LOW();  
    _delay_us(1);        
  }          
  s_transstart();                   //transmission start
    1242:	0e 94 ef 08 	call	0x11de	; 0x11de <s_transstart>
}
    1246:	08 95       	ret

00001248 <s_softreset>:
char s_softreset(void)
//----------------------------------------------------------------------------------
// resets the sensor by a softreset 
{ 
  unsigned char error=0;  
  s_connectionreset();              //reset communication
    1248:	0e 94 0e 09 	call	0x121c	; 0x121c <s_connectionreset>
  error+=s_write_byte(RESET);       //send RESET-command to sensor
    124c:	8e e1       	ldi	r24, 0x1E	; 30
    124e:	0e 94 9c 08 	call	0x1138	; 0x1138 <s_write_byte>
  return error;                     //error=1 in case of no response form the sensor
}
    1252:	08 95       	ret

00001254 <s_read_statusreg>:

//----------------------------------------------------------------------------------
char s_read_statusreg(unsigned char *p_value, unsigned char *p_checksum)
//----------------------------------------------------------------------------------
// reads the status register with checksum (8-bit)
{ 
    1254:	df 92       	push	r13
    1256:	ef 92       	push	r14
    1258:	ff 92       	push	r15
    125a:	0f 93       	push	r16
    125c:	1f 93       	push	r17
    125e:	8c 01       	movw	r16, r24
    1260:	7b 01       	movw	r14, r22
  unsigned char error=0;
  s_transstart();                   //transmission start
    1262:	0e 94 ef 08 	call	0x11de	; 0x11de <s_transstart>
  error=s_write_byte(STATUS_REG_R); //send command to sensor
    1266:	87 e0       	ldi	r24, 0x07	; 7
    1268:	0e 94 9c 08 	call	0x1138	; 0x1138 <s_write_byte>
    126c:	d8 2e       	mov	r13, r24
  *p_value=s_read_byte(ACK);        //read status register (8-bit)
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	0e 94 c7 08 	call	0x118e	; 0x118e <s_read_byte>
    1274:	f8 01       	movw	r30, r16
    1276:	80 83       	st	Z, r24
  *p_checksum=s_read_byte(noACK);   //read checksum (8-bit)  
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	0e 94 c7 08 	call	0x118e	; 0x118e <s_read_byte>
    127e:	f7 01       	movw	r30, r14
    1280:	80 83       	st	Z, r24
  return error;                     //error=1 in case of no response form the sensor
}
    1282:	8d 2d       	mov	r24, r13
    1284:	1f 91       	pop	r17
    1286:	0f 91       	pop	r16
    1288:	ff 90       	pop	r15
    128a:	ef 90       	pop	r14
    128c:	df 90       	pop	r13
    128e:	08 95       	ret

00001290 <s_write_statusreg>:

//----------------------------------------------------------------------------------
char s_write_statusreg(unsigned char *p_value)
//----------------------------------------------------------------------------------
// writes the status register with checksum (8-bit)
{ 
    1290:	ff 92       	push	r15
    1292:	0f 93       	push	r16
    1294:	1f 93       	push	r17
    1296:	8c 01       	movw	r16, r24
  unsigned char error=0;
  s_transstart();                   //transmission start
    1298:	0e 94 ef 08 	call	0x11de	; 0x11de <s_transstart>
  error+=s_write_byte(STATUS_REG_W);//send command to sensor
    129c:	86 e0       	ldi	r24, 0x06	; 6
    129e:	0e 94 9c 08 	call	0x1138	; 0x1138 <s_write_byte>
    12a2:	f8 2e       	mov	r15, r24
  error+=s_write_byte(*p_value);    //send value of status register
    12a4:	f8 01       	movw	r30, r16
    12a6:	80 81       	ld	r24, Z
    12a8:	0e 94 9c 08 	call	0x1138	; 0x1138 <s_write_byte>
  return error;                     //error>=1 in case of no response form the sensor
}
    12ac:	8f 0d       	add	r24, r15
    12ae:	1f 91       	pop	r17
    12b0:	0f 91       	pop	r16
    12b2:	ff 90       	pop	r15
    12b4:	08 95       	ret

000012b6 <s_measure>:
 							   
//----------------------------------------------------------------------------------
char s_measure(unsigned char *p_value, unsigned char *p_checksum, unsigned char mode)
//----------------------------------------------------------------------------------
// makes a measurement (humidity/temperature) with checksum
{ 
    12b6:	cf 92       	push	r12
    12b8:	df 92       	push	r13
    12ba:	ef 92       	push	r14
    12bc:	ff 92       	push	r15
    12be:	1f 93       	push	r17
    12c0:	cf 93       	push	r28
    12c2:	df 93       	push	r29
    12c4:	7c 01       	movw	r14, r24
    12c6:	6b 01       	movw	r12, r22
    12c8:	14 2f       	mov	r17, r20
  unsigned error=0;
  unsigned int i;

  s_transstart();                   //transmission start
    12ca:	0e 94 ef 08 	call	0x11de	; 0x11de <s_transstart>
  switch(mode){                     //send command to sensor
    12ce:	11 23       	and	r17, r17
    12d0:	29 f0       	breq	.+10     	; 0x12dc <s_measure+0x26>
    12d2:	11 30       	cpi	r17, 0x01	; 1
    12d4:	29 f0       	breq	.+10     	; 0x12e0 <s_measure+0x2a>
    12d6:	c0 e0       	ldi	r28, 0x00	; 0
    12d8:	d0 e0       	ldi	r29, 0x00	; 0
    12da:	07 c0       	rjmp	.+14     	; 0x12ea <s_measure+0x34>
    case TEMP	: error+=s_write_byte(MEASURE_TEMP); break;
    12dc:	83 e0       	ldi	r24, 0x03	; 3
    12de:	01 c0       	rjmp	.+2      	; 0x12e2 <s_measure+0x2c>
    case HUMI	: error+=s_write_byte(MEASURE_HUMI); break;
    12e0:	85 e0       	ldi	r24, 0x05	; 5
    12e2:	0e 94 9c 08 	call	0x1138	; 0x1138 <s_write_byte>
    12e6:	c8 2f       	mov	r28, r24
    12e8:	d0 e0       	ldi	r29, 0x00	; 0
    default     : break;	 
  }                        
  SHT_INPUT_MODE();
    12ea:	a3 98       	cbi	0x14, 3	; 20
    12ec:	80 e0       	ldi	r24, 0x00	; 0
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	32 e0       	ldi	r19, 0x02	; 2
    12f2:	23 2f       	mov	r18, r19
    12f4:	2a 95       	dec	r18
    12f6:	f1 f7       	brne	.-4      	; 0x12f4 <s_measure+0x3e>
  for (i=0;i<65535;i++) 
  {
   _delay_us(1);
   if((SHT_PIN & (1<<SHT_DATA))==0) break; //wait until sensor has finished the measurement
    12f8:	9b 9b       	sbis	0x13, 3	; 19
    12fa:	05 c0       	rjmp	.+10     	; 0x1306 <s_measure+0x50>
    case TEMP	: error+=s_write_byte(MEASURE_TEMP); break;
    case HUMI	: error+=s_write_byte(MEASURE_HUMI); break;
    default     : break;	 
  }                        
  SHT_INPUT_MODE();
  for (i=0;i<65535;i++) 
    12fc:	01 96       	adiw	r24, 0x01	; 1
    12fe:	2f ef       	ldi	r18, 0xFF	; 255
    1300:	8f 3f       	cpi	r24, 0xFF	; 255
    1302:	92 07       	cpc	r25, r18
    1304:	b1 f7       	brne	.-20     	; 0x12f2 <s_measure+0x3c>
  {
   _delay_us(1);
   if((SHT_PIN & (1<<SHT_DATA))==0) break; //wait until sensor has finished the measurement
  }   
  if(SHT_PIN & (1<<SHT_DATA)) error+=1;                // or timeout (~2 sec.) is reached
    1306:	9b 99       	sbic	0x13, 3	; 19
    1308:	21 96       	adiw	r28, 0x01	; 1
  *(p_value+1)=s_read_byte(ACK);    //read the first byte (MSB)
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	0e 94 c7 08 	call	0x118e	; 0x118e <s_read_byte>
    1310:	f7 01       	movw	r30, r14
    1312:	81 83       	std	Z+1, r24	; 0x01
  *(p_value)=s_read_byte(ACK);    //read the second byte (LSB)
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	0e 94 c7 08 	call	0x118e	; 0x118e <s_read_byte>
    131a:	f7 01       	movw	r30, r14
    131c:	80 83       	st	Z, r24
  *p_checksum =s_read_byte(noACK);  //read checksum
    131e:	80 e0       	ldi	r24, 0x00	; 0
    1320:	0e 94 c7 08 	call	0x118e	; 0x118e <s_read_byte>
    1324:	f6 01       	movw	r30, r12
    1326:	80 83       	st	Z, r24
  return error;
}
    1328:	8c 2f       	mov	r24, r28
    132a:	df 91       	pop	r29
    132c:	cf 91       	pop	r28
    132e:	1f 91       	pop	r17
    1330:	ff 90       	pop	r15
    1332:	ef 90       	pop	r14
    1334:	df 90       	pop	r13
    1336:	cf 90       	pop	r12
    1338:	08 95       	ret

0000133a <calc_sth11>:
// calculates temperature [∞C] and humidity [%RH] 
// input :  humi [Ticks] (12 bit) 
//          temp [Ticks] (14 bit)
// output:  humi [%RH]
//          temp [∞C]
{   
    133a:	2f 92       	push	r2
    133c:	3f 92       	push	r3
    133e:	4f 92       	push	r4
    1340:	5f 92       	push	r5
    1342:	6f 92       	push	r6
    1344:	7f 92       	push	r7
    1346:	8f 92       	push	r8
    1348:	9f 92       	push	r9
    134a:	af 92       	push	r10
    134c:	bf 92       	push	r11
    134e:	cf 92       	push	r12
    1350:	df 92       	push	r13
    1352:	ef 92       	push	r14
    1354:	ff 92       	push	r15
    1356:	0f 93       	push	r16
    1358:	1f 93       	push	r17
    135a:	df 93       	push	r29
    135c:	cf 93       	push	r28
    135e:	00 d0       	rcall	.+0      	; 0x1360 <calc_sth11+0x26>
    1360:	00 d0       	rcall	.+0      	; 0x1362 <calc_sth11+0x28>
    1362:	cd b7       	in	r28, 0x3d	; 61
    1364:	de b7       	in	r29, 0x3e	; 62
    1366:	9a 83       	std	Y+2, r25	; 0x02
    1368:	89 83       	std	Y+1, r24	; 0x01
    136a:	7c 83       	std	Y+4, r23	; 0x04
    136c:	6b 83       	std	Y+3, r22	; 0x03
  float rh=*p_humidity;             // rh:      Humidity [Ticks] 12 Bit 
    136e:	fc 01       	movw	r30, r24
    1370:	a0 80       	ld	r10, Z
    1372:	b1 80       	ldd	r11, Z+1	; 0x01
    1374:	c2 80       	ldd	r12, Z+2	; 0x02
    1376:	d3 80       	ldd	r13, Z+3	; 0x03
  float t=*p_temperature;           // t:       Temperature [Ticks] 14 Bit
  float rh_lin;                     // rh_lin:  Humidity linear
  float rh_true;                    // rh_true: Temperature compensated humidity
  float t_C;                        // t_C   :  Temperature [∞C]
  
  t_C=t*0.04 - 39.8;                  //calc. temperature from ticks to [∞C]  first coeff. 0.01 for 14 bit and 0.04 for 12 bit
    1378:	fb 01       	movw	r30, r22
    137a:	60 81       	ld	r22, Z
    137c:	71 81       	ldd	r23, Z+1	; 0x01
    137e:	82 81       	ldd	r24, Z+2	; 0x02
    1380:	93 81       	ldd	r25, Z+3	; 0x03
    1382:	2a e0       	ldi	r18, 0x0A	; 10
    1384:	37 ed       	ldi	r19, 0xD7	; 215
    1386:	43 e2       	ldi	r20, 0x23	; 35
    1388:	5d e3       	ldi	r21, 0x3D	; 61
    138a:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <__mulsf3>
    138e:	23 e3       	ldi	r18, 0x33	; 51
    1390:	33 e3       	ldi	r19, 0x33	; 51
    1392:	4f e1       	ldi	r20, 0x1F	; 31
    1394:	52 e4       	ldi	r21, 0x42	; 66
    1396:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <__subsf3>
    139a:	1b 01       	movw	r2, r22
    139c:	2c 01       	movw	r4, r24
  rh_lin=C3*rh*rh + C2*rh + C1;     //calc. humidity from ticks to [%RH]
  rh_true=(t_C-25)*(T1+T2*rh)+rh_lin;   //calc. temperature compensated humidity [%RH]
    139e:	20 e0       	ldi	r18, 0x00	; 0
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	48 ec       	ldi	r20, 0xC8	; 200
    13a4:	51 e4       	ldi	r21, 0x41	; 65
    13a6:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <__subsf3>
    13aa:	7b 01       	movw	r14, r22
    13ac:	8c 01       	movw	r16, r24
    13ae:	c6 01       	movw	r24, r12
    13b0:	b5 01       	movw	r22, r10
    13b2:	2c ea       	ldi	r18, 0xAC	; 172
    13b4:	35 ec       	ldi	r19, 0xC5	; 197
    13b6:	47 ea       	ldi	r20, 0xA7	; 167
    13b8:	5a e3       	ldi	r21, 0x3A	; 58
    13ba:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <__mulsf3>
    13be:	2a e0       	ldi	r18, 0x0A	; 10
    13c0:	37 ed       	ldi	r19, 0xD7	; 215
    13c2:	43 e2       	ldi	r20, 0x23	; 35
    13c4:	5c e3       	ldi	r21, 0x3C	; 60
    13c6:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <__addsf3>
    13ca:	9b 01       	movw	r18, r22
    13cc:	ac 01       	movw	r20, r24
    13ce:	c8 01       	movw	r24, r16
    13d0:	b7 01       	movw	r22, r14
    13d2:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <__mulsf3>
    13d6:	3b 01       	movw	r6, r22
    13d8:	4c 01       	movw	r8, r24
    13da:	c6 01       	movw	r24, r12
    13dc:	b5 01       	movw	r22, r10
    13de:	2b e3       	ldi	r18, 0x3B	; 59
    13e0:	35 e2       	ldi	r19, 0x25	; 37
    13e2:	46 ed       	ldi	r20, 0xD6	; 214
    13e4:	59 eb       	ldi	r21, 0xB9	; 185
    13e6:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <__mulsf3>
    13ea:	a6 01       	movw	r20, r12
    13ec:	95 01       	movw	r18, r10
    13ee:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <__mulsf3>
    13f2:	7b 01       	movw	r14, r22
    13f4:	8c 01       	movw	r16, r24
    13f6:	c6 01       	movw	r24, r12
    13f8:	b5 01       	movw	r22, r10
    13fa:	2d eb       	ldi	r18, 0xBD	; 189
    13fc:	32 e5       	ldi	r19, 0x52	; 82
    13fe:	46 e1       	ldi	r20, 0x16	; 22
    1400:	5f e3       	ldi	r21, 0x3F	; 63
    1402:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <__mulsf3>
    1406:	9b 01       	movw	r18, r22
    1408:	ac 01       	movw	r20, r24
    140a:	c8 01       	movw	r24, r16
    140c:	b7 01       	movw	r22, r14
    140e:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <__addsf3>
    1412:	25 ec       	ldi	r18, 0xC5	; 197
    1414:	3e ef       	ldi	r19, 0xFE	; 254
    1416:	42 e0       	ldi	r20, 0x02	; 2
    1418:	50 e4       	ldi	r21, 0x40	; 64
    141a:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <__subsf3>
    141e:	9b 01       	movw	r18, r22
    1420:	ac 01       	movw	r20, r24
    1422:	c4 01       	movw	r24, r8
    1424:	b3 01       	movw	r22, r6
    1426:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <__addsf3>
    142a:	7b 01       	movw	r14, r22
    142c:	8c 01       	movw	r16, r24
  if(rh_true>100)rh_true=100;       //cut if the value is outside of
    142e:	20 e0       	ldi	r18, 0x00	; 0
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	48 ec       	ldi	r20, 0xC8	; 200
    1434:	52 e4       	ldi	r21, 0x42	; 66
    1436:	0e 94 92 14 	call	0x2924	; 0x2924 <__gesf2>
    143a:	18 16       	cp	r1, r24
    143c:	5c f4       	brge	.+22     	; 0x1454 <calc_sth11+0x11a>
    143e:	0f 2e       	mov	r0, r31
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	ef 2e       	mov	r14, r31
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	ff 2e       	mov	r15, r31
    1448:	f8 ec       	ldi	r31, 0xC8	; 200
    144a:	0f 2f       	mov	r16, r31
    144c:	f2 e4       	ldi	r31, 0x42	; 66
    144e:	1f 2f       	mov	r17, r31
    1450:	f0 2d       	mov	r31, r0
    1452:	14 c0       	rjmp	.+40     	; 0x147c <calc_sth11+0x142>
  if(rh_true<0.1)rh_true=0.1;       //the physical possible range
    1454:	c8 01       	movw	r24, r16
    1456:	b7 01       	movw	r22, r14
    1458:	2d ec       	ldi	r18, 0xCD	; 205
    145a:	3c ec       	ldi	r19, 0xCC	; 204
    145c:	4c ec       	ldi	r20, 0xCC	; 204
    145e:	5d e3       	ldi	r21, 0x3D	; 61
    1460:	0e 94 48 13 	call	0x2690	; 0x2690 <__cmpsf2>
    1464:	88 23       	and	r24, r24
    1466:	54 f4       	brge	.+20     	; 0x147c <calc_sth11+0x142>
    1468:	0f 2e       	mov	r0, r31
    146a:	fd ec       	ldi	r31, 0xCD	; 205
    146c:	ef 2e       	mov	r14, r31
    146e:	fc ec       	ldi	r31, 0xCC	; 204
    1470:	ff 2e       	mov	r15, r31
    1472:	fc ec       	ldi	r31, 0xCC	; 204
    1474:	0f 2f       	mov	r16, r31
    1476:	fd e3       	ldi	r31, 0x3D	; 61
    1478:	1f 2f       	mov	r17, r31
    147a:	f0 2d       	mov	r31, r0

  *p_temperature=t_C;               //return temperature [∞C]
    147c:	eb 81       	ldd	r30, Y+3	; 0x03
    147e:	fc 81       	ldd	r31, Y+4	; 0x04
    1480:	20 82       	st	Z, r2
    1482:	31 82       	std	Z+1, r3	; 0x01
    1484:	42 82       	std	Z+2, r4	; 0x02
    1486:	53 82       	std	Z+3, r5	; 0x03
  *p_humidity=rh_true;              //return humidity[%RH]
    1488:	e9 81       	ldd	r30, Y+1	; 0x01
    148a:	fa 81       	ldd	r31, Y+2	; 0x02
    148c:	e0 82       	st	Z, r14
    148e:	f1 82       	std	Z+1, r15	; 0x01
    1490:	02 83       	std	Z+2, r16	; 0x02
    1492:	13 83       	std	Z+3, r17	; 0x03
}
    1494:	0f 90       	pop	r0
    1496:	0f 90       	pop	r0
    1498:	0f 90       	pop	r0
    149a:	0f 90       	pop	r0
    149c:	cf 91       	pop	r28
    149e:	df 91       	pop	r29
    14a0:	1f 91       	pop	r17
    14a2:	0f 91       	pop	r16
    14a4:	ff 90       	pop	r15
    14a6:	ef 90       	pop	r14
    14a8:	df 90       	pop	r13
    14aa:	cf 90       	pop	r12
    14ac:	bf 90       	pop	r11
    14ae:	af 90       	pop	r10
    14b0:	9f 90       	pop	r9
    14b2:	8f 90       	pop	r8
    14b4:	7f 90       	pop	r7
    14b6:	6f 90       	pop	r6
    14b8:	5f 90       	pop	r5
    14ba:	4f 90       	pop	r4
    14bc:	3f 90       	pop	r3
    14be:	2f 90       	pop	r2
    14c0:	08 95       	ret

000014c2 <calc_dewpoint>:
float calc_dewpoint(float h,float t)
//--------------------------------------------------------------------
// calculates dew point
// input:   humidity [%RH], temperature [∞C]
// output:  dew point [∞C]
{ float logEx,dew_point;
    14c2:	6f 92       	push	r6
    14c4:	7f 92       	push	r7
    14c6:	8f 92       	push	r8
    14c8:	9f 92       	push	r9
    14ca:	af 92       	push	r10
    14cc:	bf 92       	push	r11
    14ce:	cf 92       	push	r12
    14d0:	df 92       	push	r13
    14d2:	ef 92       	push	r14
    14d4:	ff 92       	push	r15
    14d6:	0f 93       	push	r16
    14d8:	1f 93       	push	r17
    14da:	59 01       	movw	r10, r18
    14dc:	6a 01       	movw	r12, r20
  logEx=0.66077+7.5*t/(237.3+t)+(log10(h)-2);
    14de:	0e 94 96 14 	call	0x292c	; 0x292c <log10>
    14e2:	3b 01       	movw	r6, r22
    14e4:	4c 01       	movw	r8, r24
    14e6:	c6 01       	movw	r24, r12
    14e8:	b5 01       	movw	r22, r10
    14ea:	20 e0       	ldi	r18, 0x00	; 0
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	40 ef       	ldi	r20, 0xF0	; 240
    14f0:	50 e4       	ldi	r21, 0x40	; 64
    14f2:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <__mulsf3>
    14f6:	7b 01       	movw	r14, r22
    14f8:	8c 01       	movw	r16, r24
    14fa:	c6 01       	movw	r24, r12
    14fc:	b5 01       	movw	r22, r10
    14fe:	2d ec       	ldi	r18, 0xCD	; 205
    1500:	3c e4       	ldi	r19, 0x4C	; 76
    1502:	4d e6       	ldi	r20, 0x6D	; 109
    1504:	53 e4       	ldi	r21, 0x43	; 67
    1506:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <__addsf3>
    150a:	9b 01       	movw	r18, r22
    150c:	ac 01       	movw	r20, r24
    150e:	c8 01       	movw	r24, r16
    1510:	b7 01       	movw	r22, r14
    1512:	0e 94 4c 13 	call	0x2698	; 0x2698 <__divsf3>
    1516:	29 e3       	ldi	r18, 0x39	; 57
    1518:	38 e2       	ldi	r19, 0x28	; 40
    151a:	49 e2       	ldi	r20, 0x29	; 41
    151c:	5f e3       	ldi	r21, 0x3F	; 63
    151e:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <__addsf3>
    1522:	7b 01       	movw	r14, r22
    1524:	8c 01       	movw	r16, r24
    1526:	c4 01       	movw	r24, r8
    1528:	b3 01       	movw	r22, r6
    152a:	20 e0       	ldi	r18, 0x00	; 0
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	40 e0       	ldi	r20, 0x00	; 0
    1530:	50 e4       	ldi	r21, 0x40	; 64
    1532:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <__subsf3>
    1536:	9b 01       	movw	r18, r22
    1538:	ac 01       	movw	r20, r24
    153a:	c8 01       	movw	r24, r16
    153c:	b7 01       	movw	r22, r14
    153e:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <__addsf3>
    1542:	5b 01       	movw	r10, r22
    1544:	6c 01       	movw	r12, r24
    1546:	29 e3       	ldi	r18, 0x39	; 57
    1548:	38 e2       	ldi	r19, 0x28	; 40
    154a:	49 e2       	ldi	r20, 0x29	; 41
    154c:	5f e3       	ldi	r21, 0x3F	; 63
    154e:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <__subsf3>
    1552:	2d ec       	ldi	r18, 0xCD	; 205
    1554:	3c e4       	ldi	r19, 0x4C	; 76
    1556:	4d e6       	ldi	r20, 0x6D	; 109
    1558:	53 e4       	ldi	r21, 0x43	; 67
    155a:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <__mulsf3>
    155e:	7b 01       	movw	r14, r22
    1560:	8c 01       	movw	r16, r24
    1562:	64 e8       	ldi	r22, 0x84	; 132
    1564:	72 e9       	ldi	r23, 0x92	; 146
    1566:	82 e0       	ldi	r24, 0x02	; 2
    1568:	91 e4       	ldi	r25, 0x41	; 65
    156a:	a6 01       	movw	r20, r12
    156c:	95 01       	movw	r18, r10
    156e:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <__subsf3>
    1572:	9b 01       	movw	r18, r22
    1574:	ac 01       	movw	r20, r24
    1576:	c8 01       	movw	r24, r16
    1578:	b7 01       	movw	r22, r14
    157a:	0e 94 4c 13 	call	0x2698	; 0x2698 <__divsf3>
  dew_point = (logEx - 0.66077)*237.3/(0.66077+7.5-logEx);
  return dew_point;
}
    157e:	1f 91       	pop	r17
    1580:	0f 91       	pop	r16
    1582:	ff 90       	pop	r15
    1584:	ef 90       	pop	r14
    1586:	df 90       	pop	r13
    1588:	cf 90       	pop	r12
    158a:	bf 90       	pop	r11
    158c:	af 90       	pop	r10
    158e:	9f 90       	pop	r9
    1590:	8f 90       	pop	r8
    1592:	7f 90       	pop	r7
    1594:	6f 90       	pop	r6
    1596:	08 95       	ret

00001598 <therm_delay>:
#include "therm_ds18b20.h"


void therm_delay(uint16_t delay)
{
    1598:	02 c0       	rjmp	.+4      	; 0x159e <therm_delay+0x6>
	while (delay--) asm volatile("nop");
    159a:	00 00       	nop
    159c:	01 97       	sbiw	r24, 0x01	; 1
    159e:	00 97       	sbiw	r24, 0x00	; 0
    15a0:	e1 f7       	brne	.-8      	; 0x159a <therm_delay+0x2>
}
    15a2:	08 95       	ret

000015a4 <therm_reset>:

uint8_t therm_reset()
{
	uint8_t i;
	//ÔÓÒËÎ‡∫ÏÓ ≥ÏÔÛÎ¸Ò ÒÍË‰‡ÌÌˇ ÚË‚‡Î≥ÒÚ˛ 480 ÏÍÒ
	THERM_LOW();
    15a4:	ac 98       	cbi	0x15, 4	; 21
	THERM_OUTPUT_MODE();
    15a6:	a4 9a       	sbi	0x14, 4	; 20
    15a8:	80 ee       	ldi	r24, 0xE0	; 224
    15aa:	91 e0       	ldi	r25, 0x01	; 1
    15ac:	01 c0       	rjmp	.+2      	; 0x15b0 <therm_reset+0xc>
#include "therm_ds18b20.h"


void therm_delay(uint16_t delay)
{
	while (delay--) asm volatile("nop");
    15ae:	00 00       	nop
    15b0:	01 97       	sbiw	r24, 0x01	; 1
    15b2:	2f ef       	ldi	r18, 0xFF	; 255
    15b4:	8f 3f       	cpi	r24, 0xFF	; 255
    15b6:	92 07       	cpc	r25, r18
    15b8:	d1 f7       	brne	.-12     	; 0x15ae <therm_reset+0xa>
	//ÔÓÒËÎ‡∫ÏÓ ≥ÏÔÛÎ¸Ò ÒÍË‰‡ÌÌˇ ÚË‚‡Î≥ÒÚ˛ 480 ÏÍÒ
	THERM_LOW();
	THERM_OUTPUT_MODE();
	therm_delay(us(480));
	//ÔÓ‚ÂÚ‡∫ÏÓ ¯ËÌÛ ≥ ˜ÂÍ‡∫ÏÓ 60 ÏÍÒ Ì‡ ‚≥‰ÔÓ‚≥‰¸
	THERM_INPUT_MODE();
    15ba:	a4 98       	cbi	0x14, 4	; 20
    15bc:	8c e3       	ldi	r24, 0x3C	; 60
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	01 c0       	rjmp	.+2      	; 0x15c4 <therm_reset+0x20>
#include "therm_ds18b20.h"


void therm_delay(uint16_t delay)
{
	while (delay--) asm volatile("nop");
    15c2:	00 00       	nop
    15c4:	01 97       	sbiw	r24, 0x01	; 1
    15c6:	3f ef       	ldi	r19, 0xFF	; 255
    15c8:	8f 3f       	cpi	r24, 0xFF	; 255
    15ca:	93 07       	cpc	r25, r19
    15cc:	d1 f7       	brne	.-12     	; 0x15c2 <therm_reset+0x1e>
	therm_delay(us(480));
	//ÔÓ‚ÂÚ‡∫ÏÓ ¯ËÌÛ ≥ ˜ÂÍ‡∫ÏÓ 60 ÏÍÒ Ì‡ ‚≥‰ÔÓ‚≥‰¸
	THERM_INPUT_MODE();
	therm_delay(us(60));
	//Á·Â≥„‡∫ÏÓ ÁÌ‡˜ÂÌÌˇ Ì‡ ¯ËÌ≥ ≥ ˜ÂÍ‡∫ÏÓ Á‡‚Â¯ÂÌÌˇ 480 ÏÍÒ ÔÂ≥Ó‰‡
	i=(THERM_PIN & (1<<THERM_DQ));
    15ce:	23 b3       	in	r18, 0x13	; 19
    15d0:	84 ea       	ldi	r24, 0xA4	; 164
    15d2:	91 e0       	ldi	r25, 0x01	; 1
    15d4:	01 c0       	rjmp	.+2      	; 0x15d8 <therm_reset+0x34>
#include "therm_ds18b20.h"


void therm_delay(uint16_t delay)
{
	while (delay--) asm volatile("nop");
    15d6:	00 00       	nop
    15d8:	01 97       	sbiw	r24, 0x01	; 1
    15da:	3f ef       	ldi	r19, 0xFF	; 255
    15dc:	8f 3f       	cpi	r24, 0xFF	; 255
    15de:	93 07       	cpc	r25, r19
    15e0:	d1 f7       	brne	.-12     	; 0x15d6 <therm_reset+0x32>
	THERM_INPUT_MODE();
	therm_delay(us(60));
	//Á·Â≥„‡∫ÏÓ ÁÌ‡˜ÂÌÌˇ Ì‡ ¯ËÌ≥ ≥ ˜ÂÍ‡∫ÏÓ Á‡‚Â¯ÂÌÌˇ 480 ÏÍÒ ÔÂ≥Ó‰‡
	i=(THERM_PIN & (1<<THERM_DQ));
	therm_delay(us(420));
	if ((THERM_PIN & (1<<THERM_DQ))==i) return 1;
    15e2:	83 b3       	in	r24, 0x13	; 19
    15e4:	40 e0       	ldi	r20, 0x00	; 0
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	80 71       	andi	r24, 0x10	; 16
    15ea:	90 70       	andi	r25, 0x00	; 0
    15ec:	20 71       	andi	r18, 0x10	; 16
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	82 17       	cp	r24, r18
    15f2:	93 07       	cpc	r25, r19
    15f4:	09 f4       	brne	.+2      	; 0x15f8 <therm_reset+0x54>
    15f6:	41 e0       	ldi	r20, 0x01	; 1
	//ÔÓ‚ÂÚ‡∫ÏÓ ÂÁÛÎ¸Ú‡Ú ‚ËÍÓÌ‡ÌÌˇ (presence pulse) (0=OK, 1=WRONG)
	return 0;
}
    15f8:	84 2f       	mov	r24, r20
    15fa:	08 95       	ret

000015fc <therm_write_bit>:

void therm_write_bit(uint8_t bit)
{
	//ÔÂÂ‚Ó‰ËÏÓ ¯ËÌÛ ‚ ÒÚ‡Ì ÎÓ„. 0 Ì‡ 1 ÏÍÒ
	THERM_LOW();
    15fc:	ac 98       	cbi	0x15, 4	; 21
	THERM_OUTPUT_MODE();
    15fe:	a4 9a       	sbi	0x14, 4	; 20
#include "therm_ds18b20.h"


void therm_delay(uint16_t delay)
{
	while (delay--) asm volatile("nop");
    1600:	00 00       	nop
	//ÔÂÂ‚Ó‰ËÏÓ ¯ËÌÛ ‚ ÒÚ‡Ì ÎÓ„. 0 Ì‡ 1 ÏÍÒ
	THERM_LOW();
	THERM_OUTPUT_MODE();
	therm_delay(us(1));
	//ˇÍ˘Ó ÔË¯ÂÏÓ 1, ‚≥‰ÔÛÒÍ‡∫ÏÓ ¯ËÌÛ (ˇÍ˘Ó 0 ÚËÏ‡∫ÏÓ ‚ ÒÚ‡Ì≥ ÎÓ„. 0)
	if (bit) THERM_INPUT_MODE();
    1602:	81 11       	cpse	r24, r1
    1604:	a4 98       	cbi	0x14, 4	; 20
    1606:	8c e3       	ldi	r24, 0x3C	; 60
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	01 c0       	rjmp	.+2      	; 0x160e <therm_write_bit+0x12>
#include "therm_ds18b20.h"


void therm_delay(uint16_t delay)
{
	while (delay--) asm volatile("nop");
    160c:	00 00       	nop
    160e:	01 97       	sbiw	r24, 0x01	; 1
    1610:	2f ef       	ldi	r18, 0xFF	; 255
    1612:	8f 3f       	cpi	r24, 0xFF	; 255
    1614:	92 07       	cpc	r25, r18
    1616:	d1 f7       	brne	.-12     	; 0x160c <therm_write_bit+0x10>
	therm_delay(us(1));
	//ˇÍ˘Ó ÔË¯ÂÏÓ 1, ‚≥‰ÔÛÒÍ‡∫ÏÓ ¯ËÌÛ (ˇÍ˘Ó 0 ÚËÏ‡∫ÏÓ ‚ ÒÚ‡Ì≥ ÎÓ„. 0)
	if (bit) THERM_INPUT_MODE();
	//˜ÂÍ‡∫ÏÓ 60ÏÍÏ ≥ ‚≥‰ÔÛÒÍ‡∫ÏÓ ¯ËÌÛ
	therm_delay(us(60));
	THERM_INPUT_MODE();
    1618:	a4 98       	cbi	0x14, 4	; 20
}
    161a:	08 95       	ret

0000161c <therm_read_bit>:

uint8_t therm_read_bit(void)
{
	uint8_t bit=0;
	//ÔÂÂ‚Ó‰ËÏÓ ¯ËÌÛ ‚ ÎÓ„. 0 Ì‡ 1 ÏÍÒ
	THERM_LOW();
    161c:	ac 98       	cbi	0x15, 4	; 21
	THERM_OUTPUT_MODE();
    161e:	a4 9a       	sbi	0x14, 4	; 20
#include "therm_ds18b20.h"


void therm_delay(uint16_t delay)
{
	while (delay--) asm volatile("nop");
    1620:	00 00       	nop
	//ÔÂÂ‚Ó‰ËÏÓ ¯ËÌÛ ‚ ÎÓ„. 0 Ì‡ 1 ÏÍÒ
	THERM_LOW();
	THERM_OUTPUT_MODE();
	therm_delay(us(1));
	//‚≥‰ÔÛÒÍ‡∫ÏÓ ¯ËÌÛ ≥ ˜ÂÍ‡∫ÏÓ 14 ÏÍÒ
	THERM_INPUT_MODE();
    1622:	a4 98       	cbi	0x14, 4	; 20
    1624:	8e e0       	ldi	r24, 0x0E	; 14
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	01 c0       	rjmp	.+2      	; 0x162c <therm_read_bit+0x10>
#include "therm_ds18b20.h"


void therm_delay(uint16_t delay)
{
	while (delay--) asm volatile("nop");
    162a:	00 00       	nop
    162c:	01 97       	sbiw	r24, 0x01	; 1
    162e:	2f ef       	ldi	r18, 0xFF	; 255
    1630:	8f 3f       	cpi	r24, 0xFF	; 255
    1632:	92 07       	cpc	r25, r18
    1634:	d1 f7       	brne	.-12     	; 0x162a <therm_read_bit+0xe>
	therm_delay(us(1));
	//‚≥‰ÔÛÒÍ‡∫ÏÓ ¯ËÌÛ ≥ ˜ÂÍ‡∫ÏÓ 14 ÏÍÒ
	THERM_INPUT_MODE();
	therm_delay(us(14));
	//˜ËÚ‡∫ÏÓ ·≥Ú Á ¯ËÌË
	if (THERM_PIN&(1<<THERM_DQ)) bit=1;
    1636:	83 b3       	in	r24, 0x13	; 19
    1638:	2d e2       	ldi	r18, 0x2D	; 45
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	01 c0       	rjmp	.+2      	; 0x1640 <therm_read_bit+0x24>
#include "therm_ds18b20.h"


void therm_delay(uint16_t delay)
{
	while (delay--) asm volatile("nop");
    163e:	00 00       	nop
    1640:	21 50       	subi	r18, 0x01	; 1
    1642:	30 40       	sbci	r19, 0x00	; 0
    1644:	9f ef       	ldi	r25, 0xFF	; 255
    1646:	2f 3f       	cpi	r18, 0xFF	; 255
    1648:	39 07       	cpc	r19, r25
    164a:	c9 f7       	brne	.-14     	; 0x163e <therm_read_bit+0x22>
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	24 e0       	ldi	r18, 0x04	; 4
    1650:	96 95       	lsr	r25
    1652:	87 95       	ror	r24
    1654:	2a 95       	dec	r18
    1656:	e1 f7       	brne	.-8      	; 0x1650 <therm_read_bit+0x34>
	//˜ËÚ‡∫ÏÓ ·≥Ú Á ¯ËÌË
	if (THERM_PIN&(1<<THERM_DQ)) bit=1;
	//˜ÂÍ‡∫ÏÓ 45 ÏÍÒ ‰Ó Á‡Í≥Ì˜ÂÌÌˇ ≥ ‚ÂÚ‡∫ÏÓ ÔÓ˜ËÚ‡ÌÂ ÁÌ‡˜ÂÌÌˇ
	therm_delay(us(45));
	return bit;
}
    1658:	81 70       	andi	r24, 0x01	; 1
    165a:	08 95       	ret

0000165c <therm_read_byte>:

uint8_t therm_read_byte(void)
{
    165c:	0f 93       	push	r16
    165e:	1f 93       	push	r17
    1660:	08 e0       	ldi	r16, 0x08	; 8
    1662:	10 e0       	ldi	r17, 0x00	; 0
    1664:	09 c0       	rjmp	.+18     	; 0x1678 <therm_read_byte+0x1c>
	uint8_t i=8, n=0;
	while (i--)
	{
		//ÁÒÛ‚‡∫ÏÓ Ì‡ 1 ÓÁˇ‰ ‚Ô‡‚Ó ≥ Á·Â≥„‡∫ÏÓ ÔÓ˜ËÚ‡ÌÂ ÁÌ‡˜ÂÌÌˇ
		n>>=1;
		n|=(therm_read_bit()<<7);
    1666:	0e 94 0e 0b 	call	0x161c	; 0x161c <therm_read_bit>
    166a:	91 2f       	mov	r25, r17
    166c:	96 95       	lsr	r25
    166e:	18 2f       	mov	r17, r24
    1670:	17 95       	ror	r17
    1672:	11 27       	eor	r17, r17
    1674:	17 95       	ror	r17
    1676:	19 2b       	or	r17, r25
}

uint8_t therm_read_byte(void)
{
	uint8_t i=8, n=0;
	while (i--)
    1678:	01 50       	subi	r16, 0x01	; 1
    167a:	a8 f7       	brcc	.-22     	; 0x1666 <therm_read_byte+0xa>
		//ÁÒÛ‚‡∫ÏÓ Ì‡ 1 ÓÁˇ‰ ‚Ô‡‚Ó ≥ Á·Â≥„‡∫ÏÓ ÔÓ˜ËÚ‡ÌÂ ÁÌ‡˜ÂÌÌˇ
		n>>=1;
		n|=(therm_read_bit()<<7);
	}
	return n;
}
    167c:	81 2f       	mov	r24, r17
    167e:	1f 91       	pop	r17
    1680:	0f 91       	pop	r16
    1682:	08 95       	ret

00001684 <therm_write_byte>:

void therm_write_byte(uint8_t byte)
{
    1684:	0f 93       	push	r16
    1686:	1f 93       	push	r17
    1688:	08 2f       	mov	r16, r24
    168a:	18 e0       	ldi	r17, 0x08	; 8
    168c:	05 c0       	rjmp	.+10     	; 0x1698 <therm_write_byte+0x14>
	uint8_t i=8;
	while (i--)
	{
		//ÔË¯ÂÏÓ ÏÓÎÓ‰¯ËÈ ·≥Ú ≥ ÁÒÛ‚‡∫ÏÓ Ì‡ 1 ÓÁˇ‰ ‚Ô‡‚Ó ‰Îˇ ‚Ë‚Ó‰Û Ì‡ÒÚÛÔÌÓ„Ó ·≥Ú‡
		therm_write_bit(byte&1);
    168e:	80 2f       	mov	r24, r16
    1690:	81 70       	andi	r24, 0x01	; 1
    1692:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <therm_write_bit>
		byte>>=1;
    1696:	06 95       	lsr	r16
}

void therm_write_byte(uint8_t byte)
{
	uint8_t i=8;
	while (i--)
    1698:	11 50       	subi	r17, 0x01	; 1
    169a:	c8 f7       	brcc	.-14     	; 0x168e <therm_write_byte+0xa>
	{
		//ÔË¯ÂÏÓ ÏÓÎÓ‰¯ËÈ ·≥Ú ≥ ÁÒÛ‚‡∫ÏÓ Ì‡ 1 ÓÁˇ‰ ‚Ô‡‚Ó ‰Îˇ ‚Ë‚Ó‰Û Ì‡ÒÚÛÔÌÓ„Ó ·≥Ú‡
		therm_write_bit(byte&1);
		byte>>=1;
	}
}
    169c:	1f 91       	pop	r17
    169e:	0f 91       	pop	r16
    16a0:	08 95       	ret

000016a2 <therm_crc8>:

uint8_t therm_crc8(uint8_t *data, uint8_t num_bytes)
{
    16a2:	fc 01       	movw	r30, r24
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	40 e0       	ldi	r20, 0x00	; 0
 
	for (byte_ctr=0; byte_ctr<num_bytes; byte_ctr++)
	{
		cur_byte=data[byte_ctr];
		for (bit_ctr=0; bit_ctr<8; cur_byte>>=1, bit_ctr++)
			if ((cur_byte ^ crc) & 1) crc = ((crc ^ 0x18) >> 1) | 0x80;
    16a8:	58 e1       	ldi	r21, 0x18	; 24
    16aa:	12 c0       	rjmp	.+36     	; 0x16d0 <therm_crc8+0x2e>
{
	uint8_t byte_ctr, cur_byte, bit_ctr, crc=0;
 
	for (byte_ctr=0; byte_ctr<num_bytes; byte_ctr++)
	{
		cur_byte=data[byte_ctr];
    16ac:	30 81       	ld	r19, Z
    16ae:	20 e0       	ldi	r18, 0x00	; 0
		for (bit_ctr=0; bit_ctr<8; cur_byte>>=1, bit_ctr++)
			if ((cur_byte ^ crc) & 1) crc = ((crc ^ 0x18) >> 1) | 0x80;
    16b0:	83 2f       	mov	r24, r19
    16b2:	89 27       	eor	r24, r25
    16b4:	80 ff       	sbrs	r24, 0
    16b6:	04 c0       	rjmp	.+8      	; 0x16c0 <therm_crc8+0x1e>
    16b8:	95 27       	eor	r25, r21
    16ba:	96 95       	lsr	r25
    16bc:	90 68       	ori	r25, 0x80	; 128
    16be:	01 c0       	rjmp	.+2      	; 0x16c2 <therm_crc8+0x20>
			else crc>>=1;
    16c0:	96 95       	lsr	r25
	uint8_t byte_ctr, cur_byte, bit_ctr, crc=0;
 
	for (byte_ctr=0; byte_ctr<num_bytes; byte_ctr++)
	{
		cur_byte=data[byte_ctr];
		for (bit_ctr=0; bit_ctr<8; cur_byte>>=1, bit_ctr++)
    16c2:	2f 5f       	subi	r18, 0xFF	; 255
    16c4:	28 30       	cpi	r18, 0x08	; 8
    16c6:	11 f0       	breq	.+4      	; 0x16cc <therm_crc8+0x2a>
    16c8:	36 95       	lsr	r19
    16ca:	f2 cf       	rjmp	.-28     	; 0x16b0 <therm_crc8+0xe>

uint8_t therm_crc8(uint8_t *data, uint8_t num_bytes)
{
	uint8_t byte_ctr, cur_byte, bit_ctr, crc=0;
 
	for (byte_ctr=0; byte_ctr<num_bytes; byte_ctr++)
    16cc:	4f 5f       	subi	r20, 0xFF	; 255
    16ce:	31 96       	adiw	r30, 0x01	; 1
    16d0:	46 17       	cp	r20, r22
    16d2:	60 f3       	brcs	.-40     	; 0x16ac <therm_crc8+0xa>
		for (bit_ctr=0; bit_ctr<8; cur_byte>>=1, bit_ctr++)
			if ((cur_byte ^ crc) & 1) crc = ((crc ^ 0x18) >> 1) | 0x80;
			else crc>>=1;
	}
	return crc; 
}
    16d4:	89 2f       	mov	r24, r25
    16d6:	08 95       	ret

000016d8 <therm_init>:

uint8_t therm_init(int8_t temp_low, int8_t temp_high, uint8_t resolution)
{
    16d8:	ff 92       	push	r15
    16da:	0f 93       	push	r16
    16dc:	1f 93       	push	r17
    16de:	f8 2e       	mov	r15, r24
    16e0:	06 2f       	mov	r16, r22
    16e2:	14 2f       	mov	r17, r20
	resolution=(resolution<<5)|0x1f;
	//≥Ì≥ˆ≥‡Î≥ÁÛ∫ÏÓ ‰‡‚‡˜	
	if (therm_reset()) return 1;
    16e4:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <therm_reset>
    16e8:	88 23       	and	r24, r24
    16ea:	11 f0       	breq	.+4      	; 0x16f0 <therm_init+0x18>
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	25 c0       	rjmp	.+74     	; 0x173a <therm_init+0x62>
	therm_write_byte(THERM_CMD_SKIPROM);	
    16f0:	8c ec       	ldi	r24, 0xCC	; 204
    16f2:	0e 94 42 0b 	call	0x1684	; 0x1684 <therm_write_byte>
	therm_write_byte(THERM_CMD_WSCRATCHPAD);
    16f6:	8e e4       	ldi	r24, 0x4E	; 78
    16f8:	0e 94 42 0b 	call	0x1684	; 0x1684 <therm_write_byte>
	therm_write_byte(temp_high);
    16fc:	80 2f       	mov	r24, r16
    16fe:	0e 94 42 0b 	call	0x1684	; 0x1684 <therm_write_byte>
	therm_write_byte(temp_low);
    1702:	8f 2d       	mov	r24, r15
    1704:	0e 94 42 0b 	call	0x1684	; 0x1684 <therm_write_byte>
	return crc; 
}

uint8_t therm_init(int8_t temp_low, int8_t temp_high, uint8_t resolution)
{
	resolution=(resolution<<5)|0x1f;
    1708:	12 95       	swap	r17
    170a:	11 0f       	add	r17, r17
    170c:	10 7e       	andi	r17, 0xE0	; 224
	if (therm_reset()) return 1;
	therm_write_byte(THERM_CMD_SKIPROM);	
	therm_write_byte(THERM_CMD_WSCRATCHPAD);
	therm_write_byte(temp_high);
	therm_write_byte(temp_low);
	therm_write_byte(resolution);
    170e:	81 2f       	mov	r24, r17
    1710:	8f 61       	ori	r24, 0x1F	; 31
    1712:	0e 94 42 0b 	call	0x1684	; 0x1684 <therm_write_byte>
	therm_reset();
    1716:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <therm_reset>
	therm_write_byte(THERM_CMD_SKIPROM);	
    171a:	8c ec       	ldi	r24, 0xCC	; 204
    171c:	0e 94 42 0b 	call	0x1684	; 0x1684 <therm_write_byte>
	therm_write_byte(THERM_CMD_CPYSCRATCHPAD);
    1720:	88 e4       	ldi	r24, 0x48	; 72
    1722:	0e 94 42 0b 	call	0x1684	; 0x1684 <therm_write_byte>
    1726:	87 e9       	ldi	r24, 0x97	; 151
    1728:	9a e3       	ldi	r25, 0x3A	; 58
    172a:	01 c0       	rjmp	.+2      	; 0x172e <therm_init+0x56>
#include "therm_ds18b20.h"


void therm_delay(uint16_t delay)
{
	while (delay--) asm volatile("nop");
    172c:	00 00       	nop
    172e:	01 97       	sbiw	r24, 0x01	; 1
    1730:	2f ef       	ldi	r18, 0xFF	; 255
    1732:	8f 3f       	cpi	r24, 0xFF	; 255
    1734:	92 07       	cpc	r25, r18
    1736:	d1 f7       	brne	.-12     	; 0x172c <therm_init+0x54>
    1738:	80 e0       	ldi	r24, 0x00	; 0
	therm_reset();
	therm_write_byte(THERM_CMD_SKIPROM);	
	therm_write_byte(THERM_CMD_CPYSCRATCHPAD);
	therm_delay(ms(15));	
	return 0;
}
    173a:	1f 91       	pop	r17
    173c:	0f 91       	pop	r16
    173e:	ff 90       	pop	r15
    1740:	08 95       	ret

00001742 <therm_read_spd>:

uint8_t therm_read_spd(void)
{
    1742:	cf 93       	push	r28
    1744:	df 93       	push	r29
    1746:	ce e2       	ldi	r28, 0x2E	; 46
    1748:	d4 e0       	ldi	r29, 0x04	; 4
	uint8_t i=0, *p;	
	
	p = (uint8_t*) &__ds18b20_scratch_pad;
	do 
		*(p++)=therm_read_byte();
    174a:	0e 94 2e 0b 	call	0x165c	; 0x165c <therm_read_byte>
    174e:	89 93       	st	Y+, r24
	while(++i<9);	
    1750:	84 e0       	ldi	r24, 0x04	; 4
    1752:	c7 33       	cpi	r28, 0x37	; 55
    1754:	d8 07       	cpc	r29, r24
    1756:	c9 f7       	brne	.-14     	; 0x174a <therm_read_spd+0x8>
	if (therm_crc8((uint8_t*)&__ds18b20_scratch_pad,8)!=__ds18b20_scratch_pad.crc) 
    1758:	ce 01       	movw	r24, r28
    175a:	09 97       	sbiw	r24, 0x09	; 9
    175c:	68 e0       	ldi	r22, 0x08	; 8
    175e:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <therm_crc8>
    1762:	20 e0       	ldi	r18, 0x00	; 0
    1764:	90 91 36 04 	lds	r25, 0x0436
    1768:	89 13       	cpse	r24, r25
    176a:	21 e0       	ldi	r18, 0x01	; 1
		return 1;
	return 0;
}
    176c:	82 2f       	mov	r24, r18
    176e:	df 91       	pop	r29
    1770:	cf 91       	pop	r28
    1772:	08 95       	ret

00001774 <therm_read_temperature>:

uint8_t therm_read_temperature(float *temp)
{
    1774:	8f 92       	push	r8
    1776:	9f 92       	push	r9
    1778:	bf 92       	push	r11
    177a:	cf 92       	push	r12
    177c:	df 92       	push	r13
    177e:	0f 93       	push	r16
    1780:	df 93       	push	r29
    1782:	cf 93       	push	r28
    1784:	cd b7       	in	r28, 0x3d	; 61
    1786:	de b7       	in	r29, 0x3e	; 62
    1788:	2c 97       	sbiw	r28, 0x0c	; 12
    178a:	0f b6       	in	r0, 0x3f	; 63
    178c:	f8 94       	cli
    178e:	de bf       	out	0x3e, r29	; 62
    1790:	0f be       	out	0x3f, r0	; 63
    1792:	cd bf       	out	0x3d, r28	; 61
    1794:	4c 01       	movw	r8, r24
	uint8_t digit, decimal, resolution, sign;
	uint16_t meas, bit_mask[4]={0x0008, 0x000c, 0x000e, 0x000f};
    1796:	de 01       	movw	r26, r28
    1798:	11 96       	adiw	r26, 0x01	; 1
    179a:	e4 e2       	ldi	r30, 0x24	; 36
    179c:	f4 e0       	ldi	r31, 0x04	; 4
    179e:	88 e0       	ldi	r24, 0x08	; 8
    17a0:	01 90       	ld	r0, Z+
    17a2:	0d 92       	st	X+, r0
    17a4:	81 50       	subi	r24, 0x01	; 1
    17a6:	e1 f7       	brne	.-8      	; 0x17a0 <therm_read_temperature+0x2c>
 
	//ÒÍËÌÛÚË, ÔÓÔÛÒÚËÚË ÔÓˆÂ‰ÛÛ ÔÂÂ‚≥ÍË ÒÂ≥ÈÌÓ„Ó ÌÓÏÂ‡ ROM ≥ ÔÓ˜‡ÚË ‚ËÏ≥˛‚‡ÌÌˇ ≥ ÔÂÂÚ‚ÓÂÌÌˇ ÚÂÏÔÂ‡ÚÛË
	if (therm_reset()) return 1;
    17a8:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <therm_reset>
    17ac:	88 23       	and	r24, r24
    17ae:	09 f0       	breq	.+2      	; 0x17b2 <therm_read_temperature+0x3e>
    17b0:	72 c0       	rjmp	.+228    	; 0x1896 <therm_read_temperature+0x122>
	therm_write_byte(THERM_CMD_SKIPROM);
    17b2:	8c ec       	ldi	r24, 0xCC	; 204
    17b4:	0e 94 42 0b 	call	0x1684	; 0x1684 <therm_write_byte>
	therm_write_byte(THERM_CMD_CONVERTTEMP);
    17b8:	84 e4       	ldi	r24, 0x44	; 68
    17ba:	0e 94 42 0b 	call	0x1684	; 0x1684 <therm_write_byte>
	//˜ÂÍ‡∫ÏÓ ‰Ó Á‡Í≥Ì˜ÂÌÌˇ ÔÂÂÚ‚ÓÂÌÌˇ
	//if (!therm_read_bit()) return 1;
	while(!therm_read_bit());	
    17be:	0e 94 0e 0b 	call	0x161c	; 0x161c <therm_read_bit>
    17c2:	88 23       	and	r24, r24
    17c4:	e1 f3       	breq	.-8      	; 0x17be <therm_read_temperature+0x4a>
	//ÒÍË‰‡∫ÏÓ, ÔÓÔÛÒÍ‡∫ÏÓ ROM ≥ ÔÓÒËÎ‡∫ÏÓ ÍÓÏ‡Ì‰Û Á˜ËÚÛ‚‡ÌÌˇ Scratchpad
	therm_reset();
    17c6:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <therm_reset>
	therm_write_byte(THERM_CMD_SKIPROM);	
    17ca:	8c ec       	ldi	r24, 0xCC	; 204
    17cc:	0e 94 42 0b 	call	0x1684	; 0x1684 <therm_write_byte>
	therm_write_byte(THERM_CMD_RSCRATCHPAD);
    17d0:	8e eb       	ldi	r24, 0xBE	; 190
    17d2:	0e 94 42 0b 	call	0x1684	; 0x1684 <therm_write_byte>
	if (therm_read_spd()) return 1;
    17d6:	0e 94 a1 0b 	call	0x1742	; 0x1742 <therm_read_spd>
    17da:	88 23       	and	r24, r24
    17dc:	09 f0       	breq	.+2      	; 0x17e0 <therm_read_temperature+0x6c>
    17de:	5b c0       	rjmp	.+182    	; 0x1896 <therm_read_temperature+0x122>
	therm_reset();
    17e0:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <therm_reset>
	resolution=(__ds18b20_scratch_pad.conf_register>>5) & 3;
    17e4:	b0 90 32 04 	lds	r11, 0x0432
    //ÓÚËÏÛ∫ÏÓ ÏÓÎÓ‰¯ËÈ ≥ ÒÚ‡¯ËÈ ·‡ÈÚË ÚÂÏÔÂ‡ÚÛË
	meas=__ds18b20_scratch_pad.temp_lsb;  // LSB
    17e8:	80 91 2e 04 	lds	r24, 0x042E
    17ec:	c8 2e       	mov	r12, r24
    17ee:	dd 24       	eor	r13, r13
	meas|=((uint16_t)__ds18b20_scratch_pad.temp_msb) << 8; // MSB	
    17f0:	90 91 2f 04 	lds	r25, 0x042F
    17f4:	80 e0       	ldi	r24, 0x00	; 0
    17f6:	c8 2a       	or	r12, r24
    17f8:	d9 2a       	or	r13, r25
	//ÔÂÂ‚≥ˇ∫ÏÓ Ì‡ Ï≥ÌÛÒÓ‚Û ÚÂÏÔÂ‡ÚÛÛ 
	if (meas & 0x8000) 
    17fa:	d7 fc       	sbrc	r13, 7
    17fc:	02 c0       	rjmp	.+4      	; 0x1802 <therm_read_temperature+0x8e>
    17fe:	00 e0       	ldi	r16, 0x00	; 0
    1800:	05 c0       	rjmp	.+10     	; 0x180c <therm_read_temperature+0x98>
	{
		sign=1;  //‚≥‰Ï≥˜‡∫ÏÓ Ï≥ÌÛÒÓ‚Û ÚÂÏÔÂ‡ÚÛÛ
		meas^=0xffff;  //ÔÂÂÚ‚Ó˛∫ÏÓ ‚ ÔÎ˛ÒÓ‚Û
		meas++;
    1802:	d0 94       	com	r13
    1804:	c1 94       	neg	r12
    1806:	d1 08       	sbc	r13, r1
    1808:	d3 94       	inc	r13
    180a:	01 e0       	ldi	r16, 0x01	; 1
	}
	else sign=0;
	//Á·Â≥„‡∫ÏÓ ˆ≥ÎÛ ≥ ‰Ó·Ó‚Û ˜‡ÒÚËÌË ÚÂÏÔÂ‡ÚÛË
	digit=(uint8_t)(meas >> 4); //Á·Â≥„‡∫ÏÓ ˆ≥ÎÛ ˜‡ÒÚËÌÛ 
	decimal=(uint8_t)(meas & bit_mask[resolution]);	//ÓÚËÏÛ∫ÏÓ ‰Ó·Ó‚Û ˜‡ÒÚËÌÛ
	*temp=digit+decimal*0.0625;	
    180c:	b6 01       	movw	r22, r12
    180e:	54 e0       	ldi	r21, 0x04	; 4
    1810:	76 95       	lsr	r23
    1812:	67 95       	ror	r22
    1814:	5a 95       	dec	r21
    1816:	e1 f7       	brne	.-8      	; 0x1810 <therm_read_temperature+0x9c>
    1818:	70 e0       	ldi	r23, 0x00	; 0
    181a:	88 27       	eor	r24, r24
    181c:	77 fd       	sbrc	r23, 7
    181e:	80 95       	com	r24
    1820:	98 2f       	mov	r25, r24
    1822:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__floatsisf>
    1826:	69 87       	std	Y+9, r22	; 0x09
    1828:	7a 87       	std	Y+10, r23	; 0x0a
    182a:	8b 87       	std	Y+11, r24	; 0x0b
    182c:	9c 87       	std	Y+12, r25	; 0x0c
    182e:	b2 94       	swap	r11
    1830:	b6 94       	lsr	r11
    1832:	47 e0       	ldi	r20, 0x07	; 7
    1834:	b4 22       	and	r11, r20
    1836:	eb 2d       	mov	r30, r11
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	e3 70       	andi	r30, 0x03	; 3
    183c:	f0 70       	andi	r31, 0x00	; 0
    183e:	ee 0f       	add	r30, r30
    1840:	ff 1f       	adc	r31, r31
    1842:	ec 0f       	add	r30, r28
    1844:	fd 1f       	adc	r31, r29
    1846:	61 81       	ldd	r22, Z+1	; 0x01
    1848:	6c 21       	and	r22, r12
    184a:	70 e0       	ldi	r23, 0x00	; 0
    184c:	88 27       	eor	r24, r24
    184e:	77 fd       	sbrc	r23, 7
    1850:	80 95       	com	r24
    1852:	98 2f       	mov	r25, r24
    1854:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__floatsisf>
    1858:	20 e0       	ldi	r18, 0x00	; 0
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	40 e8       	ldi	r20, 0x80	; 128
    185e:	5d e3       	ldi	r21, 0x3D	; 61
    1860:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <__mulsf3>
    1864:	9b 01       	movw	r18, r22
    1866:	ac 01       	movw	r20, r24
    1868:	69 85       	ldd	r22, Y+9	; 0x09
    186a:	7a 85       	ldd	r23, Y+10	; 0x0a
    186c:	8b 85       	ldd	r24, Y+11	; 0x0b
    186e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1870:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <__addsf3>
    1874:	f4 01       	movw	r30, r8
    1876:	60 83       	st	Z, r22
    1878:	71 83       	std	Z+1, r23	; 0x01
    187a:	82 83       	std	Z+2, r24	; 0x02
    187c:	93 83       	std	Z+3, r25	; 0x03
	if (sign) *temp=-(*temp); //ÒÚ‡‚ÂÏÓ ÁÌ‡Í Ï≥ÌÛÒ, ˇÍ˘Ó Ï≥ÌÛÒÓ‚‡ ÚÂÏÔÂ‡ÚÛ‡ 
    187e:	00 23       	and	r16, r16
    1880:	41 f0       	breq	.+16     	; 0x1892 <therm_read_temperature+0x11e>
    1882:	dc 01       	movw	r26, r24
    1884:	cb 01       	movw	r24, r22
    1886:	b0 58       	subi	r27, 0x80	; 128
    1888:	f4 01       	movw	r30, r8
    188a:	80 83       	st	Z, r24
    188c:	91 83       	std	Z+1, r25	; 0x01
    188e:	a2 83       	std	Z+2, r26	; 0x02
    1890:	b3 83       	std	Z+3, r27	; 0x03
    1892:	80 e0       	ldi	r24, 0x00	; 0
    1894:	01 c0       	rjmp	.+2      	; 0x1898 <therm_read_temperature+0x124>
    1896:	81 e0       	ldi	r24, 0x01	; 1
	return 0;
    1898:	2c 96       	adiw	r28, 0x0c	; 12
    189a:	0f b6       	in	r0, 0x3f	; 63
    189c:	f8 94       	cli
    189e:	de bf       	out	0x3e, r29	; 62
    18a0:	0f be       	out	0x3f, r0	; 63
    18a2:	cd bf       	out	0x3d, r28	; 61
    18a4:	cf 91       	pop	r28
    18a6:	df 91       	pop	r29
    18a8:	0f 91       	pop	r16
    18aa:	df 90       	pop	r13
    18ac:	cf 90       	pop	r12
    18ae:	bf 90       	pop	r11
    18b0:	9f 90       	pop	r9
    18b2:	8f 90       	pop	r8
    18b4:	08 95       	ret

000018b6 <i2c_init>:
#include "i2c.h" 

void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */  
  TWSR = 0;                         /* no prescaler */
    18b6:	11 b8       	out	0x01, r1	; 1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    18b8:	80 e2       	ldi	r24, 0x20	; 32
    18ba:	80 b9       	out	0x00, r24	; 0

}/* i2c_init */
    18bc:	08 95       	ret

000018be <i2c_start>:

//unsigned char i2c_start(unsigned int dev_id, unsigned int dev_addr, unsigned char rw_type)
unsigned char i2c_start(unsigned char address)
{
    18be:	98 2f       	mov	r25, r24
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    18c0:	84 ea       	ldi	r24, 0xA4	; 164
    18c2:	86 bf       	out	0x36, r24	; 54

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    18c4:	06 b6       	in	r0, 0x36	; 54
    18c6:	07 fe       	sbrs	r0, 7
    18c8:	fd cf       	rjmp	.-6      	; 0x18c4 <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    18ca:	81 b1       	in	r24, 0x01	; 1
    18cc:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    18ce:	88 30       	cpi	r24, 0x08	; 8
    18d0:	21 f0       	breq	.+8      	; 0x18da <i2c_start+0x1c>
    18d2:	80 31       	cpi	r24, 0x10	; 16
    18d4:	11 f0       	breq	.+4      	; 0x18da <i2c_start+0x1c>
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	08 95       	ret

	// send device address
    TWDR = address; //(dev_id & 0xF0) | (dev_addr & 0x07) | rw_type; 
    18da:	93 b9       	out	0x03, r25	; 3
	//(dev_id & 0xF0) | ((dev_addr << 1) & 0x0E) | rw_type; //for writing
	
	TWCR = (1<<TWINT) | (1<<TWEN);
    18dc:	84 e8       	ldi	r24, 0x84	; 132
    18de:	86 bf       	out	0x36, r24	; 54

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    18e0:	06 b6       	in	r0, 0x36	; 54
    18e2:	07 fe       	sbrs	r0, 7
    18e4:	fd cf       	rjmp	.-6      	; 0x18e0 <i2c_start+0x22>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    18e6:	91 b1       	in	r25, 0x01	; 1
    18e8:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    18ea:	98 31       	cpi	r25, 0x18	; 24
    18ec:	11 f4       	brne	.+4      	; 0x18f2 <i2c_start+0x34>
    18ee:	80 e0       	ldi	r24, 0x00	; 0
    18f0:	08 95       	ret
    18f2:	80 e0       	ldi	r24, 0x00	; 0
    18f4:	90 34       	cpi	r25, 0x40	; 64
    18f6:	09 f0       	breq	.+2      	; 0x18fa <i2c_start+0x3c>
    18f8:	81 e0       	ldi	r24, 0x01	; 1

	return 0;

}/* i2c_start */
    18fa:	08 95       	ret

000018fc <i2c_start_wait>:
    uint8_t   twst;

    while (1)
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    18fc:	44 ea       	ldi	r20, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    18fe:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1900:	24 e9       	ldi	r18, 0x94	; 148
    uint8_t   twst;

    while (1)
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1902:	46 bf       	out	0x36, r20	; 54
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    1904:	06 b6       	in	r0, 0x36	; 54
    1906:	07 fe       	sbrs	r0, 7
    1908:	fd cf       	rjmp	.-6      	; 0x1904 <i2c_start_wait+0x8>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    190a:	91 b1       	in	r25, 0x01	; 1
    190c:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    190e:	98 30       	cpi	r25, 0x08	; 8
    1910:	11 f0       	breq	.+4      	; 0x1916 <i2c_start_wait+0x1a>
    1912:	90 31       	cpi	r25, 0x10	; 16
    1914:	b1 f7       	brne	.-20     	; 0x1902 <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    1916:	83 b9       	out	0x03, r24	; 3
    	TWCR = (1<<TWINT) | (1<<TWEN);
    1918:	36 bf       	out	0x36, r19	; 54
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    191a:	06 b6       	in	r0, 0x36	; 54
    191c:	07 fe       	sbrs	r0, 7
    191e:	fd cf       	rjmp	.-6      	; 0x191a <i2c_start_wait+0x1e>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    1920:	91 b1       	in	r25, 0x01	; 1
    1922:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    1924:	90 32       	cpi	r25, 0x20	; 32
    1926:	11 f0       	breq	.+4      	; 0x192c <i2c_start_wait+0x30>
    1928:	98 35       	cpi	r25, 0x58	; 88
    192a:	29 f4       	brne	.+10     	; 0x1936 <i2c_start_wait+0x3a>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    192c:	26 bf       	out	0x36, r18	; 54
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    192e:	06 b6       	in	r0, 0x36	; 54
    1930:	04 fc       	sbrc	r0, 4
    1932:	fd cf       	rjmp	.-6      	; 0x192e <i2c_start_wait+0x32>
    1934:	e6 cf       	rjmp	.-52     	; 0x1902 <i2c_start_wait+0x6>
    1936:	08 95       	ret

00001938 <i2c_rep_start>:
}/* i2c_start_wait */

//unsigned char i2c_rep_start(unsigned int dev_id, unsigned int dev_addr, unsigned char rw_type)
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address ); //i2c_start( dev_id, dev_addr, rw_type ); //address
    1938:	0e 94 5f 0c 	call	0x18be	; 0x18be <i2c_start>

}/* i2c_rep_start */
    193c:	08 95       	ret

0000193e <i2c_stop>:

void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    193e:	84 e9       	ldi	r24, 0x94	; 148
    1940:	86 bf       	out	0x36, r24	; 54
	
	// wait until stop condition is executed and bus released
	//while(TWCR & (1<<TWSTO));

}
    1942:	08 95       	ret

00001944 <i2c_write>:
unsigned char i2c_write(unsigned char data)
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    1944:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
    1946:	84 e8       	ldi	r24, 0x84	; 132
    1948:	86 bf       	out	0x36, r24	; 54

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    194a:	06 b6       	in	r0, 0x36	; 54
    194c:	07 fe       	sbrs	r0, 7
    194e:	fd cf       	rjmp	.-6      	; 0x194a <i2c_write+0x6>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    1950:	81 b1       	in	r24, 0x01	; 1
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	88 7f       	andi	r24, 0xF8	; 248
    1956:	88 32       	cpi	r24, 0x28	; 40
    1958:	09 f0       	breq	.+2      	; 0x195c <i2c_write+0x18>
    195a:	91 e0       	ldi	r25, 0x01	; 1
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}
    195c:	89 2f       	mov	r24, r25
    195e:	08 95       	ret

00001960 <i2c_readAck>:

unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    1960:	84 ec       	ldi	r24, 0xC4	; 196
    1962:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));    
    1964:	06 b6       	in	r0, 0x36	; 54
    1966:	07 fe       	sbrs	r0, 7
    1968:	fd cf       	rjmp	.-6      	; 0x1964 <i2c_readAck+0x4>

    return TWDR;
    196a:	83 b1       	in	r24, 0x03	; 3

}
    196c:	08 95       	ret

0000196e <i2c_readNak>:

unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    196e:	84 e8       	ldi	r24, 0x84	; 132
    1970:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));
    1972:	06 b6       	in	r0, 0x36	; 54
    1974:	07 fe       	sbrs	r0, 7
    1976:	fd cf       	rjmp	.-6      	; 0x1972 <i2c_readNak+0x4>
	
    return TWDR;
    1978:	83 b1       	in	r24, 0x03	; 3

}
    197a:	08 95       	ret

0000197c <i2c_read>:

unsigned char i2c_read(unsigned char acknak)
{
 if(acknak == ACK_i2c)
    197c:	81 30       	cpi	r24, 0x01	; 1
    197e:	59 f4       	brne	.+22     	; 0x1996 <i2c_read+0x1a>
 {
  TWCR = 0xC4;
    1980:	84 ec       	ldi	r24, 0xC4	; 196
    1982:	86 bf       	out	0x36, r24	; 54
  while (!(TWCR & (1<<TWINT)));
    1984:	06 b6       	in	r0, 0x36	; 54
    1986:	07 fe       	sbrs	r0, 7
    1988:	fd cf       	rjmp	.-6      	; 0x1984 <i2c_read+0x8>
  if ((TWSR & 0xF8) != MR_DATA_ACK)
    198a:	81 b1       	in	r24, 0x01	; 1
    198c:	88 7f       	andi	r24, 0xF8	; 248
    198e:	80 35       	cpi	r24, 0x50	; 80
    1990:	39 f0       	breq	.+14     	; 0x19a0 <i2c_read+0x24>
    1992:	80 e0       	ldi	r24, 0x00	; 0
    1994:	08 95       	ret
 	return 0; //printf("i2c Data Transfer Error MR Mode %x\r\n",(TWSR & 0xF8));
 }	
 else
 {
  TWCR = 0x84;
    1996:	84 e8       	ldi	r24, 0x84	; 132
    1998:	86 bf       	out	0x36, r24	; 54
  while (!(TWCR & (1<<TWINT)));
    199a:	06 b6       	in	r0, 0x36	; 54
    199c:	07 fe       	sbrs	r0, 7
    199e:	fd cf       	rjmp	.-6      	; 0x199a <i2c_read+0x1e>
  
 }	
 return(TWDR);
    19a0:	83 b1       	in	r24, 0x03	; 3
    19a2:	08 95       	ret

000019a4 <bcd2bin>:
*/

#include "ds1307.h"

unsigned char bcd2bin(unsigned char x)
{
    19a4:	28 2f       	mov	r18, r24
    19a6:	22 95       	swap	r18
    19a8:	2f 70       	andi	r18, 0x0F	; 15
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	a9 01       	movw	r20, r18
    19ae:	63 e0       	ldi	r22, 0x03	; 3
    19b0:	44 0f       	add	r20, r20
    19b2:	55 1f       	adc	r21, r21
    19b4:	6a 95       	dec	r22
    19b6:	e1 f7       	brne	.-8      	; 0x19b0 <bcd2bin+0xc>
    19b8:	22 0f       	add	r18, r18
    19ba:	33 1f       	adc	r19, r19
    19bc:	42 0f       	add	r20, r18
    19be:	53 1f       	adc	r21, r19
    19c0:	8f 70       	andi	r24, 0x0F	; 15
    return (((x & 0xF0)>>4)*10 + (x & 0x0F));
}
    19c2:	84 0f       	add	r24, r20
    19c4:	08 95       	ret

000019c6 <bin2bcd>:

unsigned char bin2bcd(unsigned char x)
{
    19c6:	48 2f       	mov	r20, r24
    19c8:	6a e0       	ldi	r22, 0x0A	; 10
    19ca:	0e 94 77 15 	call	0x2aee	; 0x2aee <__udivmodqi4>
    19ce:	28 2f       	mov	r18, r24
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	74 e0       	ldi	r23, 0x04	; 4
    19d4:	22 0f       	add	r18, r18
    19d6:	33 1f       	adc	r19, r19
    19d8:	7a 95       	dec	r23
    19da:	e1 f7       	brne	.-8      	; 0x19d4 <bin2bcd+0xe>
    19dc:	84 2f       	mov	r24, r20
    19de:	0e 94 77 15 	call	0x2aee	; 0x2aee <__udivmodqi4>
    return ((x%10) | ((x/10)<<4));
}
    19e2:	89 2f       	mov	r24, r25
    19e4:	82 2b       	or	r24, r18
    19e6:	08 95       	ret

000019e8 <rtc_set_date>:
	i2c_stop();

}

void rtc_set_date(unsigned char *date,unsigned char *month,unsigned char *year)
{
    19e8:	cf 92       	push	r12
    19ea:	df 92       	push	r13
    19ec:	ef 92       	push	r14
    19ee:	ff 92       	push	r15
    19f0:	0f 93       	push	r16
    19f2:	1f 93       	push	r17
    19f4:	8c 01       	movw	r16, r24
    19f6:	7b 01       	movw	r14, r22
    19f8:	6a 01       	movw	r12, r20
    //i2c_start(DS1307_ID, DS1307_ADDR, TW_WRITE); //0xd0
    i2c_start(0xd0);    
    19fa:	80 ed       	ldi	r24, 0xD0	; 208
    19fc:	0e 94 5f 0c 	call	0x18be	; 0x18be <i2c_start>
	i2c_write(4);
    1a00:	84 e0       	ldi	r24, 0x04	; 4
    1a02:	0e 94 a2 0c 	call	0x1944	; 0x1944 <i2c_write>
    i2c_write(bin2bcd(*date));
    1a06:	f8 01       	movw	r30, r16
    1a08:	80 81       	ld	r24, Z
    1a0a:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <bin2bcd>
    1a0e:	0e 94 a2 0c 	call	0x1944	; 0x1944 <i2c_write>
    i2c_write(bin2bcd(*month));
    1a12:	f7 01       	movw	r30, r14
    1a14:	80 81       	ld	r24, Z
    1a16:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <bin2bcd>
    1a1a:	0e 94 a2 0c 	call	0x1944	; 0x1944 <i2c_write>
    i2c_write(bin2bcd(*year));
    1a1e:	f6 01       	movw	r30, r12
    1a20:	80 81       	ld	r24, Z
    1a22:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <bin2bcd>
    1a26:	0e 94 a2 0c 	call	0x1944	; 0x1944 <i2c_write>
    i2c_stop();
    1a2a:	0e 94 9f 0c 	call	0x193e	; 0x193e <i2c_stop>
    1a2e:	1f 91       	pop	r17
    1a30:	0f 91       	pop	r16
    1a32:	ff 90       	pop	r15
    1a34:	ef 90       	pop	r14
    1a36:	df 90       	pop	r13
    1a38:	cf 90       	pop	r12
    1a3a:	08 95       	ret

00001a3c <rtc_set_time>:
	//rtc_set_time(0,0,0,1);
	//}
}

void rtc_set_time(unsigned char hour, unsigned char min, unsigned char sec,unsigned char wd)
{
    1a3c:	ef 92       	push	r14
    1a3e:	ff 92       	push	r15
    1a40:	0f 93       	push	r16
    1a42:	1f 93       	push	r17
    1a44:	f8 2e       	mov	r15, r24
    1a46:	06 2f       	mov	r16, r22
    1a48:	14 2f       	mov	r17, r20
    1a4a:	e2 2e       	mov	r14, r18
    //i2c_start(DS1307_ID, DS1307_ADDR, TW_WRITE);
	i2c_start(0xd0);
    1a4c:	80 ed       	ldi	r24, 0xD0	; 208
    1a4e:	0e 94 5f 0c 	call	0x18be	; 0x18be <i2c_start>
    i2c_write(0);
    1a52:	80 e0       	ldi	r24, 0x00	; 0
    1a54:	0e 94 a2 0c 	call	0x1944	; 0x1944 <i2c_write>
    i2c_write(bin2bcd(sec));
    1a58:	81 2f       	mov	r24, r17
    1a5a:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <bin2bcd>
    1a5e:	0e 94 a2 0c 	call	0x1944	; 0x1944 <i2c_write>
    i2c_write(bin2bcd(min));
    1a62:	80 2f       	mov	r24, r16
    1a64:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <bin2bcd>
    1a68:	0e 94 a2 0c 	call	0x1944	; 0x1944 <i2c_write>
    i2c_write(bin2bcd(hour));
    1a6c:	8f 2d       	mov	r24, r15
    1a6e:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <bin2bcd>
    1a72:	0e 94 a2 0c 	call	0x1944	; 0x1944 <i2c_write>
    i2c_write(bin2bcd(wd));
    1a76:	8e 2d       	mov	r24, r14
    1a78:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <bin2bcd>
    1a7c:	0e 94 a2 0c 	call	0x1944	; 0x1944 <i2c_write>
	i2c_stop();
    1a80:	0e 94 9f 0c 	call	0x193e	; 0x193e <i2c_stop>
}
    1a84:	1f 91       	pop	r17
    1a86:	0f 91       	pop	r16
    1a88:	ff 90       	pop	r15
    1a8a:	ef 90       	pop	r14
    1a8c:	08 95       	ret

00001a8e <rtc_get_date>:
	i2c_stop();

}

void rtc_get_date(unsigned char *date, unsigned char *month, unsigned char *year)
{
    1a8e:	cf 92       	push	r12
    1a90:	df 92       	push	r13
    1a92:	ef 92       	push	r14
    1a94:	ff 92       	push	r15
    1a96:	0f 93       	push	r16
    1a98:	1f 93       	push	r17
    1a9a:	8c 01       	movw	r16, r24
    1a9c:	7b 01       	movw	r14, r22
    1a9e:	6a 01       	movw	r12, r20
    //i2c_start(DS1307_ID, DS1307_ADDR, TW_WRITE); //0xd0
    i2c_start(0xd0);    
    1aa0:	80 ed       	ldi	r24, 0xD0	; 208
    1aa2:	0e 94 5f 0c 	call	0x18be	; 0x18be <i2c_start>
	i2c_write(4);
    1aa6:	84 e0       	ldi	r24, 0x04	; 4
    1aa8:	0e 94 a2 0c 	call	0x1944	; 0x1944 <i2c_write>
    //i2c_start(DS1307_ID, DS1307_ADDR, TW_READ); //0xd1   	
	i2c_start(0xd1);    
    1aac:	81 ed       	ldi	r24, 0xD1	; 209
    1aae:	0e 94 5f 0c 	call	0x18be	; 0x18be <i2c_start>
	*date=bcd2bin(i2c_read(1));
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	0e 94 be 0c 	call	0x197c	; 0x197c <i2c_read>
    1ab8:	28 2f       	mov	r18, r24
    1aba:	22 95       	swap	r18
    1abc:	2f 70       	andi	r18, 0x0F	; 15
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	a9 01       	movw	r20, r18
    1ac2:	63 e0       	ldi	r22, 0x03	; 3
    1ac4:	44 0f       	add	r20, r20
    1ac6:	55 1f       	adc	r21, r21
    1ac8:	6a 95       	dec	r22
    1aca:	e1 f7       	brne	.-8      	; 0x1ac4 <rtc_get_date+0x36>
    1acc:	22 0f       	add	r18, r18
    1ace:	33 1f       	adc	r19, r19
    1ad0:	42 0f       	add	r20, r18
    1ad2:	53 1f       	adc	r21, r19
    1ad4:	8f 70       	andi	r24, 0x0F	; 15
    1ad6:	84 0f       	add	r24, r20
    1ad8:	f8 01       	movw	r30, r16
    1ada:	80 83       	st	Z, r24
	*month=bcd2bin(i2c_read(1));
    1adc:	81 e0       	ldi	r24, 0x01	; 1
    1ade:	0e 94 be 0c 	call	0x197c	; 0x197c <i2c_read>
    1ae2:	28 2f       	mov	r18, r24
    1ae4:	22 95       	swap	r18
    1ae6:	2f 70       	andi	r18, 0x0F	; 15
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	a9 01       	movw	r20, r18
    1aec:	b3 e0       	ldi	r27, 0x03	; 3
    1aee:	44 0f       	add	r20, r20
    1af0:	55 1f       	adc	r21, r21
    1af2:	ba 95       	dec	r27
    1af4:	e1 f7       	brne	.-8      	; 0x1aee <rtc_get_date+0x60>
    1af6:	22 0f       	add	r18, r18
    1af8:	33 1f       	adc	r19, r19
    1afa:	42 0f       	add	r20, r18
    1afc:	53 1f       	adc	r21, r19
    1afe:	8f 70       	andi	r24, 0x0F	; 15
    1b00:	84 0f       	add	r24, r20
    1b02:	f7 01       	movw	r30, r14
    1b04:	80 83       	st	Z, r24
    *year=bcd2bin(i2c_read(0));
    1b06:	80 e0       	ldi	r24, 0x00	; 0
    1b08:	0e 94 be 0c 	call	0x197c	; 0x197c <i2c_read>
    1b0c:	28 2f       	mov	r18, r24
    1b0e:	22 95       	swap	r18
    1b10:	2f 70       	andi	r18, 0x0F	; 15
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	a9 01       	movw	r20, r18
    1b16:	f3 e0       	ldi	r31, 0x03	; 3
    1b18:	44 0f       	add	r20, r20
    1b1a:	55 1f       	adc	r21, r21
    1b1c:	fa 95       	dec	r31
    1b1e:	e1 f7       	brne	.-8      	; 0x1b18 <rtc_get_date+0x8a>
    1b20:	22 0f       	add	r18, r18
    1b22:	33 1f       	adc	r19, r19
    1b24:	42 0f       	add	r20, r18
    1b26:	53 1f       	adc	r21, r19
    1b28:	8f 70       	andi	r24, 0x0F	; 15
    1b2a:	84 0f       	add	r24, r20
    1b2c:	f6 01       	movw	r30, r12
    1b2e:	80 83       	st	Z, r24
	i2c_stop();
    1b30:	0e 94 9f 0c 	call	0x193e	; 0x193e <i2c_stop>

}
    1b34:	1f 91       	pop	r17
    1b36:	0f 91       	pop	r16
    1b38:	ff 90       	pop	r15
    1b3a:	ef 90       	pop	r14
    1b3c:	df 90       	pop	r13
    1b3e:	cf 90       	pop	r12
    1b40:	08 95       	ret

00001b42 <rtc_get_time>:
	i2c_stop();
}


void rtc_get_time(unsigned char *hour, unsigned char *min,unsigned char *sec, unsigned char *wd)
{
    1b42:	af 92       	push	r10
    1b44:	bf 92       	push	r11
    1b46:	cf 92       	push	r12
    1b48:	df 92       	push	r13
    1b4a:	ef 92       	push	r14
    1b4c:	ff 92       	push	r15
    1b4e:	0f 93       	push	r16
    1b50:	1f 93       	push	r17
    1b52:	6c 01       	movw	r12, r24
    1b54:	7b 01       	movw	r14, r22
    1b56:	8a 01       	movw	r16, r20
    1b58:	59 01       	movw	r10, r18
    //i2c_start(DS1307_ID, DS1307_ADDR, TW_WRITE);
    i2c_start(0xd0);    
    1b5a:	80 ed       	ldi	r24, 0xD0	; 208
    1b5c:	0e 94 5f 0c 	call	0x18be	; 0x18be <i2c_start>
	i2c_write(0);
    1b60:	80 e0       	ldi	r24, 0x00	; 0
    1b62:	0e 94 a2 0c 	call	0x1944	; 0x1944 <i2c_write>
    //i2c_start(DS1307_ID, DS1307_ADDR, TW_READ);	
    i2c_start(0xd1);    
    1b66:	81 ed       	ldi	r24, 0xD1	; 209
    1b68:	0e 94 5f 0c 	call	0x18be	; 0x18be <i2c_start>
	*sec = bcd2bin(i2c_read(1));
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	0e 94 be 0c 	call	0x197c	; 0x197c <i2c_read>
    1b72:	28 2f       	mov	r18, r24
    1b74:	22 95       	swap	r18
    1b76:	2f 70       	andi	r18, 0x0F	; 15
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	a9 01       	movw	r20, r18
    1b7c:	63 e0       	ldi	r22, 0x03	; 3
    1b7e:	44 0f       	add	r20, r20
    1b80:	55 1f       	adc	r21, r21
    1b82:	6a 95       	dec	r22
    1b84:	e1 f7       	brne	.-8      	; 0x1b7e <rtc_get_time+0x3c>
    1b86:	22 0f       	add	r18, r18
    1b88:	33 1f       	adc	r19, r19
    1b8a:	42 0f       	add	r20, r18
    1b8c:	53 1f       	adc	r21, r19
    1b8e:	8f 70       	andi	r24, 0x0F	; 15
    1b90:	84 0f       	add	r24, r20
    1b92:	f8 01       	movw	r30, r16
    1b94:	80 83       	st	Z, r24
    *min = bcd2bin(i2c_read(1));
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	0e 94 be 0c 	call	0x197c	; 0x197c <i2c_read>
    1b9c:	28 2f       	mov	r18, r24
    1b9e:	22 95       	swap	r18
    1ba0:	2f 70       	andi	r18, 0x0F	; 15
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	a9 01       	movw	r20, r18
    1ba6:	13 e0       	ldi	r17, 0x03	; 3
    1ba8:	44 0f       	add	r20, r20
    1baa:	55 1f       	adc	r21, r21
    1bac:	1a 95       	dec	r17
    1bae:	e1 f7       	brne	.-8      	; 0x1ba8 <rtc_get_time+0x66>
    1bb0:	22 0f       	add	r18, r18
    1bb2:	33 1f       	adc	r19, r19
    1bb4:	42 0f       	add	r20, r18
    1bb6:	53 1f       	adc	r21, r19
    1bb8:	8f 70       	andi	r24, 0x0F	; 15
    1bba:	84 0f       	add	r24, r20
    1bbc:	f7 01       	movw	r30, r14
    1bbe:	80 83       	st	Z, r24
    *hour = bcd2bin(i2c_read(1));   
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	0e 94 be 0c 	call	0x197c	; 0x197c <i2c_read>
    1bc6:	28 2f       	mov	r18, r24
    1bc8:	22 95       	swap	r18
    1bca:	2f 70       	andi	r18, 0x0F	; 15
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	a9 01       	movw	r20, r18
    1bd0:	a3 e0       	ldi	r26, 0x03	; 3
    1bd2:	44 0f       	add	r20, r20
    1bd4:	55 1f       	adc	r21, r21
    1bd6:	aa 95       	dec	r26
    1bd8:	e1 f7       	brne	.-8      	; 0x1bd2 <rtc_get_time+0x90>
    1bda:	22 0f       	add	r18, r18
    1bdc:	33 1f       	adc	r19, r19
    1bde:	42 0f       	add	r20, r18
    1be0:	53 1f       	adc	r21, r19
    1be2:	8f 70       	andi	r24, 0x0F	; 15
    1be4:	84 0f       	add	r24, r20
    1be6:	f6 01       	movw	r30, r12
    1be8:	80 83       	st	Z, r24
	*wd = bcd2bin(i2c_read(0)); 	
    1bea:	80 e0       	ldi	r24, 0x00	; 0
    1bec:	0e 94 be 0c 	call	0x197c	; 0x197c <i2c_read>
    1bf0:	28 2f       	mov	r18, r24
    1bf2:	22 95       	swap	r18
    1bf4:	2f 70       	andi	r18, 0x0F	; 15
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	a9 01       	movw	r20, r18
    1bfa:	e3 e0       	ldi	r30, 0x03	; 3
    1bfc:	44 0f       	add	r20, r20
    1bfe:	55 1f       	adc	r21, r21
    1c00:	ea 95       	dec	r30
    1c02:	e1 f7       	brne	.-8      	; 0x1bfc <rtc_get_time+0xba>
    1c04:	22 0f       	add	r18, r18
    1c06:	33 1f       	adc	r19, r19
    1c08:	42 0f       	add	r20, r18
    1c0a:	53 1f       	adc	r21, r19
    1c0c:	8f 70       	andi	r24, 0x0F	; 15
    1c0e:	84 0f       	add	r24, r20
    1c10:	f5 01       	movw	r30, r10
    1c12:	80 83       	st	Z, r24
	i2c_stop();
    1c14:	0e 94 9f 0c 	call	0x193e	; 0x193e <i2c_stop>

}
    1c18:	1f 91       	pop	r17
    1c1a:	0f 91       	pop	r16
    1c1c:	ff 90       	pop	r15
    1c1e:	ef 90       	pop	r14
    1c20:	df 90       	pop	r13
    1c22:	cf 90       	pop	r12
    1c24:	bf 90       	pop	r11
    1c26:	af 90       	pop	r10
    1c28:	08 95       	ret

00001c2a <rtc_init>:
                                            // 2 - 8192 Hz
                                            // 3 - 32768 Hz
              unsigned char SQWe,           // turn off a signal at OUT
              unsigned char OUTlevel        // level at OUT, if SQWe==0
              )
{
    1c2a:	1f 93       	push	r17
   
	unsigned char temp;
	PeriodSelect &= 3;
    1c2c:	18 2f       	mov	r17, r24
    1c2e:	13 70       	andi	r17, 0x03	; 3
    // set flags to wrtite into register
	if (SQWe) PeriodSelect |= 0x10;
    1c30:	61 11       	cpse	r22, r1
    1c32:	10 61       	ori	r17, 0x10	; 16
	if (OUTlevel) PeriodSelect |= 0x80;
    1c34:	41 11       	cpse	r20, r1
    1c36:	10 68       	ori	r17, 0x80	; 128
    // out into the bus
	//i2c_start(DS1307_ID, DS1307_ADDR, TW_WRITE);
	i2c_start(0xd0);
    1c38:	80 ed       	ldi	r24, 0xD0	; 208
    1c3a:	0e 94 5f 0c 	call	0x18be	; 0x18be <i2c_start>
	i2c_write(7);
    1c3e:	87 e0       	ldi	r24, 0x07	; 7
    1c40:	0e 94 a2 0c 	call	0x1944	; 0x1944 <i2c_write>
	i2c_write(PeriodSelect);
    1c44:	81 2f       	mov	r24, r17
    1c46:	0e 94 a2 0c 	call	0x1944	; 0x1944 <i2c_write>
	temp=i2c_read(0);
    1c4a:	80 e0       	ldi	r24, 0x00	; 0
    1c4c:	0e 94 be 0c 	call	0x197c	; 0x197c <i2c_read>
	i2c_stop();
    1c50:	0e 94 9f 0c 	call	0x193e	; 0x193e <i2c_stop>
	//if(temp & (1<<CH))
	//  {
	//rtc_set_date(1,1,9);
	//rtc_set_time(0,0,0,1);
	//}
}
    1c54:	1f 91       	pop	r17
    1c56:	08 95       	ret

00001c58 <read_ext_eeprom>:
	_delay_ms(10);
	i2c_stop();
}

char read_ext_eeprom(unsigned int eeprom_address)
{
    1c58:	0f 93       	push	r16
    1c5a:	1f 93       	push	r17
    1c5c:	8c 01       	movw	r16, r24
    char data;
	
	//i2c_start(EEPROM_ID,EEPROM_ADDR,TW_WRITE);
    i2c_start(0xa0);    
    1c5e:	80 ea       	ldi	r24, 0xA0	; 160
    1c60:	0e 94 5f 0c 	call	0x18be	; 0x18be <i2c_start>
	// Send the High 8-bit of I2C Address
	i2c_write(eeprom_address>>8);	
    1c64:	81 2f       	mov	r24, r17
    1c66:	0e 94 a2 0c 	call	0x1944	; 0x1944 <i2c_write>
	 // Send the Low 8-bit of I2C Address
	i2c_write(eeprom_address);
    1c6a:	80 2f       	mov	r24, r16
    1c6c:	0e 94 a2 0c 	call	0x1944	; 0x1944 <i2c_write>
	//i2c_start(EEPROM_ID,EEPROM_ADDR,TW_READ);
    i2c_start(0xa1);    
    1c70:	81 ea       	ldi	r24, 0xA1	; 161
    1c72:	0e 94 5f 0c 	call	0x18be	; 0x18be <i2c_start>
	data=i2c_read(0);
    1c76:	80 e0       	ldi	r24, 0x00	; 0
    1c78:	0e 94 be 0c 	call	0x197c	; 0x197c <i2c_read>
    1c7c:	18 2f       	mov	r17, r24
	i2c_stop();
    1c7e:	0e 94 9f 0c 	call	0x193e	; 0x193e <i2c_stop>
	return data;
}
    1c82:	81 2f       	mov	r24, r17
    1c84:	1f 91       	pop	r17
    1c86:	0f 91       	pop	r16
    1c88:	08 95       	ret

00001c8a <read_float_ext_eeprom>:
		write_ext_eeprom(i + n, *(&data + i) ) ; 
}


float read_float_ext_eeprom(long int n)
{ 
    1c8a:	cf 92       	push	r12
    1c8c:	df 92       	push	r13
    1c8e:	ef 92       	push	r14
    1c90:	ff 92       	push	r15
    1c92:	0f 93       	push	r16
    1c94:	1f 93       	push	r17
    1c96:	df 93       	push	r29
    1c98:	cf 93       	push	r28
    1c9a:	00 d0       	rcall	.+0      	; 0x1c9c <read_float_ext_eeprom+0x12>
    1c9c:	00 d0       	rcall	.+0      	; 0x1c9e <read_float_ext_eeprom+0x14>
    1c9e:	cd b7       	in	r28, 0x3d	; 61
    1ca0:	de b7       	in	r29, 0x3e	; 62
    1ca2:	7b 01       	movw	r14, r22
    1ca4:	8e 01       	movw	r16, r28
    1ca6:	0f 5f       	subi	r16, 0xFF	; 255
    1ca8:	1f 4f       	sbci	r17, 0xFF	; 255
  char i; 
  float data;
  
  for (i=0; i<4; i++) 
    1caa:	81 e1       	ldi	r24, 0x11	; 17
    1cac:	c8 2e       	mov	r12, r24
    1cae:	d1 2c       	mov	r13, r1
    1cb0:	cc 0e       	add	r12, r28
    1cb2:	dd 1e       	adc	r13, r29
	 *(&data + i) = read_ext_eeprom(i + n);
    1cb4:	c7 01       	movw	r24, r14
    1cb6:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <read_ext_eeprom>
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	a0 e0       	ldi	r26, 0x00	; 0
    1cbe:	b0 e0       	ldi	r27, 0x00	; 0
    1cc0:	bc 01       	movw	r22, r24
    1cc2:	cd 01       	movw	r24, r26
    1cc4:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <__floatunsisf>
    1cc8:	f8 01       	movw	r30, r16
    1cca:	61 93       	st	Z+, r22
    1ccc:	71 93       	st	Z+, r23
    1cce:	81 93       	st	Z+, r24
    1cd0:	91 93       	st	Z+, r25
    1cd2:	8f 01       	movw	r16, r30
    1cd4:	08 94       	sec
    1cd6:	e1 1c       	adc	r14, r1
    1cd8:	f1 1c       	adc	r15, r1
float read_float_ext_eeprom(long int n)
{ 
  char i; 
  float data;
  
  for (i=0; i<4; i++) 
    1cda:	ec 15       	cp	r30, r12
    1cdc:	fd 05       	cpc	r31, r13
    1cde:	51 f7       	brne	.-44     	; 0x1cb4 <read_float_ext_eeprom+0x2a>
	 *(&data + i) = read_ext_eeprom(i + n);

  return (data); 
}
    1ce0:	29 81       	ldd	r18, Y+1	; 0x01
    1ce2:	3a 81       	ldd	r19, Y+2	; 0x02
    1ce4:	4b 81       	ldd	r20, Y+3	; 0x03
    1ce6:	5c 81       	ldd	r21, Y+4	; 0x04
    1ce8:	b9 01       	movw	r22, r18
    1cea:	ca 01       	movw	r24, r20
    1cec:	0f 90       	pop	r0
    1cee:	0f 90       	pop	r0
    1cf0:	0f 90       	pop	r0
    1cf2:	0f 90       	pop	r0
    1cf4:	cf 91       	pop	r28
    1cf6:	df 91       	pop	r29
    1cf8:	1f 91       	pop	r17
    1cfa:	0f 91       	pop	r16
    1cfc:	ff 90       	pop	r15
    1cfe:	ef 90       	pop	r14
    1d00:	df 90       	pop	r13
    1d02:	cf 90       	pop	r12
    1d04:	08 95       	ret

00001d06 <write_ext_eeprom>:
 #include "24lc256.h"
 #include <util/delay.h>

void write_ext_eeprom(unsigned int eeprom_address, char data)
{
    1d06:	ff 92       	push	r15
    1d08:	0f 93       	push	r16
    1d0a:	1f 93       	push	r17
    1d0c:	18 2f       	mov	r17, r24
    1d0e:	09 2f       	mov	r16, r25
    1d10:	f6 2e       	mov	r15, r22
    //i2c_start(EEPROM_ID,EEPROM_ADDR,TW_WRITE);
   	i2c_start(0xa0);    
    1d12:	80 ea       	ldi	r24, 0xA0	; 160
    1d14:	0e 94 5f 0c 	call	0x18be	; 0x18be <i2c_start>
	// Send the High 8-bit of I2C Address
	i2c_write(eeprom_address>>8);
    1d18:	80 2f       	mov	r24, r16
    1d1a:	0e 94 a2 0c 	call	0x1944	; 0x1944 <i2c_write>
	// Send the Low 8-bit of I2C Address
	i2c_write(eeprom_address);   	
    1d1e:	81 2f       	mov	r24, r17
    1d20:	0e 94 a2 0c 	call	0x1944	; 0x1944 <i2c_write>
	i2c_write(data);
    1d24:	8f 2d       	mov	r24, r15
    1d26:	0e 94 a2 0c 	call	0x1944	; 0x1944 <i2c_write>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d2a:	80 e2       	ldi	r24, 0x20	; 32
    1d2c:	9e e4       	ldi	r25, 0x4E	; 78
    1d2e:	01 97       	sbiw	r24, 0x01	; 1
    1d30:	f1 f7       	brne	.-4      	; 0x1d2e <write_ext_eeprom+0x28>
	_delay_ms(10);
	i2c_stop();
    1d32:	0e 94 9f 0c 	call	0x193e	; 0x193e <i2c_stop>
}
    1d36:	1f 91       	pop	r17
    1d38:	0f 91       	pop	r16
    1d3a:	ff 90       	pop	r15
    1d3c:	08 95       	ret

00001d3e <test_eeprom>:
  return (data); 
}


char test_eeprom(void)
{
    1d3e:	cf 92       	push	r12
    1d40:	df 92       	push	r13
    1d42:	ef 92       	push	r14
    1d44:	ff 92       	push	r15
    1d46:	0f 93       	push	r16
    1d48:	1f 93       	push	r17
    1d4a:	df 93       	push	r29
    1d4c:	cf 93       	push	r28
    1d4e:	00 d0       	rcall	.+0      	; 0x1d50 <test_eeprom+0x12>
    1d50:	00 d0       	rcall	.+0      	; 0x1d52 <test_eeprom+0x14>
    1d52:	cd b7       	in	r28, 0x3d	; 61
    1d54:	de b7       	in	r29, 0x3e	; 62
     0b00000001,
     0b00000000,
     0b00000000,
     0b00000000,
    };	
  char n[4]={1,2,3,4};
    1d56:	81 e0       	ldi	r24, 0x01	; 1
    1d58:	89 83       	std	Y+1, r24	; 0x01
    1d5a:	82 e0       	ldi	r24, 0x02	; 2
    1d5c:	8a 83       	std	Y+2, r24	; 0x02
    1d5e:	83 e0       	ldi	r24, 0x03	; 3
    1d60:	8b 83       	std	Y+3, r24	; 0x03
    1d62:	84 e0       	ldi	r24, 0x04	; 4
    1d64:	8c 83       	std	Y+4, r24	; 0x04
    1d66:	00 e0       	ldi	r16, 0x00	; 0
    1d68:	10 e0       	ldi	r17, 0x00	; 0
  //id2=read_ext_eeprom(dev_address+1);
 
  // Write to EEPROM if no ID defined
  //if (id1 != buffer[0] || id2 != buffer[1]) {
    for(i=0;i < 4;i++) {
      write_ext_eeprom((dev_address+i), n[i]);
    1d6a:	6e 01       	movw	r12, r28
    1d6c:	08 94       	sec
    1d6e:	c1 1c       	adc	r12, r1
    1d70:	d1 1c       	adc	r13, r1
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d72:	22 e0       	ldi	r18, 0x02	; 2
    1d74:	e2 2e       	mov	r14, r18
    1d76:	f6 01       	movw	r30, r12
    1d78:	e0 0f       	add	r30, r16
    1d7a:	f1 1f       	adc	r31, r17
    1d7c:	c8 01       	movw	r24, r16
    1d7e:	60 81       	ld	r22, Z
    1d80:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <write_ext_eeprom>
    1d84:	92 e0       	ldi	r25, 0x02	; 2
    1d86:	f9 2e       	mov	r15, r25
    1d88:	8e 2d       	mov	r24, r14
    1d8a:	8a 95       	dec	r24
    1d8c:	f1 f7       	brne	.-4      	; 0x1d8a <test_eeprom+0x4c>
  //id1=read_ext_eeprom(dev_address);
  //id2=read_ext_eeprom(dev_address+1);
 
  // Write to EEPROM if no ID defined
  //if (id1 != buffer[0] || id2 != buffer[1]) {
    for(i=0;i < 4;i++) {
    1d8e:	0f 5f       	subi	r16, 0xFF	; 255
    1d90:	1f 4f       	sbci	r17, 0xFF	; 255
    1d92:	04 30       	cpi	r16, 0x04	; 4
    1d94:	11 05       	cpc	r17, r1
    1d96:	79 f7       	brne	.-34     	; 0x1d76 <test_eeprom+0x38>
      write_ext_eeprom((dev_address+i), n[i]);
      _delay_us(1);
    }
	for(i=0;i < 4; i++) { //0 2 4 6
      data=read_ext_eeprom((dev_address+i));
    1d98:	80 e0       	ldi	r24, 0x00	; 0
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <read_ext_eeprom>
    1da0:	8f 2d       	mov	r24, r15
    1da2:	8a 95       	dec	r24
    1da4:	f1 f7       	brne	.-4      	; 0x1da2 <test_eeprom+0x64>
    1da6:	81 e0       	ldi	r24, 0x01	; 1
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <read_ext_eeprom>
    1dae:	8f 2d       	mov	r24, r15
    1db0:	8a 95       	dec	r24
    1db2:	f1 f7       	brne	.-4      	; 0x1db0 <test_eeprom+0x72>
    1db4:	82 e0       	ldi	r24, 0x02	; 2
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <read_ext_eeprom>
    1dbc:	8f 2d       	mov	r24, r15
    1dbe:	8a 95       	dec	r24
    1dc0:	f1 f7       	brne	.-4      	; 0x1dbe <test_eeprom+0x80>
    1dc2:	83 e0       	ldi	r24, 0x03	; 3
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <read_ext_eeprom>
    1dca:	9f 2d       	mov	r25, r15
    1dcc:	9a 95       	dec	r25
    1dce:	f1 f7       	brne	.-4      	; 0x1dcc <test_eeprom+0x8e>
	 // return data;
    }
  //}   
  //data=0;
  return data;
} 
    1dd0:	0f 90       	pop	r0
    1dd2:	0f 90       	pop	r0
    1dd4:	0f 90       	pop	r0
    1dd6:	0f 90       	pop	r0
    1dd8:	cf 91       	pop	r28
    1dda:	df 91       	pop	r29
    1ddc:	1f 91       	pop	r17
    1dde:	0f 91       	pop	r16
    1de0:	ff 90       	pop	r15
    1de2:	ef 90       	pop	r14
    1de4:	df 90       	pop	r13
    1de6:	cf 90       	pop	r12
    1de8:	08 95       	ret

00001dea <write_float_ext_eeprom>:
	return data;
}


void write_float_ext_eeprom(long int n, float data)
{ 
    1dea:	cf 92       	push	r12
    1dec:	df 92       	push	r13
    1dee:	ef 92       	push	r14
    1df0:	ff 92       	push	r15
    1df2:	0f 93       	push	r16
    1df4:	1f 93       	push	r17
    1df6:	df 93       	push	r29
    1df8:	cf 93       	push	r28
    1dfa:	00 d0       	rcall	.+0      	; 0x1dfc <write_float_ext_eeprom+0x12>
    1dfc:	00 d0       	rcall	.+0      	; 0x1dfe <write_float_ext_eeprom+0x14>
    1dfe:	cd b7       	in	r28, 0x3d	; 61
    1e00:	de b7       	in	r29, 0x3e	; 62
    1e02:	29 83       	std	Y+1, r18	; 0x01
    1e04:	3a 83       	std	Y+2, r19	; 0x02
    1e06:	4b 83       	std	Y+3, r20	; 0x03
    1e08:	5c 83       	std	Y+4, r21	; 0x04
    1e0a:	7e 01       	movw	r14, r28
    1e0c:	08 94       	sec
    1e0e:	e1 1c       	adc	r14, r1
    1e10:	f1 1c       	adc	r15, r1
    1e12:	8b 01       	movw	r16, r22
	char i;
	for (i=0; i<4; i++) 
    1e14:	31 e1       	ldi	r19, 0x11	; 17
    1e16:	c3 2e       	mov	r12, r19
    1e18:	d1 2c       	mov	r13, r1
    1e1a:	cc 0e       	add	r12, r28
    1e1c:	dd 1e       	adc	r13, r29
		write_ext_eeprom(i + n, *(&data + i) ) ; 
    1e1e:	f7 01       	movw	r30, r14
    1e20:	61 91       	ld	r22, Z+
    1e22:	71 91       	ld	r23, Z+
    1e24:	81 91       	ld	r24, Z+
    1e26:	91 91       	ld	r25, Z+
    1e28:	7f 01       	movw	r14, r30
    1e2a:	0e 94 b4 13 	call	0x2768	; 0x2768 <__fixunssfsi>
    1e2e:	9b 01       	movw	r18, r22
    1e30:	ac 01       	movw	r20, r24
    1e32:	c8 01       	movw	r24, r16
    1e34:	62 2f       	mov	r22, r18
    1e36:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <write_ext_eeprom>
    1e3a:	0f 5f       	subi	r16, 0xFF	; 255
    1e3c:	1f 4f       	sbci	r17, 0xFF	; 255


void write_float_ext_eeprom(long int n, float data)
{ 
	char i;
	for (i=0; i<4; i++) 
    1e3e:	ec 14       	cp	r14, r12
    1e40:	fd 04       	cpc	r15, r13
    1e42:	69 f7       	brne	.-38     	; 0x1e1e <write_float_ext_eeprom+0x34>
		write_ext_eeprom(i + n, *(&data + i) ) ; 
}
    1e44:	0f 90       	pop	r0
    1e46:	0f 90       	pop	r0
    1e48:	0f 90       	pop	r0
    1e4a:	0f 90       	pop	r0
    1e4c:	cf 91       	pop	r28
    1e4e:	df 91       	pop	r29
    1e50:	1f 91       	pop	r17
    1e52:	0f 91       	pop	r16
    1e54:	ff 90       	pop	r15
    1e56:	ef 90       	pop	r14
    1e58:	df 90       	pop	r13
    1e5a:	cf 90       	pop	r12
    1e5c:	08 95       	ret

00001e5e <initADC>:
#include "mpx4115.h"
#include <math.h>   //math ·≥·Î≥ÓÚÂÍ‡ 

void initADC(void)
{
 ADMUX=(1<<REFS0);  // ‰Îˇ Aref=AVcc
    1e5e:	80 e4       	ldi	r24, 0x40	; 64
    1e60:	87 b9       	out	0x07, r24	; 7
 ADCSRA=(1<<ADEN)|(7<<ADPS0);
    1e62:	87 e8       	ldi	r24, 0x87	; 135
    1e64:	86 b9       	out	0x06, r24	; 6
}                      
    1e66:	08 95       	ret

00001e68 <readADC>:

unsigned int readADC(unsigned char ch)
{
 //‚Ë·‡ÚË Í‡Ì‡Î ¿÷œ ch Ï‡∫ ·ÛÚË 0-7
 ch=ch&0b00000111;
 ADMUX|=ch;
    1e68:	97 b1       	in	r25, 0x07	; 7
    1e6a:	87 70       	andi	r24, 0x07	; 7
    1e6c:	89 2b       	or	r24, r25
    1e6e:	87 b9       	out	0x07, r24	; 7
 //ÔÓ˜‡ÚË ÔÂÂÚ‚ÓÂÌÌˇ
 ADCSRA|=(1<<ADSC);
    1e70:	36 9a       	sbi	0x06, 6	; 6
 //˜ÂÍ‡ÚË Ì‡ Á‡‚Â¯ÂÌÌˇ ÔÂÂÚ‚ÓÂÌÌˇ
 while(!(ADCSRA&(1<<ADIF)));
    1e72:	34 9b       	sbis	0x06, 4	; 6
    1e74:	fe cf       	rjmp	.-4      	; 0x1e72 <readADC+0xa>
 //Ó˜ËÒÚËÚ ADIF Á‡ÔËÒ‡‚¯Ë ‚ Ì¸Ó„Ó 1
 ADCSRA|=(1<<ADIF);
    1e76:	34 9a       	sbi	0x06, 4	; 6
 return (ADC);
    1e78:	24 b1       	in	r18, 0x04	; 4
    1e7a:	35 b1       	in	r19, 0x05	; 5
}   
    1e7c:	c9 01       	movw	r24, r18
    1e7e:	08 95       	ret

00001e80 <press_m>:

unsigned int press_m(unsigned int vin)
{
    1e80:	a0 e0       	ldi	r26, 0x00	; 0
    1e82:	b0 e0       	ldi	r27, 0x00	; 0
    1e84:	bc 01       	movw	r22, r24
    1e86:	cd 01       	movw	r24, r26
    1e88:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <__floatunsisf>
    1e8c:	28 e6       	ldi	r18, 0x68	; 104
    1e8e:	38 ee       	ldi	r19, 0xE8	; 232
    1e90:	4f e9       	ldi	r20, 0x9F	; 159
    1e92:	5b e3       	ldi	r21, 0x3B	; 59
    1e94:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <__mulsf3>
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	40 eb       	ldi	r20, 0xB0	; 176
    1e9e:	51 e4       	ldi	r21, 0x41	; 65
    1ea0:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <__mulsf3>
    1ea4:	2d ec       	ldi	r18, 0xCD	; 205
    1ea6:	3c ec       	ldi	r19, 0xCC	; 204
    1ea8:	48 e2       	ldi	r20, 0x28	; 40
    1eaa:	51 e4       	ldi	r21, 0x41	; 65
    1eac:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <__addsf3>
    1eb0:	0e 94 b4 13 	call	0x2768	; 0x2768 <__fixunssfsi>
 vout=vin*0.00488;//0.00494; //Ì‡ÔÛ„‡ ‚ [V]
 press=(vout*22)+10.55; //Ó·˜ËÒÎÂÌÌˇ ÁÌ‡˜ÂÌÌˇ ÚËÒÍÛ 22.2
 //press=press*10.0; // kPa->hPa ÔÂÂÚ‚ÓÂÌÌˇ Íœ‡ ‚ „œ‡
 press_out=press;
 return press_out;
    1eb4:	cb 01       	movw	r24, r22
    1eb6:	08 95       	ret

00001eb8 <vfprintf>:
    1eb8:	a1 e1       	ldi	r26, 0x11	; 17
    1eba:	b0 e0       	ldi	r27, 0x00	; 0
    1ebc:	e2 e6       	ldi	r30, 0x62	; 98
    1ebe:	ff e0       	ldi	r31, 0x0F	; 15
    1ec0:	0c 94 96 15 	jmp	0x2b2c	; 0x2b2c <__prologue_saves__>
    1ec4:	3c 01       	movw	r6, r24
    1ec6:	7f 87       	std	Y+15, r23	; 0x0f
    1ec8:	6e 87       	std	Y+14, r22	; 0x0e
    1eca:	6a 01       	movw	r12, r20
    1ecc:	fc 01       	movw	r30, r24
    1ece:	17 82       	std	Z+7, r1	; 0x07
    1ed0:	16 82       	std	Z+6, r1	; 0x06
    1ed2:	83 81       	ldd	r24, Z+3	; 0x03
    1ed4:	81 fd       	sbrc	r24, 1
    1ed6:	03 c0       	rjmp	.+6      	; 0x1ede <vfprintf+0x26>
    1ed8:	6f ef       	ldi	r22, 0xFF	; 255
    1eda:	7f ef       	ldi	r23, 0xFF	; 255
    1edc:	6f c3       	rjmp	.+1758   	; 0x25bc <vfprintf+0x704>
    1ede:	9e 01       	movw	r18, r28
    1ee0:	2f 5f       	subi	r18, 0xFF	; 255
    1ee2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ee4:	39 8b       	std	Y+17, r19	; 0x11
    1ee6:	28 8b       	std	Y+16, r18	; 0x10
    1ee8:	f3 01       	movw	r30, r6
    1eea:	23 81       	ldd	r18, Z+3	; 0x03
    1eec:	ee 85       	ldd	r30, Y+14	; 0x0e
    1eee:	ff 85       	ldd	r31, Y+15	; 0x0f
    1ef0:	23 fd       	sbrc	r18, 3
    1ef2:	85 91       	lpm	r24, Z+
    1ef4:	23 ff       	sbrs	r18, 3
    1ef6:	81 91       	ld	r24, Z+
    1ef8:	ff 87       	std	Y+15, r31	; 0x0f
    1efa:	ee 87       	std	Y+14, r30	; 0x0e
    1efc:	88 23       	and	r24, r24
    1efe:	09 f4       	brne	.+2      	; 0x1f02 <vfprintf+0x4a>
    1f00:	5a c3       	rjmp	.+1716   	; 0x25b6 <vfprintf+0x6fe>
    1f02:	85 32       	cpi	r24, 0x25	; 37
    1f04:	51 f4       	brne	.+20     	; 0x1f1a <vfprintf+0x62>
    1f06:	ee 85       	ldd	r30, Y+14	; 0x0e
    1f08:	ff 85       	ldd	r31, Y+15	; 0x0f
    1f0a:	23 fd       	sbrc	r18, 3
    1f0c:	85 91       	lpm	r24, Z+
    1f0e:	23 ff       	sbrs	r18, 3
    1f10:	81 91       	ld	r24, Z+
    1f12:	ff 87       	std	Y+15, r31	; 0x0f
    1f14:	ee 87       	std	Y+14, r30	; 0x0e
    1f16:	85 32       	cpi	r24, 0x25	; 37
    1f18:	29 f4       	brne	.+10     	; 0x1f24 <vfprintf+0x6c>
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	b3 01       	movw	r22, r6
    1f1e:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <fputc>
    1f22:	e2 cf       	rjmp	.-60     	; 0x1ee8 <vfprintf+0x30>
    1f24:	98 2f       	mov	r25, r24
    1f26:	10 e0       	ldi	r17, 0x00	; 0
    1f28:	88 24       	eor	r8, r8
    1f2a:	99 24       	eor	r9, r9
    1f2c:	10 32       	cpi	r17, 0x20	; 32
    1f2e:	b0 f4       	brcc	.+44     	; 0x1f5c <vfprintf+0xa4>
    1f30:	9b 32       	cpi	r25, 0x2B	; 43
    1f32:	69 f0       	breq	.+26     	; 0x1f4e <vfprintf+0x96>
    1f34:	9c 32       	cpi	r25, 0x2C	; 44
    1f36:	28 f4       	brcc	.+10     	; 0x1f42 <vfprintf+0x8a>
    1f38:	90 32       	cpi	r25, 0x20	; 32
    1f3a:	51 f0       	breq	.+20     	; 0x1f50 <vfprintf+0x98>
    1f3c:	93 32       	cpi	r25, 0x23	; 35
    1f3e:	71 f4       	brne	.+28     	; 0x1f5c <vfprintf+0xa4>
    1f40:	0b c0       	rjmp	.+22     	; 0x1f58 <vfprintf+0xa0>
    1f42:	9d 32       	cpi	r25, 0x2D	; 45
    1f44:	39 f0       	breq	.+14     	; 0x1f54 <vfprintf+0x9c>
    1f46:	90 33       	cpi	r25, 0x30	; 48
    1f48:	49 f4       	brne	.+18     	; 0x1f5c <vfprintf+0xa4>
    1f4a:	11 60       	ori	r17, 0x01	; 1
    1f4c:	28 c0       	rjmp	.+80     	; 0x1f9e <vfprintf+0xe6>
    1f4e:	12 60       	ori	r17, 0x02	; 2
    1f50:	14 60       	ori	r17, 0x04	; 4
    1f52:	25 c0       	rjmp	.+74     	; 0x1f9e <vfprintf+0xe6>
    1f54:	18 60       	ori	r17, 0x08	; 8
    1f56:	23 c0       	rjmp	.+70     	; 0x1f9e <vfprintf+0xe6>
    1f58:	10 61       	ori	r17, 0x10	; 16
    1f5a:	21 c0       	rjmp	.+66     	; 0x1f9e <vfprintf+0xe6>
    1f5c:	17 fd       	sbrc	r17, 7
    1f5e:	2a c0       	rjmp	.+84     	; 0x1fb4 <vfprintf+0xfc>
    1f60:	89 2f       	mov	r24, r25
    1f62:	80 53       	subi	r24, 0x30	; 48
    1f64:	8a 30       	cpi	r24, 0x0A	; 10
    1f66:	78 f4       	brcc	.+30     	; 0x1f86 <vfprintf+0xce>
    1f68:	16 ff       	sbrs	r17, 6
    1f6a:	06 c0       	rjmp	.+12     	; 0x1f78 <vfprintf+0xc0>
    1f6c:	fa e0       	ldi	r31, 0x0A	; 10
    1f6e:	9f 9e       	mul	r9, r31
    1f70:	90 2c       	mov	r9, r0
    1f72:	11 24       	eor	r1, r1
    1f74:	98 0e       	add	r9, r24
    1f76:	13 c0       	rjmp	.+38     	; 0x1f9e <vfprintf+0xe6>
    1f78:	3a e0       	ldi	r19, 0x0A	; 10
    1f7a:	83 9e       	mul	r8, r19
    1f7c:	80 2c       	mov	r8, r0
    1f7e:	11 24       	eor	r1, r1
    1f80:	88 0e       	add	r8, r24
    1f82:	10 62       	ori	r17, 0x20	; 32
    1f84:	0c c0       	rjmp	.+24     	; 0x1f9e <vfprintf+0xe6>
    1f86:	9e 32       	cpi	r25, 0x2E	; 46
    1f88:	21 f4       	brne	.+8      	; 0x1f92 <vfprintf+0xda>
    1f8a:	16 fd       	sbrc	r17, 6
    1f8c:	14 c3       	rjmp	.+1576   	; 0x25b6 <vfprintf+0x6fe>
    1f8e:	10 64       	ori	r17, 0x40	; 64
    1f90:	06 c0       	rjmp	.+12     	; 0x1f9e <vfprintf+0xe6>
    1f92:	9c 36       	cpi	r25, 0x6C	; 108
    1f94:	11 f4       	brne	.+4      	; 0x1f9a <vfprintf+0xe2>
    1f96:	10 68       	ori	r17, 0x80	; 128
    1f98:	02 c0       	rjmp	.+4      	; 0x1f9e <vfprintf+0xe6>
    1f9a:	98 36       	cpi	r25, 0x68	; 104
    1f9c:	59 f4       	brne	.+22     	; 0x1fb4 <vfprintf+0xfc>
    1f9e:	ee 85       	ldd	r30, Y+14	; 0x0e
    1fa0:	ff 85       	ldd	r31, Y+15	; 0x0f
    1fa2:	23 fd       	sbrc	r18, 3
    1fa4:	95 91       	lpm	r25, Z+
    1fa6:	23 ff       	sbrs	r18, 3
    1fa8:	91 91       	ld	r25, Z+
    1faa:	ff 87       	std	Y+15, r31	; 0x0f
    1fac:	ee 87       	std	Y+14, r30	; 0x0e
    1fae:	99 23       	and	r25, r25
    1fb0:	09 f0       	breq	.+2      	; 0x1fb4 <vfprintf+0xfc>
    1fb2:	bc cf       	rjmp	.-136    	; 0x1f2c <vfprintf+0x74>
    1fb4:	89 2f       	mov	r24, r25
    1fb6:	85 54       	subi	r24, 0x45	; 69
    1fb8:	83 30       	cpi	r24, 0x03	; 3
    1fba:	20 f4       	brcc	.+8      	; 0x1fc4 <vfprintf+0x10c>
    1fbc:	81 2f       	mov	r24, r17
    1fbe:	80 61       	ori	r24, 0x10	; 16
    1fc0:	90 5e       	subi	r25, 0xE0	; 224
    1fc2:	07 c0       	rjmp	.+14     	; 0x1fd2 <vfprintf+0x11a>
    1fc4:	89 2f       	mov	r24, r25
    1fc6:	85 56       	subi	r24, 0x65	; 101
    1fc8:	83 30       	cpi	r24, 0x03	; 3
    1fca:	08 f0       	brcs	.+2      	; 0x1fce <vfprintf+0x116>
    1fcc:	9f c1       	rjmp	.+830    	; 0x230c <vfprintf+0x454>
    1fce:	81 2f       	mov	r24, r17
    1fd0:	8f 7e       	andi	r24, 0xEF	; 239
    1fd2:	86 fd       	sbrc	r24, 6
    1fd4:	02 c0       	rjmp	.+4      	; 0x1fda <vfprintf+0x122>
    1fd6:	76 e0       	ldi	r23, 0x06	; 6
    1fd8:	97 2e       	mov	r9, r23
    1fda:	6f e3       	ldi	r22, 0x3F	; 63
    1fdc:	f6 2e       	mov	r15, r22
    1fde:	f8 22       	and	r15, r24
    1fe0:	95 36       	cpi	r25, 0x65	; 101
    1fe2:	19 f4       	brne	.+6      	; 0x1fea <vfprintf+0x132>
    1fe4:	f0 e4       	ldi	r31, 0x40	; 64
    1fe6:	ff 2a       	or	r15, r31
    1fe8:	07 c0       	rjmp	.+14     	; 0x1ff8 <vfprintf+0x140>
    1fea:	96 36       	cpi	r25, 0x66	; 102
    1fec:	19 f4       	brne	.+6      	; 0x1ff4 <vfprintf+0x13c>
    1fee:	20 e8       	ldi	r18, 0x80	; 128
    1ff0:	f2 2a       	or	r15, r18
    1ff2:	02 c0       	rjmp	.+4      	; 0x1ff8 <vfprintf+0x140>
    1ff4:	91 10       	cpse	r9, r1
    1ff6:	9a 94       	dec	r9
    1ff8:	f7 fe       	sbrs	r15, 7
    1ffa:	0a c0       	rjmp	.+20     	; 0x2010 <vfprintf+0x158>
    1ffc:	3b e3       	ldi	r19, 0x3B	; 59
    1ffe:	39 15       	cp	r19, r9
    2000:	18 f4       	brcc	.+6      	; 0x2008 <vfprintf+0x150>
    2002:	5c e3       	ldi	r21, 0x3C	; 60
    2004:	b5 2e       	mov	r11, r21
    2006:	02 c0       	rjmp	.+4      	; 0x200c <vfprintf+0x154>
    2008:	b9 2c       	mov	r11, r9
    200a:	b3 94       	inc	r11
    200c:	27 e0       	ldi	r18, 0x07	; 7
    200e:	09 c0       	rjmp	.+18     	; 0x2022 <vfprintf+0x16a>
    2010:	47 e0       	ldi	r20, 0x07	; 7
    2012:	49 15       	cp	r20, r9
    2014:	20 f4       	brcc	.+8      	; 0x201e <vfprintf+0x166>
    2016:	bb 24       	eor	r11, r11
    2018:	47 e0       	ldi	r20, 0x07	; 7
    201a:	94 2e       	mov	r9, r20
    201c:	f7 cf       	rjmp	.-18     	; 0x200c <vfprintf+0x154>
    201e:	29 2d       	mov	r18, r9
    2020:	bb 24       	eor	r11, r11
    2022:	c6 01       	movw	r24, r12
    2024:	04 96       	adiw	r24, 0x04	; 4
    2026:	9d 87       	std	Y+13, r25	; 0x0d
    2028:	8c 87       	std	Y+12, r24	; 0x0c
    202a:	f6 01       	movw	r30, r12
    202c:	60 81       	ld	r22, Z
    202e:	71 81       	ldd	r23, Z+1	; 0x01
    2030:	82 81       	ldd	r24, Z+2	; 0x02
    2032:	93 81       	ldd	r25, Z+3	; 0x03
    2034:	ae 01       	movw	r20, r28
    2036:	4f 5f       	subi	r20, 0xFF	; 255
    2038:	5f 4f       	sbci	r21, 0xFF	; 255
    203a:	0b 2d       	mov	r16, r11
    203c:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <__ftoa_engine>
    2040:	6c 01       	movw	r12, r24
    2042:	09 81       	ldd	r16, Y+1	; 0x01
    2044:	20 2e       	mov	r2, r16
    2046:	33 24       	eor	r3, r3
    2048:	00 ff       	sbrs	r16, 0
    204a:	04 c0       	rjmp	.+8      	; 0x2054 <vfprintf+0x19c>
    204c:	03 fd       	sbrc	r16, 3
    204e:	02 c0       	rjmp	.+4      	; 0x2054 <vfprintf+0x19c>
    2050:	1d e2       	ldi	r17, 0x2D	; 45
    2052:	09 c0       	rjmp	.+18     	; 0x2066 <vfprintf+0x1ae>
    2054:	f1 fe       	sbrs	r15, 1
    2056:	02 c0       	rjmp	.+4      	; 0x205c <vfprintf+0x1a4>
    2058:	1b e2       	ldi	r17, 0x2B	; 43
    205a:	05 c0       	rjmp	.+10     	; 0x2066 <vfprintf+0x1ae>
    205c:	f2 fc       	sbrc	r15, 2
    205e:	02 c0       	rjmp	.+4      	; 0x2064 <vfprintf+0x1ac>
    2060:	10 e0       	ldi	r17, 0x00	; 0
    2062:	01 c0       	rjmp	.+2      	; 0x2066 <vfprintf+0x1ae>
    2064:	10 e2       	ldi	r17, 0x20	; 32
    2066:	c1 01       	movw	r24, r2
    2068:	8c 70       	andi	r24, 0x0C	; 12
    206a:	90 70       	andi	r25, 0x00	; 0
    206c:	89 2b       	or	r24, r25
    206e:	b9 f1       	breq	.+110    	; 0x20de <vfprintf+0x226>
    2070:	11 23       	and	r17, r17
    2072:	11 f4       	brne	.+4      	; 0x2078 <vfprintf+0x1c0>
    2074:	83 e0       	ldi	r24, 0x03	; 3
    2076:	01 c0       	rjmp	.+2      	; 0x207a <vfprintf+0x1c2>
    2078:	84 e0       	ldi	r24, 0x04	; 4
    207a:	88 15       	cp	r24, r8
    207c:	10 f0       	brcs	.+4      	; 0x2082 <vfprintf+0x1ca>
    207e:	88 24       	eor	r8, r8
    2080:	0a c0       	rjmp	.+20     	; 0x2096 <vfprintf+0x1de>
    2082:	88 1a       	sub	r8, r24
    2084:	f3 fc       	sbrc	r15, 3
    2086:	07 c0       	rjmp	.+14     	; 0x2096 <vfprintf+0x1de>
    2088:	80 e2       	ldi	r24, 0x20	; 32
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	b3 01       	movw	r22, r6
    208e:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <fputc>
    2092:	8a 94       	dec	r8
    2094:	c9 f7       	brne	.-14     	; 0x2088 <vfprintf+0x1d0>
    2096:	11 23       	and	r17, r17
    2098:	29 f0       	breq	.+10     	; 0x20a4 <vfprintf+0x1ec>
    209a:	81 2f       	mov	r24, r17
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	b3 01       	movw	r22, r6
    20a0:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <fputc>
    20a4:	23 fe       	sbrs	r2, 3
    20a6:	03 c0       	rjmp	.+6      	; 0x20ae <vfprintf+0x1f6>
    20a8:	0e ea       	ldi	r16, 0xAE	; 174
    20aa:	10 e0       	ldi	r17, 0x00	; 0
    20ac:	0e c0       	rjmp	.+28     	; 0x20ca <vfprintf+0x212>
    20ae:	02 eb       	ldi	r16, 0xB2	; 178
    20b0:	10 e0       	ldi	r17, 0x00	; 0
    20b2:	0b c0       	rjmp	.+22     	; 0x20ca <vfprintf+0x212>
    20b4:	e1 14       	cp	r14, r1
    20b6:	f1 04       	cpc	r15, r1
    20b8:	09 f0       	breq	.+2      	; 0x20bc <vfprintf+0x204>
    20ba:	80 52       	subi	r24, 0x20	; 32
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	b3 01       	movw	r22, r6
    20c0:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <fputc>
    20c4:	0f 5f       	subi	r16, 0xFF	; 255
    20c6:	1f 4f       	sbci	r17, 0xFF	; 255
    20c8:	05 c0       	rjmp	.+10     	; 0x20d4 <vfprintf+0x21c>
    20ca:	ef 2c       	mov	r14, r15
    20cc:	ff 24       	eor	r15, r15
    20ce:	f0 e1       	ldi	r31, 0x10	; 16
    20d0:	ef 22       	and	r14, r31
    20d2:	ff 24       	eor	r15, r15
    20d4:	f8 01       	movw	r30, r16
    20d6:	84 91       	lpm	r24, Z+
    20d8:	88 23       	and	r24, r24
    20da:	61 f7       	brne	.-40     	; 0x20b4 <vfprintf+0x1fc>
    20dc:	14 c1       	rjmp	.+552    	; 0x2306 <vfprintf+0x44e>
    20de:	f7 fe       	sbrs	r15, 7
    20e0:	12 c0       	rjmp	.+36     	; 0x2106 <vfprintf+0x24e>
    20e2:	bc 0c       	add	r11, r12
    20e4:	24 fe       	sbrs	r2, 4
    20e6:	04 c0       	rjmp	.+8      	; 0x20f0 <vfprintf+0x238>
    20e8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ea:	81 33       	cpi	r24, 0x31	; 49
    20ec:	09 f4       	brne	.+2      	; 0x20f0 <vfprintf+0x238>
    20ee:	ba 94       	dec	r11
    20f0:	1b 14       	cp	r1, r11
    20f2:	1c f0       	brlt	.+6      	; 0x20fa <vfprintf+0x242>
    20f4:	bb 24       	eor	r11, r11
    20f6:	b3 94       	inc	r11
    20f8:	2d c0       	rjmp	.+90     	; 0x2154 <vfprintf+0x29c>
    20fa:	f8 e0       	ldi	r31, 0x08	; 8
    20fc:	fb 15       	cp	r31, r11
    20fe:	50 f5       	brcc	.+84     	; 0x2154 <vfprintf+0x29c>
    2100:	38 e0       	ldi	r19, 0x08	; 8
    2102:	b3 2e       	mov	r11, r19
    2104:	27 c0       	rjmp	.+78     	; 0x2154 <vfprintf+0x29c>
    2106:	f6 fc       	sbrc	r15, 6
    2108:	25 c0       	rjmp	.+74     	; 0x2154 <vfprintf+0x29c>
    210a:	89 2d       	mov	r24, r9
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	8c 15       	cp	r24, r12
    2110:	9d 05       	cpc	r25, r13
    2112:	4c f0       	brlt	.+18     	; 0x2126 <vfprintf+0x26e>
    2114:	2c ef       	ldi	r18, 0xFC	; 252
    2116:	c2 16       	cp	r12, r18
    2118:	2f ef       	ldi	r18, 0xFF	; 255
    211a:	d2 06       	cpc	r13, r18
    211c:	24 f0       	brlt	.+8      	; 0x2126 <vfprintf+0x26e>
    211e:	30 e8       	ldi	r19, 0x80	; 128
    2120:	f3 2a       	or	r15, r19
    2122:	01 c0       	rjmp	.+2      	; 0x2126 <vfprintf+0x26e>
    2124:	9a 94       	dec	r9
    2126:	99 20       	and	r9, r9
    2128:	49 f0       	breq	.+18     	; 0x213c <vfprintf+0x284>
    212a:	e2 e0       	ldi	r30, 0x02	; 2
    212c:	f0 e0       	ldi	r31, 0x00	; 0
    212e:	ec 0f       	add	r30, r28
    2130:	fd 1f       	adc	r31, r29
    2132:	e9 0d       	add	r30, r9
    2134:	f1 1d       	adc	r31, r1
    2136:	80 81       	ld	r24, Z
    2138:	80 33       	cpi	r24, 0x30	; 48
    213a:	a1 f3       	breq	.-24     	; 0x2124 <vfprintf+0x26c>
    213c:	f7 fe       	sbrs	r15, 7
    213e:	0a c0       	rjmp	.+20     	; 0x2154 <vfprintf+0x29c>
    2140:	b9 2c       	mov	r11, r9
    2142:	b3 94       	inc	r11
    2144:	89 2d       	mov	r24, r9
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	c8 16       	cp	r12, r24
    214a:	d9 06       	cpc	r13, r25
    214c:	14 f0       	brlt	.+4      	; 0x2152 <vfprintf+0x29a>
    214e:	99 24       	eor	r9, r9
    2150:	01 c0       	rjmp	.+2      	; 0x2154 <vfprintf+0x29c>
    2152:	9c 18       	sub	r9, r12
    2154:	f7 fc       	sbrc	r15, 7
    2156:	03 c0       	rjmp	.+6      	; 0x215e <vfprintf+0x2a6>
    2158:	25 e0       	ldi	r18, 0x05	; 5
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	09 c0       	rjmp	.+18     	; 0x2170 <vfprintf+0x2b8>
    215e:	1c 14       	cp	r1, r12
    2160:	1d 04       	cpc	r1, r13
    2162:	1c f0       	brlt	.+6      	; 0x216a <vfprintf+0x2b2>
    2164:	21 e0       	ldi	r18, 0x01	; 1
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	03 c0       	rjmp	.+6      	; 0x2170 <vfprintf+0x2b8>
    216a:	96 01       	movw	r18, r12
    216c:	2f 5f       	subi	r18, 0xFF	; 255
    216e:	3f 4f       	sbci	r19, 0xFF	; 255
    2170:	11 23       	and	r17, r17
    2172:	11 f0       	breq	.+4      	; 0x2178 <vfprintf+0x2c0>
    2174:	2f 5f       	subi	r18, 0xFF	; 255
    2176:	3f 4f       	sbci	r19, 0xFF	; 255
    2178:	99 20       	and	r9, r9
    217a:	29 f0       	breq	.+10     	; 0x2186 <vfprintf+0x2ce>
    217c:	89 2d       	mov	r24, r9
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	01 96       	adiw	r24, 0x01	; 1
    2182:	28 0f       	add	r18, r24
    2184:	39 1f       	adc	r19, r25
    2186:	88 2d       	mov	r24, r8
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	28 17       	cp	r18, r24
    218c:	39 07       	cpc	r19, r25
    218e:	14 f0       	brlt	.+4      	; 0x2194 <vfprintf+0x2dc>
    2190:	88 24       	eor	r8, r8
    2192:	01 c0       	rjmp	.+2      	; 0x2196 <vfprintf+0x2de>
    2194:	82 1a       	sub	r8, r18
    2196:	4f 2c       	mov	r4, r15
    2198:	55 24       	eor	r5, r5
    219a:	c2 01       	movw	r24, r4
    219c:	89 70       	andi	r24, 0x09	; 9
    219e:	90 70       	andi	r25, 0x00	; 0
    21a0:	89 2b       	or	r24, r25
    21a2:	39 f0       	breq	.+14     	; 0x21b2 <vfprintf+0x2fa>
    21a4:	08 c0       	rjmp	.+16     	; 0x21b6 <vfprintf+0x2fe>
    21a6:	80 e2       	ldi	r24, 0x20	; 32
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	b3 01       	movw	r22, r6
    21ac:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <fputc>
    21b0:	8a 94       	dec	r8
    21b2:	88 20       	and	r8, r8
    21b4:	c1 f7       	brne	.-16     	; 0x21a6 <vfprintf+0x2ee>
    21b6:	11 23       	and	r17, r17
    21b8:	29 f0       	breq	.+10     	; 0x21c4 <vfprintf+0x30c>
    21ba:	81 2f       	mov	r24, r17
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	b3 01       	movw	r22, r6
    21c0:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <fputc>
    21c4:	43 fe       	sbrs	r4, 3
    21c6:	07 c0       	rjmp	.+14     	; 0x21d6 <vfprintf+0x31e>
    21c8:	08 c0       	rjmp	.+16     	; 0x21da <vfprintf+0x322>
    21ca:	80 e3       	ldi	r24, 0x30	; 48
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	b3 01       	movw	r22, r6
    21d0:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <fputc>
    21d4:	8a 94       	dec	r8
    21d6:	88 20       	and	r8, r8
    21d8:	c1 f7       	brne	.-16     	; 0x21ca <vfprintf+0x312>
    21da:	f7 fe       	sbrs	r15, 7
    21dc:	46 c0       	rjmp	.+140    	; 0x226a <vfprintf+0x3b2>
    21de:	86 01       	movw	r16, r12
    21e0:	d7 fe       	sbrs	r13, 7
    21e2:	02 c0       	rjmp	.+4      	; 0x21e8 <vfprintf+0x330>
    21e4:	00 e0       	ldi	r16, 0x00	; 0
    21e6:	10 e0       	ldi	r17, 0x00	; 0
    21e8:	76 01       	movw	r14, r12
    21ea:	08 94       	sec
    21ec:	e1 1c       	adc	r14, r1
    21ee:	f1 1c       	adc	r15, r1
    21f0:	e0 1a       	sub	r14, r16
    21f2:	f1 0a       	sbc	r15, r17
    21f4:	41 e0       	ldi	r20, 0x01	; 1
    21f6:	50 e0       	ldi	r21, 0x00	; 0
    21f8:	4c 0f       	add	r20, r28
    21fa:	5d 1f       	adc	r21, r29
    21fc:	e4 0e       	add	r14, r20
    21fe:	f5 1e       	adc	r15, r21
    2200:	26 01       	movw	r4, r12
    2202:	4b 18       	sub	r4, r11
    2204:	51 08       	sbc	r5, r1
    2206:	89 2d       	mov	r24, r9
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	aa 24       	eor	r10, r10
    220c:	bb 24       	eor	r11, r11
    220e:	a8 1a       	sub	r10, r24
    2210:	b9 0a       	sbc	r11, r25
    2212:	5f ef       	ldi	r21, 0xFF	; 255
    2214:	0f 3f       	cpi	r16, 0xFF	; 255
    2216:	15 07       	cpc	r17, r21
    2218:	29 f4       	brne	.+10     	; 0x2224 <vfprintf+0x36c>
    221a:	8e e2       	ldi	r24, 0x2E	; 46
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	b3 01       	movw	r22, r6
    2220:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <fputc>
    2224:	c0 16       	cp	r12, r16
    2226:	d1 06       	cpc	r13, r17
    2228:	34 f0       	brlt	.+12     	; 0x2236 <vfprintf+0x37e>
    222a:	40 16       	cp	r4, r16
    222c:	51 06       	cpc	r5, r17
    222e:	1c f4       	brge	.+6      	; 0x2236 <vfprintf+0x37e>
    2230:	f7 01       	movw	r30, r14
    2232:	80 81       	ld	r24, Z
    2234:	01 c0       	rjmp	.+2      	; 0x2238 <vfprintf+0x380>
    2236:	80 e3       	ldi	r24, 0x30	; 48
    2238:	01 50       	subi	r16, 0x01	; 1
    223a:	10 40       	sbci	r17, 0x00	; 0
    223c:	08 94       	sec
    223e:	e1 1c       	adc	r14, r1
    2240:	f1 1c       	adc	r15, r1
    2242:	0a 15       	cp	r16, r10
    2244:	1b 05       	cpc	r17, r11
    2246:	2c f0       	brlt	.+10     	; 0x2252 <vfprintf+0x39a>
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	b3 01       	movw	r22, r6
    224c:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <fputc>
    2250:	e0 cf       	rjmp	.-64     	; 0x2212 <vfprintf+0x35a>
    2252:	0c 15       	cp	r16, r12
    2254:	1d 05       	cpc	r17, r13
    2256:	39 f4       	brne	.+14     	; 0x2266 <vfprintf+0x3ae>
    2258:	9a 81       	ldd	r25, Y+2	; 0x02
    225a:	96 33       	cpi	r25, 0x36	; 54
    225c:	18 f4       	brcc	.+6      	; 0x2264 <vfprintf+0x3ac>
    225e:	95 33       	cpi	r25, 0x35	; 53
    2260:	11 f4       	brne	.+4      	; 0x2266 <vfprintf+0x3ae>
    2262:	24 fe       	sbrs	r2, 4
    2264:	81 e3       	ldi	r24, 0x31	; 49
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	4b c0       	rjmp	.+150    	; 0x2300 <vfprintf+0x448>
    226a:	8a 81       	ldd	r24, Y+2	; 0x02
    226c:	81 33       	cpi	r24, 0x31	; 49
    226e:	09 f0       	breq	.+2      	; 0x2272 <vfprintf+0x3ba>
    2270:	0f 7e       	andi	r16, 0xEF	; 239
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	b3 01       	movw	r22, r6
    2276:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <fputc>
    227a:	99 20       	and	r9, r9
    227c:	a1 f0       	breq	.+40     	; 0x22a6 <vfprintf+0x3ee>
    227e:	8e e2       	ldi	r24, 0x2E	; 46
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	b3 01       	movw	r22, r6
    2284:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <fputc>
    2288:	12 e0       	ldi	r17, 0x02	; 2
    228a:	e1 e0       	ldi	r30, 0x01	; 1
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	ec 0f       	add	r30, r28
    2290:	fd 1f       	adc	r31, r29
    2292:	e1 0f       	add	r30, r17
    2294:	f1 1d       	adc	r31, r1
    2296:	1f 5f       	subi	r17, 0xFF	; 255
    2298:	80 81       	ld	r24, Z
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	b3 01       	movw	r22, r6
    229e:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <fputc>
    22a2:	9a 94       	dec	r9
    22a4:	91 f7       	brne	.-28     	; 0x228a <vfprintf+0x3d2>
    22a6:	44 fc       	sbrc	r4, 4
    22a8:	03 c0       	rjmp	.+6      	; 0x22b0 <vfprintf+0x3f8>
    22aa:	85 e6       	ldi	r24, 0x65	; 101
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	02 c0       	rjmp	.+4      	; 0x22b4 <vfprintf+0x3fc>
    22b0:	85 e4       	ldi	r24, 0x45	; 69
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	b3 01       	movw	r22, r6
    22b6:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <fputc>
    22ba:	d7 fc       	sbrc	r13, 7
    22bc:	05 c0       	rjmp	.+10     	; 0x22c8 <vfprintf+0x410>
    22be:	c1 14       	cp	r12, r1
    22c0:	d1 04       	cpc	r13, r1
    22c2:	41 f4       	brne	.+16     	; 0x22d4 <vfprintf+0x41c>
    22c4:	04 ff       	sbrs	r16, 4
    22c6:	06 c0       	rjmp	.+12     	; 0x22d4 <vfprintf+0x41c>
    22c8:	d0 94       	com	r13
    22ca:	c1 94       	neg	r12
    22cc:	d1 08       	sbc	r13, r1
    22ce:	d3 94       	inc	r13
    22d0:	8d e2       	ldi	r24, 0x2D	; 45
    22d2:	01 c0       	rjmp	.+2      	; 0x22d6 <vfprintf+0x41e>
    22d4:	8b e2       	ldi	r24, 0x2B	; 43
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	b3 01       	movw	r22, r6
    22da:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <fputc>
    22de:	80 e3       	ldi	r24, 0x30	; 48
    22e0:	05 c0       	rjmp	.+10     	; 0x22ec <vfprintf+0x434>
    22e2:	8f 5f       	subi	r24, 0xFF	; 255
    22e4:	26 ef       	ldi	r18, 0xF6	; 246
    22e6:	3f ef       	ldi	r19, 0xFF	; 255
    22e8:	c2 0e       	add	r12, r18
    22ea:	d3 1e       	adc	r13, r19
    22ec:	3a e0       	ldi	r19, 0x0A	; 10
    22ee:	c3 16       	cp	r12, r19
    22f0:	d1 04       	cpc	r13, r1
    22f2:	bc f7       	brge	.-18     	; 0x22e2 <vfprintf+0x42a>
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	b3 01       	movw	r22, r6
    22f8:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <fputc>
    22fc:	c6 01       	movw	r24, r12
    22fe:	c0 96       	adiw	r24, 0x30	; 48
    2300:	b3 01       	movw	r22, r6
    2302:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <fputc>
    2306:	cc 84       	ldd	r12, Y+12	; 0x0c
    2308:	dd 84       	ldd	r13, Y+13	; 0x0d
    230a:	52 c1       	rjmp	.+676    	; 0x25b0 <vfprintf+0x6f8>
    230c:	93 36       	cpi	r25, 0x63	; 99
    230e:	31 f0       	breq	.+12     	; 0x231c <vfprintf+0x464>
    2310:	93 37       	cpi	r25, 0x73	; 115
    2312:	99 f0       	breq	.+38     	; 0x233a <vfprintf+0x482>
    2314:	93 35       	cpi	r25, 0x53	; 83
    2316:	09 f0       	breq	.+2      	; 0x231a <vfprintf+0x462>
    2318:	59 c0       	rjmp	.+178    	; 0x23cc <vfprintf+0x514>
    231a:	23 c0       	rjmp	.+70     	; 0x2362 <vfprintf+0x4aa>
    231c:	f6 01       	movw	r30, r12
    231e:	80 81       	ld	r24, Z
    2320:	89 83       	std	Y+1, r24	; 0x01
    2322:	5e 01       	movw	r10, r28
    2324:	08 94       	sec
    2326:	a1 1c       	adc	r10, r1
    2328:	b1 1c       	adc	r11, r1
    232a:	22 e0       	ldi	r18, 0x02	; 2
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	c2 0e       	add	r12, r18
    2330:	d3 1e       	adc	r13, r19
    2332:	21 e0       	ldi	r18, 0x01	; 1
    2334:	e2 2e       	mov	r14, r18
    2336:	f1 2c       	mov	r15, r1
    2338:	12 c0       	rjmp	.+36     	; 0x235e <vfprintf+0x4a6>
    233a:	f6 01       	movw	r30, r12
    233c:	a0 80       	ld	r10, Z
    233e:	b1 80       	ldd	r11, Z+1	; 0x01
    2340:	16 fd       	sbrc	r17, 6
    2342:	03 c0       	rjmp	.+6      	; 0x234a <vfprintf+0x492>
    2344:	6f ef       	ldi	r22, 0xFF	; 255
    2346:	7f ef       	ldi	r23, 0xFF	; 255
    2348:	02 c0       	rjmp	.+4      	; 0x234e <vfprintf+0x496>
    234a:	69 2d       	mov	r22, r9
    234c:	70 e0       	ldi	r23, 0x00	; 0
    234e:	22 e0       	ldi	r18, 0x02	; 2
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	c2 0e       	add	r12, r18
    2354:	d3 1e       	adc	r13, r19
    2356:	c5 01       	movw	r24, r10
    2358:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <strnlen>
    235c:	7c 01       	movw	r14, r24
    235e:	1f 77       	andi	r17, 0x7F	; 127
    2360:	13 c0       	rjmp	.+38     	; 0x2388 <vfprintf+0x4d0>
    2362:	f6 01       	movw	r30, r12
    2364:	a0 80       	ld	r10, Z
    2366:	b1 80       	ldd	r11, Z+1	; 0x01
    2368:	16 fd       	sbrc	r17, 6
    236a:	03 c0       	rjmp	.+6      	; 0x2372 <vfprintf+0x4ba>
    236c:	6f ef       	ldi	r22, 0xFF	; 255
    236e:	7f ef       	ldi	r23, 0xFF	; 255
    2370:	02 c0       	rjmp	.+4      	; 0x2376 <vfprintf+0x4be>
    2372:	69 2d       	mov	r22, r9
    2374:	70 e0       	ldi	r23, 0x00	; 0
    2376:	22 e0       	ldi	r18, 0x02	; 2
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	c2 0e       	add	r12, r18
    237c:	d3 1e       	adc	r13, r19
    237e:	c5 01       	movw	r24, r10
    2380:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <strnlen_P>
    2384:	7c 01       	movw	r14, r24
    2386:	10 68       	ori	r17, 0x80	; 128
    2388:	13 ff       	sbrs	r17, 3
    238a:	07 c0       	rjmp	.+14     	; 0x239a <vfprintf+0x4e2>
    238c:	1b c0       	rjmp	.+54     	; 0x23c4 <vfprintf+0x50c>
    238e:	80 e2       	ldi	r24, 0x20	; 32
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	b3 01       	movw	r22, r6
    2394:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <fputc>
    2398:	8a 94       	dec	r8
    239a:	88 2d       	mov	r24, r8
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	e8 16       	cp	r14, r24
    23a0:	f9 06       	cpc	r15, r25
    23a2:	a8 f3       	brcs	.-22     	; 0x238e <vfprintf+0x4d6>
    23a4:	0f c0       	rjmp	.+30     	; 0x23c4 <vfprintf+0x50c>
    23a6:	f5 01       	movw	r30, r10
    23a8:	17 fd       	sbrc	r17, 7
    23aa:	85 91       	lpm	r24, Z+
    23ac:	17 ff       	sbrs	r17, 7
    23ae:	81 91       	ld	r24, Z+
    23b0:	5f 01       	movw	r10, r30
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	b3 01       	movw	r22, r6
    23b6:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <fputc>
    23ba:	81 10       	cpse	r8, r1
    23bc:	8a 94       	dec	r8
    23be:	08 94       	sec
    23c0:	e1 08       	sbc	r14, r1
    23c2:	f1 08       	sbc	r15, r1
    23c4:	e1 14       	cp	r14, r1
    23c6:	f1 04       	cpc	r15, r1
    23c8:	71 f7       	brne	.-36     	; 0x23a6 <vfprintf+0x4ee>
    23ca:	f2 c0       	rjmp	.+484    	; 0x25b0 <vfprintf+0x6f8>
    23cc:	94 36       	cpi	r25, 0x64	; 100
    23ce:	11 f0       	breq	.+4      	; 0x23d4 <vfprintf+0x51c>
    23d0:	99 36       	cpi	r25, 0x69	; 105
    23d2:	89 f5       	brne	.+98     	; 0x2436 <vfprintf+0x57e>
    23d4:	17 ff       	sbrs	r17, 7
    23d6:	08 c0       	rjmp	.+16     	; 0x23e8 <vfprintf+0x530>
    23d8:	f6 01       	movw	r30, r12
    23da:	20 81       	ld	r18, Z
    23dc:	31 81       	ldd	r19, Z+1	; 0x01
    23de:	42 81       	ldd	r20, Z+2	; 0x02
    23e0:	53 81       	ldd	r21, Z+3	; 0x03
    23e2:	84 e0       	ldi	r24, 0x04	; 4
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	0a c0       	rjmp	.+20     	; 0x23fc <vfprintf+0x544>
    23e8:	f6 01       	movw	r30, r12
    23ea:	80 81       	ld	r24, Z
    23ec:	91 81       	ldd	r25, Z+1	; 0x01
    23ee:	9c 01       	movw	r18, r24
    23f0:	44 27       	eor	r20, r20
    23f2:	37 fd       	sbrc	r19, 7
    23f4:	40 95       	com	r20
    23f6:	54 2f       	mov	r21, r20
    23f8:	82 e0       	ldi	r24, 0x02	; 2
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	c8 0e       	add	r12, r24
    23fe:	d9 1e       	adc	r13, r25
    2400:	9f e6       	ldi	r25, 0x6F	; 111
    2402:	f9 2e       	mov	r15, r25
    2404:	f1 22       	and	r15, r17
    2406:	57 ff       	sbrs	r21, 7
    2408:	09 c0       	rjmp	.+18     	; 0x241c <vfprintf+0x564>
    240a:	50 95       	com	r21
    240c:	40 95       	com	r20
    240e:	30 95       	com	r19
    2410:	21 95       	neg	r18
    2412:	3f 4f       	sbci	r19, 0xFF	; 255
    2414:	4f 4f       	sbci	r20, 0xFF	; 255
    2416:	5f 4f       	sbci	r21, 0xFF	; 255
    2418:	90 e8       	ldi	r25, 0x80	; 128
    241a:	f9 2a       	or	r15, r25
    241c:	ca 01       	movw	r24, r20
    241e:	b9 01       	movw	r22, r18
    2420:	ae 01       	movw	r20, r28
    2422:	4f 5f       	subi	r20, 0xFF	; 255
    2424:	5f 4f       	sbci	r21, 0xFF	; 255
    2426:	2a e0       	ldi	r18, 0x0A	; 10
    2428:	30 e0       	ldi	r19, 0x00	; 0
    242a:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <__ultoa_invert>
    242e:	e8 2e       	mov	r14, r24
    2430:	e8 89       	ldd	r30, Y+16	; 0x10
    2432:	ee 1a       	sub	r14, r30
    2434:	41 c0       	rjmp	.+130    	; 0x24b8 <vfprintf+0x600>
    2436:	95 37       	cpi	r25, 0x75	; 117
    2438:	21 f4       	brne	.+8      	; 0x2442 <vfprintf+0x58a>
    243a:	1f 7e       	andi	r17, 0xEF	; 239
    243c:	2a e0       	ldi	r18, 0x0A	; 10
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	1c c0       	rjmp	.+56     	; 0x247a <vfprintf+0x5c2>
    2442:	19 7f       	andi	r17, 0xF9	; 249
    2444:	9f 36       	cpi	r25, 0x6F	; 111
    2446:	61 f0       	breq	.+24     	; 0x2460 <vfprintf+0x5a8>
    2448:	90 37       	cpi	r25, 0x70	; 112
    244a:	20 f4       	brcc	.+8      	; 0x2454 <vfprintf+0x59c>
    244c:	98 35       	cpi	r25, 0x58	; 88
    244e:	09 f0       	breq	.+2      	; 0x2452 <vfprintf+0x59a>
    2450:	b2 c0       	rjmp	.+356    	; 0x25b6 <vfprintf+0x6fe>
    2452:	0f c0       	rjmp	.+30     	; 0x2472 <vfprintf+0x5ba>
    2454:	90 37       	cpi	r25, 0x70	; 112
    2456:	39 f0       	breq	.+14     	; 0x2466 <vfprintf+0x5ae>
    2458:	98 37       	cpi	r25, 0x78	; 120
    245a:	09 f0       	breq	.+2      	; 0x245e <vfprintf+0x5a6>
    245c:	ac c0       	rjmp	.+344    	; 0x25b6 <vfprintf+0x6fe>
    245e:	04 c0       	rjmp	.+8      	; 0x2468 <vfprintf+0x5b0>
    2460:	28 e0       	ldi	r18, 0x08	; 8
    2462:	30 e0       	ldi	r19, 0x00	; 0
    2464:	0a c0       	rjmp	.+20     	; 0x247a <vfprintf+0x5c2>
    2466:	10 61       	ori	r17, 0x10	; 16
    2468:	14 fd       	sbrc	r17, 4
    246a:	14 60       	ori	r17, 0x04	; 4
    246c:	20 e1       	ldi	r18, 0x10	; 16
    246e:	30 e0       	ldi	r19, 0x00	; 0
    2470:	04 c0       	rjmp	.+8      	; 0x247a <vfprintf+0x5c2>
    2472:	14 fd       	sbrc	r17, 4
    2474:	16 60       	ori	r17, 0x06	; 6
    2476:	20 e1       	ldi	r18, 0x10	; 16
    2478:	32 e0       	ldi	r19, 0x02	; 2
    247a:	17 ff       	sbrs	r17, 7
    247c:	08 c0       	rjmp	.+16     	; 0x248e <vfprintf+0x5d6>
    247e:	f6 01       	movw	r30, r12
    2480:	60 81       	ld	r22, Z
    2482:	71 81       	ldd	r23, Z+1	; 0x01
    2484:	82 81       	ldd	r24, Z+2	; 0x02
    2486:	93 81       	ldd	r25, Z+3	; 0x03
    2488:	44 e0       	ldi	r20, 0x04	; 4
    248a:	50 e0       	ldi	r21, 0x00	; 0
    248c:	08 c0       	rjmp	.+16     	; 0x249e <vfprintf+0x5e6>
    248e:	f6 01       	movw	r30, r12
    2490:	80 81       	ld	r24, Z
    2492:	91 81       	ldd	r25, Z+1	; 0x01
    2494:	bc 01       	movw	r22, r24
    2496:	80 e0       	ldi	r24, 0x00	; 0
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	42 e0       	ldi	r20, 0x02	; 2
    249c:	50 e0       	ldi	r21, 0x00	; 0
    249e:	c4 0e       	add	r12, r20
    24a0:	d5 1e       	adc	r13, r21
    24a2:	ae 01       	movw	r20, r28
    24a4:	4f 5f       	subi	r20, 0xFF	; 255
    24a6:	5f 4f       	sbci	r21, 0xFF	; 255
    24a8:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <__ultoa_invert>
    24ac:	e8 2e       	mov	r14, r24
    24ae:	58 89       	ldd	r21, Y+16	; 0x10
    24b0:	e5 1a       	sub	r14, r21
    24b2:	8f e7       	ldi	r24, 0x7F	; 127
    24b4:	f8 2e       	mov	r15, r24
    24b6:	f1 22       	and	r15, r17
    24b8:	f6 fe       	sbrs	r15, 6
    24ba:	0b c0       	rjmp	.+22     	; 0x24d2 <vfprintf+0x61a>
    24bc:	8e ef       	ldi	r24, 0xFE	; 254
    24be:	f8 22       	and	r15, r24
    24c0:	e9 14       	cp	r14, r9
    24c2:	38 f4       	brcc	.+14     	; 0x24d2 <vfprintf+0x61a>
    24c4:	f4 fe       	sbrs	r15, 4
    24c6:	07 c0       	rjmp	.+14     	; 0x24d6 <vfprintf+0x61e>
    24c8:	f2 fc       	sbrc	r15, 2
    24ca:	05 c0       	rjmp	.+10     	; 0x24d6 <vfprintf+0x61e>
    24cc:	9f ee       	ldi	r25, 0xEF	; 239
    24ce:	f9 22       	and	r15, r25
    24d0:	02 c0       	rjmp	.+4      	; 0x24d6 <vfprintf+0x61e>
    24d2:	1e 2d       	mov	r17, r14
    24d4:	01 c0       	rjmp	.+2      	; 0x24d8 <vfprintf+0x620>
    24d6:	19 2d       	mov	r17, r9
    24d8:	f4 fe       	sbrs	r15, 4
    24da:	0d c0       	rjmp	.+26     	; 0x24f6 <vfprintf+0x63e>
    24dc:	fe 01       	movw	r30, r28
    24de:	ee 0d       	add	r30, r14
    24e0:	f1 1d       	adc	r31, r1
    24e2:	80 81       	ld	r24, Z
    24e4:	80 33       	cpi	r24, 0x30	; 48
    24e6:	19 f4       	brne	.+6      	; 0x24ee <vfprintf+0x636>
    24e8:	e9 ee       	ldi	r30, 0xE9	; 233
    24ea:	fe 22       	and	r15, r30
    24ec:	08 c0       	rjmp	.+16     	; 0x24fe <vfprintf+0x646>
    24ee:	1f 5f       	subi	r17, 0xFF	; 255
    24f0:	f2 fe       	sbrs	r15, 2
    24f2:	05 c0       	rjmp	.+10     	; 0x24fe <vfprintf+0x646>
    24f4:	03 c0       	rjmp	.+6      	; 0x24fc <vfprintf+0x644>
    24f6:	8f 2d       	mov	r24, r15
    24f8:	86 78       	andi	r24, 0x86	; 134
    24fa:	09 f0       	breq	.+2      	; 0x24fe <vfprintf+0x646>
    24fc:	1f 5f       	subi	r17, 0xFF	; 255
    24fe:	0f 2d       	mov	r16, r15
    2500:	f3 fc       	sbrc	r15, 3
    2502:	14 c0       	rjmp	.+40     	; 0x252c <vfprintf+0x674>
    2504:	f0 fe       	sbrs	r15, 0
    2506:	0f c0       	rjmp	.+30     	; 0x2526 <vfprintf+0x66e>
    2508:	18 15       	cp	r17, r8
    250a:	10 f0       	brcs	.+4      	; 0x2510 <vfprintf+0x658>
    250c:	9e 2c       	mov	r9, r14
    250e:	0b c0       	rjmp	.+22     	; 0x2526 <vfprintf+0x66e>
    2510:	9e 2c       	mov	r9, r14
    2512:	98 0c       	add	r9, r8
    2514:	91 1a       	sub	r9, r17
    2516:	18 2d       	mov	r17, r8
    2518:	06 c0       	rjmp	.+12     	; 0x2526 <vfprintf+0x66e>
    251a:	80 e2       	ldi	r24, 0x20	; 32
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	b3 01       	movw	r22, r6
    2520:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <fputc>
    2524:	1f 5f       	subi	r17, 0xFF	; 255
    2526:	18 15       	cp	r17, r8
    2528:	c0 f3       	brcs	.-16     	; 0x251a <vfprintf+0x662>
    252a:	04 c0       	rjmp	.+8      	; 0x2534 <vfprintf+0x67c>
    252c:	18 15       	cp	r17, r8
    252e:	10 f4       	brcc	.+4      	; 0x2534 <vfprintf+0x67c>
    2530:	81 1a       	sub	r8, r17
    2532:	01 c0       	rjmp	.+2      	; 0x2536 <vfprintf+0x67e>
    2534:	88 24       	eor	r8, r8
    2536:	04 ff       	sbrs	r16, 4
    2538:	0f c0       	rjmp	.+30     	; 0x2558 <vfprintf+0x6a0>
    253a:	80 e3       	ldi	r24, 0x30	; 48
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	b3 01       	movw	r22, r6
    2540:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <fputc>
    2544:	02 ff       	sbrs	r16, 2
    2546:	1d c0       	rjmp	.+58     	; 0x2582 <vfprintf+0x6ca>
    2548:	01 fd       	sbrc	r16, 1
    254a:	03 c0       	rjmp	.+6      	; 0x2552 <vfprintf+0x69a>
    254c:	88 e7       	ldi	r24, 0x78	; 120
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	0e c0       	rjmp	.+28     	; 0x256e <vfprintf+0x6b6>
    2552:	88 e5       	ldi	r24, 0x58	; 88
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	0b c0       	rjmp	.+22     	; 0x256e <vfprintf+0x6b6>
    2558:	80 2f       	mov	r24, r16
    255a:	86 78       	andi	r24, 0x86	; 134
    255c:	91 f0       	breq	.+36     	; 0x2582 <vfprintf+0x6ca>
    255e:	01 ff       	sbrs	r16, 1
    2560:	02 c0       	rjmp	.+4      	; 0x2566 <vfprintf+0x6ae>
    2562:	8b e2       	ldi	r24, 0x2B	; 43
    2564:	01 c0       	rjmp	.+2      	; 0x2568 <vfprintf+0x6b0>
    2566:	80 e2       	ldi	r24, 0x20	; 32
    2568:	f7 fc       	sbrc	r15, 7
    256a:	8d e2       	ldi	r24, 0x2D	; 45
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	b3 01       	movw	r22, r6
    2570:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <fputc>
    2574:	06 c0       	rjmp	.+12     	; 0x2582 <vfprintf+0x6ca>
    2576:	80 e3       	ldi	r24, 0x30	; 48
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	b3 01       	movw	r22, r6
    257c:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <fputc>
    2580:	9a 94       	dec	r9
    2582:	e9 14       	cp	r14, r9
    2584:	c0 f3       	brcs	.-16     	; 0x2576 <vfprintf+0x6be>
    2586:	ea 94       	dec	r14
    2588:	e1 e0       	ldi	r30, 0x01	; 1
    258a:	f0 e0       	ldi	r31, 0x00	; 0
    258c:	ec 0f       	add	r30, r28
    258e:	fd 1f       	adc	r31, r29
    2590:	ee 0d       	add	r30, r14
    2592:	f1 1d       	adc	r31, r1
    2594:	80 81       	ld	r24, Z
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	b3 01       	movw	r22, r6
    259a:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <fputc>
    259e:	ee 20       	and	r14, r14
    25a0:	91 f7       	brne	.-28     	; 0x2586 <vfprintf+0x6ce>
    25a2:	06 c0       	rjmp	.+12     	; 0x25b0 <vfprintf+0x6f8>
    25a4:	80 e2       	ldi	r24, 0x20	; 32
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	b3 01       	movw	r22, r6
    25aa:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <fputc>
    25ae:	8a 94       	dec	r8
    25b0:	88 20       	and	r8, r8
    25b2:	c1 f7       	brne	.-16     	; 0x25a4 <vfprintf+0x6ec>
    25b4:	99 cc       	rjmp	.-1742   	; 0x1ee8 <vfprintf+0x30>
    25b6:	f3 01       	movw	r30, r6
    25b8:	66 81       	ldd	r22, Z+6	; 0x06
    25ba:	77 81       	ldd	r23, Z+7	; 0x07
    25bc:	cb 01       	movw	r24, r22
    25be:	61 96       	adiw	r28, 0x11	; 17
    25c0:	e2 e1       	ldi	r30, 0x12	; 18
    25c2:	0c 94 b2 15 	jmp	0x2b64	; 0x2b64 <__epilogue_restores__>

000025c6 <__subsf3>:
    25c6:	50 58       	subi	r21, 0x80	; 128

000025c8 <__addsf3>:
    25c8:	bb 27       	eor	r27, r27
    25ca:	aa 27       	eor	r26, r26
    25cc:	0e d0       	rcall	.+28     	; 0x25ea <__addsf3x>
    25ce:	70 c1       	rjmp	.+736    	; 0x28b0 <__fp_round>
    25d0:	61 d1       	rcall	.+706    	; 0x2894 <__fp_pscA>
    25d2:	30 f0       	brcs	.+12     	; 0x25e0 <__addsf3+0x18>
    25d4:	66 d1       	rcall	.+716    	; 0x28a2 <__fp_pscB>
    25d6:	20 f0       	brcs	.+8      	; 0x25e0 <__addsf3+0x18>
    25d8:	31 f4       	brne	.+12     	; 0x25e6 <__addsf3+0x1e>
    25da:	9f 3f       	cpi	r25, 0xFF	; 255
    25dc:	11 f4       	brne	.+4      	; 0x25e2 <__addsf3+0x1a>
    25de:	1e f4       	brtc	.+6      	; 0x25e6 <__addsf3+0x1e>
    25e0:	56 c1       	rjmp	.+684    	; 0x288e <__fp_nan>
    25e2:	0e f4       	brtc	.+2      	; 0x25e6 <__addsf3+0x1e>
    25e4:	e0 95       	com	r30
    25e6:	e7 fb       	bst	r30, 7
    25e8:	4c c1       	rjmp	.+664    	; 0x2882 <__fp_inf>

000025ea <__addsf3x>:
    25ea:	e9 2f       	mov	r30, r25
    25ec:	72 d1       	rcall	.+740    	; 0x28d2 <__fp_split3>
    25ee:	80 f3       	brcs	.-32     	; 0x25d0 <__addsf3+0x8>
    25f0:	ba 17       	cp	r27, r26
    25f2:	62 07       	cpc	r22, r18
    25f4:	73 07       	cpc	r23, r19
    25f6:	84 07       	cpc	r24, r20
    25f8:	95 07       	cpc	r25, r21
    25fa:	18 f0       	brcs	.+6      	; 0x2602 <__addsf3x+0x18>
    25fc:	71 f4       	brne	.+28     	; 0x261a <__addsf3x+0x30>
    25fe:	9e f5       	brtc	.+102    	; 0x2666 <__addsf3x+0x7c>
    2600:	8a c1       	rjmp	.+788    	; 0x2916 <__fp_zero>
    2602:	0e f4       	brtc	.+2      	; 0x2606 <__addsf3x+0x1c>
    2604:	e0 95       	com	r30
    2606:	0b 2e       	mov	r0, r27
    2608:	ba 2f       	mov	r27, r26
    260a:	a0 2d       	mov	r26, r0
    260c:	0b 01       	movw	r0, r22
    260e:	b9 01       	movw	r22, r18
    2610:	90 01       	movw	r18, r0
    2612:	0c 01       	movw	r0, r24
    2614:	ca 01       	movw	r24, r20
    2616:	a0 01       	movw	r20, r0
    2618:	11 24       	eor	r1, r1
    261a:	ff 27       	eor	r31, r31
    261c:	59 1b       	sub	r21, r25
    261e:	99 f0       	breq	.+38     	; 0x2646 <__addsf3x+0x5c>
    2620:	59 3f       	cpi	r21, 0xF9	; 249
    2622:	50 f4       	brcc	.+20     	; 0x2638 <__addsf3x+0x4e>
    2624:	50 3e       	cpi	r21, 0xE0	; 224
    2626:	68 f1       	brcs	.+90     	; 0x2682 <__addsf3x+0x98>
    2628:	1a 16       	cp	r1, r26
    262a:	f0 40       	sbci	r31, 0x00	; 0
    262c:	a2 2f       	mov	r26, r18
    262e:	23 2f       	mov	r18, r19
    2630:	34 2f       	mov	r19, r20
    2632:	44 27       	eor	r20, r20
    2634:	58 5f       	subi	r21, 0xF8	; 248
    2636:	f3 cf       	rjmp	.-26     	; 0x261e <__addsf3x+0x34>
    2638:	46 95       	lsr	r20
    263a:	37 95       	ror	r19
    263c:	27 95       	ror	r18
    263e:	a7 95       	ror	r26
    2640:	f0 40       	sbci	r31, 0x00	; 0
    2642:	53 95       	inc	r21
    2644:	c9 f7       	brne	.-14     	; 0x2638 <__addsf3x+0x4e>
    2646:	7e f4       	brtc	.+30     	; 0x2666 <__addsf3x+0x7c>
    2648:	1f 16       	cp	r1, r31
    264a:	ba 0b       	sbc	r27, r26
    264c:	62 0b       	sbc	r22, r18
    264e:	73 0b       	sbc	r23, r19
    2650:	84 0b       	sbc	r24, r20
    2652:	ba f0       	brmi	.+46     	; 0x2682 <__addsf3x+0x98>
    2654:	91 50       	subi	r25, 0x01	; 1
    2656:	a1 f0       	breq	.+40     	; 0x2680 <__addsf3x+0x96>
    2658:	ff 0f       	add	r31, r31
    265a:	bb 1f       	adc	r27, r27
    265c:	66 1f       	adc	r22, r22
    265e:	77 1f       	adc	r23, r23
    2660:	88 1f       	adc	r24, r24
    2662:	c2 f7       	brpl	.-16     	; 0x2654 <__addsf3x+0x6a>
    2664:	0e c0       	rjmp	.+28     	; 0x2682 <__addsf3x+0x98>
    2666:	ba 0f       	add	r27, r26
    2668:	62 1f       	adc	r22, r18
    266a:	73 1f       	adc	r23, r19
    266c:	84 1f       	adc	r24, r20
    266e:	48 f4       	brcc	.+18     	; 0x2682 <__addsf3x+0x98>
    2670:	87 95       	ror	r24
    2672:	77 95       	ror	r23
    2674:	67 95       	ror	r22
    2676:	b7 95       	ror	r27
    2678:	f7 95       	ror	r31
    267a:	9e 3f       	cpi	r25, 0xFE	; 254
    267c:	08 f0       	brcs	.+2      	; 0x2680 <__addsf3x+0x96>
    267e:	b3 cf       	rjmp	.-154    	; 0x25e6 <__addsf3+0x1e>
    2680:	93 95       	inc	r25
    2682:	88 0f       	add	r24, r24
    2684:	08 f0       	brcs	.+2      	; 0x2688 <__addsf3x+0x9e>
    2686:	99 27       	eor	r25, r25
    2688:	ee 0f       	add	r30, r30
    268a:	97 95       	ror	r25
    268c:	87 95       	ror	r24
    268e:	08 95       	ret

00002690 <__cmpsf2>:
    2690:	d4 d0       	rcall	.+424    	; 0x283a <__fp_cmp>
    2692:	08 f4       	brcc	.+2      	; 0x2696 <__cmpsf2+0x6>
    2694:	81 e0       	ldi	r24, 0x01	; 1
    2696:	08 95       	ret

00002698 <__divsf3>:
    2698:	0c d0       	rcall	.+24     	; 0x26b2 <__divsf3x>
    269a:	0a c1       	rjmp	.+532    	; 0x28b0 <__fp_round>
    269c:	02 d1       	rcall	.+516    	; 0x28a2 <__fp_pscB>
    269e:	40 f0       	brcs	.+16     	; 0x26b0 <__divsf3+0x18>
    26a0:	f9 d0       	rcall	.+498    	; 0x2894 <__fp_pscA>
    26a2:	30 f0       	brcs	.+12     	; 0x26b0 <__divsf3+0x18>
    26a4:	21 f4       	brne	.+8      	; 0x26ae <__divsf3+0x16>
    26a6:	5f 3f       	cpi	r21, 0xFF	; 255
    26a8:	19 f0       	breq	.+6      	; 0x26b0 <__divsf3+0x18>
    26aa:	eb c0       	rjmp	.+470    	; 0x2882 <__fp_inf>
    26ac:	51 11       	cpse	r21, r1
    26ae:	34 c1       	rjmp	.+616    	; 0x2918 <__fp_szero>
    26b0:	ee c0       	rjmp	.+476    	; 0x288e <__fp_nan>

000026b2 <__divsf3x>:
    26b2:	0f d1       	rcall	.+542    	; 0x28d2 <__fp_split3>
    26b4:	98 f3       	brcs	.-26     	; 0x269c <__divsf3+0x4>

000026b6 <__divsf3_pse>:
    26b6:	99 23       	and	r25, r25
    26b8:	c9 f3       	breq	.-14     	; 0x26ac <__divsf3+0x14>
    26ba:	55 23       	and	r21, r21
    26bc:	b1 f3       	breq	.-20     	; 0x26aa <__divsf3+0x12>
    26be:	95 1b       	sub	r25, r21
    26c0:	55 0b       	sbc	r21, r21
    26c2:	bb 27       	eor	r27, r27
    26c4:	aa 27       	eor	r26, r26
    26c6:	62 17       	cp	r22, r18
    26c8:	73 07       	cpc	r23, r19
    26ca:	84 07       	cpc	r24, r20
    26cc:	38 f0       	brcs	.+14     	; 0x26dc <__divsf3_pse+0x26>
    26ce:	9f 5f       	subi	r25, 0xFF	; 255
    26d0:	5f 4f       	sbci	r21, 0xFF	; 255
    26d2:	22 0f       	add	r18, r18
    26d4:	33 1f       	adc	r19, r19
    26d6:	44 1f       	adc	r20, r20
    26d8:	aa 1f       	adc	r26, r26
    26da:	a9 f3       	breq	.-22     	; 0x26c6 <__divsf3_pse+0x10>
    26dc:	33 d0       	rcall	.+102    	; 0x2744 <__divsf3_pse+0x8e>
    26de:	0e 2e       	mov	r0, r30
    26e0:	3a f0       	brmi	.+14     	; 0x26f0 <__divsf3_pse+0x3a>
    26e2:	e0 e8       	ldi	r30, 0x80	; 128
    26e4:	30 d0       	rcall	.+96     	; 0x2746 <__divsf3_pse+0x90>
    26e6:	91 50       	subi	r25, 0x01	; 1
    26e8:	50 40       	sbci	r21, 0x00	; 0
    26ea:	e6 95       	lsr	r30
    26ec:	00 1c       	adc	r0, r0
    26ee:	ca f7       	brpl	.-14     	; 0x26e2 <__divsf3_pse+0x2c>
    26f0:	29 d0       	rcall	.+82     	; 0x2744 <__divsf3_pse+0x8e>
    26f2:	fe 2f       	mov	r31, r30
    26f4:	27 d0       	rcall	.+78     	; 0x2744 <__divsf3_pse+0x8e>
    26f6:	66 0f       	add	r22, r22
    26f8:	77 1f       	adc	r23, r23
    26fa:	88 1f       	adc	r24, r24
    26fc:	bb 1f       	adc	r27, r27
    26fe:	26 17       	cp	r18, r22
    2700:	37 07       	cpc	r19, r23
    2702:	48 07       	cpc	r20, r24
    2704:	ab 07       	cpc	r26, r27
    2706:	b0 e8       	ldi	r27, 0x80	; 128
    2708:	09 f0       	breq	.+2      	; 0x270c <__divsf3_pse+0x56>
    270a:	bb 0b       	sbc	r27, r27
    270c:	80 2d       	mov	r24, r0
    270e:	bf 01       	movw	r22, r30
    2710:	ff 27       	eor	r31, r31
    2712:	93 58       	subi	r25, 0x83	; 131
    2714:	5f 4f       	sbci	r21, 0xFF	; 255
    2716:	2a f0       	brmi	.+10     	; 0x2722 <__divsf3_pse+0x6c>
    2718:	9e 3f       	cpi	r25, 0xFE	; 254
    271a:	51 05       	cpc	r21, r1
    271c:	68 f0       	brcs	.+26     	; 0x2738 <__divsf3_pse+0x82>
    271e:	b1 c0       	rjmp	.+354    	; 0x2882 <__fp_inf>
    2720:	fb c0       	rjmp	.+502    	; 0x2918 <__fp_szero>
    2722:	5f 3f       	cpi	r21, 0xFF	; 255
    2724:	ec f3       	brlt	.-6      	; 0x2720 <__divsf3_pse+0x6a>
    2726:	98 3e       	cpi	r25, 0xE8	; 232
    2728:	dc f3       	brlt	.-10     	; 0x2720 <__divsf3_pse+0x6a>
    272a:	86 95       	lsr	r24
    272c:	77 95       	ror	r23
    272e:	67 95       	ror	r22
    2730:	b7 95       	ror	r27
    2732:	f7 95       	ror	r31
    2734:	9f 5f       	subi	r25, 0xFF	; 255
    2736:	c9 f7       	brne	.-14     	; 0x272a <__divsf3_pse+0x74>
    2738:	88 0f       	add	r24, r24
    273a:	91 1d       	adc	r25, r1
    273c:	96 95       	lsr	r25
    273e:	87 95       	ror	r24
    2740:	97 f9       	bld	r25, 7
    2742:	08 95       	ret
    2744:	e1 e0       	ldi	r30, 0x01	; 1
    2746:	66 0f       	add	r22, r22
    2748:	77 1f       	adc	r23, r23
    274a:	88 1f       	adc	r24, r24
    274c:	bb 1f       	adc	r27, r27
    274e:	62 17       	cp	r22, r18
    2750:	73 07       	cpc	r23, r19
    2752:	84 07       	cpc	r24, r20
    2754:	ba 07       	cpc	r27, r26
    2756:	20 f0       	brcs	.+8      	; 0x2760 <__divsf3_pse+0xaa>
    2758:	62 1b       	sub	r22, r18
    275a:	73 0b       	sbc	r23, r19
    275c:	84 0b       	sbc	r24, r20
    275e:	ba 0b       	sbc	r27, r26
    2760:	ee 1f       	adc	r30, r30
    2762:	88 f7       	brcc	.-30     	; 0x2746 <__divsf3_pse+0x90>
    2764:	e0 95       	com	r30
    2766:	08 95       	ret

00002768 <__fixunssfsi>:
    2768:	bc d0       	rcall	.+376    	; 0x28e2 <__fp_splitA>
    276a:	88 f0       	brcs	.+34     	; 0x278e <__fixunssfsi+0x26>
    276c:	9f 57       	subi	r25, 0x7F	; 127
    276e:	90 f0       	brcs	.+36     	; 0x2794 <__fixunssfsi+0x2c>
    2770:	b9 2f       	mov	r27, r25
    2772:	99 27       	eor	r25, r25
    2774:	b7 51       	subi	r27, 0x17	; 23
    2776:	a0 f0       	brcs	.+40     	; 0x27a0 <__fixunssfsi+0x38>
    2778:	d1 f0       	breq	.+52     	; 0x27ae <__fixunssfsi+0x46>
    277a:	66 0f       	add	r22, r22
    277c:	77 1f       	adc	r23, r23
    277e:	88 1f       	adc	r24, r24
    2780:	99 1f       	adc	r25, r25
    2782:	1a f0       	brmi	.+6      	; 0x278a <__fixunssfsi+0x22>
    2784:	ba 95       	dec	r27
    2786:	c9 f7       	brne	.-14     	; 0x277a <__fixunssfsi+0x12>
    2788:	12 c0       	rjmp	.+36     	; 0x27ae <__fixunssfsi+0x46>
    278a:	b1 30       	cpi	r27, 0x01	; 1
    278c:	81 f0       	breq	.+32     	; 0x27ae <__fixunssfsi+0x46>
    278e:	c3 d0       	rcall	.+390    	; 0x2916 <__fp_zero>
    2790:	b1 e0       	ldi	r27, 0x01	; 1
    2792:	08 95       	ret
    2794:	c0 c0       	rjmp	.+384    	; 0x2916 <__fp_zero>
    2796:	67 2f       	mov	r22, r23
    2798:	78 2f       	mov	r23, r24
    279a:	88 27       	eor	r24, r24
    279c:	b8 5f       	subi	r27, 0xF8	; 248
    279e:	39 f0       	breq	.+14     	; 0x27ae <__fixunssfsi+0x46>
    27a0:	b9 3f       	cpi	r27, 0xF9	; 249
    27a2:	cc f3       	brlt	.-14     	; 0x2796 <__fixunssfsi+0x2e>
    27a4:	86 95       	lsr	r24
    27a6:	77 95       	ror	r23
    27a8:	67 95       	ror	r22
    27aa:	b3 95       	inc	r27
    27ac:	d9 f7       	brne	.-10     	; 0x27a4 <__fixunssfsi+0x3c>
    27ae:	3e f4       	brtc	.+14     	; 0x27be <__fixunssfsi+0x56>
    27b0:	90 95       	com	r25
    27b2:	80 95       	com	r24
    27b4:	70 95       	com	r23
    27b6:	61 95       	neg	r22
    27b8:	7f 4f       	sbci	r23, 0xFF	; 255
    27ba:	8f 4f       	sbci	r24, 0xFF	; 255
    27bc:	9f 4f       	sbci	r25, 0xFF	; 255
    27be:	08 95       	ret

000027c0 <__floatunsisf>:
    27c0:	e8 94       	clt
    27c2:	09 c0       	rjmp	.+18     	; 0x27d6 <__floatsisf+0x12>

000027c4 <__floatsisf>:
    27c4:	97 fb       	bst	r25, 7
    27c6:	3e f4       	brtc	.+14     	; 0x27d6 <__floatsisf+0x12>
    27c8:	90 95       	com	r25
    27ca:	80 95       	com	r24
    27cc:	70 95       	com	r23
    27ce:	61 95       	neg	r22
    27d0:	7f 4f       	sbci	r23, 0xFF	; 255
    27d2:	8f 4f       	sbci	r24, 0xFF	; 255
    27d4:	9f 4f       	sbci	r25, 0xFF	; 255
    27d6:	99 23       	and	r25, r25
    27d8:	a9 f0       	breq	.+42     	; 0x2804 <__floatsisf+0x40>
    27da:	f9 2f       	mov	r31, r25
    27dc:	96 e9       	ldi	r25, 0x96	; 150
    27de:	bb 27       	eor	r27, r27
    27e0:	93 95       	inc	r25
    27e2:	f6 95       	lsr	r31
    27e4:	87 95       	ror	r24
    27e6:	77 95       	ror	r23
    27e8:	67 95       	ror	r22
    27ea:	b7 95       	ror	r27
    27ec:	f1 11       	cpse	r31, r1
    27ee:	f8 cf       	rjmp	.-16     	; 0x27e0 <__floatsisf+0x1c>
    27f0:	fa f4       	brpl	.+62     	; 0x2830 <__floatsisf+0x6c>
    27f2:	bb 0f       	add	r27, r27
    27f4:	11 f4       	brne	.+4      	; 0x27fa <__floatsisf+0x36>
    27f6:	60 ff       	sbrs	r22, 0
    27f8:	1b c0       	rjmp	.+54     	; 0x2830 <__floatsisf+0x6c>
    27fa:	6f 5f       	subi	r22, 0xFF	; 255
    27fc:	7f 4f       	sbci	r23, 0xFF	; 255
    27fe:	8f 4f       	sbci	r24, 0xFF	; 255
    2800:	9f 4f       	sbci	r25, 0xFF	; 255
    2802:	16 c0       	rjmp	.+44     	; 0x2830 <__floatsisf+0x6c>
    2804:	88 23       	and	r24, r24
    2806:	11 f0       	breq	.+4      	; 0x280c <__floatsisf+0x48>
    2808:	96 e9       	ldi	r25, 0x96	; 150
    280a:	11 c0       	rjmp	.+34     	; 0x282e <__floatsisf+0x6a>
    280c:	77 23       	and	r23, r23
    280e:	21 f0       	breq	.+8      	; 0x2818 <__floatsisf+0x54>
    2810:	9e e8       	ldi	r25, 0x8E	; 142
    2812:	87 2f       	mov	r24, r23
    2814:	76 2f       	mov	r23, r22
    2816:	05 c0       	rjmp	.+10     	; 0x2822 <__floatsisf+0x5e>
    2818:	66 23       	and	r22, r22
    281a:	71 f0       	breq	.+28     	; 0x2838 <__floatsisf+0x74>
    281c:	96 e8       	ldi	r25, 0x86	; 134
    281e:	86 2f       	mov	r24, r22
    2820:	70 e0       	ldi	r23, 0x00	; 0
    2822:	60 e0       	ldi	r22, 0x00	; 0
    2824:	2a f0       	brmi	.+10     	; 0x2830 <__floatsisf+0x6c>
    2826:	9a 95       	dec	r25
    2828:	66 0f       	add	r22, r22
    282a:	77 1f       	adc	r23, r23
    282c:	88 1f       	adc	r24, r24
    282e:	da f7       	brpl	.-10     	; 0x2826 <__floatsisf+0x62>
    2830:	88 0f       	add	r24, r24
    2832:	96 95       	lsr	r25
    2834:	87 95       	ror	r24
    2836:	97 f9       	bld	r25, 7
    2838:	08 95       	ret

0000283a <__fp_cmp>:
    283a:	99 0f       	add	r25, r25
    283c:	00 08       	sbc	r0, r0
    283e:	55 0f       	add	r21, r21
    2840:	aa 0b       	sbc	r26, r26
    2842:	e0 e8       	ldi	r30, 0x80	; 128
    2844:	fe ef       	ldi	r31, 0xFE	; 254
    2846:	16 16       	cp	r1, r22
    2848:	17 06       	cpc	r1, r23
    284a:	e8 07       	cpc	r30, r24
    284c:	f9 07       	cpc	r31, r25
    284e:	c0 f0       	brcs	.+48     	; 0x2880 <__fp_cmp+0x46>
    2850:	12 16       	cp	r1, r18
    2852:	13 06       	cpc	r1, r19
    2854:	e4 07       	cpc	r30, r20
    2856:	f5 07       	cpc	r31, r21
    2858:	98 f0       	brcs	.+38     	; 0x2880 <__fp_cmp+0x46>
    285a:	62 1b       	sub	r22, r18
    285c:	73 0b       	sbc	r23, r19
    285e:	84 0b       	sbc	r24, r20
    2860:	95 0b       	sbc	r25, r21
    2862:	39 f4       	brne	.+14     	; 0x2872 <__fp_cmp+0x38>
    2864:	0a 26       	eor	r0, r26
    2866:	61 f0       	breq	.+24     	; 0x2880 <__fp_cmp+0x46>
    2868:	23 2b       	or	r18, r19
    286a:	24 2b       	or	r18, r20
    286c:	25 2b       	or	r18, r21
    286e:	21 f4       	brne	.+8      	; 0x2878 <__fp_cmp+0x3e>
    2870:	08 95       	ret
    2872:	0a 26       	eor	r0, r26
    2874:	09 f4       	brne	.+2      	; 0x2878 <__fp_cmp+0x3e>
    2876:	a1 40       	sbci	r26, 0x01	; 1
    2878:	a6 95       	lsr	r26
    287a:	8f ef       	ldi	r24, 0xFF	; 255
    287c:	81 1d       	adc	r24, r1
    287e:	81 1d       	adc	r24, r1
    2880:	08 95       	ret

00002882 <__fp_inf>:
    2882:	97 f9       	bld	r25, 7
    2884:	9f 67       	ori	r25, 0x7F	; 127
    2886:	80 e8       	ldi	r24, 0x80	; 128
    2888:	70 e0       	ldi	r23, 0x00	; 0
    288a:	60 e0       	ldi	r22, 0x00	; 0
    288c:	08 95       	ret

0000288e <__fp_nan>:
    288e:	9f ef       	ldi	r25, 0xFF	; 255
    2890:	80 ec       	ldi	r24, 0xC0	; 192
    2892:	08 95       	ret

00002894 <__fp_pscA>:
    2894:	00 24       	eor	r0, r0
    2896:	0a 94       	dec	r0
    2898:	16 16       	cp	r1, r22
    289a:	17 06       	cpc	r1, r23
    289c:	18 06       	cpc	r1, r24
    289e:	09 06       	cpc	r0, r25
    28a0:	08 95       	ret

000028a2 <__fp_pscB>:
    28a2:	00 24       	eor	r0, r0
    28a4:	0a 94       	dec	r0
    28a6:	12 16       	cp	r1, r18
    28a8:	13 06       	cpc	r1, r19
    28aa:	14 06       	cpc	r1, r20
    28ac:	05 06       	cpc	r0, r21
    28ae:	08 95       	ret

000028b0 <__fp_round>:
    28b0:	09 2e       	mov	r0, r25
    28b2:	03 94       	inc	r0
    28b4:	00 0c       	add	r0, r0
    28b6:	11 f4       	brne	.+4      	; 0x28bc <__fp_round+0xc>
    28b8:	88 23       	and	r24, r24
    28ba:	52 f0       	brmi	.+20     	; 0x28d0 <__fp_round+0x20>
    28bc:	bb 0f       	add	r27, r27
    28be:	40 f4       	brcc	.+16     	; 0x28d0 <__fp_round+0x20>
    28c0:	bf 2b       	or	r27, r31
    28c2:	11 f4       	brne	.+4      	; 0x28c8 <__fp_round+0x18>
    28c4:	60 ff       	sbrs	r22, 0
    28c6:	04 c0       	rjmp	.+8      	; 0x28d0 <__fp_round+0x20>
    28c8:	6f 5f       	subi	r22, 0xFF	; 255
    28ca:	7f 4f       	sbci	r23, 0xFF	; 255
    28cc:	8f 4f       	sbci	r24, 0xFF	; 255
    28ce:	9f 4f       	sbci	r25, 0xFF	; 255
    28d0:	08 95       	ret

000028d2 <__fp_split3>:
    28d2:	57 fd       	sbrc	r21, 7
    28d4:	90 58       	subi	r25, 0x80	; 128
    28d6:	44 0f       	add	r20, r20
    28d8:	55 1f       	adc	r21, r21
    28da:	59 f0       	breq	.+22     	; 0x28f2 <__fp_splitA+0x10>
    28dc:	5f 3f       	cpi	r21, 0xFF	; 255
    28de:	71 f0       	breq	.+28     	; 0x28fc <__fp_splitA+0x1a>
    28e0:	47 95       	ror	r20

000028e2 <__fp_splitA>:
    28e2:	88 0f       	add	r24, r24
    28e4:	97 fb       	bst	r25, 7
    28e6:	99 1f       	adc	r25, r25
    28e8:	61 f0       	breq	.+24     	; 0x2902 <__fp_splitA+0x20>
    28ea:	9f 3f       	cpi	r25, 0xFF	; 255
    28ec:	79 f0       	breq	.+30     	; 0x290c <__fp_splitA+0x2a>
    28ee:	87 95       	ror	r24
    28f0:	08 95       	ret
    28f2:	12 16       	cp	r1, r18
    28f4:	13 06       	cpc	r1, r19
    28f6:	14 06       	cpc	r1, r20
    28f8:	55 1f       	adc	r21, r21
    28fa:	f2 cf       	rjmp	.-28     	; 0x28e0 <__fp_split3+0xe>
    28fc:	46 95       	lsr	r20
    28fe:	f1 df       	rcall	.-30     	; 0x28e2 <__fp_splitA>
    2900:	08 c0       	rjmp	.+16     	; 0x2912 <__fp_splitA+0x30>
    2902:	16 16       	cp	r1, r22
    2904:	17 06       	cpc	r1, r23
    2906:	18 06       	cpc	r1, r24
    2908:	99 1f       	adc	r25, r25
    290a:	f1 cf       	rjmp	.-30     	; 0x28ee <__fp_splitA+0xc>
    290c:	86 95       	lsr	r24
    290e:	71 05       	cpc	r23, r1
    2910:	61 05       	cpc	r22, r1
    2912:	08 94       	sec
    2914:	08 95       	ret

00002916 <__fp_zero>:
    2916:	e8 94       	clt

00002918 <__fp_szero>:
    2918:	bb 27       	eor	r27, r27
    291a:	66 27       	eor	r22, r22
    291c:	77 27       	eor	r23, r23
    291e:	cb 01       	movw	r24, r22
    2920:	97 f9       	bld	r25, 7
    2922:	08 95       	ret

00002924 <__gesf2>:
    2924:	8a df       	rcall	.-236    	; 0x283a <__fp_cmp>
    2926:	08 f4       	brcc	.+2      	; 0x292a <__gesf2+0x6>
    2928:	8f ef       	ldi	r24, 0xFF	; 255
    292a:	08 95       	ret

0000292c <log10>:
    292c:	0a d0       	rcall	.+20     	; 0x2942 <log>
    292e:	29 ed       	ldi	r18, 0xD9	; 217
    2930:	3b e5       	ldi	r19, 0x5B	; 91
    2932:	4e ed       	ldi	r20, 0xDE	; 222
    2934:	5e e3       	ldi	r21, 0x3E	; 62
    2936:	45 c0       	rjmp	.+138    	; 0x29c2 <__mulsf3>
    2938:	0e f0       	brts	.+2      	; 0x293c <log10+0x10>
    293a:	a6 c0       	rjmp	.+332    	; 0x2a88 <__fp_mpack>
    293c:	a8 cf       	rjmp	.-176    	; 0x288e <__fp_nan>
    293e:	68 94       	set
    2940:	a0 cf       	rjmp	.-192    	; 0x2882 <__fp_inf>

00002942 <log>:
    2942:	cf df       	rcall	.-98     	; 0x28e2 <__fp_splitA>
    2944:	c8 f3       	brcs	.-14     	; 0x2938 <log10+0xc>
    2946:	99 23       	and	r25, r25
    2948:	d1 f3       	breq	.-12     	; 0x293e <log10+0x12>
    294a:	c6 f3       	brts	.-16     	; 0x293c <log10+0x10>
    294c:	df 93       	push	r29
    294e:	cf 93       	push	r28
    2950:	1f 93       	push	r17
    2952:	0f 93       	push	r16
    2954:	ff 92       	push	r15
    2956:	c9 2f       	mov	r28, r25
    2958:	dd 27       	eor	r29, r29
    295a:	88 23       	and	r24, r24
    295c:	2a f0       	brmi	.+10     	; 0x2968 <log+0x26>
    295e:	21 97       	sbiw	r28, 0x01	; 1
    2960:	66 0f       	add	r22, r22
    2962:	77 1f       	adc	r23, r23
    2964:	88 1f       	adc	r24, r24
    2966:	da f7       	brpl	.-10     	; 0x295e <log+0x1c>
    2968:	20 e0       	ldi	r18, 0x00	; 0
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	40 e8       	ldi	r20, 0x80	; 128
    296e:	5f eb       	ldi	r21, 0xBF	; 191
    2970:	9f e3       	ldi	r25, 0x3F	; 63
    2972:	88 39       	cpi	r24, 0x98	; 152
    2974:	20 f0       	brcs	.+8      	; 0x297e <log+0x3c>
    2976:	80 3e       	cpi	r24, 0xE0	; 224
    2978:	30 f0       	brcs	.+12     	; 0x2986 <log+0x44>
    297a:	21 96       	adiw	r28, 0x01	; 1
    297c:	8f 77       	andi	r24, 0x7F	; 127
    297e:	24 de       	rcall	.-952    	; 0x25c8 <__addsf3>
    2980:	e4 e5       	ldi	r30, 0x54	; 84
    2982:	f0 e0       	ldi	r31, 0x00	; 0
    2984:	03 c0       	rjmp	.+6      	; 0x298c <log+0x4a>
    2986:	20 de       	rcall	.-960    	; 0x25c8 <__addsf3>
    2988:	e1 e8       	ldi	r30, 0x81	; 129
    298a:	f0 e0       	ldi	r31, 0x00	; 0
    298c:	8b d0       	rcall	.+278    	; 0x2aa4 <__fp_powser>
    298e:	8b 01       	movw	r16, r22
    2990:	be 01       	movw	r22, r28
    2992:	ec 01       	movw	r28, r24
    2994:	fb 2e       	mov	r15, r27
    2996:	6f 57       	subi	r22, 0x7F	; 127
    2998:	71 09       	sbc	r23, r1
    299a:	75 95       	asr	r23
    299c:	77 1f       	adc	r23, r23
    299e:	88 0b       	sbc	r24, r24
    29a0:	99 0b       	sbc	r25, r25
    29a2:	10 df       	rcall	.-480    	; 0x27c4 <__floatsisf>
    29a4:	28 e1       	ldi	r18, 0x18	; 24
    29a6:	32 e7       	ldi	r19, 0x72	; 114
    29a8:	41 e3       	ldi	r20, 0x31	; 49
    29aa:	5f e3       	ldi	r21, 0x3F	; 63
    29ac:	16 d0       	rcall	.+44     	; 0x29da <__mulsf3x>
    29ae:	af 2d       	mov	r26, r15
    29b0:	98 01       	movw	r18, r16
    29b2:	ae 01       	movw	r20, r28
    29b4:	ff 90       	pop	r15
    29b6:	0f 91       	pop	r16
    29b8:	1f 91       	pop	r17
    29ba:	cf 91       	pop	r28
    29bc:	df 91       	pop	r29
    29be:	15 de       	rcall	.-982    	; 0x25ea <__addsf3x>
    29c0:	77 cf       	rjmp	.-274    	; 0x28b0 <__fp_round>

000029c2 <__mulsf3>:
    29c2:	0b d0       	rcall	.+22     	; 0x29da <__mulsf3x>
    29c4:	75 cf       	rjmp	.-278    	; 0x28b0 <__fp_round>
    29c6:	66 df       	rcall	.-308    	; 0x2894 <__fp_pscA>
    29c8:	28 f0       	brcs	.+10     	; 0x29d4 <__mulsf3+0x12>
    29ca:	6b df       	rcall	.-298    	; 0x28a2 <__fp_pscB>
    29cc:	18 f0       	brcs	.+6      	; 0x29d4 <__mulsf3+0x12>
    29ce:	95 23       	and	r25, r21
    29d0:	09 f0       	breq	.+2      	; 0x29d4 <__mulsf3+0x12>
    29d2:	57 cf       	rjmp	.-338    	; 0x2882 <__fp_inf>
    29d4:	5c cf       	rjmp	.-328    	; 0x288e <__fp_nan>
    29d6:	11 24       	eor	r1, r1
    29d8:	9f cf       	rjmp	.-194    	; 0x2918 <__fp_szero>

000029da <__mulsf3x>:
    29da:	7b df       	rcall	.-266    	; 0x28d2 <__fp_split3>
    29dc:	a0 f3       	brcs	.-24     	; 0x29c6 <__mulsf3+0x4>

000029de <__mulsf3_pse>:
    29de:	95 9f       	mul	r25, r21
    29e0:	d1 f3       	breq	.-12     	; 0x29d6 <__mulsf3+0x14>
    29e2:	95 0f       	add	r25, r21
    29e4:	50 e0       	ldi	r21, 0x00	; 0
    29e6:	55 1f       	adc	r21, r21
    29e8:	62 9f       	mul	r22, r18
    29ea:	f0 01       	movw	r30, r0
    29ec:	72 9f       	mul	r23, r18
    29ee:	bb 27       	eor	r27, r27
    29f0:	f0 0d       	add	r31, r0
    29f2:	b1 1d       	adc	r27, r1
    29f4:	63 9f       	mul	r22, r19
    29f6:	aa 27       	eor	r26, r26
    29f8:	f0 0d       	add	r31, r0
    29fa:	b1 1d       	adc	r27, r1
    29fc:	aa 1f       	adc	r26, r26
    29fe:	64 9f       	mul	r22, r20
    2a00:	66 27       	eor	r22, r22
    2a02:	b0 0d       	add	r27, r0
    2a04:	a1 1d       	adc	r26, r1
    2a06:	66 1f       	adc	r22, r22
    2a08:	82 9f       	mul	r24, r18
    2a0a:	22 27       	eor	r18, r18
    2a0c:	b0 0d       	add	r27, r0
    2a0e:	a1 1d       	adc	r26, r1
    2a10:	62 1f       	adc	r22, r18
    2a12:	73 9f       	mul	r23, r19
    2a14:	b0 0d       	add	r27, r0
    2a16:	a1 1d       	adc	r26, r1
    2a18:	62 1f       	adc	r22, r18
    2a1a:	83 9f       	mul	r24, r19
    2a1c:	a0 0d       	add	r26, r0
    2a1e:	61 1d       	adc	r22, r1
    2a20:	22 1f       	adc	r18, r18
    2a22:	74 9f       	mul	r23, r20
    2a24:	33 27       	eor	r19, r19
    2a26:	a0 0d       	add	r26, r0
    2a28:	61 1d       	adc	r22, r1
    2a2a:	23 1f       	adc	r18, r19
    2a2c:	84 9f       	mul	r24, r20
    2a2e:	60 0d       	add	r22, r0
    2a30:	21 1d       	adc	r18, r1
    2a32:	82 2f       	mov	r24, r18
    2a34:	76 2f       	mov	r23, r22
    2a36:	6a 2f       	mov	r22, r26
    2a38:	11 24       	eor	r1, r1
    2a3a:	9f 57       	subi	r25, 0x7F	; 127
    2a3c:	50 40       	sbci	r21, 0x00	; 0
    2a3e:	8a f0       	brmi	.+34     	; 0x2a62 <__mulsf3_pse+0x84>
    2a40:	e1 f0       	breq	.+56     	; 0x2a7a <__mulsf3_pse+0x9c>
    2a42:	88 23       	and	r24, r24
    2a44:	4a f0       	brmi	.+18     	; 0x2a58 <__mulsf3_pse+0x7a>
    2a46:	ee 0f       	add	r30, r30
    2a48:	ff 1f       	adc	r31, r31
    2a4a:	bb 1f       	adc	r27, r27
    2a4c:	66 1f       	adc	r22, r22
    2a4e:	77 1f       	adc	r23, r23
    2a50:	88 1f       	adc	r24, r24
    2a52:	91 50       	subi	r25, 0x01	; 1
    2a54:	50 40       	sbci	r21, 0x00	; 0
    2a56:	a9 f7       	brne	.-22     	; 0x2a42 <__mulsf3_pse+0x64>
    2a58:	9e 3f       	cpi	r25, 0xFE	; 254
    2a5a:	51 05       	cpc	r21, r1
    2a5c:	70 f0       	brcs	.+28     	; 0x2a7a <__mulsf3_pse+0x9c>
    2a5e:	11 cf       	rjmp	.-478    	; 0x2882 <__fp_inf>
    2a60:	5b cf       	rjmp	.-330    	; 0x2918 <__fp_szero>
    2a62:	5f 3f       	cpi	r21, 0xFF	; 255
    2a64:	ec f3       	brlt	.-6      	; 0x2a60 <__mulsf3_pse+0x82>
    2a66:	98 3e       	cpi	r25, 0xE8	; 232
    2a68:	dc f3       	brlt	.-10     	; 0x2a60 <__mulsf3_pse+0x82>
    2a6a:	86 95       	lsr	r24
    2a6c:	77 95       	ror	r23
    2a6e:	67 95       	ror	r22
    2a70:	b7 95       	ror	r27
    2a72:	f7 95       	ror	r31
    2a74:	e7 95       	ror	r30
    2a76:	9f 5f       	subi	r25, 0xFF	; 255
    2a78:	c1 f7       	brne	.-16     	; 0x2a6a <__mulsf3_pse+0x8c>
    2a7a:	fe 2b       	or	r31, r30
    2a7c:	88 0f       	add	r24, r24
    2a7e:	91 1d       	adc	r25, r1
    2a80:	96 95       	lsr	r25
    2a82:	87 95       	ror	r24
    2a84:	97 f9       	bld	r25, 7
    2a86:	08 95       	ret

00002a88 <__fp_mpack>:
    2a88:	9f 3f       	cpi	r25, 0xFF	; 255
    2a8a:	31 f0       	breq	.+12     	; 0x2a98 <__fp_mpack_finite+0xc>

00002a8c <__fp_mpack_finite>:
    2a8c:	91 50       	subi	r25, 0x01	; 1
    2a8e:	20 f4       	brcc	.+8      	; 0x2a98 <__fp_mpack_finite+0xc>
    2a90:	87 95       	ror	r24
    2a92:	77 95       	ror	r23
    2a94:	67 95       	ror	r22
    2a96:	b7 95       	ror	r27
    2a98:	88 0f       	add	r24, r24
    2a9a:	91 1d       	adc	r25, r1
    2a9c:	96 95       	lsr	r25
    2a9e:	87 95       	ror	r24
    2aa0:	97 f9       	bld	r25, 7
    2aa2:	08 95       	ret

00002aa4 <__fp_powser>:
    2aa4:	df 93       	push	r29
    2aa6:	cf 93       	push	r28
    2aa8:	1f 93       	push	r17
    2aaa:	0f 93       	push	r16
    2aac:	ff 92       	push	r15
    2aae:	ef 92       	push	r14
    2ab0:	df 92       	push	r13
    2ab2:	7b 01       	movw	r14, r22
    2ab4:	8c 01       	movw	r16, r24
    2ab6:	68 94       	set
    2ab8:	05 c0       	rjmp	.+10     	; 0x2ac4 <__fp_powser+0x20>
    2aba:	da 2e       	mov	r13, r26
    2abc:	ef 01       	movw	r28, r30
    2abe:	8d df       	rcall	.-230    	; 0x29da <__mulsf3x>
    2ac0:	fe 01       	movw	r30, r28
    2ac2:	e8 94       	clt
    2ac4:	a5 91       	lpm	r26, Z+
    2ac6:	25 91       	lpm	r18, Z+
    2ac8:	35 91       	lpm	r19, Z+
    2aca:	45 91       	lpm	r20, Z+
    2acc:	55 91       	lpm	r21, Z+
    2ace:	ae f3       	brts	.-22     	; 0x2aba <__fp_powser+0x16>
    2ad0:	ef 01       	movw	r28, r30
    2ad2:	8b dd       	rcall	.-1258   	; 0x25ea <__addsf3x>
    2ad4:	fe 01       	movw	r30, r28
    2ad6:	97 01       	movw	r18, r14
    2ad8:	a8 01       	movw	r20, r16
    2ada:	da 94       	dec	r13
    2adc:	79 f7       	brne	.-34     	; 0x2abc <__fp_powser+0x18>
    2ade:	df 90       	pop	r13
    2ae0:	ef 90       	pop	r14
    2ae2:	ff 90       	pop	r15
    2ae4:	0f 91       	pop	r16
    2ae6:	1f 91       	pop	r17
    2ae8:	cf 91       	pop	r28
    2aea:	df 91       	pop	r29
    2aec:	08 95       	ret

00002aee <__udivmodqi4>:
    2aee:	99 1b       	sub	r25, r25
    2af0:	79 e0       	ldi	r23, 0x09	; 9
    2af2:	04 c0       	rjmp	.+8      	; 0x2afc <__udivmodqi4_ep>

00002af4 <__udivmodqi4_loop>:
    2af4:	99 1f       	adc	r25, r25
    2af6:	96 17       	cp	r25, r22
    2af8:	08 f0       	brcs	.+2      	; 0x2afc <__udivmodqi4_ep>
    2afa:	96 1b       	sub	r25, r22

00002afc <__udivmodqi4_ep>:
    2afc:	88 1f       	adc	r24, r24
    2afe:	7a 95       	dec	r23
    2b00:	c9 f7       	brne	.-14     	; 0x2af4 <__udivmodqi4_loop>
    2b02:	80 95       	com	r24
    2b04:	08 95       	ret

00002b06 <__divmodhi4>:
    2b06:	97 fb       	bst	r25, 7
    2b08:	09 2e       	mov	r0, r25
    2b0a:	07 26       	eor	r0, r23
    2b0c:	0a d0       	rcall	.+20     	; 0x2b22 <__divmodhi4_neg1>
    2b0e:	77 fd       	sbrc	r23, 7
    2b10:	04 d0       	rcall	.+8      	; 0x2b1a <__divmodhi4_neg2>
    2b12:	43 d0       	rcall	.+134    	; 0x2b9a <__udivmodhi4>
    2b14:	06 d0       	rcall	.+12     	; 0x2b22 <__divmodhi4_neg1>
    2b16:	00 20       	and	r0, r0
    2b18:	1a f4       	brpl	.+6      	; 0x2b20 <__divmodhi4_exit>

00002b1a <__divmodhi4_neg2>:
    2b1a:	70 95       	com	r23
    2b1c:	61 95       	neg	r22
    2b1e:	7f 4f       	sbci	r23, 0xFF	; 255

00002b20 <__divmodhi4_exit>:
    2b20:	08 95       	ret

00002b22 <__divmodhi4_neg1>:
    2b22:	f6 f7       	brtc	.-4      	; 0x2b20 <__divmodhi4_exit>
    2b24:	90 95       	com	r25
    2b26:	81 95       	neg	r24
    2b28:	9f 4f       	sbci	r25, 0xFF	; 255
    2b2a:	08 95       	ret

00002b2c <__prologue_saves__>:
    2b2c:	2f 92       	push	r2
    2b2e:	3f 92       	push	r3
    2b30:	4f 92       	push	r4
    2b32:	5f 92       	push	r5
    2b34:	6f 92       	push	r6
    2b36:	7f 92       	push	r7
    2b38:	8f 92       	push	r8
    2b3a:	9f 92       	push	r9
    2b3c:	af 92       	push	r10
    2b3e:	bf 92       	push	r11
    2b40:	cf 92       	push	r12
    2b42:	df 92       	push	r13
    2b44:	ef 92       	push	r14
    2b46:	ff 92       	push	r15
    2b48:	0f 93       	push	r16
    2b4a:	1f 93       	push	r17
    2b4c:	cf 93       	push	r28
    2b4e:	df 93       	push	r29
    2b50:	cd b7       	in	r28, 0x3d	; 61
    2b52:	de b7       	in	r29, 0x3e	; 62
    2b54:	ca 1b       	sub	r28, r26
    2b56:	db 0b       	sbc	r29, r27
    2b58:	0f b6       	in	r0, 0x3f	; 63
    2b5a:	f8 94       	cli
    2b5c:	de bf       	out	0x3e, r29	; 62
    2b5e:	0f be       	out	0x3f, r0	; 63
    2b60:	cd bf       	out	0x3d, r28	; 61
    2b62:	09 94       	ijmp

00002b64 <__epilogue_restores__>:
    2b64:	2a 88       	ldd	r2, Y+18	; 0x12
    2b66:	39 88       	ldd	r3, Y+17	; 0x11
    2b68:	48 88       	ldd	r4, Y+16	; 0x10
    2b6a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b6c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b6e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b70:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b72:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b74:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b76:	b9 84       	ldd	r11, Y+9	; 0x09
    2b78:	c8 84       	ldd	r12, Y+8	; 0x08
    2b7a:	df 80       	ldd	r13, Y+7	; 0x07
    2b7c:	ee 80       	ldd	r14, Y+6	; 0x06
    2b7e:	fd 80       	ldd	r15, Y+5	; 0x05
    2b80:	0c 81       	ldd	r16, Y+4	; 0x04
    2b82:	1b 81       	ldd	r17, Y+3	; 0x03
    2b84:	aa 81       	ldd	r26, Y+2	; 0x02
    2b86:	b9 81       	ldd	r27, Y+1	; 0x01
    2b88:	ce 0f       	add	r28, r30
    2b8a:	d1 1d       	adc	r29, r1
    2b8c:	0f b6       	in	r0, 0x3f	; 63
    2b8e:	f8 94       	cli
    2b90:	de bf       	out	0x3e, r29	; 62
    2b92:	0f be       	out	0x3f, r0	; 63
    2b94:	cd bf       	out	0x3d, r28	; 61
    2b96:	ed 01       	movw	r28, r26
    2b98:	08 95       	ret

00002b9a <__udivmodhi4>:
    2b9a:	aa 1b       	sub	r26, r26
    2b9c:	bb 1b       	sub	r27, r27
    2b9e:	51 e1       	ldi	r21, 0x11	; 17
    2ba0:	07 c0       	rjmp	.+14     	; 0x2bb0 <__udivmodhi4_ep>

00002ba2 <__udivmodhi4_loop>:
    2ba2:	aa 1f       	adc	r26, r26
    2ba4:	bb 1f       	adc	r27, r27
    2ba6:	a6 17       	cp	r26, r22
    2ba8:	b7 07       	cpc	r27, r23
    2baa:	10 f0       	brcs	.+4      	; 0x2bb0 <__udivmodhi4_ep>
    2bac:	a6 1b       	sub	r26, r22
    2bae:	b7 0b       	sbc	r27, r23

00002bb0 <__udivmodhi4_ep>:
    2bb0:	88 1f       	adc	r24, r24
    2bb2:	99 1f       	adc	r25, r25
    2bb4:	5a 95       	dec	r21
    2bb6:	a9 f7       	brne	.-22     	; 0x2ba2 <__udivmodhi4_loop>
    2bb8:	80 95       	com	r24
    2bba:	90 95       	com	r25
    2bbc:	bc 01       	movw	r22, r24
    2bbe:	cd 01       	movw	r24, r26
    2bc0:	08 95       	ret

00002bc2 <__ftoa_engine>:
    2bc2:	28 30       	cpi	r18, 0x08	; 8
    2bc4:	08 f0       	brcs	.+2      	; 0x2bc8 <__ftoa_engine+0x6>
    2bc6:	27 e0       	ldi	r18, 0x07	; 7
    2bc8:	33 27       	eor	r19, r19
    2bca:	da 01       	movw	r26, r20
    2bcc:	99 0f       	add	r25, r25
    2bce:	31 1d       	adc	r19, r1
    2bd0:	87 fd       	sbrc	r24, 7
    2bd2:	91 60       	ori	r25, 0x01	; 1
    2bd4:	00 96       	adiw	r24, 0x00	; 0
    2bd6:	61 05       	cpc	r22, r1
    2bd8:	71 05       	cpc	r23, r1
    2bda:	39 f4       	brne	.+14     	; 0x2bea <__ftoa_engine+0x28>
    2bdc:	32 60       	ori	r19, 0x02	; 2
    2bde:	2e 5f       	subi	r18, 0xFE	; 254
    2be0:	3d 93       	st	X+, r19
    2be2:	30 e3       	ldi	r19, 0x30	; 48
    2be4:	2a 95       	dec	r18
    2be6:	e1 f7       	brne	.-8      	; 0x2be0 <__ftoa_engine+0x1e>
    2be8:	08 95       	ret
    2bea:	9f 3f       	cpi	r25, 0xFF	; 255
    2bec:	30 f0       	brcs	.+12     	; 0x2bfa <__ftoa_engine+0x38>
    2bee:	80 38       	cpi	r24, 0x80	; 128
    2bf0:	71 05       	cpc	r23, r1
    2bf2:	61 05       	cpc	r22, r1
    2bf4:	09 f0       	breq	.+2      	; 0x2bf8 <__ftoa_engine+0x36>
    2bf6:	3c 5f       	subi	r19, 0xFC	; 252
    2bf8:	3c 5f       	subi	r19, 0xFC	; 252
    2bfa:	3d 93       	st	X+, r19
    2bfc:	91 30       	cpi	r25, 0x01	; 1
    2bfe:	08 f0       	brcs	.+2      	; 0x2c02 <__ftoa_engine+0x40>
    2c00:	80 68       	ori	r24, 0x80	; 128
    2c02:	91 1d       	adc	r25, r1
    2c04:	df 93       	push	r29
    2c06:	cf 93       	push	r28
    2c08:	1f 93       	push	r17
    2c0a:	0f 93       	push	r16
    2c0c:	ff 92       	push	r15
    2c0e:	ef 92       	push	r14
    2c10:	19 2f       	mov	r17, r25
    2c12:	98 7f       	andi	r25, 0xF8	; 248
    2c14:	96 95       	lsr	r25
    2c16:	e9 2f       	mov	r30, r25
    2c18:	96 95       	lsr	r25
    2c1a:	96 95       	lsr	r25
    2c1c:	e9 0f       	add	r30, r25
    2c1e:	ff 27       	eor	r31, r31
    2c20:	e0 5f       	subi	r30, 0xF0	; 240
    2c22:	fe 4f       	sbci	r31, 0xFE	; 254
    2c24:	99 27       	eor	r25, r25
    2c26:	33 27       	eor	r19, r19
    2c28:	ee 24       	eor	r14, r14
    2c2a:	ff 24       	eor	r15, r15
    2c2c:	a7 01       	movw	r20, r14
    2c2e:	e7 01       	movw	r28, r14
    2c30:	05 90       	lpm	r0, Z+
    2c32:	08 94       	sec
    2c34:	07 94       	ror	r0
    2c36:	28 f4       	brcc	.+10     	; 0x2c42 <__ftoa_engine+0x80>
    2c38:	36 0f       	add	r19, r22
    2c3a:	e7 1e       	adc	r14, r23
    2c3c:	f8 1e       	adc	r15, r24
    2c3e:	49 1f       	adc	r20, r25
    2c40:	51 1d       	adc	r21, r1
    2c42:	66 0f       	add	r22, r22
    2c44:	77 1f       	adc	r23, r23
    2c46:	88 1f       	adc	r24, r24
    2c48:	99 1f       	adc	r25, r25
    2c4a:	06 94       	lsr	r0
    2c4c:	a1 f7       	brne	.-24     	; 0x2c36 <__ftoa_engine+0x74>
    2c4e:	05 90       	lpm	r0, Z+
    2c50:	07 94       	ror	r0
    2c52:	28 f4       	brcc	.+10     	; 0x2c5e <__ftoa_engine+0x9c>
    2c54:	e7 0e       	add	r14, r23
    2c56:	f8 1e       	adc	r15, r24
    2c58:	49 1f       	adc	r20, r25
    2c5a:	56 1f       	adc	r21, r22
    2c5c:	c1 1d       	adc	r28, r1
    2c5e:	77 0f       	add	r23, r23
    2c60:	88 1f       	adc	r24, r24
    2c62:	99 1f       	adc	r25, r25
    2c64:	66 1f       	adc	r22, r22
    2c66:	06 94       	lsr	r0
    2c68:	a1 f7       	brne	.-24     	; 0x2c52 <__ftoa_engine+0x90>
    2c6a:	05 90       	lpm	r0, Z+
    2c6c:	07 94       	ror	r0
    2c6e:	28 f4       	brcc	.+10     	; 0x2c7a <__ftoa_engine+0xb8>
    2c70:	f8 0e       	add	r15, r24
    2c72:	49 1f       	adc	r20, r25
    2c74:	56 1f       	adc	r21, r22
    2c76:	c7 1f       	adc	r28, r23
    2c78:	d1 1d       	adc	r29, r1
    2c7a:	88 0f       	add	r24, r24
    2c7c:	99 1f       	adc	r25, r25
    2c7e:	66 1f       	adc	r22, r22
    2c80:	77 1f       	adc	r23, r23
    2c82:	06 94       	lsr	r0
    2c84:	a1 f7       	brne	.-24     	; 0x2c6e <__ftoa_engine+0xac>
    2c86:	05 90       	lpm	r0, Z+
    2c88:	07 94       	ror	r0
    2c8a:	20 f4       	brcc	.+8      	; 0x2c94 <__ftoa_engine+0xd2>
    2c8c:	49 0f       	add	r20, r25
    2c8e:	56 1f       	adc	r21, r22
    2c90:	c7 1f       	adc	r28, r23
    2c92:	d8 1f       	adc	r29, r24
    2c94:	99 0f       	add	r25, r25
    2c96:	66 1f       	adc	r22, r22
    2c98:	77 1f       	adc	r23, r23
    2c9a:	88 1f       	adc	r24, r24
    2c9c:	06 94       	lsr	r0
    2c9e:	a9 f7       	brne	.-22     	; 0x2c8a <__ftoa_engine+0xc8>
    2ca0:	84 91       	lpm	r24, Z+
    2ca2:	10 95       	com	r17
    2ca4:	17 70       	andi	r17, 0x07	; 7
    2ca6:	41 f0       	breq	.+16     	; 0x2cb8 <__ftoa_engine+0xf6>
    2ca8:	d6 95       	lsr	r29
    2caa:	c7 95       	ror	r28
    2cac:	57 95       	ror	r21
    2cae:	47 95       	ror	r20
    2cb0:	f7 94       	ror	r15
    2cb2:	e7 94       	ror	r14
    2cb4:	1a 95       	dec	r17
    2cb6:	c1 f7       	brne	.-16     	; 0x2ca8 <__ftoa_engine+0xe6>
    2cb8:	e6 eb       	ldi	r30, 0xB6	; 182
    2cba:	f0 e0       	ldi	r31, 0x00	; 0
    2cbc:	68 94       	set
    2cbe:	15 90       	lpm	r1, Z+
    2cc0:	15 91       	lpm	r17, Z+
    2cc2:	35 91       	lpm	r19, Z+
    2cc4:	65 91       	lpm	r22, Z+
    2cc6:	95 91       	lpm	r25, Z+
    2cc8:	05 90       	lpm	r0, Z+
    2cca:	7f e2       	ldi	r23, 0x2F	; 47
    2ccc:	73 95       	inc	r23
    2cce:	e1 18       	sub	r14, r1
    2cd0:	f1 0a       	sbc	r15, r17
    2cd2:	43 0b       	sbc	r20, r19
    2cd4:	56 0b       	sbc	r21, r22
    2cd6:	c9 0b       	sbc	r28, r25
    2cd8:	d0 09       	sbc	r29, r0
    2cda:	c0 f7       	brcc	.-16     	; 0x2ccc <__ftoa_engine+0x10a>
    2cdc:	e1 0c       	add	r14, r1
    2cde:	f1 1e       	adc	r15, r17
    2ce0:	43 1f       	adc	r20, r19
    2ce2:	56 1f       	adc	r21, r22
    2ce4:	c9 1f       	adc	r28, r25
    2ce6:	d0 1d       	adc	r29, r0
    2ce8:	7e f4       	brtc	.+30     	; 0x2d08 <__ftoa_engine+0x146>
    2cea:	70 33       	cpi	r23, 0x30	; 48
    2cec:	11 f4       	brne	.+4      	; 0x2cf2 <__ftoa_engine+0x130>
    2cee:	8a 95       	dec	r24
    2cf0:	e6 cf       	rjmp	.-52     	; 0x2cbe <__ftoa_engine+0xfc>
    2cf2:	e8 94       	clt
    2cf4:	01 50       	subi	r16, 0x01	; 1
    2cf6:	30 f0       	brcs	.+12     	; 0x2d04 <__ftoa_engine+0x142>
    2cf8:	08 0f       	add	r16, r24
    2cfa:	0a f4       	brpl	.+2      	; 0x2cfe <__ftoa_engine+0x13c>
    2cfc:	00 27       	eor	r16, r16
    2cfe:	02 17       	cp	r16, r18
    2d00:	08 f4       	brcc	.+2      	; 0x2d04 <__ftoa_engine+0x142>
    2d02:	20 2f       	mov	r18, r16
    2d04:	23 95       	inc	r18
    2d06:	02 2f       	mov	r16, r18
    2d08:	7a 33       	cpi	r23, 0x3A	; 58
    2d0a:	28 f0       	brcs	.+10     	; 0x2d16 <__ftoa_engine+0x154>
    2d0c:	79 e3       	ldi	r23, 0x39	; 57
    2d0e:	7d 93       	st	X+, r23
    2d10:	2a 95       	dec	r18
    2d12:	e9 f7       	brne	.-6      	; 0x2d0e <__ftoa_engine+0x14c>
    2d14:	10 c0       	rjmp	.+32     	; 0x2d36 <__ftoa_engine+0x174>
    2d16:	7d 93       	st	X+, r23
    2d18:	2a 95       	dec	r18
    2d1a:	89 f6       	brne	.-94     	; 0x2cbe <__ftoa_engine+0xfc>
    2d1c:	06 94       	lsr	r0
    2d1e:	97 95       	ror	r25
    2d20:	67 95       	ror	r22
    2d22:	37 95       	ror	r19
    2d24:	17 95       	ror	r17
    2d26:	17 94       	ror	r1
    2d28:	e1 18       	sub	r14, r1
    2d2a:	f1 0a       	sbc	r15, r17
    2d2c:	43 0b       	sbc	r20, r19
    2d2e:	56 0b       	sbc	r21, r22
    2d30:	c9 0b       	sbc	r28, r25
    2d32:	d0 09       	sbc	r29, r0
    2d34:	98 f0       	brcs	.+38     	; 0x2d5c <__ftoa_engine+0x19a>
    2d36:	23 95       	inc	r18
    2d38:	7e 91       	ld	r23, -X
    2d3a:	73 95       	inc	r23
    2d3c:	7a 33       	cpi	r23, 0x3A	; 58
    2d3e:	08 f0       	brcs	.+2      	; 0x2d42 <__ftoa_engine+0x180>
    2d40:	70 e3       	ldi	r23, 0x30	; 48
    2d42:	7c 93       	st	X, r23
    2d44:	20 13       	cpse	r18, r16
    2d46:	b8 f7       	brcc	.-18     	; 0x2d36 <__ftoa_engine+0x174>
    2d48:	7e 91       	ld	r23, -X
    2d4a:	70 61       	ori	r23, 0x10	; 16
    2d4c:	7d 93       	st	X+, r23
    2d4e:	30 f0       	brcs	.+12     	; 0x2d5c <__ftoa_engine+0x19a>
    2d50:	83 95       	inc	r24
    2d52:	71 e3       	ldi	r23, 0x31	; 49
    2d54:	7d 93       	st	X+, r23
    2d56:	70 e3       	ldi	r23, 0x30	; 48
    2d58:	2a 95       	dec	r18
    2d5a:	e1 f7       	brne	.-8      	; 0x2d54 <__ftoa_engine+0x192>
    2d5c:	11 24       	eor	r1, r1
    2d5e:	ef 90       	pop	r14
    2d60:	ff 90       	pop	r15
    2d62:	0f 91       	pop	r16
    2d64:	1f 91       	pop	r17
    2d66:	cf 91       	pop	r28
    2d68:	df 91       	pop	r29
    2d6a:	99 27       	eor	r25, r25
    2d6c:	87 fd       	sbrc	r24, 7
    2d6e:	90 95       	com	r25
    2d70:	08 95       	ret

00002d72 <strnlen_P>:
    2d72:	fc 01       	movw	r30, r24
    2d74:	05 90       	lpm	r0, Z+
    2d76:	61 50       	subi	r22, 0x01	; 1
    2d78:	70 40       	sbci	r23, 0x00	; 0
    2d7a:	01 10       	cpse	r0, r1
    2d7c:	d8 f7       	brcc	.-10     	; 0x2d74 <strnlen_P+0x2>
    2d7e:	80 95       	com	r24
    2d80:	90 95       	com	r25
    2d82:	8e 0f       	add	r24, r30
    2d84:	9f 1f       	adc	r25, r31
    2d86:	08 95       	ret

00002d88 <strnlen>:
    2d88:	fc 01       	movw	r30, r24
    2d8a:	61 50       	subi	r22, 0x01	; 1
    2d8c:	70 40       	sbci	r23, 0x00	; 0
    2d8e:	01 90       	ld	r0, Z+
    2d90:	01 10       	cpse	r0, r1
    2d92:	d8 f7       	brcc	.-10     	; 0x2d8a <strnlen+0x2>
    2d94:	80 95       	com	r24
    2d96:	90 95       	com	r25
    2d98:	8e 0f       	add	r24, r30
    2d9a:	9f 1f       	adc	r25, r31
    2d9c:	08 95       	ret

00002d9e <fputc>:
    2d9e:	0f 93       	push	r16
    2da0:	1f 93       	push	r17
    2da2:	cf 93       	push	r28
    2da4:	df 93       	push	r29
    2da6:	8c 01       	movw	r16, r24
    2da8:	eb 01       	movw	r28, r22
    2daa:	8b 81       	ldd	r24, Y+3	; 0x03
    2dac:	81 ff       	sbrs	r24, 1
    2dae:	1b c0       	rjmp	.+54     	; 0x2de6 <fputc+0x48>
    2db0:	82 ff       	sbrs	r24, 2
    2db2:	0d c0       	rjmp	.+26     	; 0x2dce <fputc+0x30>
    2db4:	2e 81       	ldd	r18, Y+6	; 0x06
    2db6:	3f 81       	ldd	r19, Y+7	; 0x07
    2db8:	8c 81       	ldd	r24, Y+4	; 0x04
    2dba:	9d 81       	ldd	r25, Y+5	; 0x05
    2dbc:	28 17       	cp	r18, r24
    2dbe:	39 07       	cpc	r19, r25
    2dc0:	64 f4       	brge	.+24     	; 0x2dda <fputc+0x3c>
    2dc2:	e8 81       	ld	r30, Y
    2dc4:	f9 81       	ldd	r31, Y+1	; 0x01
    2dc6:	01 93       	st	Z+, r16
    2dc8:	f9 83       	std	Y+1, r31	; 0x01
    2dca:	e8 83       	st	Y, r30
    2dcc:	06 c0       	rjmp	.+12     	; 0x2dda <fputc+0x3c>
    2dce:	e8 85       	ldd	r30, Y+8	; 0x08
    2dd0:	f9 85       	ldd	r31, Y+9	; 0x09
    2dd2:	80 2f       	mov	r24, r16
    2dd4:	09 95       	icall
    2dd6:	89 2b       	or	r24, r25
    2dd8:	31 f4       	brne	.+12     	; 0x2de6 <fputc+0x48>
    2dda:	8e 81       	ldd	r24, Y+6	; 0x06
    2ddc:	9f 81       	ldd	r25, Y+7	; 0x07
    2dde:	01 96       	adiw	r24, 0x01	; 1
    2de0:	9f 83       	std	Y+7, r25	; 0x07
    2de2:	8e 83       	std	Y+6, r24	; 0x06
    2de4:	02 c0       	rjmp	.+4      	; 0x2dea <fputc+0x4c>
    2de6:	0f ef       	ldi	r16, 0xFF	; 255
    2de8:	1f ef       	ldi	r17, 0xFF	; 255
    2dea:	c8 01       	movw	r24, r16
    2dec:	df 91       	pop	r29
    2dee:	cf 91       	pop	r28
    2df0:	1f 91       	pop	r17
    2df2:	0f 91       	pop	r16
    2df4:	08 95       	ret

00002df6 <sprintf>:
    2df6:	ae e0       	ldi	r26, 0x0E	; 14
    2df8:	b0 e0       	ldi	r27, 0x00	; 0
    2dfa:	e1 e0       	ldi	r30, 0x01	; 1
    2dfc:	f7 e1       	ldi	r31, 0x17	; 23
    2dfe:	0c 94 a4 15 	jmp	0x2b48	; 0x2b48 <__prologue_saves__+0x1c>
    2e02:	0d 89       	ldd	r16, Y+21	; 0x15
    2e04:	1e 89       	ldd	r17, Y+22	; 0x16
    2e06:	86 e0       	ldi	r24, 0x06	; 6
    2e08:	8c 83       	std	Y+4, r24	; 0x04
    2e0a:	1a 83       	std	Y+2, r17	; 0x02
    2e0c:	09 83       	std	Y+1, r16	; 0x01
    2e0e:	8f ef       	ldi	r24, 0xFF	; 255
    2e10:	9f e7       	ldi	r25, 0x7F	; 127
    2e12:	9e 83       	std	Y+6, r25	; 0x06
    2e14:	8d 83       	std	Y+5, r24	; 0x05
    2e16:	9e 01       	movw	r18, r28
    2e18:	27 5e       	subi	r18, 0xE7	; 231
    2e1a:	3f 4f       	sbci	r19, 0xFF	; 255
    2e1c:	ce 01       	movw	r24, r28
    2e1e:	01 96       	adiw	r24, 0x01	; 1
    2e20:	6f 89       	ldd	r22, Y+23	; 0x17
    2e22:	78 8d       	ldd	r23, Y+24	; 0x18
    2e24:	a9 01       	movw	r20, r18
    2e26:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <vfprintf>
    2e2a:	2f 81       	ldd	r18, Y+7	; 0x07
    2e2c:	38 85       	ldd	r19, Y+8	; 0x08
    2e2e:	02 0f       	add	r16, r18
    2e30:	13 1f       	adc	r17, r19
    2e32:	f8 01       	movw	r30, r16
    2e34:	10 82       	st	Z, r1
    2e36:	2e 96       	adiw	r28, 0x0e	; 14
    2e38:	e4 e0       	ldi	r30, 0x04	; 4
    2e3a:	0c 94 c0 15 	jmp	0x2b80	; 0x2b80 <__epilogue_restores__+0x1c>

00002e3e <__ultoa_invert>:
    2e3e:	fa 01       	movw	r30, r20
    2e40:	aa 27       	eor	r26, r26
    2e42:	28 30       	cpi	r18, 0x08	; 8
    2e44:	51 f1       	breq	.+84     	; 0x2e9a <__ultoa_invert+0x5c>
    2e46:	20 31       	cpi	r18, 0x10	; 16
    2e48:	81 f1       	breq	.+96     	; 0x2eaa <__ultoa_invert+0x6c>
    2e4a:	e8 94       	clt
    2e4c:	6f 93       	push	r22
    2e4e:	6e 7f       	andi	r22, 0xFE	; 254
    2e50:	6e 5f       	subi	r22, 0xFE	; 254
    2e52:	7f 4f       	sbci	r23, 0xFF	; 255
    2e54:	8f 4f       	sbci	r24, 0xFF	; 255
    2e56:	9f 4f       	sbci	r25, 0xFF	; 255
    2e58:	af 4f       	sbci	r26, 0xFF	; 255
    2e5a:	b1 e0       	ldi	r27, 0x01	; 1
    2e5c:	3e d0       	rcall	.+124    	; 0x2eda <__ultoa_invert+0x9c>
    2e5e:	b4 e0       	ldi	r27, 0x04	; 4
    2e60:	3c d0       	rcall	.+120    	; 0x2eda <__ultoa_invert+0x9c>
    2e62:	67 0f       	add	r22, r23
    2e64:	78 1f       	adc	r23, r24
    2e66:	89 1f       	adc	r24, r25
    2e68:	9a 1f       	adc	r25, r26
    2e6a:	a1 1d       	adc	r26, r1
    2e6c:	68 0f       	add	r22, r24
    2e6e:	79 1f       	adc	r23, r25
    2e70:	8a 1f       	adc	r24, r26
    2e72:	91 1d       	adc	r25, r1
    2e74:	a1 1d       	adc	r26, r1
    2e76:	6a 0f       	add	r22, r26
    2e78:	71 1d       	adc	r23, r1
    2e7a:	81 1d       	adc	r24, r1
    2e7c:	91 1d       	adc	r25, r1
    2e7e:	a1 1d       	adc	r26, r1
    2e80:	20 d0       	rcall	.+64     	; 0x2ec2 <__ultoa_invert+0x84>
    2e82:	09 f4       	brne	.+2      	; 0x2e86 <__ultoa_invert+0x48>
    2e84:	68 94       	set
    2e86:	3f 91       	pop	r19
    2e88:	2a e0       	ldi	r18, 0x0A	; 10
    2e8a:	26 9f       	mul	r18, r22
    2e8c:	11 24       	eor	r1, r1
    2e8e:	30 19       	sub	r19, r0
    2e90:	30 5d       	subi	r19, 0xD0	; 208
    2e92:	31 93       	st	Z+, r19
    2e94:	de f6       	brtc	.-74     	; 0x2e4c <__ultoa_invert+0xe>
    2e96:	cf 01       	movw	r24, r30
    2e98:	08 95       	ret
    2e9a:	46 2f       	mov	r20, r22
    2e9c:	47 70       	andi	r20, 0x07	; 7
    2e9e:	40 5d       	subi	r20, 0xD0	; 208
    2ea0:	41 93       	st	Z+, r20
    2ea2:	b3 e0       	ldi	r27, 0x03	; 3
    2ea4:	0f d0       	rcall	.+30     	; 0x2ec4 <__ultoa_invert+0x86>
    2ea6:	c9 f7       	brne	.-14     	; 0x2e9a <__ultoa_invert+0x5c>
    2ea8:	f6 cf       	rjmp	.-20     	; 0x2e96 <__ultoa_invert+0x58>
    2eaa:	46 2f       	mov	r20, r22
    2eac:	4f 70       	andi	r20, 0x0F	; 15
    2eae:	40 5d       	subi	r20, 0xD0	; 208
    2eb0:	4a 33       	cpi	r20, 0x3A	; 58
    2eb2:	18 f0       	brcs	.+6      	; 0x2eba <__ultoa_invert+0x7c>
    2eb4:	49 5d       	subi	r20, 0xD9	; 217
    2eb6:	31 fd       	sbrc	r19, 1
    2eb8:	40 52       	subi	r20, 0x20	; 32
    2eba:	41 93       	st	Z+, r20
    2ebc:	02 d0       	rcall	.+4      	; 0x2ec2 <__ultoa_invert+0x84>
    2ebe:	a9 f7       	brne	.-22     	; 0x2eaa <__ultoa_invert+0x6c>
    2ec0:	ea cf       	rjmp	.-44     	; 0x2e96 <__ultoa_invert+0x58>
    2ec2:	b4 e0       	ldi	r27, 0x04	; 4
    2ec4:	a6 95       	lsr	r26
    2ec6:	97 95       	ror	r25
    2ec8:	87 95       	ror	r24
    2eca:	77 95       	ror	r23
    2ecc:	67 95       	ror	r22
    2ece:	ba 95       	dec	r27
    2ed0:	c9 f7       	brne	.-14     	; 0x2ec4 <__ultoa_invert+0x86>
    2ed2:	00 97       	sbiw	r24, 0x00	; 0
    2ed4:	61 05       	cpc	r22, r1
    2ed6:	71 05       	cpc	r23, r1
    2ed8:	08 95       	ret
    2eda:	9b 01       	movw	r18, r22
    2edc:	ac 01       	movw	r20, r24
    2ede:	0a 2e       	mov	r0, r26
    2ee0:	06 94       	lsr	r0
    2ee2:	57 95       	ror	r21
    2ee4:	47 95       	ror	r20
    2ee6:	37 95       	ror	r19
    2ee8:	27 95       	ror	r18
    2eea:	ba 95       	dec	r27
    2eec:	c9 f7       	brne	.-14     	; 0x2ee0 <__ultoa_invert+0xa2>
    2eee:	62 0f       	add	r22, r18
    2ef0:	73 1f       	adc	r23, r19
    2ef2:	84 1f       	adc	r24, r20
    2ef4:	95 1f       	adc	r25, r21
    2ef6:	a0 1d       	adc	r26, r0
    2ef8:	08 95       	ret

00002efa <_exit>:
    2efa:	f8 94       	cli

00002efc <__stop_program>:
    2efc:	ff cf       	rjmp	.-2      	; 0x2efc <__stop_program>
