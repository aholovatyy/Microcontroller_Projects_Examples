
lcd_3310.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000812  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000812  000008a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800070  00800070  000008b6  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  000008b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000f8  00000000  00000000  000008f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004ed  00000000  00000000  000009ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000218  00000000  00000000  00000edb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004e4  00000000  00000000  000010f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  000015d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000019b  00000000  00000000  000016b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001fd  00000000  00000000  00001853  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00001a50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__ctors_end>
   4:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
   8:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
   c:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
  10:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
  14:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
  18:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
  1c:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
  20:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
  24:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
  28:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
  2c:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
  30:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
  34:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
  38:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
  3c:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
  40:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
  44:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
  48:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
  4c:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>
  50:	0c 94 3a 01 	jmp	0x274	; 0x274 <__bad_interrupt>

00000054 <font5x7>:
  54:	00 00 00 00 00 00 00 2f 00 00 00 07 00 07 00 14     ......./........
  64:	7f 14 7f 14 24 2a 7f 2a 12 32 34 08 16 26 36 49     ....$*.*.24..&6I
  74:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
  84:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 00 50 30     ....>....>....P0
  94:	00 10 10 10 10 10 00 60 60 00 00 20 10 08 04 02     .......``.. ....
  a4:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
  b4:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
  c4:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
  d4:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
  e4:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
  f4:	32 49 59 51 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IYQ>~...~.III6>
 104:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
 114:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
 124:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
 134:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
 144:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
 154:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
 164:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
 174:	08 07 61 51 49 45 43 00 7f 41 41 00 55 2a 55 2a     ..aQIEC..AA.U*U*
 184:	55 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40     U.AA.......@@@@@
 194:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
 1a4:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
 1b4:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
 1c4:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
 1d4:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
 1e4:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
 1f4:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
 204:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
 214:	50 3c 44 64 54 4c 44 00 7f 3e 1c 08 08 1c 3e 7f     P<DdTLD..>....>.
 224:	00 08 7c 7e 7c 08 10 3e 7e 3e 10 3e 3e 3e 3e 3e     ..|~|..>~>.>>>>>
 234:	00 7f 3e 1c 08 00                                   ..>...

0000023a <__ctors_end>:
 23a:	11 24       	eor	r1, r1
 23c:	1f be       	out	0x3f, r1	; 63
 23e:	cf e5       	ldi	r28, 0x5F	; 95
 240:	d8 e0       	ldi	r29, 0x08	; 8
 242:	de bf       	out	0x3e, r29	; 62
 244:	cd bf       	out	0x3d, r28	; 61

00000246 <__do_copy_data>:
 246:	10 e0       	ldi	r17, 0x00	; 0
 248:	a0 e6       	ldi	r26, 0x60	; 96
 24a:	b0 e0       	ldi	r27, 0x00	; 0
 24c:	e2 e1       	ldi	r30, 0x12	; 18
 24e:	f8 e0       	ldi	r31, 0x08	; 8
 250:	02 c0       	rjmp	.+4      	; 0x256 <.do_copy_data_start>

00000252 <.do_copy_data_loop>:
 252:	05 90       	lpm	r0, Z+
 254:	0d 92       	st	X+, r0

00000256 <.do_copy_data_start>:
 256:	a0 37       	cpi	r26, 0x70	; 112
 258:	b1 07       	cpc	r27, r17
 25a:	d9 f7       	brne	.-10     	; 0x252 <.do_copy_data_loop>

0000025c <__do_clear_bss>:
 25c:	10 e0       	ldi	r17, 0x00	; 0
 25e:	a0 e7       	ldi	r26, 0x70	; 112
 260:	b0 e0       	ldi	r27, 0x00	; 0
 262:	01 c0       	rjmp	.+2      	; 0x266 <.do_clear_bss_start>

00000264 <.do_clear_bss_loop>:
 264:	1d 92       	st	X+, r1

00000266 <.do_clear_bss_start>:
 266:	ac 37       	cpi	r26, 0x7C	; 124
 268:	b1 07       	cpc	r27, r17
 26a:	e1 f7       	brne	.-8      	; 0x264 <.do_clear_bss_loop>
 26c:	0e 94 3c 01 	call	0x278	; 0x278 <main>
 270:	0c 94 07 04 	jmp	0x80e	; 0x80e <_exit>

00000274 <__bad_interrupt>:
 274:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000278 <main>:

/* main -- Program starts here */
int main(void)
{	

	DDRD = 0xff;
 278:	8f ef       	ldi	r24, 0xFF	; 255
 27a:	81 bb       	out	0x11, r24	; 17


	// Setup LCD
	lcd_init();
 27c:	0e 94 53 02 	call	0x4a6	; 0x4a6 <lcd_init>
	lcd_contrast(0x40);
 280:	80 e4       	ldi	r24, 0x40	; 64
 282:	0e 94 42 02 	call	0x484	; 0x484 <lcd_contrast>
	
	// Print on first line
	lcd_goto_xy(1,1);
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	61 e0       	ldi	r22, 0x01	; 1
 28a:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_goto_xy>
	lcd_str(" Hello! ");
 28e:	80 e6       	ldi	r24, 0x60	; 96
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <lcd_str>
	
	// Print on second line with custom characters
	lcd_goto_xy(4,2);
 296:	84 e0       	ldi	r24, 0x04	; 4
 298:	62 e0       	ldi	r22, 0x02	; 2
 29a:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_goto_xy>
//	lcd_chr(ARROW_RIGHT);
	
	while(1){
	
		if (PORTD == 0b11111111) PORTD = 0b00000000;
		else PORTD=0b11111111;
 29e:	4f ef       	ldi	r20, 0xFF	; 255
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2a0:	29 e1       	ldi	r18, 0x19	; 25
 2a2:	30 e0       	ldi	r19, 0x00	; 0
//	printf(" 2007 ");
//	lcd_chr(ARROW_RIGHT);
	
	while(1){
	
		if (PORTD == 0b11111111) PORTD = 0b00000000;
 2a4:	82 b3       	in	r24, 0x12	; 18
 2a6:	8f 3f       	cpi	r24, 0xFF	; 255
 2a8:	11 f4       	brne	.+4      	; 0x2ae <main+0x36>
 2aa:	12 ba       	out	0x12, r1	; 18
 2ac:	01 c0       	rjmp	.+2      	; 0x2b0 <main+0x38>
		else PORTD=0b11111111;
 2ae:	42 bb       	out	0x12, r20	; 18
 2b0:	80 e1       	ldi	r24, 0x10	; 16
 2b2:	97 e2       	ldi	r25, 0x27	; 39
 2b4:	f9 01       	movw	r30, r18
 2b6:	31 97       	sbiw	r30, 0x01	; 1
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <main+0x3e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2ba:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2bc:	99 f3       	breq	.-26     	; 0x2a4 <main+0x2c>
 2be:	fa cf       	rjmp	.-12     	; 0x2b4 <main+0x3c>

000002c0 <lcd_goto_xy>:
}

/* Sets cursor location to xy location corresponding to basic font size */
void lcd_goto_xy(unsigned char x, unsigned char y)
{
    lcdCacheIdx = (x-1)*6 + (y-1)*84;
 2c0:	96 e0       	ldi	r25, 0x06	; 6
 2c2:	89 9f       	mul	r24, r25
 2c4:	c0 01       	movw	r24, r0
 2c6:	11 24       	eor	r1, r1
 2c8:	8a 55       	subi	r24, 0x5A	; 90
 2ca:	90 40       	sbci	r25, 0x00	; 0
 2cc:	24 e5       	ldi	r18, 0x54	; 84
 2ce:	62 9f       	mul	r22, r18
 2d0:	b0 01       	movw	r22, r0
 2d2:	11 24       	eor	r1, r1
 2d4:	86 0f       	add	r24, r22
 2d6:	97 1f       	adc	r25, r23
 2d8:	90 93 71 00 	sts	0x0071, r25
 2dc:	80 93 70 00 	sts	0x0070, r24
}
 2e0:	08 95       	ret

000002e2 <lcd_goto_xy_exact>:

/* Sets cursor location to exact xy pixel location on the lcd */
void lcd_goto_xy_exact(unsigned char x, unsigned char y)
{
    lcdCacheIdx = (x-1) + (y-1)*84;
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	85 55       	subi	r24, 0x55	; 85
 2e6:	90 40       	sbci	r25, 0x00	; 0
 2e8:	24 e5       	ldi	r18, 0x54	; 84
 2ea:	62 9f       	mul	r22, r18
 2ec:	b0 01       	movw	r22, r0
 2ee:	11 24       	eor	r1, r1
 2f0:	86 0f       	add	r24, r22
 2f2:	97 1f       	adc	r25, r23
 2f4:	90 93 71 00 	sts	0x0071, r25
 2f8:	80 93 70 00 	sts	0x0070, r24
}
 2fc:	08 95       	ret

000002fe <lcd_send>:
	lcd_send(0x40 |(addr / LCD_X_RES), LCD_CMD);
}

/* Sends data to display controller */
void lcd_send(unsigned char data, LcdCmdData cd)
{
 2fe:	98 2f       	mov	r25, r24
	// Data/DC are outputs for the lcd (all low)
	LCD_DDR |= LCD_DATA_PIN | LCD_DC_PIN;
 300:	84 b3       	in	r24, 0x14	; 20
 302:	8c 60       	ori	r24, 0x0C	; 12
 304:	84 bb       	out	0x14, r24	; 20
	
    // Enable display controller (active low)
    LCD_PORT &= ~LCD_CE_PIN;
 306:	a9 98       	cbi	0x15, 1	; 21

    // Either command or data
    if(cd == LCD_DATA) {
 308:	61 30       	cpi	r22, 0x01	; 1
 30a:	11 f4       	brne	.+4      	; 0x310 <lcd_send+0x12>
        LCD_PORT |= LCD_DC_PIN;
 30c:	aa 9a       	sbi	0x15, 2	; 21
 30e:	01 c0       	rjmp	.+2      	; 0x312 <lcd_send+0x14>
    } else {
        LCD_PORT &= ~LCD_DC_PIN;
 310:	aa 98       	cbi	0x15, 2	; 21
 312:	27 e0       	ldi	r18, 0x07	; 7
 314:	30 e0       	ldi	r19, 0x00	; 0
    }
	
	for(unsigned char i=0;i<8;i++) {
	
		// Set the DATA pin value
		if((data>>(7-i)) & 0x01) {
 316:	49 2f       	mov	r20, r25
 318:	50 e0       	ldi	r21, 0x00	; 0
 31a:	ca 01       	movw	r24, r20
 31c:	02 2e       	mov	r0, r18
 31e:	02 c0       	rjmp	.+4      	; 0x324 <lcd_send+0x26>
 320:	95 95       	asr	r25
 322:	87 95       	ror	r24
 324:	0a 94       	dec	r0
 326:	e2 f7       	brpl	.-8      	; 0x320 <lcd_send+0x22>
 328:	80 ff       	sbrs	r24, 0
 32a:	02 c0       	rjmp	.+4      	; 0x330 <lcd_send+0x32>
			LCD_PORT |= LCD_DATA_PIN;
 32c:	ab 9a       	sbi	0x15, 3	; 21
 32e:	01 c0       	rjmp	.+2      	; 0x332 <lcd_send+0x34>
		} else {
			LCD_PORT &= ~LCD_DATA_PIN;
 330:	ab 98       	cbi	0x15, 3	; 21
		}
		
		// Toggle the clock
		LCD_PORT |= LCD_CLK_PIN;
 332:	ac 9a       	sbi	0x15, 4	; 21
		LCD_PORT &= ~LCD_CLK_PIN;
 334:	ac 98       	cbi	0x15, 4	; 21
 336:	21 50       	subi	r18, 0x01	; 1
 338:	30 40       	sbci	r19, 0x00	; 0
        LCD_PORT |= LCD_DC_PIN;
    } else {
        LCD_PORT &= ~LCD_DC_PIN;
    }
	
	for(unsigned char i=0;i<8;i++) {
 33a:	8f ef       	ldi	r24, 0xFF	; 255
 33c:	2f 3f       	cpi	r18, 0xFF	; 255
 33e:	38 07       	cpc	r19, r24
 340:	61 f7       	brne	.-40     	; 0x31a <lcd_send+0x1c>
		LCD_PORT |= LCD_CLK_PIN;
		LCD_PORT &= ~LCD_CLK_PIN;
	}

	// Disable display controller
    LCD_PORT |= LCD_CE_PIN;
 342:	a9 9a       	sbi	0x15, 1	; 21
	
	// Data/DC can be used as button inputs when not sending to LCD (/w pullups)
	LCD_DDR &= ~(LCD_DATA_PIN | LCD_DC_PIN);
 344:	84 b3       	in	r24, 0x14	; 20
 346:	83 7f       	andi	r24, 0xF3	; 243
 348:	84 bb       	out	0x14, r24	; 20
	LCD_PORT |= LCD_DATA_PIN | LCD_DC_PIN;
 34a:	85 b3       	in	r24, 0x15	; 21
 34c:	8c 60       	ori	r24, 0x0C	; 12
 34e:	85 bb       	out	0x15, r24	; 21
}
 350:	08 95       	ret

00000352 <lcd_base_addr>:
        lcd_chr(*str++);
    }
}

// Set the base address of the lcd
void lcd_base_addr(unsigned int addr) {
 352:	0f 93       	push	r16
 354:	1f 93       	push	r17
 356:	8c 01       	movw	r16, r24
	lcd_send(0x80 |(addr % LCD_X_RES), LCD_CMD);
 358:	64 e5       	ldi	r22, 0x54	; 84
 35a:	70 e0       	ldi	r23, 0x00	; 0
 35c:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__udivmodhi4>
 360:	80 68       	ori	r24, 0x80	; 128
 362:	60 e0       	ldi	r22, 0x00	; 0
 364:	0e 94 7f 01 	call	0x2fe	; 0x2fe <lcd_send>
	lcd_send(0x40 |(addr / LCD_X_RES), LCD_CMD);
 368:	c8 01       	movw	r24, r16
 36a:	64 e5       	ldi	r22, 0x54	; 84
 36c:	70 e0       	ldi	r23, 0x00	; 0
 36e:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__udivmodhi4>
 372:	86 2f       	mov	r24, r22
 374:	80 64       	ori	r24, 0x40	; 64
 376:	60 e0       	ldi	r22, 0x00	; 0
 378:	0e 94 7f 01 	call	0x2fe	; 0x2fe <lcd_send>
}
 37c:	1f 91       	pop	r17
 37e:	0f 91       	pop	r16
 380:	08 95       	ret

00000382 <lcd_chr>:
    lcdCacheIdx = (x-1) + (y-1)*84;
}

/* Displays a character at current cursor location */
void lcd_chr(char chr)
{
 382:	0f 93       	push	r16
 384:	1f 93       	push	r17
 386:	cf 93       	push	r28
 388:	df 93       	push	r29
 38a:	08 2f       	mov	r16, r24
	lcd_base_addr(lcdCacheIdx);
 38c:	80 91 70 00 	lds	r24, 0x0070
 390:	90 91 71 00 	lds	r25, 0x0071
 394:	0e 94 a9 01 	call	0x352	; 0x352 <lcd_base_addr>

    // 5 pixel wide characters and add space
    for(unsigned char i=0;i<5;i++) {
		lcd_send(pgm_read_byte(&font5x7[chr-32][i]) << 1, LCD_DATA);
 398:	85 e0       	ldi	r24, 0x05	; 5
 39a:	08 9f       	mul	r16, r24
 39c:	80 01       	movw	r16, r0
 39e:	11 24       	eor	r1, r1
 3a0:	e8 01       	movw	r28, r16
 3a2:	cc 54       	subi	r28, 0x4C	; 76
 3a4:	d0 40       	sbci	r29, 0x00	; 0
void lcd_chr(char chr)
{
	lcd_base_addr(lcdCacheIdx);

    // 5 pixel wide characters and add space
    for(unsigned char i=0;i<5;i++) {
 3a6:	0b 59       	subi	r16, 0x9B	; 155
 3a8:	10 40       	sbci	r17, 0x00	; 0
 3aa:	0c 5a       	subi	r16, 0xAC	; 172
 3ac:	1f 4f       	sbci	r17, 0xFF	; 255
		lcd_send(pgm_read_byte(&font5x7[chr-32][i]) << 1, LCD_DATA);
 3ae:	fe 01       	movw	r30, r28
 3b0:	84 91       	lpm	r24, Z+
 3b2:	88 0f       	add	r24, r24
 3b4:	61 e0       	ldi	r22, 0x01	; 1
 3b6:	0e 94 7f 01 	call	0x2fe	; 0x2fe <lcd_send>
 3ba:	21 96       	adiw	r28, 0x01	; 1
void lcd_chr(char chr)
{
	lcd_base_addr(lcdCacheIdx);

    // 5 pixel wide characters and add space
    for(unsigned char i=0;i<5;i++) {
 3bc:	c0 17       	cp	r28, r16
 3be:	d1 07       	cpc	r29, r17
 3c0:	b1 f7       	brne	.-20     	; 0x3ae <lcd_chr+0x2c>
		lcd_send(pgm_read_byte(&font5x7[chr-32][i]) << 1, LCD_DATA);
    }
	lcd_send(0, LCD_DATA);
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	61 e0       	ldi	r22, 0x01	; 1
 3c6:	0e 94 7f 01 	call	0x2fe	; 0x2fe <lcd_send>
	
	lcdCacheIdx += 6;
 3ca:	80 91 70 00 	lds	r24, 0x0070
 3ce:	90 91 71 00 	lds	r25, 0x0071
 3d2:	06 96       	adiw	r24, 0x06	; 6
 3d4:	90 93 71 00 	sts	0x0071, r25
 3d8:	80 93 70 00 	sts	0x0070, r24
}
 3dc:	df 91       	pop	r29
 3de:	cf 91       	pop	r28
 3e0:	1f 91       	pop	r17
 3e2:	0f 91       	pop	r16
 3e4:	08 95       	ret

000003e6 <lcd_str>:

/* Displays string at current cursor location and increment cursor location */
void lcd_str(char *str)
{
 3e6:	cf 93       	push	r28
 3e8:	df 93       	push	r29
 3ea:	ec 01       	movw	r28, r24
 3ec:	03 c0       	rjmp	.+6      	; 0x3f4 <lcd_str+0xe>
    while(*str) {
        lcd_chr(*str++);
 3ee:	21 96       	adiw	r28, 0x01	; 1
 3f0:	0e 94 c1 01 	call	0x382	; 0x382 <lcd_chr>
}

/* Displays string at current cursor location and increment cursor location */
void lcd_str(char *str)
{
    while(*str) {
 3f4:	88 81       	ld	r24, Y
 3f6:	88 23       	and	r24, r24
 3f8:	d1 f7       	brne	.-12     	; 0x3ee <lcd_str+0x8>
        lcd_chr(*str++);
    }
}
 3fa:	df 91       	pop	r29
 3fc:	cf 91       	pop	r28
 3fe:	08 95       	ret

00000400 <lcd_clear_area>:
    }
}

/* Clears an area on a line */
void lcd_clear_area(unsigned char line, unsigned char startX, unsigned char endX)
{  
 400:	0f 93       	push	r16
 402:	1f 93       	push	r17
 404:	cf 93       	push	r28
 406:	df 93       	push	r29
    // Start and end positions of line
    int start = (line-1)*84+(startX-1);
 408:	94 e5       	ldi	r25, 0x54	; 84
 40a:	89 9f       	mul	r24, r25
 40c:	c0 01       	movw	r24, r0
 40e:	11 24       	eor	r1, r1
 410:	84 55       	subi	r24, 0x54	; 84
 412:	90 40       	sbci	r25, 0x00	; 0
    int end = (line-1)*84+(endX-1);
 414:	8c 01       	movw	r16, r24
 416:	04 0f       	add	r16, r20
 418:	11 1d       	adc	r17, r1
 41a:	01 50       	subi	r16, 0x01	; 1
 41c:	10 40       	sbci	r17, 0x00	; 0
	
	lcd_base_addr(start);
 41e:	c6 2f       	mov	r28, r22
 420:	d0 e0       	ldi	r29, 0x00	; 0
 422:	21 97       	sbiw	r28, 0x01	; 1
 424:	c8 0f       	add	r28, r24
 426:	d9 1f       	adc	r29, r25
 428:	ce 01       	movw	r24, r28
 42a:	0e 94 a9 01 	call	0x352	; 0x352 <lcd_base_addr>
 42e:	05 c0       	rjmp	.+10     	; 0x43a <lcd_clear_area+0x3a>
    
    // Clear all data in range from cache
    for(unsigned int i=start;i<end;i++) {
        lcd_send(0, LCD_DATA);
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	61 e0       	ldi	r22, 0x01	; 1
 434:	0e 94 7f 01 	call	0x2fe	; 0x2fe <lcd_send>
    int end = (line-1)*84+(endX-1);
	
	lcd_base_addr(start);
    
    // Clear all data in range from cache
    for(unsigned int i=start;i<end;i++) {
 438:	21 96       	adiw	r28, 0x01	; 1
 43a:	c0 17       	cp	r28, r16
 43c:	d1 07       	cpc	r29, r17
 43e:	c0 f3       	brcs	.-16     	; 0x430 <lcd_clear_area+0x30>
        lcd_send(0, LCD_DATA);
    }
}
 440:	df 91       	pop	r29
 442:	cf 91       	pop	r28
 444:	1f 91       	pop	r17
 446:	0f 91       	pop	r16
 448:	08 95       	ret

0000044a <lcd_clear_line>:

/* Clears an entire text block. (rows of 8 pixels on the lcd) */
void lcd_clear_line(unsigned char line)
{
    lcd_clear_area(line, 1, LCD_X_RES);
 44a:	61 e0       	ldi	r22, 0x01	; 1
 44c:	44 e5       	ldi	r20, 0x54	; 84
 44e:	0e 94 00 02 	call	0x400	; 0x400 <lcd_clear_area>
}
 452:	08 95       	ret

00000454 <lcd_clear>:
    lcd_send(0x20, LCD_CMD);				// LCD std cmds, hori addr mode
}

/* Clears the display */
void lcd_clear(void)
{
 454:	cf 93       	push	r28
 456:	df 93       	push	r29
	lcdCacheIdx = 0;
 458:	10 92 71 00 	sts	0x0071, r1
 45c:	10 92 70 00 	sts	0x0070, r1
	
	lcd_base_addr(lcdCacheIdx);
 460:	80 e0       	ldi	r24, 0x00	; 0
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	0e 94 a9 01 	call	0x352	; 0x352 <lcd_base_addr>
 468:	c0 e0       	ldi	r28, 0x00	; 0
 46a:	d0 e0       	ldi	r29, 0x00	; 0
	
    // Set the entire cache to zero and write 0s to lcd
    for(int i=0;i<LCD_CACHE_SIZE;i++) {
		lcd_send(0, LCD_DATA);
 46c:	80 e0       	ldi	r24, 0x00	; 0
 46e:	61 e0       	ldi	r22, 0x01	; 1
 470:	0e 94 7f 01 	call	0x2fe	; 0x2fe <lcd_send>
	lcdCacheIdx = 0;
	
	lcd_base_addr(lcdCacheIdx);
	
    // Set the entire cache to zero and write 0s to lcd
    for(int i=0;i<LCD_CACHE_SIZE;i++) {
 474:	21 96       	adiw	r28, 0x01	; 1
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	c8 3f       	cpi	r28, 0xF8	; 248
 47a:	d8 07       	cpc	r29, r24
 47c:	b9 f7       	brne	.-18     	; 0x46c <lcd_clear+0x18>
		lcd_send(0, LCD_DATA);
    }
}
 47e:	df 91       	pop	r29
 480:	cf 91       	pop	r28
 482:	08 95       	ret

00000484 <lcd_contrast>:
	fdevopen(lcd_chr, 0);
}

/* Set display contrast. Note: No change is visible at ambient temperature */
void lcd_contrast(unsigned char contrast)
{
 484:	1f 93       	push	r17
 486:	18 2f       	mov	r17, r24
	lcd_send(0x21, LCD_CMD);				// LCD Extended Commands
 488:	81 e2       	ldi	r24, 0x21	; 33
 48a:	60 e0       	ldi	r22, 0x00	; 0
 48c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <lcd_send>
    lcd_send(0x80 | contrast, LCD_CMD);		// Set LCD Vop(Contrast)
 490:	81 2f       	mov	r24, r17
 492:	80 68       	ori	r24, 0x80	; 128
 494:	60 e0       	ldi	r22, 0x00	; 0
 496:	0e 94 7f 01 	call	0x2fe	; 0x2fe <lcd_send>
    lcd_send(0x20, LCD_CMD);				// LCD std cmds, hori addr mode
 49a:	80 e2       	ldi	r24, 0x20	; 32
 49c:	60 e0       	ldi	r22, 0x00	; 0
 49e:	0e 94 7f 01 	call	0x2fe	; 0x2fe <lcd_send>
}
 4a2:	1f 91       	pop	r17
 4a4:	08 95       	ret

000004a6 <lcd_init>:

/* Performs IO & LCD controller initialization */
void lcd_init(void)
{
    // Pull-up on reset pin
    LCD_PORT |= LCD_RST_PIN;
 4a6:	a8 9a       	sbi	0x15, 0	; 21
	
	// Set output bits on lcd port
	LCD_DDR |= LCD_RST_PIN | LCD_CE_PIN | LCD_DC_PIN | LCD_DATA_PIN | LCD_CLK_PIN;
 4a8:	84 b3       	in	r24, 0x14	; 20
 4aa:	8f 61       	ori	r24, 0x1F	; 31
 4ac:	84 bb       	out	0x14, r24	; 20
 4ae:	86 ea       	ldi	r24, 0xA6	; 166
 4b0:	9e e0       	ldi	r25, 0x0E	; 14
 4b2:	01 97       	sbiw	r24, 0x01	; 1
 4b4:	f1 f7       	brne	.-4      	; 0x4b2 <lcd_init+0xc>
    
	// Wait after VCC high for reset (max 30ms)
    _delay_ms(15);
    
    // Toggle display reset pin
    LCD_PORT &= ~LCD_RST_PIN;
 4b6:	a8 98       	cbi	0x15, 0	; 21
    lcd_delay();
    LCD_PORT |= LCD_RST_PIN;
 4b8:	a8 9a       	sbi	0x15, 0	; 21

    // Disable LCD controller
    LCD_PORT |= LCD_CE_PIN;
 4ba:	a9 9a       	sbi	0x15, 1	; 21

    lcd_send(0x21, LCD_CMD);  // LCD Extended Commands
 4bc:	81 e2       	ldi	r24, 0x21	; 33
 4be:	60 e0       	ldi	r22, 0x00	; 0
 4c0:	0e 94 7f 01 	call	0x2fe	; 0x2fe <lcd_send>
    lcd_send(0xC8, LCD_CMD);  // Set LCD Vop(Contrast)
 4c4:	88 ec       	ldi	r24, 0xC8	; 200
 4c6:	60 e0       	ldi	r22, 0x00	; 0
 4c8:	0e 94 7f 01 	call	0x2fe	; 0x2fe <lcd_send>
    lcd_send(0x06, LCD_CMD);  // Set Temp coefficent
 4cc:	86 e0       	ldi	r24, 0x06	; 6
 4ce:	60 e0       	ldi	r22, 0x00	; 0
 4d0:	0e 94 7f 01 	call	0x2fe	; 0x2fe <lcd_send>
    lcd_send(0x13, LCD_CMD);  // LCD bias mode 1:48
 4d4:	83 e1       	ldi	r24, 0x13	; 19
 4d6:	60 e0       	ldi	r22, 0x00	; 0
 4d8:	0e 94 7f 01 	call	0x2fe	; 0x2fe <lcd_send>
    lcd_send(0x20, LCD_CMD);  // Standard Commands, Horizontal addressing
 4dc:	80 e2       	ldi	r24, 0x20	; 32
 4de:	60 e0       	ldi	r22, 0x00	; 0
 4e0:	0e 94 7f 01 	call	0x2fe	; 0x2fe <lcd_send>
    lcd_send(0x0C, LCD_CMD);  // LCD in normal mode
 4e4:	8c e0       	ldi	r24, 0x0C	; 12
 4e6:	60 e0       	ldi	r22, 0x00	; 0
 4e8:	0e 94 7f 01 	call	0x2fe	; 0x2fe <lcd_send>
    
    // Clear lcd
    lcd_clear();
 4ec:	0e 94 2a 02 	call	0x454	; 0x454 <lcd_clear>
	
	// For using printf
	fdevopen(lcd_chr, 0);
 4f0:	81 ec       	ldi	r24, 0xC1	; 193
 4f2:	91 e0       	ldi	r25, 0x01	; 1
 4f4:	60 e0       	ldi	r22, 0x00	; 0
 4f6:	70 e0       	ldi	r23, 0x00	; 0
 4f8:	0e 94 7f 02 	call	0x4fe	; 0x4fe <fdevopen>
}
 4fc:	08 95       	ret

000004fe <fdevopen>:
 4fe:	0f 93       	push	r16
 500:	1f 93       	push	r17
 502:	cf 93       	push	r28
 504:	df 93       	push	r29
 506:	8c 01       	movw	r16, r24
 508:	eb 01       	movw	r28, r22
 50a:	00 97       	sbiw	r24, 0x00	; 0
 50c:	31 f4       	brne	.+12     	; 0x51a <fdevopen+0x1c>
 50e:	61 15       	cp	r22, r1
 510:	71 05       	cpc	r23, r1
 512:	19 f4       	brne	.+6      	; 0x51a <fdevopen+0x1c>
 514:	20 e0       	ldi	r18, 0x00	; 0
 516:	30 e0       	ldi	r19, 0x00	; 0
 518:	38 c0       	rjmp	.+112    	; 0x58a <fdevopen+0x8c>
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	6e e0       	ldi	r22, 0x0E	; 14
 520:	70 e0       	ldi	r23, 0x00	; 0
 522:	0e 94 cb 02 	call	0x596	; 0x596 <calloc>
 526:	fc 01       	movw	r30, r24
 528:	9c 01       	movw	r18, r24
 52a:	00 97       	sbiw	r24, 0x00	; 0
 52c:	71 f1       	breq	.+92     	; 0x58a <fdevopen+0x8c>
 52e:	80 e8       	ldi	r24, 0x80	; 128
 530:	83 83       	std	Z+3, r24	; 0x03
 532:	20 97       	sbiw	r28, 0x00	; 0
 534:	71 f0       	breq	.+28     	; 0x552 <fdevopen+0x54>
 536:	d3 87       	std	Z+11, r29	; 0x0b
 538:	c2 87       	std	Z+10, r28	; 0x0a
 53a:	81 e8       	ldi	r24, 0x81	; 129
 53c:	83 83       	std	Z+3, r24	; 0x03
 53e:	80 91 72 00 	lds	r24, 0x0072
 542:	90 91 73 00 	lds	r25, 0x0073
 546:	89 2b       	or	r24, r25
 548:	21 f4       	brne	.+8      	; 0x552 <fdevopen+0x54>
 54a:	f0 93 73 00 	sts	0x0073, r31
 54e:	e0 93 72 00 	sts	0x0072, r30
 552:	01 15       	cp	r16, r1
 554:	11 05       	cpc	r17, r1
 556:	c9 f0       	breq	.+50     	; 0x58a <fdevopen+0x8c>
 558:	11 87       	std	Z+9, r17	; 0x09
 55a:	00 87       	std	Z+8, r16	; 0x08
 55c:	83 81       	ldd	r24, Z+3	; 0x03
 55e:	82 60       	ori	r24, 0x02	; 2
 560:	83 83       	std	Z+3, r24	; 0x03
 562:	80 91 74 00 	lds	r24, 0x0074
 566:	90 91 75 00 	lds	r25, 0x0075
 56a:	89 2b       	or	r24, r25
 56c:	71 f4       	brne	.+28     	; 0x58a <fdevopen+0x8c>
 56e:	f0 93 75 00 	sts	0x0075, r31
 572:	e0 93 74 00 	sts	0x0074, r30
 576:	80 91 76 00 	lds	r24, 0x0076
 57a:	90 91 77 00 	lds	r25, 0x0077
 57e:	89 2b       	or	r24, r25
 580:	21 f4       	brne	.+8      	; 0x58a <fdevopen+0x8c>
 582:	f0 93 77 00 	sts	0x0077, r31
 586:	e0 93 76 00 	sts	0x0076, r30
 58a:	c9 01       	movw	r24, r18
 58c:	df 91       	pop	r29
 58e:	cf 91       	pop	r28
 590:	1f 91       	pop	r17
 592:	0f 91       	pop	r16
 594:	08 95       	ret

00000596 <calloc>:
 596:	0f 93       	push	r16
 598:	1f 93       	push	r17
 59a:	cf 93       	push	r28
 59c:	df 93       	push	r29
 59e:	68 9f       	mul	r22, r24
 5a0:	80 01       	movw	r16, r0
 5a2:	69 9f       	mul	r22, r25
 5a4:	10 0d       	add	r17, r0
 5a6:	78 9f       	mul	r23, r24
 5a8:	10 0d       	add	r17, r0
 5aa:	11 24       	eor	r1, r1
 5ac:	c8 01       	movw	r24, r16
 5ae:	0e 94 e7 02 	call	0x5ce	; 0x5ce <malloc>
 5b2:	ec 01       	movw	r28, r24
 5b4:	00 97       	sbiw	r24, 0x00	; 0
 5b6:	29 f0       	breq	.+10     	; 0x5c2 <calloc+0x2c>
 5b8:	60 e0       	ldi	r22, 0x00	; 0
 5ba:	70 e0       	ldi	r23, 0x00	; 0
 5bc:	a8 01       	movw	r20, r16
 5be:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <memset>
 5c2:	ce 01       	movw	r24, r28
 5c4:	df 91       	pop	r29
 5c6:	cf 91       	pop	r28
 5c8:	1f 91       	pop	r17
 5ca:	0f 91       	pop	r16
 5cc:	08 95       	ret

000005ce <malloc>:
 5ce:	cf 93       	push	r28
 5d0:	df 93       	push	r29
 5d2:	bc 01       	movw	r22, r24
 5d4:	82 30       	cpi	r24, 0x02	; 2
 5d6:	91 05       	cpc	r25, r1
 5d8:	10 f4       	brcc	.+4      	; 0x5de <malloc+0x10>
 5da:	62 e0       	ldi	r22, 0x02	; 2
 5dc:	70 e0       	ldi	r23, 0x00	; 0
 5de:	a0 91 7a 00 	lds	r26, 0x007A
 5e2:	b0 91 7b 00 	lds	r27, 0x007B
 5e6:	ed 01       	movw	r28, r26
 5e8:	e0 e0       	ldi	r30, 0x00	; 0
 5ea:	f0 e0       	ldi	r31, 0x00	; 0
 5ec:	40 e0       	ldi	r20, 0x00	; 0
 5ee:	50 e0       	ldi	r21, 0x00	; 0
 5f0:	21 c0       	rjmp	.+66     	; 0x634 <malloc+0x66>
 5f2:	88 81       	ld	r24, Y
 5f4:	99 81       	ldd	r25, Y+1	; 0x01
 5f6:	86 17       	cp	r24, r22
 5f8:	97 07       	cpc	r25, r23
 5fa:	69 f4       	brne	.+26     	; 0x616 <malloc+0x48>
 5fc:	8a 81       	ldd	r24, Y+2	; 0x02
 5fe:	9b 81       	ldd	r25, Y+3	; 0x03
 600:	30 97       	sbiw	r30, 0x00	; 0
 602:	19 f0       	breq	.+6      	; 0x60a <malloc+0x3c>
 604:	93 83       	std	Z+3, r25	; 0x03
 606:	82 83       	std	Z+2, r24	; 0x02
 608:	04 c0       	rjmp	.+8      	; 0x612 <malloc+0x44>
 60a:	90 93 7b 00 	sts	0x007B, r25
 60e:	80 93 7a 00 	sts	0x007A, r24
 612:	fe 01       	movw	r30, r28
 614:	34 c0       	rjmp	.+104    	; 0x67e <malloc+0xb0>
 616:	68 17       	cp	r22, r24
 618:	79 07       	cpc	r23, r25
 61a:	38 f4       	brcc	.+14     	; 0x62a <malloc+0x5c>
 61c:	41 15       	cp	r20, r1
 61e:	51 05       	cpc	r21, r1
 620:	19 f0       	breq	.+6      	; 0x628 <malloc+0x5a>
 622:	84 17       	cp	r24, r20
 624:	95 07       	cpc	r25, r21
 626:	08 f4       	brcc	.+2      	; 0x62a <malloc+0x5c>
 628:	ac 01       	movw	r20, r24
 62a:	fe 01       	movw	r30, r28
 62c:	8a 81       	ldd	r24, Y+2	; 0x02
 62e:	9b 81       	ldd	r25, Y+3	; 0x03
 630:	9c 01       	movw	r18, r24
 632:	e9 01       	movw	r28, r18
 634:	20 97       	sbiw	r28, 0x00	; 0
 636:	e9 f6       	brne	.-70     	; 0x5f2 <malloc+0x24>
 638:	41 15       	cp	r20, r1
 63a:	51 05       	cpc	r21, r1
 63c:	a9 f1       	breq	.+106    	; 0x6a8 <malloc+0xda>
 63e:	ca 01       	movw	r24, r20
 640:	86 1b       	sub	r24, r22
 642:	97 0b       	sbc	r25, r23
 644:	04 97       	sbiw	r24, 0x04	; 4
 646:	08 f4       	brcc	.+2      	; 0x64a <malloc+0x7c>
 648:	ba 01       	movw	r22, r20
 64a:	e0 e0       	ldi	r30, 0x00	; 0
 64c:	f0 e0       	ldi	r31, 0x00	; 0
 64e:	2a c0       	rjmp	.+84     	; 0x6a4 <malloc+0xd6>
 650:	8d 91       	ld	r24, X+
 652:	9c 91       	ld	r25, X
 654:	11 97       	sbiw	r26, 0x01	; 1
 656:	84 17       	cp	r24, r20
 658:	95 07       	cpc	r25, r21
 65a:	f9 f4       	brne	.+62     	; 0x69a <malloc+0xcc>
 65c:	64 17       	cp	r22, r20
 65e:	75 07       	cpc	r23, r21
 660:	81 f4       	brne	.+32     	; 0x682 <malloc+0xb4>
 662:	12 96       	adiw	r26, 0x02	; 2
 664:	8d 91       	ld	r24, X+
 666:	9c 91       	ld	r25, X
 668:	13 97       	sbiw	r26, 0x03	; 3
 66a:	30 97       	sbiw	r30, 0x00	; 0
 66c:	19 f0       	breq	.+6      	; 0x674 <malloc+0xa6>
 66e:	93 83       	std	Z+3, r25	; 0x03
 670:	82 83       	std	Z+2, r24	; 0x02
 672:	04 c0       	rjmp	.+8      	; 0x67c <malloc+0xae>
 674:	90 93 7b 00 	sts	0x007B, r25
 678:	80 93 7a 00 	sts	0x007A, r24
 67c:	fd 01       	movw	r30, r26
 67e:	32 96       	adiw	r30, 0x02	; 2
 680:	4f c0       	rjmp	.+158    	; 0x720 <malloc+0x152>
 682:	ca 01       	movw	r24, r20
 684:	86 1b       	sub	r24, r22
 686:	97 0b       	sbc	r25, r23
 688:	fd 01       	movw	r30, r26
 68a:	e8 0f       	add	r30, r24
 68c:	f9 1f       	adc	r31, r25
 68e:	61 93       	st	Z+, r22
 690:	71 93       	st	Z+, r23
 692:	02 97       	sbiw	r24, 0x02	; 2
 694:	8d 93       	st	X+, r24
 696:	9c 93       	st	X, r25
 698:	43 c0       	rjmp	.+134    	; 0x720 <malloc+0x152>
 69a:	fd 01       	movw	r30, r26
 69c:	82 81       	ldd	r24, Z+2	; 0x02
 69e:	93 81       	ldd	r25, Z+3	; 0x03
 6a0:	9c 01       	movw	r18, r24
 6a2:	d9 01       	movw	r26, r18
 6a4:	10 97       	sbiw	r26, 0x00	; 0
 6a6:	a1 f6       	brne	.-88     	; 0x650 <malloc+0x82>
 6a8:	80 91 78 00 	lds	r24, 0x0078
 6ac:	90 91 79 00 	lds	r25, 0x0079
 6b0:	89 2b       	or	r24, r25
 6b2:	41 f4       	brne	.+16     	; 0x6c4 <malloc+0xf6>
 6b4:	80 91 6b 00 	lds	r24, 0x006B
 6b8:	90 91 6c 00 	lds	r25, 0x006C
 6bc:	90 93 79 00 	sts	0x0079, r25
 6c0:	80 93 78 00 	sts	0x0078, r24
 6c4:	40 91 6d 00 	lds	r20, 0x006D
 6c8:	50 91 6e 00 	lds	r21, 0x006E
 6cc:	41 15       	cp	r20, r1
 6ce:	51 05       	cpc	r21, r1
 6d0:	41 f4       	brne	.+16     	; 0x6e2 <malloc+0x114>
 6d2:	4d b7       	in	r20, 0x3d	; 61
 6d4:	5e b7       	in	r21, 0x3e	; 62
 6d6:	80 91 69 00 	lds	r24, 0x0069
 6da:	90 91 6a 00 	lds	r25, 0x006A
 6de:	48 1b       	sub	r20, r24
 6e0:	59 0b       	sbc	r21, r25
 6e2:	20 91 78 00 	lds	r18, 0x0078
 6e6:	30 91 79 00 	lds	r19, 0x0079
 6ea:	24 17       	cp	r18, r20
 6ec:	35 07       	cpc	r19, r21
 6ee:	b0 f4       	brcc	.+44     	; 0x71c <malloc+0x14e>
 6f0:	ca 01       	movw	r24, r20
 6f2:	82 1b       	sub	r24, r18
 6f4:	93 0b       	sbc	r25, r19
 6f6:	86 17       	cp	r24, r22
 6f8:	97 07       	cpc	r25, r23
 6fa:	80 f0       	brcs	.+32     	; 0x71c <malloc+0x14e>
 6fc:	ab 01       	movw	r20, r22
 6fe:	4e 5f       	subi	r20, 0xFE	; 254
 700:	5f 4f       	sbci	r21, 0xFF	; 255
 702:	84 17       	cp	r24, r20
 704:	95 07       	cpc	r25, r21
 706:	50 f0       	brcs	.+20     	; 0x71c <malloc+0x14e>
 708:	42 0f       	add	r20, r18
 70a:	53 1f       	adc	r21, r19
 70c:	50 93 79 00 	sts	0x0079, r21
 710:	40 93 78 00 	sts	0x0078, r20
 714:	f9 01       	movw	r30, r18
 716:	61 93       	st	Z+, r22
 718:	71 93       	st	Z+, r23
 71a:	02 c0       	rjmp	.+4      	; 0x720 <malloc+0x152>
 71c:	e0 e0       	ldi	r30, 0x00	; 0
 71e:	f0 e0       	ldi	r31, 0x00	; 0
 720:	cf 01       	movw	r24, r30
 722:	df 91       	pop	r29
 724:	cf 91       	pop	r28
 726:	08 95       	ret

00000728 <free>:
 728:	cf 93       	push	r28
 72a:	df 93       	push	r29
 72c:	00 97       	sbiw	r24, 0x00	; 0
 72e:	09 f4       	brne	.+2      	; 0x732 <free+0xa>
 730:	50 c0       	rjmp	.+160    	; 0x7d2 <free+0xaa>
 732:	ec 01       	movw	r28, r24
 734:	22 97       	sbiw	r28, 0x02	; 2
 736:	1b 82       	std	Y+3, r1	; 0x03
 738:	1a 82       	std	Y+2, r1	; 0x02
 73a:	a0 91 7a 00 	lds	r26, 0x007A
 73e:	b0 91 7b 00 	lds	r27, 0x007B
 742:	10 97       	sbiw	r26, 0x00	; 0
 744:	09 f1       	breq	.+66     	; 0x788 <free+0x60>
 746:	40 e0       	ldi	r20, 0x00	; 0
 748:	50 e0       	ldi	r21, 0x00	; 0
 74a:	ac 17       	cp	r26, r28
 74c:	bd 07       	cpc	r27, r29
 74e:	08 f1       	brcs	.+66     	; 0x792 <free+0x6a>
 750:	bb 83       	std	Y+3, r27	; 0x03
 752:	aa 83       	std	Y+2, r26	; 0x02
 754:	fe 01       	movw	r30, r28
 756:	21 91       	ld	r18, Z+
 758:	31 91       	ld	r19, Z+
 75a:	e2 0f       	add	r30, r18
 75c:	f3 1f       	adc	r31, r19
 75e:	ae 17       	cp	r26, r30
 760:	bf 07       	cpc	r27, r31
 762:	79 f4       	brne	.+30     	; 0x782 <free+0x5a>
 764:	8d 91       	ld	r24, X+
 766:	9c 91       	ld	r25, X
 768:	11 97       	sbiw	r26, 0x01	; 1
 76a:	28 0f       	add	r18, r24
 76c:	39 1f       	adc	r19, r25
 76e:	2e 5f       	subi	r18, 0xFE	; 254
 770:	3f 4f       	sbci	r19, 0xFF	; 255
 772:	39 83       	std	Y+1, r19	; 0x01
 774:	28 83       	st	Y, r18
 776:	12 96       	adiw	r26, 0x02	; 2
 778:	8d 91       	ld	r24, X+
 77a:	9c 91       	ld	r25, X
 77c:	13 97       	sbiw	r26, 0x03	; 3
 77e:	9b 83       	std	Y+3, r25	; 0x03
 780:	8a 83       	std	Y+2, r24	; 0x02
 782:	41 15       	cp	r20, r1
 784:	51 05       	cpc	r21, r1
 786:	71 f4       	brne	.+28     	; 0x7a4 <free+0x7c>
 788:	d0 93 7b 00 	sts	0x007B, r29
 78c:	c0 93 7a 00 	sts	0x007A, r28
 790:	20 c0       	rjmp	.+64     	; 0x7d2 <free+0xaa>
 792:	12 96       	adiw	r26, 0x02	; 2
 794:	8d 91       	ld	r24, X+
 796:	9c 91       	ld	r25, X
 798:	13 97       	sbiw	r26, 0x03	; 3
 79a:	ad 01       	movw	r20, r26
 79c:	00 97       	sbiw	r24, 0x00	; 0
 79e:	11 f0       	breq	.+4      	; 0x7a4 <free+0x7c>
 7a0:	dc 01       	movw	r26, r24
 7a2:	d3 cf       	rjmp	.-90     	; 0x74a <free+0x22>
 7a4:	fa 01       	movw	r30, r20
 7a6:	d3 83       	std	Z+3, r29	; 0x03
 7a8:	c2 83       	std	Z+2, r28	; 0x02
 7aa:	21 91       	ld	r18, Z+
 7ac:	31 91       	ld	r19, Z+
 7ae:	e2 0f       	add	r30, r18
 7b0:	f3 1f       	adc	r31, r19
 7b2:	ce 17       	cp	r28, r30
 7b4:	df 07       	cpc	r29, r31
 7b6:	69 f4       	brne	.+26     	; 0x7d2 <free+0xaa>
 7b8:	88 81       	ld	r24, Y
 7ba:	99 81       	ldd	r25, Y+1	; 0x01
 7bc:	28 0f       	add	r18, r24
 7be:	39 1f       	adc	r19, r25
 7c0:	2e 5f       	subi	r18, 0xFE	; 254
 7c2:	3f 4f       	sbci	r19, 0xFF	; 255
 7c4:	fa 01       	movw	r30, r20
 7c6:	31 83       	std	Z+1, r19	; 0x01
 7c8:	20 83       	st	Z, r18
 7ca:	8a 81       	ldd	r24, Y+2	; 0x02
 7cc:	9b 81       	ldd	r25, Y+3	; 0x03
 7ce:	93 83       	std	Z+3, r25	; 0x03
 7d0:	82 83       	std	Z+2, r24	; 0x02
 7d2:	df 91       	pop	r29
 7d4:	cf 91       	pop	r28
 7d6:	08 95       	ret

000007d8 <memset>:
 7d8:	dc 01       	movw	r26, r24
 7da:	01 c0       	rjmp	.+2      	; 0x7de <memset+0x6>
 7dc:	6d 93       	st	X+, r22
 7de:	41 50       	subi	r20, 0x01	; 1
 7e0:	50 40       	sbci	r21, 0x00	; 0
 7e2:	e0 f7       	brcc	.-8      	; 0x7dc <memset+0x4>
 7e4:	08 95       	ret

000007e6 <__udivmodhi4>:
 7e6:	aa 1b       	sub	r26, r26
 7e8:	bb 1b       	sub	r27, r27
 7ea:	51 e1       	ldi	r21, 0x11	; 17
 7ec:	07 c0       	rjmp	.+14     	; 0x7fc <__udivmodhi4_ep>

000007ee <__udivmodhi4_loop>:
 7ee:	aa 1f       	adc	r26, r26
 7f0:	bb 1f       	adc	r27, r27
 7f2:	a6 17       	cp	r26, r22
 7f4:	b7 07       	cpc	r27, r23
 7f6:	10 f0       	brcs	.+4      	; 0x7fc <__udivmodhi4_ep>
 7f8:	a6 1b       	sub	r26, r22
 7fa:	b7 0b       	sbc	r27, r23

000007fc <__udivmodhi4_ep>:
 7fc:	88 1f       	adc	r24, r24
 7fe:	99 1f       	adc	r25, r25
 800:	5a 95       	dec	r21
 802:	a9 f7       	brne	.-22     	; 0x7ee <__udivmodhi4_loop>
 804:	80 95       	com	r24
 806:	90 95       	com	r25
 808:	bc 01       	movw	r22, r24
 80a:	cd 01       	movw	r24, r26
 80c:	08 95       	ret

0000080e <_exit>:
 80e:	f8 94       	cli

00000810 <__stop_program>:
 810:	ff cf       	rjmp	.-2      	; 0x810 <__stop_program>
