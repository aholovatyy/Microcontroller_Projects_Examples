
stm32_nucleo_weather_station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f70  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000314  08007030  08007030  00008030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007344  08007344  000090ac  2**0
                  CONTENTS
  4 .ARM          00000000  08007344  08007344  000090ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007344  08007344  000090ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007344  08007344  00008344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007348  08007348  00008348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  0800734c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e8  200000ac  080073f8  000090ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000494  080073f8  00009494  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000090ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d776  00000000  00000000  000090d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000344e  00000000  00000000  0002684a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000f34d  00000000  00000000  00029c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001010  00000000  00000000  00038fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001bfd  00000000  00000000  00039ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a848  00000000  00000000  0003bbf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000200d0  00000000  00000000  0005643d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098efc  00000000  00000000  0007650d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010f409  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000036d0  00000000  00000000  0010f44c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  00112b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000ac 	.word	0x200000ac
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007018 	.word	0x08007018

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000b0 	.word	0x200000b0
 8000104:	08007018 	.word	0x08007018

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <__aeabi_cdrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	0010      	movs	r0, r2
 800041c:	4662      	mov	r2, ip
 800041e:	468c      	mov	ip, r1
 8000420:	0019      	movs	r1, r3
 8000422:	4663      	mov	r3, ip
 8000424:	e000      	b.n	8000428 <__aeabi_cdcmpeq>
 8000426:	46c0      	nop			@ (mov r8, r8)

08000428 <__aeabi_cdcmpeq>:
 8000428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042a:	f000 ff89 	bl	8001340 <__ledf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	d401      	bmi.n	8000436 <__aeabi_cdcmpeq+0xe>
 8000432:	2100      	movs	r1, #0
 8000434:	42c8      	cmn	r0, r1
 8000436:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000438 <__aeabi_dcmpeq>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f000 fec9 	bl	80011d0 <__eqdf2>
 800043e:	4240      	negs	r0, r0
 8000440:	3001      	adds	r0, #1
 8000442:	bd10      	pop	{r4, pc}

08000444 <__aeabi_dcmplt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 ff7b 	bl	8001340 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	db01      	blt.n	8000452 <__aeabi_dcmplt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			@ (mov r8, r8)

08000458 <__aeabi_dcmple>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 ff71 	bl	8001340 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dd01      	ble.n	8000466 <__aeabi_dcmple+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmpgt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 fef3 	bl	8001258 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dc01      	bgt.n	800047a <__aeabi_dcmpgt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpge>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fee9 	bl	8001258 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	da01      	bge.n	800048e <__aeabi_dcmpge+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_f2iz>:
 8000494:	0241      	lsls	r1, r0, #9
 8000496:	0042      	lsls	r2, r0, #1
 8000498:	0fc3      	lsrs	r3, r0, #31
 800049a:	0a49      	lsrs	r1, r1, #9
 800049c:	2000      	movs	r0, #0
 800049e:	0e12      	lsrs	r2, r2, #24
 80004a0:	2a7e      	cmp	r2, #126	@ 0x7e
 80004a2:	dd03      	ble.n	80004ac <__aeabi_f2iz+0x18>
 80004a4:	2a9d      	cmp	r2, #157	@ 0x9d
 80004a6:	dd02      	ble.n	80004ae <__aeabi_f2iz+0x1a>
 80004a8:	4a09      	ldr	r2, [pc, #36]	@ (80004d0 <__aeabi_f2iz+0x3c>)
 80004aa:	1898      	adds	r0, r3, r2
 80004ac:	4770      	bx	lr
 80004ae:	2080      	movs	r0, #128	@ 0x80
 80004b0:	0400      	lsls	r0, r0, #16
 80004b2:	4301      	orrs	r1, r0
 80004b4:	2a95      	cmp	r2, #149	@ 0x95
 80004b6:	dc07      	bgt.n	80004c8 <__aeabi_f2iz+0x34>
 80004b8:	2096      	movs	r0, #150	@ 0x96
 80004ba:	1a82      	subs	r2, r0, r2
 80004bc:	40d1      	lsrs	r1, r2
 80004be:	4248      	negs	r0, r1
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d1f3      	bne.n	80004ac <__aeabi_f2iz+0x18>
 80004c4:	0008      	movs	r0, r1
 80004c6:	e7f1      	b.n	80004ac <__aeabi_f2iz+0x18>
 80004c8:	3a96      	subs	r2, #150	@ 0x96
 80004ca:	4091      	lsls	r1, r2
 80004cc:	e7f7      	b.n	80004be <__aeabi_f2iz+0x2a>
 80004ce:	46c0      	nop			@ (mov r8, r8)
 80004d0:	7fffffff 	.word	0x7fffffff

080004d4 <__aeabi_dadd>:
 80004d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004d6:	4657      	mov	r7, sl
 80004d8:	464e      	mov	r6, r9
 80004da:	4645      	mov	r5, r8
 80004dc:	46de      	mov	lr, fp
 80004de:	b5e0      	push	{r5, r6, r7, lr}
 80004e0:	b083      	sub	sp, #12
 80004e2:	9000      	str	r0, [sp, #0]
 80004e4:	9101      	str	r1, [sp, #4]
 80004e6:	030c      	lsls	r4, r1, #12
 80004e8:	004f      	lsls	r7, r1, #1
 80004ea:	0fce      	lsrs	r6, r1, #31
 80004ec:	0a61      	lsrs	r1, r4, #9
 80004ee:	9c00      	ldr	r4, [sp, #0]
 80004f0:	031d      	lsls	r5, r3, #12
 80004f2:	0f64      	lsrs	r4, r4, #29
 80004f4:	430c      	orrs	r4, r1
 80004f6:	9900      	ldr	r1, [sp, #0]
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	00c8      	lsls	r0, r1, #3
 80004fe:	0059      	lsls	r1, r3, #1
 8000500:	0d4b      	lsrs	r3, r1, #21
 8000502:	4699      	mov	r9, r3
 8000504:	9a00      	ldr	r2, [sp, #0]
 8000506:	9b01      	ldr	r3, [sp, #4]
 8000508:	0a6d      	lsrs	r5, r5, #9
 800050a:	0fd9      	lsrs	r1, r3, #31
 800050c:	0f53      	lsrs	r3, r2, #29
 800050e:	432b      	orrs	r3, r5
 8000510:	469a      	mov	sl, r3
 8000512:	9b00      	ldr	r3, [sp, #0]
 8000514:	0d7f      	lsrs	r7, r7, #21
 8000516:	00da      	lsls	r2, r3, #3
 8000518:	4694      	mov	ip, r2
 800051a:	464a      	mov	r2, r9
 800051c:	46b0      	mov	r8, r6
 800051e:	1aba      	subs	r2, r7, r2
 8000520:	428e      	cmp	r6, r1
 8000522:	d100      	bne.n	8000526 <__aeabi_dadd+0x52>
 8000524:	e0b0      	b.n	8000688 <__aeabi_dadd+0x1b4>
 8000526:	2a00      	cmp	r2, #0
 8000528:	dc00      	bgt.n	800052c <__aeabi_dadd+0x58>
 800052a:	e078      	b.n	800061e <__aeabi_dadd+0x14a>
 800052c:	4649      	mov	r1, r9
 800052e:	2900      	cmp	r1, #0
 8000530:	d100      	bne.n	8000534 <__aeabi_dadd+0x60>
 8000532:	e0e9      	b.n	8000708 <__aeabi_dadd+0x234>
 8000534:	49c9      	ldr	r1, [pc, #804]	@ (800085c <__aeabi_dadd+0x388>)
 8000536:	428f      	cmp	r7, r1
 8000538:	d100      	bne.n	800053c <__aeabi_dadd+0x68>
 800053a:	e195      	b.n	8000868 <__aeabi_dadd+0x394>
 800053c:	2501      	movs	r5, #1
 800053e:	2a38      	cmp	r2, #56	@ 0x38
 8000540:	dc16      	bgt.n	8000570 <__aeabi_dadd+0x9c>
 8000542:	2180      	movs	r1, #128	@ 0x80
 8000544:	4653      	mov	r3, sl
 8000546:	0409      	lsls	r1, r1, #16
 8000548:	430b      	orrs	r3, r1
 800054a:	469a      	mov	sl, r3
 800054c:	2a1f      	cmp	r2, #31
 800054e:	dd00      	ble.n	8000552 <__aeabi_dadd+0x7e>
 8000550:	e1e7      	b.n	8000922 <__aeabi_dadd+0x44e>
 8000552:	2120      	movs	r1, #32
 8000554:	4655      	mov	r5, sl
 8000556:	1a8b      	subs	r3, r1, r2
 8000558:	4661      	mov	r1, ip
 800055a:	409d      	lsls	r5, r3
 800055c:	40d1      	lsrs	r1, r2
 800055e:	430d      	orrs	r5, r1
 8000560:	4661      	mov	r1, ip
 8000562:	4099      	lsls	r1, r3
 8000564:	1e4b      	subs	r3, r1, #1
 8000566:	4199      	sbcs	r1, r3
 8000568:	4653      	mov	r3, sl
 800056a:	40d3      	lsrs	r3, r2
 800056c:	430d      	orrs	r5, r1
 800056e:	1ae4      	subs	r4, r4, r3
 8000570:	1b45      	subs	r5, r0, r5
 8000572:	42a8      	cmp	r0, r5
 8000574:	4180      	sbcs	r0, r0
 8000576:	4240      	negs	r0, r0
 8000578:	1a24      	subs	r4, r4, r0
 800057a:	0223      	lsls	r3, r4, #8
 800057c:	d400      	bmi.n	8000580 <__aeabi_dadd+0xac>
 800057e:	e10f      	b.n	80007a0 <__aeabi_dadd+0x2cc>
 8000580:	0264      	lsls	r4, r4, #9
 8000582:	0a64      	lsrs	r4, r4, #9
 8000584:	2c00      	cmp	r4, #0
 8000586:	d100      	bne.n	800058a <__aeabi_dadd+0xb6>
 8000588:	e139      	b.n	80007fe <__aeabi_dadd+0x32a>
 800058a:	0020      	movs	r0, r4
 800058c:	f001 ff06 	bl	800239c <__clzsi2>
 8000590:	0003      	movs	r3, r0
 8000592:	3b08      	subs	r3, #8
 8000594:	2120      	movs	r1, #32
 8000596:	0028      	movs	r0, r5
 8000598:	1aca      	subs	r2, r1, r3
 800059a:	40d0      	lsrs	r0, r2
 800059c:	409c      	lsls	r4, r3
 800059e:	0002      	movs	r2, r0
 80005a0:	409d      	lsls	r5, r3
 80005a2:	4322      	orrs	r2, r4
 80005a4:	429f      	cmp	r7, r3
 80005a6:	dd00      	ble.n	80005aa <__aeabi_dadd+0xd6>
 80005a8:	e173      	b.n	8000892 <__aeabi_dadd+0x3be>
 80005aa:	1bd8      	subs	r0, r3, r7
 80005ac:	3001      	adds	r0, #1
 80005ae:	1a09      	subs	r1, r1, r0
 80005b0:	002c      	movs	r4, r5
 80005b2:	408d      	lsls	r5, r1
 80005b4:	40c4      	lsrs	r4, r0
 80005b6:	1e6b      	subs	r3, r5, #1
 80005b8:	419d      	sbcs	r5, r3
 80005ba:	0013      	movs	r3, r2
 80005bc:	40c2      	lsrs	r2, r0
 80005be:	408b      	lsls	r3, r1
 80005c0:	4325      	orrs	r5, r4
 80005c2:	2700      	movs	r7, #0
 80005c4:	0014      	movs	r4, r2
 80005c6:	431d      	orrs	r5, r3
 80005c8:	076b      	lsls	r3, r5, #29
 80005ca:	d009      	beq.n	80005e0 <__aeabi_dadd+0x10c>
 80005cc:	230f      	movs	r3, #15
 80005ce:	402b      	ands	r3, r5
 80005d0:	2b04      	cmp	r3, #4
 80005d2:	d005      	beq.n	80005e0 <__aeabi_dadd+0x10c>
 80005d4:	1d2b      	adds	r3, r5, #4
 80005d6:	42ab      	cmp	r3, r5
 80005d8:	41ad      	sbcs	r5, r5
 80005da:	426d      	negs	r5, r5
 80005dc:	1964      	adds	r4, r4, r5
 80005de:	001d      	movs	r5, r3
 80005e0:	0223      	lsls	r3, r4, #8
 80005e2:	d400      	bmi.n	80005e6 <__aeabi_dadd+0x112>
 80005e4:	e12d      	b.n	8000842 <__aeabi_dadd+0x36e>
 80005e6:	4a9d      	ldr	r2, [pc, #628]	@ (800085c <__aeabi_dadd+0x388>)
 80005e8:	3701      	adds	r7, #1
 80005ea:	4297      	cmp	r7, r2
 80005ec:	d100      	bne.n	80005f0 <__aeabi_dadd+0x11c>
 80005ee:	e0d3      	b.n	8000798 <__aeabi_dadd+0x2c4>
 80005f0:	4646      	mov	r6, r8
 80005f2:	499b      	ldr	r1, [pc, #620]	@ (8000860 <__aeabi_dadd+0x38c>)
 80005f4:	08ed      	lsrs	r5, r5, #3
 80005f6:	4021      	ands	r1, r4
 80005f8:	074a      	lsls	r2, r1, #29
 80005fa:	432a      	orrs	r2, r5
 80005fc:	057c      	lsls	r4, r7, #21
 80005fe:	024d      	lsls	r5, r1, #9
 8000600:	0b2d      	lsrs	r5, r5, #12
 8000602:	0d64      	lsrs	r4, r4, #21
 8000604:	0524      	lsls	r4, r4, #20
 8000606:	432c      	orrs	r4, r5
 8000608:	07f6      	lsls	r6, r6, #31
 800060a:	4334      	orrs	r4, r6
 800060c:	0010      	movs	r0, r2
 800060e:	0021      	movs	r1, r4
 8000610:	b003      	add	sp, #12
 8000612:	bcf0      	pop	{r4, r5, r6, r7}
 8000614:	46bb      	mov	fp, r7
 8000616:	46b2      	mov	sl, r6
 8000618:	46a9      	mov	r9, r5
 800061a:	46a0      	mov	r8, r4
 800061c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061e:	2a00      	cmp	r2, #0
 8000620:	d100      	bne.n	8000624 <__aeabi_dadd+0x150>
 8000622:	e084      	b.n	800072e <__aeabi_dadd+0x25a>
 8000624:	464a      	mov	r2, r9
 8000626:	1bd2      	subs	r2, r2, r7
 8000628:	2f00      	cmp	r7, #0
 800062a:	d000      	beq.n	800062e <__aeabi_dadd+0x15a>
 800062c:	e16d      	b.n	800090a <__aeabi_dadd+0x436>
 800062e:	0025      	movs	r5, r4
 8000630:	4305      	orrs	r5, r0
 8000632:	d100      	bne.n	8000636 <__aeabi_dadd+0x162>
 8000634:	e127      	b.n	8000886 <__aeabi_dadd+0x3b2>
 8000636:	1e56      	subs	r6, r2, #1
 8000638:	2a01      	cmp	r2, #1
 800063a:	d100      	bne.n	800063e <__aeabi_dadd+0x16a>
 800063c:	e23b      	b.n	8000ab6 <__aeabi_dadd+0x5e2>
 800063e:	4d87      	ldr	r5, [pc, #540]	@ (800085c <__aeabi_dadd+0x388>)
 8000640:	42aa      	cmp	r2, r5
 8000642:	d100      	bne.n	8000646 <__aeabi_dadd+0x172>
 8000644:	e26a      	b.n	8000b1c <__aeabi_dadd+0x648>
 8000646:	2501      	movs	r5, #1
 8000648:	2e38      	cmp	r6, #56	@ 0x38
 800064a:	dc12      	bgt.n	8000672 <__aeabi_dadd+0x19e>
 800064c:	0032      	movs	r2, r6
 800064e:	2a1f      	cmp	r2, #31
 8000650:	dd00      	ble.n	8000654 <__aeabi_dadd+0x180>
 8000652:	e1f8      	b.n	8000a46 <__aeabi_dadd+0x572>
 8000654:	2620      	movs	r6, #32
 8000656:	0025      	movs	r5, r4
 8000658:	1ab6      	subs	r6, r6, r2
 800065a:	0007      	movs	r7, r0
 800065c:	4653      	mov	r3, sl
 800065e:	40b0      	lsls	r0, r6
 8000660:	40d4      	lsrs	r4, r2
 8000662:	40b5      	lsls	r5, r6
 8000664:	40d7      	lsrs	r7, r2
 8000666:	1e46      	subs	r6, r0, #1
 8000668:	41b0      	sbcs	r0, r6
 800066a:	1b1b      	subs	r3, r3, r4
 800066c:	469a      	mov	sl, r3
 800066e:	433d      	orrs	r5, r7
 8000670:	4305      	orrs	r5, r0
 8000672:	4662      	mov	r2, ip
 8000674:	1b55      	subs	r5, r2, r5
 8000676:	45ac      	cmp	ip, r5
 8000678:	4192      	sbcs	r2, r2
 800067a:	4653      	mov	r3, sl
 800067c:	4252      	negs	r2, r2
 800067e:	000e      	movs	r6, r1
 8000680:	464f      	mov	r7, r9
 8000682:	4688      	mov	r8, r1
 8000684:	1a9c      	subs	r4, r3, r2
 8000686:	e778      	b.n	800057a <__aeabi_dadd+0xa6>
 8000688:	2a00      	cmp	r2, #0
 800068a:	dc00      	bgt.n	800068e <__aeabi_dadd+0x1ba>
 800068c:	e08e      	b.n	80007ac <__aeabi_dadd+0x2d8>
 800068e:	4649      	mov	r1, r9
 8000690:	2900      	cmp	r1, #0
 8000692:	d175      	bne.n	8000780 <__aeabi_dadd+0x2ac>
 8000694:	4661      	mov	r1, ip
 8000696:	4653      	mov	r3, sl
 8000698:	4319      	orrs	r1, r3
 800069a:	d100      	bne.n	800069e <__aeabi_dadd+0x1ca>
 800069c:	e0f6      	b.n	800088c <__aeabi_dadd+0x3b8>
 800069e:	1e51      	subs	r1, r2, #1
 80006a0:	2a01      	cmp	r2, #1
 80006a2:	d100      	bne.n	80006a6 <__aeabi_dadd+0x1d2>
 80006a4:	e191      	b.n	80009ca <__aeabi_dadd+0x4f6>
 80006a6:	4d6d      	ldr	r5, [pc, #436]	@ (800085c <__aeabi_dadd+0x388>)
 80006a8:	42aa      	cmp	r2, r5
 80006aa:	d100      	bne.n	80006ae <__aeabi_dadd+0x1da>
 80006ac:	e0dc      	b.n	8000868 <__aeabi_dadd+0x394>
 80006ae:	2501      	movs	r5, #1
 80006b0:	2938      	cmp	r1, #56	@ 0x38
 80006b2:	dc14      	bgt.n	80006de <__aeabi_dadd+0x20a>
 80006b4:	000a      	movs	r2, r1
 80006b6:	2a1f      	cmp	r2, #31
 80006b8:	dd00      	ble.n	80006bc <__aeabi_dadd+0x1e8>
 80006ba:	e1a2      	b.n	8000a02 <__aeabi_dadd+0x52e>
 80006bc:	2120      	movs	r1, #32
 80006be:	4653      	mov	r3, sl
 80006c0:	1a89      	subs	r1, r1, r2
 80006c2:	408b      	lsls	r3, r1
 80006c4:	001d      	movs	r5, r3
 80006c6:	4663      	mov	r3, ip
 80006c8:	40d3      	lsrs	r3, r2
 80006ca:	431d      	orrs	r5, r3
 80006cc:	4663      	mov	r3, ip
 80006ce:	408b      	lsls	r3, r1
 80006d0:	0019      	movs	r1, r3
 80006d2:	1e4b      	subs	r3, r1, #1
 80006d4:	4199      	sbcs	r1, r3
 80006d6:	4653      	mov	r3, sl
 80006d8:	40d3      	lsrs	r3, r2
 80006da:	430d      	orrs	r5, r1
 80006dc:	18e4      	adds	r4, r4, r3
 80006de:	182d      	adds	r5, r5, r0
 80006e0:	4285      	cmp	r5, r0
 80006e2:	4180      	sbcs	r0, r0
 80006e4:	4240      	negs	r0, r0
 80006e6:	1824      	adds	r4, r4, r0
 80006e8:	0223      	lsls	r3, r4, #8
 80006ea:	d559      	bpl.n	80007a0 <__aeabi_dadd+0x2cc>
 80006ec:	4b5b      	ldr	r3, [pc, #364]	@ (800085c <__aeabi_dadd+0x388>)
 80006ee:	3701      	adds	r7, #1
 80006f0:	429f      	cmp	r7, r3
 80006f2:	d051      	beq.n	8000798 <__aeabi_dadd+0x2c4>
 80006f4:	2101      	movs	r1, #1
 80006f6:	4b5a      	ldr	r3, [pc, #360]	@ (8000860 <__aeabi_dadd+0x38c>)
 80006f8:	086a      	lsrs	r2, r5, #1
 80006fa:	401c      	ands	r4, r3
 80006fc:	4029      	ands	r1, r5
 80006fe:	430a      	orrs	r2, r1
 8000700:	07e5      	lsls	r5, r4, #31
 8000702:	4315      	orrs	r5, r2
 8000704:	0864      	lsrs	r4, r4, #1
 8000706:	e75f      	b.n	80005c8 <__aeabi_dadd+0xf4>
 8000708:	4661      	mov	r1, ip
 800070a:	4653      	mov	r3, sl
 800070c:	4319      	orrs	r1, r3
 800070e:	d100      	bne.n	8000712 <__aeabi_dadd+0x23e>
 8000710:	e0bc      	b.n	800088c <__aeabi_dadd+0x3b8>
 8000712:	1e51      	subs	r1, r2, #1
 8000714:	2a01      	cmp	r2, #1
 8000716:	d100      	bne.n	800071a <__aeabi_dadd+0x246>
 8000718:	e164      	b.n	80009e4 <__aeabi_dadd+0x510>
 800071a:	4d50      	ldr	r5, [pc, #320]	@ (800085c <__aeabi_dadd+0x388>)
 800071c:	42aa      	cmp	r2, r5
 800071e:	d100      	bne.n	8000722 <__aeabi_dadd+0x24e>
 8000720:	e16a      	b.n	80009f8 <__aeabi_dadd+0x524>
 8000722:	2501      	movs	r5, #1
 8000724:	2938      	cmp	r1, #56	@ 0x38
 8000726:	dd00      	ble.n	800072a <__aeabi_dadd+0x256>
 8000728:	e722      	b.n	8000570 <__aeabi_dadd+0x9c>
 800072a:	000a      	movs	r2, r1
 800072c:	e70e      	b.n	800054c <__aeabi_dadd+0x78>
 800072e:	4a4d      	ldr	r2, [pc, #308]	@ (8000864 <__aeabi_dadd+0x390>)
 8000730:	1c7d      	adds	r5, r7, #1
 8000732:	4215      	tst	r5, r2
 8000734:	d000      	beq.n	8000738 <__aeabi_dadd+0x264>
 8000736:	e0d0      	b.n	80008da <__aeabi_dadd+0x406>
 8000738:	0025      	movs	r5, r4
 800073a:	4662      	mov	r2, ip
 800073c:	4653      	mov	r3, sl
 800073e:	4305      	orrs	r5, r0
 8000740:	431a      	orrs	r2, r3
 8000742:	2f00      	cmp	r7, #0
 8000744:	d000      	beq.n	8000748 <__aeabi_dadd+0x274>
 8000746:	e137      	b.n	80009b8 <__aeabi_dadd+0x4e4>
 8000748:	2d00      	cmp	r5, #0
 800074a:	d100      	bne.n	800074e <__aeabi_dadd+0x27a>
 800074c:	e1a8      	b.n	8000aa0 <__aeabi_dadd+0x5cc>
 800074e:	2a00      	cmp	r2, #0
 8000750:	d100      	bne.n	8000754 <__aeabi_dadd+0x280>
 8000752:	e16a      	b.n	8000a2a <__aeabi_dadd+0x556>
 8000754:	4663      	mov	r3, ip
 8000756:	1ac5      	subs	r5, r0, r3
 8000758:	4653      	mov	r3, sl
 800075a:	1ae2      	subs	r2, r4, r3
 800075c:	42a8      	cmp	r0, r5
 800075e:	419b      	sbcs	r3, r3
 8000760:	425b      	negs	r3, r3
 8000762:	1ad3      	subs	r3, r2, r3
 8000764:	021a      	lsls	r2, r3, #8
 8000766:	d400      	bmi.n	800076a <__aeabi_dadd+0x296>
 8000768:	e203      	b.n	8000b72 <__aeabi_dadd+0x69e>
 800076a:	4663      	mov	r3, ip
 800076c:	1a1d      	subs	r5, r3, r0
 800076e:	45ac      	cmp	ip, r5
 8000770:	4192      	sbcs	r2, r2
 8000772:	4653      	mov	r3, sl
 8000774:	4252      	negs	r2, r2
 8000776:	1b1c      	subs	r4, r3, r4
 8000778:	000e      	movs	r6, r1
 800077a:	4688      	mov	r8, r1
 800077c:	1aa4      	subs	r4, r4, r2
 800077e:	e723      	b.n	80005c8 <__aeabi_dadd+0xf4>
 8000780:	4936      	ldr	r1, [pc, #216]	@ (800085c <__aeabi_dadd+0x388>)
 8000782:	428f      	cmp	r7, r1
 8000784:	d070      	beq.n	8000868 <__aeabi_dadd+0x394>
 8000786:	2501      	movs	r5, #1
 8000788:	2a38      	cmp	r2, #56	@ 0x38
 800078a:	dca8      	bgt.n	80006de <__aeabi_dadd+0x20a>
 800078c:	2180      	movs	r1, #128	@ 0x80
 800078e:	4653      	mov	r3, sl
 8000790:	0409      	lsls	r1, r1, #16
 8000792:	430b      	orrs	r3, r1
 8000794:	469a      	mov	sl, r3
 8000796:	e78e      	b.n	80006b6 <__aeabi_dadd+0x1e2>
 8000798:	003c      	movs	r4, r7
 800079a:	2500      	movs	r5, #0
 800079c:	2200      	movs	r2, #0
 800079e:	e731      	b.n	8000604 <__aeabi_dadd+0x130>
 80007a0:	2307      	movs	r3, #7
 80007a2:	402b      	ands	r3, r5
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d000      	beq.n	80007aa <__aeabi_dadd+0x2d6>
 80007a8:	e710      	b.n	80005cc <__aeabi_dadd+0xf8>
 80007aa:	e093      	b.n	80008d4 <__aeabi_dadd+0x400>
 80007ac:	2a00      	cmp	r2, #0
 80007ae:	d074      	beq.n	800089a <__aeabi_dadd+0x3c6>
 80007b0:	464a      	mov	r2, r9
 80007b2:	1bd2      	subs	r2, r2, r7
 80007b4:	2f00      	cmp	r7, #0
 80007b6:	d100      	bne.n	80007ba <__aeabi_dadd+0x2e6>
 80007b8:	e0c7      	b.n	800094a <__aeabi_dadd+0x476>
 80007ba:	4928      	ldr	r1, [pc, #160]	@ (800085c <__aeabi_dadd+0x388>)
 80007bc:	4589      	cmp	r9, r1
 80007be:	d100      	bne.n	80007c2 <__aeabi_dadd+0x2ee>
 80007c0:	e185      	b.n	8000ace <__aeabi_dadd+0x5fa>
 80007c2:	2501      	movs	r5, #1
 80007c4:	2a38      	cmp	r2, #56	@ 0x38
 80007c6:	dc12      	bgt.n	80007ee <__aeabi_dadd+0x31a>
 80007c8:	2180      	movs	r1, #128	@ 0x80
 80007ca:	0409      	lsls	r1, r1, #16
 80007cc:	430c      	orrs	r4, r1
 80007ce:	2a1f      	cmp	r2, #31
 80007d0:	dd00      	ble.n	80007d4 <__aeabi_dadd+0x300>
 80007d2:	e1ab      	b.n	8000b2c <__aeabi_dadd+0x658>
 80007d4:	2120      	movs	r1, #32
 80007d6:	0025      	movs	r5, r4
 80007d8:	1a89      	subs	r1, r1, r2
 80007da:	0007      	movs	r7, r0
 80007dc:	4088      	lsls	r0, r1
 80007de:	408d      	lsls	r5, r1
 80007e0:	40d7      	lsrs	r7, r2
 80007e2:	1e41      	subs	r1, r0, #1
 80007e4:	4188      	sbcs	r0, r1
 80007e6:	40d4      	lsrs	r4, r2
 80007e8:	433d      	orrs	r5, r7
 80007ea:	4305      	orrs	r5, r0
 80007ec:	44a2      	add	sl, r4
 80007ee:	4465      	add	r5, ip
 80007f0:	4565      	cmp	r5, ip
 80007f2:	4192      	sbcs	r2, r2
 80007f4:	4252      	negs	r2, r2
 80007f6:	4452      	add	r2, sl
 80007f8:	0014      	movs	r4, r2
 80007fa:	464f      	mov	r7, r9
 80007fc:	e774      	b.n	80006e8 <__aeabi_dadd+0x214>
 80007fe:	0028      	movs	r0, r5
 8000800:	f001 fdcc 	bl	800239c <__clzsi2>
 8000804:	0003      	movs	r3, r0
 8000806:	3318      	adds	r3, #24
 8000808:	2b1f      	cmp	r3, #31
 800080a:	dc00      	bgt.n	800080e <__aeabi_dadd+0x33a>
 800080c:	e6c2      	b.n	8000594 <__aeabi_dadd+0xc0>
 800080e:	002a      	movs	r2, r5
 8000810:	3808      	subs	r0, #8
 8000812:	4082      	lsls	r2, r0
 8000814:	429f      	cmp	r7, r3
 8000816:	dd00      	ble.n	800081a <__aeabi_dadd+0x346>
 8000818:	e0a9      	b.n	800096e <__aeabi_dadd+0x49a>
 800081a:	1bdb      	subs	r3, r3, r7
 800081c:	1c58      	adds	r0, r3, #1
 800081e:	281f      	cmp	r0, #31
 8000820:	dc00      	bgt.n	8000824 <__aeabi_dadd+0x350>
 8000822:	e1ac      	b.n	8000b7e <__aeabi_dadd+0x6aa>
 8000824:	0015      	movs	r5, r2
 8000826:	3b1f      	subs	r3, #31
 8000828:	40dd      	lsrs	r5, r3
 800082a:	2820      	cmp	r0, #32
 800082c:	d005      	beq.n	800083a <__aeabi_dadd+0x366>
 800082e:	2340      	movs	r3, #64	@ 0x40
 8000830:	1a1b      	subs	r3, r3, r0
 8000832:	409a      	lsls	r2, r3
 8000834:	1e53      	subs	r3, r2, #1
 8000836:	419a      	sbcs	r2, r3
 8000838:	4315      	orrs	r5, r2
 800083a:	2307      	movs	r3, #7
 800083c:	2700      	movs	r7, #0
 800083e:	402b      	ands	r3, r5
 8000840:	e7b0      	b.n	80007a4 <__aeabi_dadd+0x2d0>
 8000842:	08ed      	lsrs	r5, r5, #3
 8000844:	4b05      	ldr	r3, [pc, #20]	@ (800085c <__aeabi_dadd+0x388>)
 8000846:	0762      	lsls	r2, r4, #29
 8000848:	432a      	orrs	r2, r5
 800084a:	08e4      	lsrs	r4, r4, #3
 800084c:	429f      	cmp	r7, r3
 800084e:	d00f      	beq.n	8000870 <__aeabi_dadd+0x39c>
 8000850:	0324      	lsls	r4, r4, #12
 8000852:	0b25      	lsrs	r5, r4, #12
 8000854:	057c      	lsls	r4, r7, #21
 8000856:	0d64      	lsrs	r4, r4, #21
 8000858:	e6d4      	b.n	8000604 <__aeabi_dadd+0x130>
 800085a:	46c0      	nop			@ (mov r8, r8)
 800085c:	000007ff 	.word	0x000007ff
 8000860:	ff7fffff 	.word	0xff7fffff
 8000864:	000007fe 	.word	0x000007fe
 8000868:	08c0      	lsrs	r0, r0, #3
 800086a:	0762      	lsls	r2, r4, #29
 800086c:	4302      	orrs	r2, r0
 800086e:	08e4      	lsrs	r4, r4, #3
 8000870:	0013      	movs	r3, r2
 8000872:	4323      	orrs	r3, r4
 8000874:	d100      	bne.n	8000878 <__aeabi_dadd+0x3a4>
 8000876:	e186      	b.n	8000b86 <__aeabi_dadd+0x6b2>
 8000878:	2580      	movs	r5, #128	@ 0x80
 800087a:	032d      	lsls	r5, r5, #12
 800087c:	4325      	orrs	r5, r4
 800087e:	032d      	lsls	r5, r5, #12
 8000880:	4cc3      	ldr	r4, [pc, #780]	@ (8000b90 <__aeabi_dadd+0x6bc>)
 8000882:	0b2d      	lsrs	r5, r5, #12
 8000884:	e6be      	b.n	8000604 <__aeabi_dadd+0x130>
 8000886:	4660      	mov	r0, ip
 8000888:	4654      	mov	r4, sl
 800088a:	000e      	movs	r6, r1
 800088c:	0017      	movs	r7, r2
 800088e:	08c5      	lsrs	r5, r0, #3
 8000890:	e7d8      	b.n	8000844 <__aeabi_dadd+0x370>
 8000892:	4cc0      	ldr	r4, [pc, #768]	@ (8000b94 <__aeabi_dadd+0x6c0>)
 8000894:	1aff      	subs	r7, r7, r3
 8000896:	4014      	ands	r4, r2
 8000898:	e696      	b.n	80005c8 <__aeabi_dadd+0xf4>
 800089a:	4abf      	ldr	r2, [pc, #764]	@ (8000b98 <__aeabi_dadd+0x6c4>)
 800089c:	1c79      	adds	r1, r7, #1
 800089e:	4211      	tst	r1, r2
 80008a0:	d16b      	bne.n	800097a <__aeabi_dadd+0x4a6>
 80008a2:	0022      	movs	r2, r4
 80008a4:	4302      	orrs	r2, r0
 80008a6:	2f00      	cmp	r7, #0
 80008a8:	d000      	beq.n	80008ac <__aeabi_dadd+0x3d8>
 80008aa:	e0db      	b.n	8000a64 <__aeabi_dadd+0x590>
 80008ac:	2a00      	cmp	r2, #0
 80008ae:	d100      	bne.n	80008b2 <__aeabi_dadd+0x3de>
 80008b0:	e12d      	b.n	8000b0e <__aeabi_dadd+0x63a>
 80008b2:	4662      	mov	r2, ip
 80008b4:	4653      	mov	r3, sl
 80008b6:	431a      	orrs	r2, r3
 80008b8:	d100      	bne.n	80008bc <__aeabi_dadd+0x3e8>
 80008ba:	e0b6      	b.n	8000a2a <__aeabi_dadd+0x556>
 80008bc:	4663      	mov	r3, ip
 80008be:	18c5      	adds	r5, r0, r3
 80008c0:	4285      	cmp	r5, r0
 80008c2:	4180      	sbcs	r0, r0
 80008c4:	4454      	add	r4, sl
 80008c6:	4240      	negs	r0, r0
 80008c8:	1824      	adds	r4, r4, r0
 80008ca:	0223      	lsls	r3, r4, #8
 80008cc:	d502      	bpl.n	80008d4 <__aeabi_dadd+0x400>
 80008ce:	000f      	movs	r7, r1
 80008d0:	4bb0      	ldr	r3, [pc, #704]	@ (8000b94 <__aeabi_dadd+0x6c0>)
 80008d2:	401c      	ands	r4, r3
 80008d4:	003a      	movs	r2, r7
 80008d6:	0028      	movs	r0, r5
 80008d8:	e7d8      	b.n	800088c <__aeabi_dadd+0x3b8>
 80008da:	4662      	mov	r2, ip
 80008dc:	1a85      	subs	r5, r0, r2
 80008de:	42a8      	cmp	r0, r5
 80008e0:	4192      	sbcs	r2, r2
 80008e2:	4653      	mov	r3, sl
 80008e4:	4252      	negs	r2, r2
 80008e6:	4691      	mov	r9, r2
 80008e8:	1ae3      	subs	r3, r4, r3
 80008ea:	001a      	movs	r2, r3
 80008ec:	464b      	mov	r3, r9
 80008ee:	1ad2      	subs	r2, r2, r3
 80008f0:	0013      	movs	r3, r2
 80008f2:	4691      	mov	r9, r2
 80008f4:	021a      	lsls	r2, r3, #8
 80008f6:	d454      	bmi.n	80009a2 <__aeabi_dadd+0x4ce>
 80008f8:	464a      	mov	r2, r9
 80008fa:	464c      	mov	r4, r9
 80008fc:	432a      	orrs	r2, r5
 80008fe:	d000      	beq.n	8000902 <__aeabi_dadd+0x42e>
 8000900:	e640      	b.n	8000584 <__aeabi_dadd+0xb0>
 8000902:	2600      	movs	r6, #0
 8000904:	2400      	movs	r4, #0
 8000906:	2500      	movs	r5, #0
 8000908:	e67c      	b.n	8000604 <__aeabi_dadd+0x130>
 800090a:	4da1      	ldr	r5, [pc, #644]	@ (8000b90 <__aeabi_dadd+0x6bc>)
 800090c:	45a9      	cmp	r9, r5
 800090e:	d100      	bne.n	8000912 <__aeabi_dadd+0x43e>
 8000910:	e090      	b.n	8000a34 <__aeabi_dadd+0x560>
 8000912:	2501      	movs	r5, #1
 8000914:	2a38      	cmp	r2, #56	@ 0x38
 8000916:	dd00      	ble.n	800091a <__aeabi_dadd+0x446>
 8000918:	e6ab      	b.n	8000672 <__aeabi_dadd+0x19e>
 800091a:	2580      	movs	r5, #128	@ 0x80
 800091c:	042d      	lsls	r5, r5, #16
 800091e:	432c      	orrs	r4, r5
 8000920:	e695      	b.n	800064e <__aeabi_dadd+0x17a>
 8000922:	0011      	movs	r1, r2
 8000924:	4655      	mov	r5, sl
 8000926:	3920      	subs	r1, #32
 8000928:	40cd      	lsrs	r5, r1
 800092a:	46a9      	mov	r9, r5
 800092c:	2a20      	cmp	r2, #32
 800092e:	d006      	beq.n	800093e <__aeabi_dadd+0x46a>
 8000930:	2140      	movs	r1, #64	@ 0x40
 8000932:	4653      	mov	r3, sl
 8000934:	1a8a      	subs	r2, r1, r2
 8000936:	4093      	lsls	r3, r2
 8000938:	4662      	mov	r2, ip
 800093a:	431a      	orrs	r2, r3
 800093c:	4694      	mov	ip, r2
 800093e:	4665      	mov	r5, ip
 8000940:	1e6b      	subs	r3, r5, #1
 8000942:	419d      	sbcs	r5, r3
 8000944:	464b      	mov	r3, r9
 8000946:	431d      	orrs	r5, r3
 8000948:	e612      	b.n	8000570 <__aeabi_dadd+0x9c>
 800094a:	0021      	movs	r1, r4
 800094c:	4301      	orrs	r1, r0
 800094e:	d100      	bne.n	8000952 <__aeabi_dadd+0x47e>
 8000950:	e0c4      	b.n	8000adc <__aeabi_dadd+0x608>
 8000952:	1e51      	subs	r1, r2, #1
 8000954:	2a01      	cmp	r2, #1
 8000956:	d100      	bne.n	800095a <__aeabi_dadd+0x486>
 8000958:	e0fb      	b.n	8000b52 <__aeabi_dadd+0x67e>
 800095a:	4d8d      	ldr	r5, [pc, #564]	@ (8000b90 <__aeabi_dadd+0x6bc>)
 800095c:	42aa      	cmp	r2, r5
 800095e:	d100      	bne.n	8000962 <__aeabi_dadd+0x48e>
 8000960:	e0b5      	b.n	8000ace <__aeabi_dadd+0x5fa>
 8000962:	2501      	movs	r5, #1
 8000964:	2938      	cmp	r1, #56	@ 0x38
 8000966:	dd00      	ble.n	800096a <__aeabi_dadd+0x496>
 8000968:	e741      	b.n	80007ee <__aeabi_dadd+0x31a>
 800096a:	000a      	movs	r2, r1
 800096c:	e72f      	b.n	80007ce <__aeabi_dadd+0x2fa>
 800096e:	4c89      	ldr	r4, [pc, #548]	@ (8000b94 <__aeabi_dadd+0x6c0>)
 8000970:	1aff      	subs	r7, r7, r3
 8000972:	4014      	ands	r4, r2
 8000974:	0762      	lsls	r2, r4, #29
 8000976:	08e4      	lsrs	r4, r4, #3
 8000978:	e76a      	b.n	8000850 <__aeabi_dadd+0x37c>
 800097a:	4a85      	ldr	r2, [pc, #532]	@ (8000b90 <__aeabi_dadd+0x6bc>)
 800097c:	4291      	cmp	r1, r2
 800097e:	d100      	bne.n	8000982 <__aeabi_dadd+0x4ae>
 8000980:	e0e3      	b.n	8000b4a <__aeabi_dadd+0x676>
 8000982:	4663      	mov	r3, ip
 8000984:	18c2      	adds	r2, r0, r3
 8000986:	4282      	cmp	r2, r0
 8000988:	4180      	sbcs	r0, r0
 800098a:	0023      	movs	r3, r4
 800098c:	4240      	negs	r0, r0
 800098e:	4453      	add	r3, sl
 8000990:	181b      	adds	r3, r3, r0
 8000992:	07dd      	lsls	r5, r3, #31
 8000994:	085c      	lsrs	r4, r3, #1
 8000996:	2307      	movs	r3, #7
 8000998:	0852      	lsrs	r2, r2, #1
 800099a:	4315      	orrs	r5, r2
 800099c:	000f      	movs	r7, r1
 800099e:	402b      	ands	r3, r5
 80009a0:	e700      	b.n	80007a4 <__aeabi_dadd+0x2d0>
 80009a2:	4663      	mov	r3, ip
 80009a4:	1a1d      	subs	r5, r3, r0
 80009a6:	45ac      	cmp	ip, r5
 80009a8:	4192      	sbcs	r2, r2
 80009aa:	4653      	mov	r3, sl
 80009ac:	4252      	negs	r2, r2
 80009ae:	1b1c      	subs	r4, r3, r4
 80009b0:	000e      	movs	r6, r1
 80009b2:	4688      	mov	r8, r1
 80009b4:	1aa4      	subs	r4, r4, r2
 80009b6:	e5e5      	b.n	8000584 <__aeabi_dadd+0xb0>
 80009b8:	2d00      	cmp	r5, #0
 80009ba:	d000      	beq.n	80009be <__aeabi_dadd+0x4ea>
 80009bc:	e091      	b.n	8000ae2 <__aeabi_dadd+0x60e>
 80009be:	2a00      	cmp	r2, #0
 80009c0:	d138      	bne.n	8000a34 <__aeabi_dadd+0x560>
 80009c2:	2480      	movs	r4, #128	@ 0x80
 80009c4:	2600      	movs	r6, #0
 80009c6:	0324      	lsls	r4, r4, #12
 80009c8:	e756      	b.n	8000878 <__aeabi_dadd+0x3a4>
 80009ca:	4663      	mov	r3, ip
 80009cc:	18c5      	adds	r5, r0, r3
 80009ce:	4285      	cmp	r5, r0
 80009d0:	4180      	sbcs	r0, r0
 80009d2:	4454      	add	r4, sl
 80009d4:	4240      	negs	r0, r0
 80009d6:	1824      	adds	r4, r4, r0
 80009d8:	2701      	movs	r7, #1
 80009da:	0223      	lsls	r3, r4, #8
 80009dc:	d400      	bmi.n	80009e0 <__aeabi_dadd+0x50c>
 80009de:	e6df      	b.n	80007a0 <__aeabi_dadd+0x2cc>
 80009e0:	2702      	movs	r7, #2
 80009e2:	e687      	b.n	80006f4 <__aeabi_dadd+0x220>
 80009e4:	4663      	mov	r3, ip
 80009e6:	1ac5      	subs	r5, r0, r3
 80009e8:	42a8      	cmp	r0, r5
 80009ea:	4180      	sbcs	r0, r0
 80009ec:	4653      	mov	r3, sl
 80009ee:	4240      	negs	r0, r0
 80009f0:	1ae4      	subs	r4, r4, r3
 80009f2:	2701      	movs	r7, #1
 80009f4:	1a24      	subs	r4, r4, r0
 80009f6:	e5c0      	b.n	800057a <__aeabi_dadd+0xa6>
 80009f8:	0762      	lsls	r2, r4, #29
 80009fa:	08c0      	lsrs	r0, r0, #3
 80009fc:	4302      	orrs	r2, r0
 80009fe:	08e4      	lsrs	r4, r4, #3
 8000a00:	e736      	b.n	8000870 <__aeabi_dadd+0x39c>
 8000a02:	0011      	movs	r1, r2
 8000a04:	4653      	mov	r3, sl
 8000a06:	3920      	subs	r1, #32
 8000a08:	40cb      	lsrs	r3, r1
 8000a0a:	4699      	mov	r9, r3
 8000a0c:	2a20      	cmp	r2, #32
 8000a0e:	d006      	beq.n	8000a1e <__aeabi_dadd+0x54a>
 8000a10:	2140      	movs	r1, #64	@ 0x40
 8000a12:	4653      	mov	r3, sl
 8000a14:	1a8a      	subs	r2, r1, r2
 8000a16:	4093      	lsls	r3, r2
 8000a18:	4662      	mov	r2, ip
 8000a1a:	431a      	orrs	r2, r3
 8000a1c:	4694      	mov	ip, r2
 8000a1e:	4665      	mov	r5, ip
 8000a20:	1e6b      	subs	r3, r5, #1
 8000a22:	419d      	sbcs	r5, r3
 8000a24:	464b      	mov	r3, r9
 8000a26:	431d      	orrs	r5, r3
 8000a28:	e659      	b.n	80006de <__aeabi_dadd+0x20a>
 8000a2a:	0762      	lsls	r2, r4, #29
 8000a2c:	08c0      	lsrs	r0, r0, #3
 8000a2e:	4302      	orrs	r2, r0
 8000a30:	08e4      	lsrs	r4, r4, #3
 8000a32:	e70d      	b.n	8000850 <__aeabi_dadd+0x37c>
 8000a34:	4653      	mov	r3, sl
 8000a36:	075a      	lsls	r2, r3, #29
 8000a38:	4663      	mov	r3, ip
 8000a3a:	08d8      	lsrs	r0, r3, #3
 8000a3c:	4653      	mov	r3, sl
 8000a3e:	000e      	movs	r6, r1
 8000a40:	4302      	orrs	r2, r0
 8000a42:	08dc      	lsrs	r4, r3, #3
 8000a44:	e714      	b.n	8000870 <__aeabi_dadd+0x39c>
 8000a46:	0015      	movs	r5, r2
 8000a48:	0026      	movs	r6, r4
 8000a4a:	3d20      	subs	r5, #32
 8000a4c:	40ee      	lsrs	r6, r5
 8000a4e:	2a20      	cmp	r2, #32
 8000a50:	d003      	beq.n	8000a5a <__aeabi_dadd+0x586>
 8000a52:	2540      	movs	r5, #64	@ 0x40
 8000a54:	1aaa      	subs	r2, r5, r2
 8000a56:	4094      	lsls	r4, r2
 8000a58:	4320      	orrs	r0, r4
 8000a5a:	1e42      	subs	r2, r0, #1
 8000a5c:	4190      	sbcs	r0, r2
 8000a5e:	0005      	movs	r5, r0
 8000a60:	4335      	orrs	r5, r6
 8000a62:	e606      	b.n	8000672 <__aeabi_dadd+0x19e>
 8000a64:	2a00      	cmp	r2, #0
 8000a66:	d07c      	beq.n	8000b62 <__aeabi_dadd+0x68e>
 8000a68:	4662      	mov	r2, ip
 8000a6a:	4653      	mov	r3, sl
 8000a6c:	08c0      	lsrs	r0, r0, #3
 8000a6e:	431a      	orrs	r2, r3
 8000a70:	d100      	bne.n	8000a74 <__aeabi_dadd+0x5a0>
 8000a72:	e6fa      	b.n	800086a <__aeabi_dadd+0x396>
 8000a74:	0762      	lsls	r2, r4, #29
 8000a76:	4310      	orrs	r0, r2
 8000a78:	2280      	movs	r2, #128	@ 0x80
 8000a7a:	08e4      	lsrs	r4, r4, #3
 8000a7c:	0312      	lsls	r2, r2, #12
 8000a7e:	4214      	tst	r4, r2
 8000a80:	d008      	beq.n	8000a94 <__aeabi_dadd+0x5c0>
 8000a82:	08d9      	lsrs	r1, r3, #3
 8000a84:	4211      	tst	r1, r2
 8000a86:	d105      	bne.n	8000a94 <__aeabi_dadd+0x5c0>
 8000a88:	4663      	mov	r3, ip
 8000a8a:	08d8      	lsrs	r0, r3, #3
 8000a8c:	4653      	mov	r3, sl
 8000a8e:	000c      	movs	r4, r1
 8000a90:	075b      	lsls	r3, r3, #29
 8000a92:	4318      	orrs	r0, r3
 8000a94:	0f42      	lsrs	r2, r0, #29
 8000a96:	00c0      	lsls	r0, r0, #3
 8000a98:	08c0      	lsrs	r0, r0, #3
 8000a9a:	0752      	lsls	r2, r2, #29
 8000a9c:	4302      	orrs	r2, r0
 8000a9e:	e6e7      	b.n	8000870 <__aeabi_dadd+0x39c>
 8000aa0:	2a00      	cmp	r2, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_dadd+0x5d2>
 8000aa4:	e72d      	b.n	8000902 <__aeabi_dadd+0x42e>
 8000aa6:	4663      	mov	r3, ip
 8000aa8:	08d8      	lsrs	r0, r3, #3
 8000aaa:	4653      	mov	r3, sl
 8000aac:	075a      	lsls	r2, r3, #29
 8000aae:	000e      	movs	r6, r1
 8000ab0:	4302      	orrs	r2, r0
 8000ab2:	08dc      	lsrs	r4, r3, #3
 8000ab4:	e6cc      	b.n	8000850 <__aeabi_dadd+0x37c>
 8000ab6:	4663      	mov	r3, ip
 8000ab8:	1a1d      	subs	r5, r3, r0
 8000aba:	45ac      	cmp	ip, r5
 8000abc:	4192      	sbcs	r2, r2
 8000abe:	4653      	mov	r3, sl
 8000ac0:	4252      	negs	r2, r2
 8000ac2:	1b1c      	subs	r4, r3, r4
 8000ac4:	000e      	movs	r6, r1
 8000ac6:	4688      	mov	r8, r1
 8000ac8:	1aa4      	subs	r4, r4, r2
 8000aca:	3701      	adds	r7, #1
 8000acc:	e555      	b.n	800057a <__aeabi_dadd+0xa6>
 8000ace:	4663      	mov	r3, ip
 8000ad0:	08d9      	lsrs	r1, r3, #3
 8000ad2:	4653      	mov	r3, sl
 8000ad4:	075a      	lsls	r2, r3, #29
 8000ad6:	430a      	orrs	r2, r1
 8000ad8:	08dc      	lsrs	r4, r3, #3
 8000ada:	e6c9      	b.n	8000870 <__aeabi_dadd+0x39c>
 8000adc:	4660      	mov	r0, ip
 8000ade:	4654      	mov	r4, sl
 8000ae0:	e6d4      	b.n	800088c <__aeabi_dadd+0x3b8>
 8000ae2:	08c0      	lsrs	r0, r0, #3
 8000ae4:	2a00      	cmp	r2, #0
 8000ae6:	d100      	bne.n	8000aea <__aeabi_dadd+0x616>
 8000ae8:	e6bf      	b.n	800086a <__aeabi_dadd+0x396>
 8000aea:	0762      	lsls	r2, r4, #29
 8000aec:	4310      	orrs	r0, r2
 8000aee:	2280      	movs	r2, #128	@ 0x80
 8000af0:	08e4      	lsrs	r4, r4, #3
 8000af2:	0312      	lsls	r2, r2, #12
 8000af4:	4214      	tst	r4, r2
 8000af6:	d0cd      	beq.n	8000a94 <__aeabi_dadd+0x5c0>
 8000af8:	08dd      	lsrs	r5, r3, #3
 8000afa:	4215      	tst	r5, r2
 8000afc:	d1ca      	bne.n	8000a94 <__aeabi_dadd+0x5c0>
 8000afe:	4663      	mov	r3, ip
 8000b00:	08d8      	lsrs	r0, r3, #3
 8000b02:	4653      	mov	r3, sl
 8000b04:	075b      	lsls	r3, r3, #29
 8000b06:	000e      	movs	r6, r1
 8000b08:	002c      	movs	r4, r5
 8000b0a:	4318      	orrs	r0, r3
 8000b0c:	e7c2      	b.n	8000a94 <__aeabi_dadd+0x5c0>
 8000b0e:	4663      	mov	r3, ip
 8000b10:	08d9      	lsrs	r1, r3, #3
 8000b12:	4653      	mov	r3, sl
 8000b14:	075a      	lsls	r2, r3, #29
 8000b16:	430a      	orrs	r2, r1
 8000b18:	08dc      	lsrs	r4, r3, #3
 8000b1a:	e699      	b.n	8000850 <__aeabi_dadd+0x37c>
 8000b1c:	4663      	mov	r3, ip
 8000b1e:	08d8      	lsrs	r0, r3, #3
 8000b20:	4653      	mov	r3, sl
 8000b22:	075a      	lsls	r2, r3, #29
 8000b24:	000e      	movs	r6, r1
 8000b26:	4302      	orrs	r2, r0
 8000b28:	08dc      	lsrs	r4, r3, #3
 8000b2a:	e6a1      	b.n	8000870 <__aeabi_dadd+0x39c>
 8000b2c:	0011      	movs	r1, r2
 8000b2e:	0027      	movs	r7, r4
 8000b30:	3920      	subs	r1, #32
 8000b32:	40cf      	lsrs	r7, r1
 8000b34:	2a20      	cmp	r2, #32
 8000b36:	d003      	beq.n	8000b40 <__aeabi_dadd+0x66c>
 8000b38:	2140      	movs	r1, #64	@ 0x40
 8000b3a:	1a8a      	subs	r2, r1, r2
 8000b3c:	4094      	lsls	r4, r2
 8000b3e:	4320      	orrs	r0, r4
 8000b40:	1e42      	subs	r2, r0, #1
 8000b42:	4190      	sbcs	r0, r2
 8000b44:	0005      	movs	r5, r0
 8000b46:	433d      	orrs	r5, r7
 8000b48:	e651      	b.n	80007ee <__aeabi_dadd+0x31a>
 8000b4a:	000c      	movs	r4, r1
 8000b4c:	2500      	movs	r5, #0
 8000b4e:	2200      	movs	r2, #0
 8000b50:	e558      	b.n	8000604 <__aeabi_dadd+0x130>
 8000b52:	4460      	add	r0, ip
 8000b54:	4560      	cmp	r0, ip
 8000b56:	4192      	sbcs	r2, r2
 8000b58:	4454      	add	r4, sl
 8000b5a:	4252      	negs	r2, r2
 8000b5c:	0005      	movs	r5, r0
 8000b5e:	18a4      	adds	r4, r4, r2
 8000b60:	e73a      	b.n	80009d8 <__aeabi_dadd+0x504>
 8000b62:	4653      	mov	r3, sl
 8000b64:	075a      	lsls	r2, r3, #29
 8000b66:	4663      	mov	r3, ip
 8000b68:	08d9      	lsrs	r1, r3, #3
 8000b6a:	4653      	mov	r3, sl
 8000b6c:	430a      	orrs	r2, r1
 8000b6e:	08dc      	lsrs	r4, r3, #3
 8000b70:	e67e      	b.n	8000870 <__aeabi_dadd+0x39c>
 8000b72:	001a      	movs	r2, r3
 8000b74:	001c      	movs	r4, r3
 8000b76:	432a      	orrs	r2, r5
 8000b78:	d000      	beq.n	8000b7c <__aeabi_dadd+0x6a8>
 8000b7a:	e6ab      	b.n	80008d4 <__aeabi_dadd+0x400>
 8000b7c:	e6c1      	b.n	8000902 <__aeabi_dadd+0x42e>
 8000b7e:	2120      	movs	r1, #32
 8000b80:	2500      	movs	r5, #0
 8000b82:	1a09      	subs	r1, r1, r0
 8000b84:	e519      	b.n	80005ba <__aeabi_dadd+0xe6>
 8000b86:	2200      	movs	r2, #0
 8000b88:	2500      	movs	r5, #0
 8000b8a:	4c01      	ldr	r4, [pc, #4]	@ (8000b90 <__aeabi_dadd+0x6bc>)
 8000b8c:	e53a      	b.n	8000604 <__aeabi_dadd+0x130>
 8000b8e:	46c0      	nop			@ (mov r8, r8)
 8000b90:	000007ff 	.word	0x000007ff
 8000b94:	ff7fffff 	.word	0xff7fffff
 8000b98:	000007fe 	.word	0x000007fe

08000b9c <__aeabi_ddiv>:
 8000b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b9e:	46de      	mov	lr, fp
 8000ba0:	4645      	mov	r5, r8
 8000ba2:	4657      	mov	r7, sl
 8000ba4:	464e      	mov	r6, r9
 8000ba6:	b5e0      	push	{r5, r6, r7, lr}
 8000ba8:	b087      	sub	sp, #28
 8000baa:	9200      	str	r2, [sp, #0]
 8000bac:	9301      	str	r3, [sp, #4]
 8000bae:	030b      	lsls	r3, r1, #12
 8000bb0:	0b1b      	lsrs	r3, r3, #12
 8000bb2:	469b      	mov	fp, r3
 8000bb4:	0fca      	lsrs	r2, r1, #31
 8000bb6:	004b      	lsls	r3, r1, #1
 8000bb8:	0004      	movs	r4, r0
 8000bba:	4680      	mov	r8, r0
 8000bbc:	0d5b      	lsrs	r3, r3, #21
 8000bbe:	9202      	str	r2, [sp, #8]
 8000bc0:	d100      	bne.n	8000bc4 <__aeabi_ddiv+0x28>
 8000bc2:	e16a      	b.n	8000e9a <__aeabi_ddiv+0x2fe>
 8000bc4:	4ad4      	ldr	r2, [pc, #848]	@ (8000f18 <__aeabi_ddiv+0x37c>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d100      	bne.n	8000bcc <__aeabi_ddiv+0x30>
 8000bca:	e18c      	b.n	8000ee6 <__aeabi_ddiv+0x34a>
 8000bcc:	4659      	mov	r1, fp
 8000bce:	0f42      	lsrs	r2, r0, #29
 8000bd0:	00c9      	lsls	r1, r1, #3
 8000bd2:	430a      	orrs	r2, r1
 8000bd4:	2180      	movs	r1, #128	@ 0x80
 8000bd6:	0409      	lsls	r1, r1, #16
 8000bd8:	4311      	orrs	r1, r2
 8000bda:	00c2      	lsls	r2, r0, #3
 8000bdc:	4690      	mov	r8, r2
 8000bde:	4acf      	ldr	r2, [pc, #828]	@ (8000f1c <__aeabi_ddiv+0x380>)
 8000be0:	4689      	mov	r9, r1
 8000be2:	4692      	mov	sl, r2
 8000be4:	449a      	add	sl, r3
 8000be6:	2300      	movs	r3, #0
 8000be8:	2400      	movs	r4, #0
 8000bea:	9303      	str	r3, [sp, #12]
 8000bec:	9e00      	ldr	r6, [sp, #0]
 8000bee:	9f01      	ldr	r7, [sp, #4]
 8000bf0:	033b      	lsls	r3, r7, #12
 8000bf2:	0b1b      	lsrs	r3, r3, #12
 8000bf4:	469b      	mov	fp, r3
 8000bf6:	007b      	lsls	r3, r7, #1
 8000bf8:	0030      	movs	r0, r6
 8000bfa:	0d5b      	lsrs	r3, r3, #21
 8000bfc:	0ffd      	lsrs	r5, r7, #31
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d100      	bne.n	8000c04 <__aeabi_ddiv+0x68>
 8000c02:	e128      	b.n	8000e56 <__aeabi_ddiv+0x2ba>
 8000c04:	4ac4      	ldr	r2, [pc, #784]	@ (8000f18 <__aeabi_ddiv+0x37c>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d100      	bne.n	8000c0c <__aeabi_ddiv+0x70>
 8000c0a:	e177      	b.n	8000efc <__aeabi_ddiv+0x360>
 8000c0c:	4659      	mov	r1, fp
 8000c0e:	0f72      	lsrs	r2, r6, #29
 8000c10:	00c9      	lsls	r1, r1, #3
 8000c12:	430a      	orrs	r2, r1
 8000c14:	2180      	movs	r1, #128	@ 0x80
 8000c16:	0409      	lsls	r1, r1, #16
 8000c18:	4311      	orrs	r1, r2
 8000c1a:	468b      	mov	fp, r1
 8000c1c:	49bf      	ldr	r1, [pc, #764]	@ (8000f1c <__aeabi_ddiv+0x380>)
 8000c1e:	00f2      	lsls	r2, r6, #3
 8000c20:	468c      	mov	ip, r1
 8000c22:	4651      	mov	r1, sl
 8000c24:	4463      	add	r3, ip
 8000c26:	1acb      	subs	r3, r1, r3
 8000c28:	469a      	mov	sl, r3
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	9e02      	ldr	r6, [sp, #8]
 8000c2e:	406e      	eors	r6, r5
 8000c30:	2c0f      	cmp	r4, #15
 8000c32:	d827      	bhi.n	8000c84 <__aeabi_ddiv+0xe8>
 8000c34:	49ba      	ldr	r1, [pc, #744]	@ (8000f20 <__aeabi_ddiv+0x384>)
 8000c36:	00a4      	lsls	r4, r4, #2
 8000c38:	5909      	ldr	r1, [r1, r4]
 8000c3a:	468f      	mov	pc, r1
 8000c3c:	46cb      	mov	fp, r9
 8000c3e:	4642      	mov	r2, r8
 8000c40:	9e02      	ldr	r6, [sp, #8]
 8000c42:	9b03      	ldr	r3, [sp, #12]
 8000c44:	2b02      	cmp	r3, #2
 8000c46:	d016      	beq.n	8000c76 <__aeabi_ddiv+0xda>
 8000c48:	2b03      	cmp	r3, #3
 8000c4a:	d100      	bne.n	8000c4e <__aeabi_ddiv+0xb2>
 8000c4c:	e2a6      	b.n	800119c <__aeabi_ddiv+0x600>
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d000      	beq.n	8000c54 <__aeabi_ddiv+0xb8>
 8000c52:	e0df      	b.n	8000e14 <__aeabi_ddiv+0x278>
 8000c54:	2200      	movs	r2, #0
 8000c56:	2300      	movs	r3, #0
 8000c58:	2400      	movs	r4, #0
 8000c5a:	4690      	mov	r8, r2
 8000c5c:	051b      	lsls	r3, r3, #20
 8000c5e:	4323      	orrs	r3, r4
 8000c60:	07f6      	lsls	r6, r6, #31
 8000c62:	4333      	orrs	r3, r6
 8000c64:	4640      	mov	r0, r8
 8000c66:	0019      	movs	r1, r3
 8000c68:	b007      	add	sp, #28
 8000c6a:	bcf0      	pop	{r4, r5, r6, r7}
 8000c6c:	46bb      	mov	fp, r7
 8000c6e:	46b2      	mov	sl, r6
 8000c70:	46a9      	mov	r9, r5
 8000c72:	46a0      	mov	r8, r4
 8000c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c76:	2200      	movs	r2, #0
 8000c78:	2400      	movs	r4, #0
 8000c7a:	4690      	mov	r8, r2
 8000c7c:	4ba6      	ldr	r3, [pc, #664]	@ (8000f18 <__aeabi_ddiv+0x37c>)
 8000c7e:	e7ed      	b.n	8000c5c <__aeabi_ddiv+0xc0>
 8000c80:	002e      	movs	r6, r5
 8000c82:	e7df      	b.n	8000c44 <__aeabi_ddiv+0xa8>
 8000c84:	45cb      	cmp	fp, r9
 8000c86:	d200      	bcs.n	8000c8a <__aeabi_ddiv+0xee>
 8000c88:	e1d4      	b.n	8001034 <__aeabi_ddiv+0x498>
 8000c8a:	d100      	bne.n	8000c8e <__aeabi_ddiv+0xf2>
 8000c8c:	e1cf      	b.n	800102e <__aeabi_ddiv+0x492>
 8000c8e:	2301      	movs	r3, #1
 8000c90:	425b      	negs	r3, r3
 8000c92:	469c      	mov	ip, r3
 8000c94:	4644      	mov	r4, r8
 8000c96:	4648      	mov	r0, r9
 8000c98:	2700      	movs	r7, #0
 8000c9a:	44e2      	add	sl, ip
 8000c9c:	465b      	mov	r3, fp
 8000c9e:	0e15      	lsrs	r5, r2, #24
 8000ca0:	021b      	lsls	r3, r3, #8
 8000ca2:	431d      	orrs	r5, r3
 8000ca4:	0c19      	lsrs	r1, r3, #16
 8000ca6:	042b      	lsls	r3, r5, #16
 8000ca8:	0212      	lsls	r2, r2, #8
 8000caa:	9500      	str	r5, [sp, #0]
 8000cac:	0c1d      	lsrs	r5, r3, #16
 8000cae:	4691      	mov	r9, r2
 8000cb0:	9102      	str	r1, [sp, #8]
 8000cb2:	9503      	str	r5, [sp, #12]
 8000cb4:	f7ff fac0 	bl	8000238 <__aeabi_uidivmod>
 8000cb8:	0002      	movs	r2, r0
 8000cba:	436a      	muls	r2, r5
 8000cbc:	040b      	lsls	r3, r1, #16
 8000cbe:	0c21      	lsrs	r1, r4, #16
 8000cc0:	4680      	mov	r8, r0
 8000cc2:	4319      	orrs	r1, r3
 8000cc4:	428a      	cmp	r2, r1
 8000cc6:	d909      	bls.n	8000cdc <__aeabi_ddiv+0x140>
 8000cc8:	9d00      	ldr	r5, [sp, #0]
 8000cca:	2301      	movs	r3, #1
 8000ccc:	46ac      	mov	ip, r5
 8000cce:	425b      	negs	r3, r3
 8000cd0:	4461      	add	r1, ip
 8000cd2:	469c      	mov	ip, r3
 8000cd4:	44e0      	add	r8, ip
 8000cd6:	428d      	cmp	r5, r1
 8000cd8:	d800      	bhi.n	8000cdc <__aeabi_ddiv+0x140>
 8000cda:	e1fb      	b.n	80010d4 <__aeabi_ddiv+0x538>
 8000cdc:	1a88      	subs	r0, r1, r2
 8000cde:	9902      	ldr	r1, [sp, #8]
 8000ce0:	f7ff faaa 	bl	8000238 <__aeabi_uidivmod>
 8000ce4:	9a03      	ldr	r2, [sp, #12]
 8000ce6:	0424      	lsls	r4, r4, #16
 8000ce8:	4342      	muls	r2, r0
 8000cea:	0409      	lsls	r1, r1, #16
 8000cec:	0c24      	lsrs	r4, r4, #16
 8000cee:	0003      	movs	r3, r0
 8000cf0:	430c      	orrs	r4, r1
 8000cf2:	42a2      	cmp	r2, r4
 8000cf4:	d906      	bls.n	8000d04 <__aeabi_ddiv+0x168>
 8000cf6:	9900      	ldr	r1, [sp, #0]
 8000cf8:	3b01      	subs	r3, #1
 8000cfa:	468c      	mov	ip, r1
 8000cfc:	4464      	add	r4, ip
 8000cfe:	42a1      	cmp	r1, r4
 8000d00:	d800      	bhi.n	8000d04 <__aeabi_ddiv+0x168>
 8000d02:	e1e1      	b.n	80010c8 <__aeabi_ddiv+0x52c>
 8000d04:	1aa0      	subs	r0, r4, r2
 8000d06:	4642      	mov	r2, r8
 8000d08:	0412      	lsls	r2, r2, #16
 8000d0a:	431a      	orrs	r2, r3
 8000d0c:	4693      	mov	fp, r2
 8000d0e:	464b      	mov	r3, r9
 8000d10:	4659      	mov	r1, fp
 8000d12:	0c1b      	lsrs	r3, r3, #16
 8000d14:	001d      	movs	r5, r3
 8000d16:	9304      	str	r3, [sp, #16]
 8000d18:	040b      	lsls	r3, r1, #16
 8000d1a:	4649      	mov	r1, r9
 8000d1c:	0409      	lsls	r1, r1, #16
 8000d1e:	0c09      	lsrs	r1, r1, #16
 8000d20:	000c      	movs	r4, r1
 8000d22:	0c1b      	lsrs	r3, r3, #16
 8000d24:	435c      	muls	r4, r3
 8000d26:	0c12      	lsrs	r2, r2, #16
 8000d28:	436b      	muls	r3, r5
 8000d2a:	4688      	mov	r8, r1
 8000d2c:	4351      	muls	r1, r2
 8000d2e:	436a      	muls	r2, r5
 8000d30:	0c25      	lsrs	r5, r4, #16
 8000d32:	46ac      	mov	ip, r5
 8000d34:	185b      	adds	r3, r3, r1
 8000d36:	4463      	add	r3, ip
 8000d38:	4299      	cmp	r1, r3
 8000d3a:	d903      	bls.n	8000d44 <__aeabi_ddiv+0x1a8>
 8000d3c:	2180      	movs	r1, #128	@ 0x80
 8000d3e:	0249      	lsls	r1, r1, #9
 8000d40:	468c      	mov	ip, r1
 8000d42:	4462      	add	r2, ip
 8000d44:	0c19      	lsrs	r1, r3, #16
 8000d46:	0424      	lsls	r4, r4, #16
 8000d48:	041b      	lsls	r3, r3, #16
 8000d4a:	0c24      	lsrs	r4, r4, #16
 8000d4c:	188a      	adds	r2, r1, r2
 8000d4e:	191c      	adds	r4, r3, r4
 8000d50:	4290      	cmp	r0, r2
 8000d52:	d302      	bcc.n	8000d5a <__aeabi_ddiv+0x1be>
 8000d54:	d116      	bne.n	8000d84 <__aeabi_ddiv+0x1e8>
 8000d56:	42a7      	cmp	r7, r4
 8000d58:	d214      	bcs.n	8000d84 <__aeabi_ddiv+0x1e8>
 8000d5a:	465b      	mov	r3, fp
 8000d5c:	9d00      	ldr	r5, [sp, #0]
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	444f      	add	r7, r9
 8000d62:	9305      	str	r3, [sp, #20]
 8000d64:	454f      	cmp	r7, r9
 8000d66:	419b      	sbcs	r3, r3
 8000d68:	46ac      	mov	ip, r5
 8000d6a:	425b      	negs	r3, r3
 8000d6c:	4463      	add	r3, ip
 8000d6e:	18c0      	adds	r0, r0, r3
 8000d70:	4285      	cmp	r5, r0
 8000d72:	d300      	bcc.n	8000d76 <__aeabi_ddiv+0x1da>
 8000d74:	e1a1      	b.n	80010ba <__aeabi_ddiv+0x51e>
 8000d76:	4282      	cmp	r2, r0
 8000d78:	d900      	bls.n	8000d7c <__aeabi_ddiv+0x1e0>
 8000d7a:	e1f6      	b.n	800116a <__aeabi_ddiv+0x5ce>
 8000d7c:	d100      	bne.n	8000d80 <__aeabi_ddiv+0x1e4>
 8000d7e:	e1f1      	b.n	8001164 <__aeabi_ddiv+0x5c8>
 8000d80:	9b05      	ldr	r3, [sp, #20]
 8000d82:	469b      	mov	fp, r3
 8000d84:	1b3c      	subs	r4, r7, r4
 8000d86:	42a7      	cmp	r7, r4
 8000d88:	41bf      	sbcs	r7, r7
 8000d8a:	9d00      	ldr	r5, [sp, #0]
 8000d8c:	1a80      	subs	r0, r0, r2
 8000d8e:	427f      	negs	r7, r7
 8000d90:	1bc0      	subs	r0, r0, r7
 8000d92:	4285      	cmp	r5, r0
 8000d94:	d100      	bne.n	8000d98 <__aeabi_ddiv+0x1fc>
 8000d96:	e1d0      	b.n	800113a <__aeabi_ddiv+0x59e>
 8000d98:	9902      	ldr	r1, [sp, #8]
 8000d9a:	f7ff fa4d 	bl	8000238 <__aeabi_uidivmod>
 8000d9e:	9a03      	ldr	r2, [sp, #12]
 8000da0:	040b      	lsls	r3, r1, #16
 8000da2:	4342      	muls	r2, r0
 8000da4:	0c21      	lsrs	r1, r4, #16
 8000da6:	0007      	movs	r7, r0
 8000da8:	4319      	orrs	r1, r3
 8000daa:	428a      	cmp	r2, r1
 8000dac:	d900      	bls.n	8000db0 <__aeabi_ddiv+0x214>
 8000dae:	e178      	b.n	80010a2 <__aeabi_ddiv+0x506>
 8000db0:	1a88      	subs	r0, r1, r2
 8000db2:	9902      	ldr	r1, [sp, #8]
 8000db4:	f7ff fa40 	bl	8000238 <__aeabi_uidivmod>
 8000db8:	9a03      	ldr	r2, [sp, #12]
 8000dba:	0424      	lsls	r4, r4, #16
 8000dbc:	4342      	muls	r2, r0
 8000dbe:	0409      	lsls	r1, r1, #16
 8000dc0:	0c24      	lsrs	r4, r4, #16
 8000dc2:	0003      	movs	r3, r0
 8000dc4:	430c      	orrs	r4, r1
 8000dc6:	42a2      	cmp	r2, r4
 8000dc8:	d900      	bls.n	8000dcc <__aeabi_ddiv+0x230>
 8000dca:	e15d      	b.n	8001088 <__aeabi_ddiv+0x4ec>
 8000dcc:	4641      	mov	r1, r8
 8000dce:	1aa4      	subs	r4, r4, r2
 8000dd0:	043a      	lsls	r2, r7, #16
 8000dd2:	431a      	orrs	r2, r3
 8000dd4:	9d04      	ldr	r5, [sp, #16]
 8000dd6:	0413      	lsls	r3, r2, #16
 8000dd8:	0c1b      	lsrs	r3, r3, #16
 8000dda:	4359      	muls	r1, r3
 8000ddc:	4647      	mov	r7, r8
 8000dde:	436b      	muls	r3, r5
 8000de0:	469c      	mov	ip, r3
 8000de2:	0c10      	lsrs	r0, r2, #16
 8000de4:	4347      	muls	r7, r0
 8000de6:	0c0b      	lsrs	r3, r1, #16
 8000de8:	44bc      	add	ip, r7
 8000dea:	4463      	add	r3, ip
 8000dec:	4368      	muls	r0, r5
 8000dee:	429f      	cmp	r7, r3
 8000df0:	d903      	bls.n	8000dfa <__aeabi_ddiv+0x25e>
 8000df2:	2580      	movs	r5, #128	@ 0x80
 8000df4:	026d      	lsls	r5, r5, #9
 8000df6:	46ac      	mov	ip, r5
 8000df8:	4460      	add	r0, ip
 8000dfa:	0c1f      	lsrs	r7, r3, #16
 8000dfc:	0409      	lsls	r1, r1, #16
 8000dfe:	041b      	lsls	r3, r3, #16
 8000e00:	0c09      	lsrs	r1, r1, #16
 8000e02:	183f      	adds	r7, r7, r0
 8000e04:	185b      	adds	r3, r3, r1
 8000e06:	42bc      	cmp	r4, r7
 8000e08:	d200      	bcs.n	8000e0c <__aeabi_ddiv+0x270>
 8000e0a:	e102      	b.n	8001012 <__aeabi_ddiv+0x476>
 8000e0c:	d100      	bne.n	8000e10 <__aeabi_ddiv+0x274>
 8000e0e:	e0fd      	b.n	800100c <__aeabi_ddiv+0x470>
 8000e10:	2301      	movs	r3, #1
 8000e12:	431a      	orrs	r2, r3
 8000e14:	4b43      	ldr	r3, [pc, #268]	@ (8000f24 <__aeabi_ddiv+0x388>)
 8000e16:	4453      	add	r3, sl
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	dc00      	bgt.n	8000e1e <__aeabi_ddiv+0x282>
 8000e1c:	e0ae      	b.n	8000f7c <__aeabi_ddiv+0x3e0>
 8000e1e:	0751      	lsls	r1, r2, #29
 8000e20:	d000      	beq.n	8000e24 <__aeabi_ddiv+0x288>
 8000e22:	e198      	b.n	8001156 <__aeabi_ddiv+0x5ba>
 8000e24:	4659      	mov	r1, fp
 8000e26:	01c9      	lsls	r1, r1, #7
 8000e28:	d506      	bpl.n	8000e38 <__aeabi_ddiv+0x29c>
 8000e2a:	4659      	mov	r1, fp
 8000e2c:	4b3e      	ldr	r3, [pc, #248]	@ (8000f28 <__aeabi_ddiv+0x38c>)
 8000e2e:	4019      	ands	r1, r3
 8000e30:	2380      	movs	r3, #128	@ 0x80
 8000e32:	468b      	mov	fp, r1
 8000e34:	00db      	lsls	r3, r3, #3
 8000e36:	4453      	add	r3, sl
 8000e38:	493c      	ldr	r1, [pc, #240]	@ (8000f2c <__aeabi_ddiv+0x390>)
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	dd00      	ble.n	8000e40 <__aeabi_ddiv+0x2a4>
 8000e3e:	e71a      	b.n	8000c76 <__aeabi_ddiv+0xda>
 8000e40:	4659      	mov	r1, fp
 8000e42:	08d2      	lsrs	r2, r2, #3
 8000e44:	0749      	lsls	r1, r1, #29
 8000e46:	4311      	orrs	r1, r2
 8000e48:	465a      	mov	r2, fp
 8000e4a:	055b      	lsls	r3, r3, #21
 8000e4c:	0254      	lsls	r4, r2, #9
 8000e4e:	4688      	mov	r8, r1
 8000e50:	0b24      	lsrs	r4, r4, #12
 8000e52:	0d5b      	lsrs	r3, r3, #21
 8000e54:	e702      	b.n	8000c5c <__aeabi_ddiv+0xc0>
 8000e56:	465a      	mov	r2, fp
 8000e58:	9b00      	ldr	r3, [sp, #0]
 8000e5a:	431a      	orrs	r2, r3
 8000e5c:	d100      	bne.n	8000e60 <__aeabi_ddiv+0x2c4>
 8000e5e:	e07e      	b.n	8000f5e <__aeabi_ddiv+0x3c2>
 8000e60:	465b      	mov	r3, fp
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d100      	bne.n	8000e68 <__aeabi_ddiv+0x2cc>
 8000e66:	e100      	b.n	800106a <__aeabi_ddiv+0x4ce>
 8000e68:	4658      	mov	r0, fp
 8000e6a:	f001 fa97 	bl	800239c <__clzsi2>
 8000e6e:	0002      	movs	r2, r0
 8000e70:	0003      	movs	r3, r0
 8000e72:	3a0b      	subs	r2, #11
 8000e74:	271d      	movs	r7, #29
 8000e76:	9e00      	ldr	r6, [sp, #0]
 8000e78:	1aba      	subs	r2, r7, r2
 8000e7a:	0019      	movs	r1, r3
 8000e7c:	4658      	mov	r0, fp
 8000e7e:	40d6      	lsrs	r6, r2
 8000e80:	3908      	subs	r1, #8
 8000e82:	4088      	lsls	r0, r1
 8000e84:	0032      	movs	r2, r6
 8000e86:	4302      	orrs	r2, r0
 8000e88:	4693      	mov	fp, r2
 8000e8a:	9a00      	ldr	r2, [sp, #0]
 8000e8c:	408a      	lsls	r2, r1
 8000e8e:	4928      	ldr	r1, [pc, #160]	@ (8000f30 <__aeabi_ddiv+0x394>)
 8000e90:	4453      	add	r3, sl
 8000e92:	468a      	mov	sl, r1
 8000e94:	449a      	add	sl, r3
 8000e96:	2300      	movs	r3, #0
 8000e98:	e6c8      	b.n	8000c2c <__aeabi_ddiv+0x90>
 8000e9a:	465b      	mov	r3, fp
 8000e9c:	4303      	orrs	r3, r0
 8000e9e:	4699      	mov	r9, r3
 8000ea0:	d056      	beq.n	8000f50 <__aeabi_ddiv+0x3b4>
 8000ea2:	465b      	mov	r3, fp
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d100      	bne.n	8000eaa <__aeabi_ddiv+0x30e>
 8000ea8:	e0cd      	b.n	8001046 <__aeabi_ddiv+0x4aa>
 8000eaa:	4658      	mov	r0, fp
 8000eac:	f001 fa76 	bl	800239c <__clzsi2>
 8000eb0:	230b      	movs	r3, #11
 8000eb2:	425b      	negs	r3, r3
 8000eb4:	469c      	mov	ip, r3
 8000eb6:	0002      	movs	r2, r0
 8000eb8:	4484      	add	ip, r0
 8000eba:	4666      	mov	r6, ip
 8000ebc:	231d      	movs	r3, #29
 8000ebe:	1b9b      	subs	r3, r3, r6
 8000ec0:	0026      	movs	r6, r4
 8000ec2:	0011      	movs	r1, r2
 8000ec4:	4658      	mov	r0, fp
 8000ec6:	40de      	lsrs	r6, r3
 8000ec8:	3908      	subs	r1, #8
 8000eca:	4088      	lsls	r0, r1
 8000ecc:	0033      	movs	r3, r6
 8000ece:	4303      	orrs	r3, r0
 8000ed0:	4699      	mov	r9, r3
 8000ed2:	0023      	movs	r3, r4
 8000ed4:	408b      	lsls	r3, r1
 8000ed6:	4698      	mov	r8, r3
 8000ed8:	4b16      	ldr	r3, [pc, #88]	@ (8000f34 <__aeabi_ddiv+0x398>)
 8000eda:	2400      	movs	r4, #0
 8000edc:	1a9b      	subs	r3, r3, r2
 8000ede:	469a      	mov	sl, r3
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	9303      	str	r3, [sp, #12]
 8000ee4:	e682      	b.n	8000bec <__aeabi_ddiv+0x50>
 8000ee6:	465a      	mov	r2, fp
 8000ee8:	4302      	orrs	r2, r0
 8000eea:	4691      	mov	r9, r2
 8000eec:	d12a      	bne.n	8000f44 <__aeabi_ddiv+0x3a8>
 8000eee:	2200      	movs	r2, #0
 8000ef0:	469a      	mov	sl, r3
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	4690      	mov	r8, r2
 8000ef6:	2408      	movs	r4, #8
 8000ef8:	9303      	str	r3, [sp, #12]
 8000efa:	e677      	b.n	8000bec <__aeabi_ddiv+0x50>
 8000efc:	465a      	mov	r2, fp
 8000efe:	9b00      	ldr	r3, [sp, #0]
 8000f00:	431a      	orrs	r2, r3
 8000f02:	4b0d      	ldr	r3, [pc, #52]	@ (8000f38 <__aeabi_ddiv+0x39c>)
 8000f04:	469c      	mov	ip, r3
 8000f06:	44e2      	add	sl, ip
 8000f08:	2a00      	cmp	r2, #0
 8000f0a:	d117      	bne.n	8000f3c <__aeabi_ddiv+0x3a0>
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	431c      	orrs	r4, r3
 8000f10:	2300      	movs	r3, #0
 8000f12:	469b      	mov	fp, r3
 8000f14:	3302      	adds	r3, #2
 8000f16:	e689      	b.n	8000c2c <__aeabi_ddiv+0x90>
 8000f18:	000007ff 	.word	0x000007ff
 8000f1c:	fffffc01 	.word	0xfffffc01
 8000f20:	08007098 	.word	0x08007098
 8000f24:	000003ff 	.word	0x000003ff
 8000f28:	feffffff 	.word	0xfeffffff
 8000f2c:	000007fe 	.word	0x000007fe
 8000f30:	000003f3 	.word	0x000003f3
 8000f34:	fffffc0d 	.word	0xfffffc0d
 8000f38:	fffff801 	.word	0xfffff801
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	0032      	movs	r2, r6
 8000f40:	431c      	orrs	r4, r3
 8000f42:	e673      	b.n	8000c2c <__aeabi_ddiv+0x90>
 8000f44:	469a      	mov	sl, r3
 8000f46:	2303      	movs	r3, #3
 8000f48:	46d9      	mov	r9, fp
 8000f4a:	240c      	movs	r4, #12
 8000f4c:	9303      	str	r3, [sp, #12]
 8000f4e:	e64d      	b.n	8000bec <__aeabi_ddiv+0x50>
 8000f50:	2300      	movs	r3, #0
 8000f52:	4698      	mov	r8, r3
 8000f54:	469a      	mov	sl, r3
 8000f56:	3301      	adds	r3, #1
 8000f58:	2404      	movs	r4, #4
 8000f5a:	9303      	str	r3, [sp, #12]
 8000f5c:	e646      	b.n	8000bec <__aeabi_ddiv+0x50>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	431c      	orrs	r4, r3
 8000f62:	2300      	movs	r3, #0
 8000f64:	469b      	mov	fp, r3
 8000f66:	3301      	adds	r3, #1
 8000f68:	e660      	b.n	8000c2c <__aeabi_ddiv+0x90>
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	2480      	movs	r4, #128	@ 0x80
 8000f6e:	4698      	mov	r8, r3
 8000f70:	2600      	movs	r6, #0
 8000f72:	4b92      	ldr	r3, [pc, #584]	@ (80011bc <__aeabi_ddiv+0x620>)
 8000f74:	0324      	lsls	r4, r4, #12
 8000f76:	e671      	b.n	8000c5c <__aeabi_ddiv+0xc0>
 8000f78:	2201      	movs	r2, #1
 8000f7a:	4252      	negs	r2, r2
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	1ac9      	subs	r1, r1, r3
 8000f80:	2938      	cmp	r1, #56	@ 0x38
 8000f82:	dd00      	ble.n	8000f86 <__aeabi_ddiv+0x3ea>
 8000f84:	e666      	b.n	8000c54 <__aeabi_ddiv+0xb8>
 8000f86:	291f      	cmp	r1, #31
 8000f88:	dc00      	bgt.n	8000f8c <__aeabi_ddiv+0x3f0>
 8000f8a:	e0ab      	b.n	80010e4 <__aeabi_ddiv+0x548>
 8000f8c:	201f      	movs	r0, #31
 8000f8e:	4240      	negs	r0, r0
 8000f90:	1ac3      	subs	r3, r0, r3
 8000f92:	4658      	mov	r0, fp
 8000f94:	40d8      	lsrs	r0, r3
 8000f96:	0003      	movs	r3, r0
 8000f98:	2920      	cmp	r1, #32
 8000f9a:	d004      	beq.n	8000fa6 <__aeabi_ddiv+0x40a>
 8000f9c:	4658      	mov	r0, fp
 8000f9e:	4988      	ldr	r1, [pc, #544]	@ (80011c0 <__aeabi_ddiv+0x624>)
 8000fa0:	4451      	add	r1, sl
 8000fa2:	4088      	lsls	r0, r1
 8000fa4:	4302      	orrs	r2, r0
 8000fa6:	1e51      	subs	r1, r2, #1
 8000fa8:	418a      	sbcs	r2, r1
 8000faa:	431a      	orrs	r2, r3
 8000fac:	2307      	movs	r3, #7
 8000fae:	0019      	movs	r1, r3
 8000fb0:	2400      	movs	r4, #0
 8000fb2:	4011      	ands	r1, r2
 8000fb4:	4213      	tst	r3, r2
 8000fb6:	d00c      	beq.n	8000fd2 <__aeabi_ddiv+0x436>
 8000fb8:	230f      	movs	r3, #15
 8000fba:	4013      	ands	r3, r2
 8000fbc:	2b04      	cmp	r3, #4
 8000fbe:	d100      	bne.n	8000fc2 <__aeabi_ddiv+0x426>
 8000fc0:	e0f9      	b.n	80011b6 <__aeabi_ddiv+0x61a>
 8000fc2:	1d11      	adds	r1, r2, #4
 8000fc4:	4291      	cmp	r1, r2
 8000fc6:	419b      	sbcs	r3, r3
 8000fc8:	000a      	movs	r2, r1
 8000fca:	425b      	negs	r3, r3
 8000fcc:	0759      	lsls	r1, r3, #29
 8000fce:	025b      	lsls	r3, r3, #9
 8000fd0:	0b1c      	lsrs	r4, r3, #12
 8000fd2:	08d2      	lsrs	r2, r2, #3
 8000fd4:	430a      	orrs	r2, r1
 8000fd6:	4690      	mov	r8, r2
 8000fd8:	2300      	movs	r3, #0
 8000fda:	e63f      	b.n	8000c5c <__aeabi_ddiv+0xc0>
 8000fdc:	2480      	movs	r4, #128	@ 0x80
 8000fde:	464b      	mov	r3, r9
 8000fe0:	0324      	lsls	r4, r4, #12
 8000fe2:	4223      	tst	r3, r4
 8000fe4:	d009      	beq.n	8000ffa <__aeabi_ddiv+0x45e>
 8000fe6:	465b      	mov	r3, fp
 8000fe8:	4223      	tst	r3, r4
 8000fea:	d106      	bne.n	8000ffa <__aeabi_ddiv+0x45e>
 8000fec:	431c      	orrs	r4, r3
 8000fee:	0324      	lsls	r4, r4, #12
 8000ff0:	002e      	movs	r6, r5
 8000ff2:	4690      	mov	r8, r2
 8000ff4:	4b71      	ldr	r3, [pc, #452]	@ (80011bc <__aeabi_ddiv+0x620>)
 8000ff6:	0b24      	lsrs	r4, r4, #12
 8000ff8:	e630      	b.n	8000c5c <__aeabi_ddiv+0xc0>
 8000ffa:	2480      	movs	r4, #128	@ 0x80
 8000ffc:	464b      	mov	r3, r9
 8000ffe:	0324      	lsls	r4, r4, #12
 8001000:	431c      	orrs	r4, r3
 8001002:	0324      	lsls	r4, r4, #12
 8001004:	9e02      	ldr	r6, [sp, #8]
 8001006:	4b6d      	ldr	r3, [pc, #436]	@ (80011bc <__aeabi_ddiv+0x620>)
 8001008:	0b24      	lsrs	r4, r4, #12
 800100a:	e627      	b.n	8000c5c <__aeabi_ddiv+0xc0>
 800100c:	2b00      	cmp	r3, #0
 800100e:	d100      	bne.n	8001012 <__aeabi_ddiv+0x476>
 8001010:	e700      	b.n	8000e14 <__aeabi_ddiv+0x278>
 8001012:	9800      	ldr	r0, [sp, #0]
 8001014:	1e51      	subs	r1, r2, #1
 8001016:	4684      	mov	ip, r0
 8001018:	4464      	add	r4, ip
 800101a:	4284      	cmp	r4, r0
 800101c:	d200      	bcs.n	8001020 <__aeabi_ddiv+0x484>
 800101e:	e084      	b.n	800112a <__aeabi_ddiv+0x58e>
 8001020:	42bc      	cmp	r4, r7
 8001022:	d200      	bcs.n	8001026 <__aeabi_ddiv+0x48a>
 8001024:	e0ae      	b.n	8001184 <__aeabi_ddiv+0x5e8>
 8001026:	d100      	bne.n	800102a <__aeabi_ddiv+0x48e>
 8001028:	e0c1      	b.n	80011ae <__aeabi_ddiv+0x612>
 800102a:	000a      	movs	r2, r1
 800102c:	e6f0      	b.n	8000e10 <__aeabi_ddiv+0x274>
 800102e:	4542      	cmp	r2, r8
 8001030:	d900      	bls.n	8001034 <__aeabi_ddiv+0x498>
 8001032:	e62c      	b.n	8000c8e <__aeabi_ddiv+0xf2>
 8001034:	464b      	mov	r3, r9
 8001036:	07dc      	lsls	r4, r3, #31
 8001038:	0858      	lsrs	r0, r3, #1
 800103a:	4643      	mov	r3, r8
 800103c:	085b      	lsrs	r3, r3, #1
 800103e:	431c      	orrs	r4, r3
 8001040:	4643      	mov	r3, r8
 8001042:	07df      	lsls	r7, r3, #31
 8001044:	e62a      	b.n	8000c9c <__aeabi_ddiv+0x100>
 8001046:	f001 f9a9 	bl	800239c <__clzsi2>
 800104a:	2315      	movs	r3, #21
 800104c:	469c      	mov	ip, r3
 800104e:	4484      	add	ip, r0
 8001050:	0002      	movs	r2, r0
 8001052:	4663      	mov	r3, ip
 8001054:	3220      	adds	r2, #32
 8001056:	2b1c      	cmp	r3, #28
 8001058:	dc00      	bgt.n	800105c <__aeabi_ddiv+0x4c0>
 800105a:	e72e      	b.n	8000eba <__aeabi_ddiv+0x31e>
 800105c:	0023      	movs	r3, r4
 800105e:	3808      	subs	r0, #8
 8001060:	4083      	lsls	r3, r0
 8001062:	4699      	mov	r9, r3
 8001064:	2300      	movs	r3, #0
 8001066:	4698      	mov	r8, r3
 8001068:	e736      	b.n	8000ed8 <__aeabi_ddiv+0x33c>
 800106a:	f001 f997 	bl	800239c <__clzsi2>
 800106e:	0002      	movs	r2, r0
 8001070:	0003      	movs	r3, r0
 8001072:	3215      	adds	r2, #21
 8001074:	3320      	adds	r3, #32
 8001076:	2a1c      	cmp	r2, #28
 8001078:	dc00      	bgt.n	800107c <__aeabi_ddiv+0x4e0>
 800107a:	e6fb      	b.n	8000e74 <__aeabi_ddiv+0x2d8>
 800107c:	9900      	ldr	r1, [sp, #0]
 800107e:	3808      	subs	r0, #8
 8001080:	4081      	lsls	r1, r0
 8001082:	2200      	movs	r2, #0
 8001084:	468b      	mov	fp, r1
 8001086:	e702      	b.n	8000e8e <__aeabi_ddiv+0x2f2>
 8001088:	9900      	ldr	r1, [sp, #0]
 800108a:	3b01      	subs	r3, #1
 800108c:	468c      	mov	ip, r1
 800108e:	4464      	add	r4, ip
 8001090:	42a1      	cmp	r1, r4
 8001092:	d900      	bls.n	8001096 <__aeabi_ddiv+0x4fa>
 8001094:	e69a      	b.n	8000dcc <__aeabi_ddiv+0x230>
 8001096:	42a2      	cmp	r2, r4
 8001098:	d800      	bhi.n	800109c <__aeabi_ddiv+0x500>
 800109a:	e697      	b.n	8000dcc <__aeabi_ddiv+0x230>
 800109c:	1e83      	subs	r3, r0, #2
 800109e:	4464      	add	r4, ip
 80010a0:	e694      	b.n	8000dcc <__aeabi_ddiv+0x230>
 80010a2:	46ac      	mov	ip, r5
 80010a4:	4461      	add	r1, ip
 80010a6:	3f01      	subs	r7, #1
 80010a8:	428d      	cmp	r5, r1
 80010aa:	d900      	bls.n	80010ae <__aeabi_ddiv+0x512>
 80010ac:	e680      	b.n	8000db0 <__aeabi_ddiv+0x214>
 80010ae:	428a      	cmp	r2, r1
 80010b0:	d800      	bhi.n	80010b4 <__aeabi_ddiv+0x518>
 80010b2:	e67d      	b.n	8000db0 <__aeabi_ddiv+0x214>
 80010b4:	1e87      	subs	r7, r0, #2
 80010b6:	4461      	add	r1, ip
 80010b8:	e67a      	b.n	8000db0 <__aeabi_ddiv+0x214>
 80010ba:	4285      	cmp	r5, r0
 80010bc:	d000      	beq.n	80010c0 <__aeabi_ddiv+0x524>
 80010be:	e65f      	b.n	8000d80 <__aeabi_ddiv+0x1e4>
 80010c0:	45b9      	cmp	r9, r7
 80010c2:	d900      	bls.n	80010c6 <__aeabi_ddiv+0x52a>
 80010c4:	e65c      	b.n	8000d80 <__aeabi_ddiv+0x1e4>
 80010c6:	e656      	b.n	8000d76 <__aeabi_ddiv+0x1da>
 80010c8:	42a2      	cmp	r2, r4
 80010ca:	d800      	bhi.n	80010ce <__aeabi_ddiv+0x532>
 80010cc:	e61a      	b.n	8000d04 <__aeabi_ddiv+0x168>
 80010ce:	1e83      	subs	r3, r0, #2
 80010d0:	4464      	add	r4, ip
 80010d2:	e617      	b.n	8000d04 <__aeabi_ddiv+0x168>
 80010d4:	428a      	cmp	r2, r1
 80010d6:	d800      	bhi.n	80010da <__aeabi_ddiv+0x53e>
 80010d8:	e600      	b.n	8000cdc <__aeabi_ddiv+0x140>
 80010da:	46ac      	mov	ip, r5
 80010dc:	1e83      	subs	r3, r0, #2
 80010de:	4698      	mov	r8, r3
 80010e0:	4461      	add	r1, ip
 80010e2:	e5fb      	b.n	8000cdc <__aeabi_ddiv+0x140>
 80010e4:	4837      	ldr	r0, [pc, #220]	@ (80011c4 <__aeabi_ddiv+0x628>)
 80010e6:	0014      	movs	r4, r2
 80010e8:	4450      	add	r0, sl
 80010ea:	4082      	lsls	r2, r0
 80010ec:	465b      	mov	r3, fp
 80010ee:	0017      	movs	r7, r2
 80010f0:	4083      	lsls	r3, r0
 80010f2:	40cc      	lsrs	r4, r1
 80010f4:	1e7a      	subs	r2, r7, #1
 80010f6:	4197      	sbcs	r7, r2
 80010f8:	4323      	orrs	r3, r4
 80010fa:	433b      	orrs	r3, r7
 80010fc:	001a      	movs	r2, r3
 80010fe:	465b      	mov	r3, fp
 8001100:	40cb      	lsrs	r3, r1
 8001102:	0751      	lsls	r1, r2, #29
 8001104:	d009      	beq.n	800111a <__aeabi_ddiv+0x57e>
 8001106:	210f      	movs	r1, #15
 8001108:	4011      	ands	r1, r2
 800110a:	2904      	cmp	r1, #4
 800110c:	d005      	beq.n	800111a <__aeabi_ddiv+0x57e>
 800110e:	1d11      	adds	r1, r2, #4
 8001110:	4291      	cmp	r1, r2
 8001112:	4192      	sbcs	r2, r2
 8001114:	4252      	negs	r2, r2
 8001116:	189b      	adds	r3, r3, r2
 8001118:	000a      	movs	r2, r1
 800111a:	0219      	lsls	r1, r3, #8
 800111c:	d400      	bmi.n	8001120 <__aeabi_ddiv+0x584>
 800111e:	e755      	b.n	8000fcc <__aeabi_ddiv+0x430>
 8001120:	2200      	movs	r2, #0
 8001122:	2301      	movs	r3, #1
 8001124:	2400      	movs	r4, #0
 8001126:	4690      	mov	r8, r2
 8001128:	e598      	b.n	8000c5c <__aeabi_ddiv+0xc0>
 800112a:	000a      	movs	r2, r1
 800112c:	42bc      	cmp	r4, r7
 800112e:	d000      	beq.n	8001132 <__aeabi_ddiv+0x596>
 8001130:	e66e      	b.n	8000e10 <__aeabi_ddiv+0x274>
 8001132:	454b      	cmp	r3, r9
 8001134:	d000      	beq.n	8001138 <__aeabi_ddiv+0x59c>
 8001136:	e66b      	b.n	8000e10 <__aeabi_ddiv+0x274>
 8001138:	e66c      	b.n	8000e14 <__aeabi_ddiv+0x278>
 800113a:	4b23      	ldr	r3, [pc, #140]	@ (80011c8 <__aeabi_ddiv+0x62c>)
 800113c:	4a23      	ldr	r2, [pc, #140]	@ (80011cc <__aeabi_ddiv+0x630>)
 800113e:	4453      	add	r3, sl
 8001140:	4592      	cmp	sl, r2
 8001142:	da00      	bge.n	8001146 <__aeabi_ddiv+0x5aa>
 8001144:	e718      	b.n	8000f78 <__aeabi_ddiv+0x3dc>
 8001146:	2101      	movs	r1, #1
 8001148:	4249      	negs	r1, r1
 800114a:	1d0a      	adds	r2, r1, #4
 800114c:	428a      	cmp	r2, r1
 800114e:	4189      	sbcs	r1, r1
 8001150:	4249      	negs	r1, r1
 8001152:	448b      	add	fp, r1
 8001154:	e666      	b.n	8000e24 <__aeabi_ddiv+0x288>
 8001156:	210f      	movs	r1, #15
 8001158:	4011      	ands	r1, r2
 800115a:	2904      	cmp	r1, #4
 800115c:	d100      	bne.n	8001160 <__aeabi_ddiv+0x5c4>
 800115e:	e661      	b.n	8000e24 <__aeabi_ddiv+0x288>
 8001160:	0011      	movs	r1, r2
 8001162:	e7f2      	b.n	800114a <__aeabi_ddiv+0x5ae>
 8001164:	42bc      	cmp	r4, r7
 8001166:	d800      	bhi.n	800116a <__aeabi_ddiv+0x5ce>
 8001168:	e60a      	b.n	8000d80 <__aeabi_ddiv+0x1e4>
 800116a:	2302      	movs	r3, #2
 800116c:	425b      	negs	r3, r3
 800116e:	469c      	mov	ip, r3
 8001170:	9900      	ldr	r1, [sp, #0]
 8001172:	444f      	add	r7, r9
 8001174:	454f      	cmp	r7, r9
 8001176:	419b      	sbcs	r3, r3
 8001178:	44e3      	add	fp, ip
 800117a:	468c      	mov	ip, r1
 800117c:	425b      	negs	r3, r3
 800117e:	4463      	add	r3, ip
 8001180:	18c0      	adds	r0, r0, r3
 8001182:	e5ff      	b.n	8000d84 <__aeabi_ddiv+0x1e8>
 8001184:	4649      	mov	r1, r9
 8001186:	9d00      	ldr	r5, [sp, #0]
 8001188:	0048      	lsls	r0, r1, #1
 800118a:	4548      	cmp	r0, r9
 800118c:	4189      	sbcs	r1, r1
 800118e:	46ac      	mov	ip, r5
 8001190:	4249      	negs	r1, r1
 8001192:	4461      	add	r1, ip
 8001194:	4681      	mov	r9, r0
 8001196:	3a02      	subs	r2, #2
 8001198:	1864      	adds	r4, r4, r1
 800119a:	e7c7      	b.n	800112c <__aeabi_ddiv+0x590>
 800119c:	2480      	movs	r4, #128	@ 0x80
 800119e:	465b      	mov	r3, fp
 80011a0:	0324      	lsls	r4, r4, #12
 80011a2:	431c      	orrs	r4, r3
 80011a4:	0324      	lsls	r4, r4, #12
 80011a6:	4690      	mov	r8, r2
 80011a8:	4b04      	ldr	r3, [pc, #16]	@ (80011bc <__aeabi_ddiv+0x620>)
 80011aa:	0b24      	lsrs	r4, r4, #12
 80011ac:	e556      	b.n	8000c5c <__aeabi_ddiv+0xc0>
 80011ae:	4599      	cmp	r9, r3
 80011b0:	d3e8      	bcc.n	8001184 <__aeabi_ddiv+0x5e8>
 80011b2:	000a      	movs	r2, r1
 80011b4:	e7bd      	b.n	8001132 <__aeabi_ddiv+0x596>
 80011b6:	2300      	movs	r3, #0
 80011b8:	e708      	b.n	8000fcc <__aeabi_ddiv+0x430>
 80011ba:	46c0      	nop			@ (mov r8, r8)
 80011bc:	000007ff 	.word	0x000007ff
 80011c0:	0000043e 	.word	0x0000043e
 80011c4:	0000041e 	.word	0x0000041e
 80011c8:	000003ff 	.word	0x000003ff
 80011cc:	fffffc02 	.word	0xfffffc02

080011d0 <__eqdf2>:
 80011d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011d2:	4657      	mov	r7, sl
 80011d4:	46de      	mov	lr, fp
 80011d6:	464e      	mov	r6, r9
 80011d8:	4645      	mov	r5, r8
 80011da:	b5e0      	push	{r5, r6, r7, lr}
 80011dc:	000d      	movs	r5, r1
 80011de:	0004      	movs	r4, r0
 80011e0:	0fe8      	lsrs	r0, r5, #31
 80011e2:	4683      	mov	fp, r0
 80011e4:	0309      	lsls	r1, r1, #12
 80011e6:	0fd8      	lsrs	r0, r3, #31
 80011e8:	0b09      	lsrs	r1, r1, #12
 80011ea:	4682      	mov	sl, r0
 80011ec:	4819      	ldr	r0, [pc, #100]	@ (8001254 <__eqdf2+0x84>)
 80011ee:	468c      	mov	ip, r1
 80011f0:	031f      	lsls	r7, r3, #12
 80011f2:	0069      	lsls	r1, r5, #1
 80011f4:	005e      	lsls	r6, r3, #1
 80011f6:	0d49      	lsrs	r1, r1, #21
 80011f8:	0b3f      	lsrs	r7, r7, #12
 80011fa:	0d76      	lsrs	r6, r6, #21
 80011fc:	4281      	cmp	r1, r0
 80011fe:	d018      	beq.n	8001232 <__eqdf2+0x62>
 8001200:	4286      	cmp	r6, r0
 8001202:	d00f      	beq.n	8001224 <__eqdf2+0x54>
 8001204:	2001      	movs	r0, #1
 8001206:	42b1      	cmp	r1, r6
 8001208:	d10d      	bne.n	8001226 <__eqdf2+0x56>
 800120a:	45bc      	cmp	ip, r7
 800120c:	d10b      	bne.n	8001226 <__eqdf2+0x56>
 800120e:	4294      	cmp	r4, r2
 8001210:	d109      	bne.n	8001226 <__eqdf2+0x56>
 8001212:	45d3      	cmp	fp, sl
 8001214:	d01c      	beq.n	8001250 <__eqdf2+0x80>
 8001216:	2900      	cmp	r1, #0
 8001218:	d105      	bne.n	8001226 <__eqdf2+0x56>
 800121a:	4660      	mov	r0, ip
 800121c:	4320      	orrs	r0, r4
 800121e:	1e43      	subs	r3, r0, #1
 8001220:	4198      	sbcs	r0, r3
 8001222:	e000      	b.n	8001226 <__eqdf2+0x56>
 8001224:	2001      	movs	r0, #1
 8001226:	bcf0      	pop	{r4, r5, r6, r7}
 8001228:	46bb      	mov	fp, r7
 800122a:	46b2      	mov	sl, r6
 800122c:	46a9      	mov	r9, r5
 800122e:	46a0      	mov	r8, r4
 8001230:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001232:	2001      	movs	r0, #1
 8001234:	428e      	cmp	r6, r1
 8001236:	d1f6      	bne.n	8001226 <__eqdf2+0x56>
 8001238:	4661      	mov	r1, ip
 800123a:	4339      	orrs	r1, r7
 800123c:	000f      	movs	r7, r1
 800123e:	4317      	orrs	r7, r2
 8001240:	4327      	orrs	r7, r4
 8001242:	d1f0      	bne.n	8001226 <__eqdf2+0x56>
 8001244:	465b      	mov	r3, fp
 8001246:	4652      	mov	r2, sl
 8001248:	1a98      	subs	r0, r3, r2
 800124a:	1e43      	subs	r3, r0, #1
 800124c:	4198      	sbcs	r0, r3
 800124e:	e7ea      	b.n	8001226 <__eqdf2+0x56>
 8001250:	2000      	movs	r0, #0
 8001252:	e7e8      	b.n	8001226 <__eqdf2+0x56>
 8001254:	000007ff 	.word	0x000007ff

08001258 <__gedf2>:
 8001258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800125a:	4657      	mov	r7, sl
 800125c:	464e      	mov	r6, r9
 800125e:	4645      	mov	r5, r8
 8001260:	46de      	mov	lr, fp
 8001262:	b5e0      	push	{r5, r6, r7, lr}
 8001264:	000d      	movs	r5, r1
 8001266:	030f      	lsls	r7, r1, #12
 8001268:	0b39      	lsrs	r1, r7, #12
 800126a:	b083      	sub	sp, #12
 800126c:	0004      	movs	r4, r0
 800126e:	4680      	mov	r8, r0
 8001270:	9101      	str	r1, [sp, #4]
 8001272:	0058      	lsls	r0, r3, #1
 8001274:	0fe9      	lsrs	r1, r5, #31
 8001276:	4f31      	ldr	r7, [pc, #196]	@ (800133c <__gedf2+0xe4>)
 8001278:	0d40      	lsrs	r0, r0, #21
 800127a:	468c      	mov	ip, r1
 800127c:	006e      	lsls	r6, r5, #1
 800127e:	0319      	lsls	r1, r3, #12
 8001280:	4682      	mov	sl, r0
 8001282:	4691      	mov	r9, r2
 8001284:	0d76      	lsrs	r6, r6, #21
 8001286:	0b09      	lsrs	r1, r1, #12
 8001288:	0fd8      	lsrs	r0, r3, #31
 800128a:	42be      	cmp	r6, r7
 800128c:	d01f      	beq.n	80012ce <__gedf2+0x76>
 800128e:	45ba      	cmp	sl, r7
 8001290:	d00f      	beq.n	80012b2 <__gedf2+0x5a>
 8001292:	2e00      	cmp	r6, #0
 8001294:	d12f      	bne.n	80012f6 <__gedf2+0x9e>
 8001296:	4655      	mov	r5, sl
 8001298:	9e01      	ldr	r6, [sp, #4]
 800129a:	4334      	orrs	r4, r6
 800129c:	2d00      	cmp	r5, #0
 800129e:	d127      	bne.n	80012f0 <__gedf2+0x98>
 80012a0:	430a      	orrs	r2, r1
 80012a2:	d03a      	beq.n	800131a <__gedf2+0xc2>
 80012a4:	2c00      	cmp	r4, #0
 80012a6:	d145      	bne.n	8001334 <__gedf2+0xdc>
 80012a8:	2800      	cmp	r0, #0
 80012aa:	d11a      	bne.n	80012e2 <__gedf2+0x8a>
 80012ac:	2001      	movs	r0, #1
 80012ae:	4240      	negs	r0, r0
 80012b0:	e017      	b.n	80012e2 <__gedf2+0x8a>
 80012b2:	4311      	orrs	r1, r2
 80012b4:	d13b      	bne.n	800132e <__gedf2+0xd6>
 80012b6:	2e00      	cmp	r6, #0
 80012b8:	d102      	bne.n	80012c0 <__gedf2+0x68>
 80012ba:	9f01      	ldr	r7, [sp, #4]
 80012bc:	4327      	orrs	r7, r4
 80012be:	d0f3      	beq.n	80012a8 <__gedf2+0x50>
 80012c0:	4584      	cmp	ip, r0
 80012c2:	d109      	bne.n	80012d8 <__gedf2+0x80>
 80012c4:	4663      	mov	r3, ip
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d0f0      	beq.n	80012ac <__gedf2+0x54>
 80012ca:	4660      	mov	r0, ip
 80012cc:	e009      	b.n	80012e2 <__gedf2+0x8a>
 80012ce:	9f01      	ldr	r7, [sp, #4]
 80012d0:	4327      	orrs	r7, r4
 80012d2:	d12c      	bne.n	800132e <__gedf2+0xd6>
 80012d4:	45b2      	cmp	sl, r6
 80012d6:	d024      	beq.n	8001322 <__gedf2+0xca>
 80012d8:	4663      	mov	r3, ip
 80012da:	2002      	movs	r0, #2
 80012dc:	3b01      	subs	r3, #1
 80012de:	4018      	ands	r0, r3
 80012e0:	3801      	subs	r0, #1
 80012e2:	b003      	add	sp, #12
 80012e4:	bcf0      	pop	{r4, r5, r6, r7}
 80012e6:	46bb      	mov	fp, r7
 80012e8:	46b2      	mov	sl, r6
 80012ea:	46a9      	mov	r9, r5
 80012ec:	46a0      	mov	r8, r4
 80012ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012f0:	2c00      	cmp	r4, #0
 80012f2:	d0d9      	beq.n	80012a8 <__gedf2+0x50>
 80012f4:	e7e4      	b.n	80012c0 <__gedf2+0x68>
 80012f6:	4654      	mov	r4, sl
 80012f8:	2c00      	cmp	r4, #0
 80012fa:	d0ed      	beq.n	80012d8 <__gedf2+0x80>
 80012fc:	4584      	cmp	ip, r0
 80012fe:	d1eb      	bne.n	80012d8 <__gedf2+0x80>
 8001300:	4556      	cmp	r6, sl
 8001302:	dce9      	bgt.n	80012d8 <__gedf2+0x80>
 8001304:	dbde      	blt.n	80012c4 <__gedf2+0x6c>
 8001306:	9b01      	ldr	r3, [sp, #4]
 8001308:	428b      	cmp	r3, r1
 800130a:	d8e5      	bhi.n	80012d8 <__gedf2+0x80>
 800130c:	d1da      	bne.n	80012c4 <__gedf2+0x6c>
 800130e:	45c8      	cmp	r8, r9
 8001310:	d8e2      	bhi.n	80012d8 <__gedf2+0x80>
 8001312:	2000      	movs	r0, #0
 8001314:	45c8      	cmp	r8, r9
 8001316:	d2e4      	bcs.n	80012e2 <__gedf2+0x8a>
 8001318:	e7d4      	b.n	80012c4 <__gedf2+0x6c>
 800131a:	2000      	movs	r0, #0
 800131c:	2c00      	cmp	r4, #0
 800131e:	d0e0      	beq.n	80012e2 <__gedf2+0x8a>
 8001320:	e7da      	b.n	80012d8 <__gedf2+0x80>
 8001322:	4311      	orrs	r1, r2
 8001324:	d103      	bne.n	800132e <__gedf2+0xd6>
 8001326:	4584      	cmp	ip, r0
 8001328:	d1d6      	bne.n	80012d8 <__gedf2+0x80>
 800132a:	2000      	movs	r0, #0
 800132c:	e7d9      	b.n	80012e2 <__gedf2+0x8a>
 800132e:	2002      	movs	r0, #2
 8001330:	4240      	negs	r0, r0
 8001332:	e7d6      	b.n	80012e2 <__gedf2+0x8a>
 8001334:	4584      	cmp	ip, r0
 8001336:	d0e6      	beq.n	8001306 <__gedf2+0xae>
 8001338:	e7ce      	b.n	80012d8 <__gedf2+0x80>
 800133a:	46c0      	nop			@ (mov r8, r8)
 800133c:	000007ff 	.word	0x000007ff

08001340 <__ledf2>:
 8001340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001342:	4657      	mov	r7, sl
 8001344:	464e      	mov	r6, r9
 8001346:	4645      	mov	r5, r8
 8001348:	46de      	mov	lr, fp
 800134a:	b5e0      	push	{r5, r6, r7, lr}
 800134c:	000d      	movs	r5, r1
 800134e:	030f      	lsls	r7, r1, #12
 8001350:	0004      	movs	r4, r0
 8001352:	4680      	mov	r8, r0
 8001354:	0fe8      	lsrs	r0, r5, #31
 8001356:	0b39      	lsrs	r1, r7, #12
 8001358:	4684      	mov	ip, r0
 800135a:	b083      	sub	sp, #12
 800135c:	0058      	lsls	r0, r3, #1
 800135e:	4f30      	ldr	r7, [pc, #192]	@ (8001420 <__ledf2+0xe0>)
 8001360:	0d40      	lsrs	r0, r0, #21
 8001362:	9101      	str	r1, [sp, #4]
 8001364:	031e      	lsls	r6, r3, #12
 8001366:	0069      	lsls	r1, r5, #1
 8001368:	4682      	mov	sl, r0
 800136a:	4691      	mov	r9, r2
 800136c:	0d49      	lsrs	r1, r1, #21
 800136e:	0b36      	lsrs	r6, r6, #12
 8001370:	0fd8      	lsrs	r0, r3, #31
 8001372:	42b9      	cmp	r1, r7
 8001374:	d020      	beq.n	80013b8 <__ledf2+0x78>
 8001376:	45ba      	cmp	sl, r7
 8001378:	d00f      	beq.n	800139a <__ledf2+0x5a>
 800137a:	2900      	cmp	r1, #0
 800137c:	d12b      	bne.n	80013d6 <__ledf2+0x96>
 800137e:	9901      	ldr	r1, [sp, #4]
 8001380:	430c      	orrs	r4, r1
 8001382:	4651      	mov	r1, sl
 8001384:	2900      	cmp	r1, #0
 8001386:	d137      	bne.n	80013f8 <__ledf2+0xb8>
 8001388:	4332      	orrs	r2, r6
 800138a:	d038      	beq.n	80013fe <__ledf2+0xbe>
 800138c:	2c00      	cmp	r4, #0
 800138e:	d144      	bne.n	800141a <__ledf2+0xda>
 8001390:	2800      	cmp	r0, #0
 8001392:	d119      	bne.n	80013c8 <__ledf2+0x88>
 8001394:	2001      	movs	r0, #1
 8001396:	4240      	negs	r0, r0
 8001398:	e016      	b.n	80013c8 <__ledf2+0x88>
 800139a:	4316      	orrs	r6, r2
 800139c:	d113      	bne.n	80013c6 <__ledf2+0x86>
 800139e:	2900      	cmp	r1, #0
 80013a0:	d102      	bne.n	80013a8 <__ledf2+0x68>
 80013a2:	9f01      	ldr	r7, [sp, #4]
 80013a4:	4327      	orrs	r7, r4
 80013a6:	d0f3      	beq.n	8001390 <__ledf2+0x50>
 80013a8:	4584      	cmp	ip, r0
 80013aa:	d020      	beq.n	80013ee <__ledf2+0xae>
 80013ac:	4663      	mov	r3, ip
 80013ae:	2002      	movs	r0, #2
 80013b0:	3b01      	subs	r3, #1
 80013b2:	4018      	ands	r0, r3
 80013b4:	3801      	subs	r0, #1
 80013b6:	e007      	b.n	80013c8 <__ledf2+0x88>
 80013b8:	9f01      	ldr	r7, [sp, #4]
 80013ba:	4327      	orrs	r7, r4
 80013bc:	d103      	bne.n	80013c6 <__ledf2+0x86>
 80013be:	458a      	cmp	sl, r1
 80013c0:	d1f4      	bne.n	80013ac <__ledf2+0x6c>
 80013c2:	4316      	orrs	r6, r2
 80013c4:	d01f      	beq.n	8001406 <__ledf2+0xc6>
 80013c6:	2002      	movs	r0, #2
 80013c8:	b003      	add	sp, #12
 80013ca:	bcf0      	pop	{r4, r5, r6, r7}
 80013cc:	46bb      	mov	fp, r7
 80013ce:	46b2      	mov	sl, r6
 80013d0:	46a9      	mov	r9, r5
 80013d2:	46a0      	mov	r8, r4
 80013d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013d6:	4654      	mov	r4, sl
 80013d8:	2c00      	cmp	r4, #0
 80013da:	d0e7      	beq.n	80013ac <__ledf2+0x6c>
 80013dc:	4584      	cmp	ip, r0
 80013de:	d1e5      	bne.n	80013ac <__ledf2+0x6c>
 80013e0:	4551      	cmp	r1, sl
 80013e2:	dce3      	bgt.n	80013ac <__ledf2+0x6c>
 80013e4:	db03      	blt.n	80013ee <__ledf2+0xae>
 80013e6:	9b01      	ldr	r3, [sp, #4]
 80013e8:	42b3      	cmp	r3, r6
 80013ea:	d8df      	bhi.n	80013ac <__ledf2+0x6c>
 80013ec:	d00f      	beq.n	800140e <__ledf2+0xce>
 80013ee:	4663      	mov	r3, ip
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d0cf      	beq.n	8001394 <__ledf2+0x54>
 80013f4:	4660      	mov	r0, ip
 80013f6:	e7e7      	b.n	80013c8 <__ledf2+0x88>
 80013f8:	2c00      	cmp	r4, #0
 80013fa:	d0c9      	beq.n	8001390 <__ledf2+0x50>
 80013fc:	e7d4      	b.n	80013a8 <__ledf2+0x68>
 80013fe:	2000      	movs	r0, #0
 8001400:	2c00      	cmp	r4, #0
 8001402:	d0e1      	beq.n	80013c8 <__ledf2+0x88>
 8001404:	e7d2      	b.n	80013ac <__ledf2+0x6c>
 8001406:	4584      	cmp	ip, r0
 8001408:	d1d0      	bne.n	80013ac <__ledf2+0x6c>
 800140a:	2000      	movs	r0, #0
 800140c:	e7dc      	b.n	80013c8 <__ledf2+0x88>
 800140e:	45c8      	cmp	r8, r9
 8001410:	d8cc      	bhi.n	80013ac <__ledf2+0x6c>
 8001412:	2000      	movs	r0, #0
 8001414:	45c8      	cmp	r8, r9
 8001416:	d2d7      	bcs.n	80013c8 <__ledf2+0x88>
 8001418:	e7e9      	b.n	80013ee <__ledf2+0xae>
 800141a:	4584      	cmp	ip, r0
 800141c:	d0e3      	beq.n	80013e6 <__ledf2+0xa6>
 800141e:	e7c5      	b.n	80013ac <__ledf2+0x6c>
 8001420:	000007ff 	.word	0x000007ff

08001424 <__aeabi_dmul>:
 8001424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001426:	4657      	mov	r7, sl
 8001428:	46de      	mov	lr, fp
 800142a:	464e      	mov	r6, r9
 800142c:	4645      	mov	r5, r8
 800142e:	b5e0      	push	{r5, r6, r7, lr}
 8001430:	001f      	movs	r7, r3
 8001432:	030b      	lsls	r3, r1, #12
 8001434:	0b1b      	lsrs	r3, r3, #12
 8001436:	0016      	movs	r6, r2
 8001438:	469a      	mov	sl, r3
 800143a:	0fca      	lsrs	r2, r1, #31
 800143c:	004b      	lsls	r3, r1, #1
 800143e:	0004      	movs	r4, r0
 8001440:	4693      	mov	fp, r2
 8001442:	b087      	sub	sp, #28
 8001444:	0d5b      	lsrs	r3, r3, #21
 8001446:	d100      	bne.n	800144a <__aeabi_dmul+0x26>
 8001448:	e0d5      	b.n	80015f6 <__aeabi_dmul+0x1d2>
 800144a:	4abb      	ldr	r2, [pc, #748]	@ (8001738 <__aeabi_dmul+0x314>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d100      	bne.n	8001452 <__aeabi_dmul+0x2e>
 8001450:	e0f8      	b.n	8001644 <__aeabi_dmul+0x220>
 8001452:	4651      	mov	r1, sl
 8001454:	0f42      	lsrs	r2, r0, #29
 8001456:	00c9      	lsls	r1, r1, #3
 8001458:	430a      	orrs	r2, r1
 800145a:	2180      	movs	r1, #128	@ 0x80
 800145c:	0409      	lsls	r1, r1, #16
 800145e:	4311      	orrs	r1, r2
 8001460:	00c2      	lsls	r2, r0, #3
 8001462:	4691      	mov	r9, r2
 8001464:	4ab5      	ldr	r2, [pc, #724]	@ (800173c <__aeabi_dmul+0x318>)
 8001466:	468a      	mov	sl, r1
 8001468:	189d      	adds	r5, r3, r2
 800146a:	2300      	movs	r3, #0
 800146c:	4698      	mov	r8, r3
 800146e:	9302      	str	r3, [sp, #8]
 8001470:	033c      	lsls	r4, r7, #12
 8001472:	007b      	lsls	r3, r7, #1
 8001474:	0ffa      	lsrs	r2, r7, #31
 8001476:	0030      	movs	r0, r6
 8001478:	0b24      	lsrs	r4, r4, #12
 800147a:	0d5b      	lsrs	r3, r3, #21
 800147c:	9200      	str	r2, [sp, #0]
 800147e:	d100      	bne.n	8001482 <__aeabi_dmul+0x5e>
 8001480:	e096      	b.n	80015b0 <__aeabi_dmul+0x18c>
 8001482:	4aad      	ldr	r2, [pc, #692]	@ (8001738 <__aeabi_dmul+0x314>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d031      	beq.n	80014ec <__aeabi_dmul+0xc8>
 8001488:	0f72      	lsrs	r2, r6, #29
 800148a:	00e4      	lsls	r4, r4, #3
 800148c:	4322      	orrs	r2, r4
 800148e:	2480      	movs	r4, #128	@ 0x80
 8001490:	0424      	lsls	r4, r4, #16
 8001492:	4314      	orrs	r4, r2
 8001494:	4aa9      	ldr	r2, [pc, #676]	@ (800173c <__aeabi_dmul+0x318>)
 8001496:	00f0      	lsls	r0, r6, #3
 8001498:	4694      	mov	ip, r2
 800149a:	4463      	add	r3, ip
 800149c:	195b      	adds	r3, r3, r5
 800149e:	1c5a      	adds	r2, r3, #1
 80014a0:	9201      	str	r2, [sp, #4]
 80014a2:	4642      	mov	r2, r8
 80014a4:	2600      	movs	r6, #0
 80014a6:	2a0a      	cmp	r2, #10
 80014a8:	dc42      	bgt.n	8001530 <__aeabi_dmul+0x10c>
 80014aa:	465a      	mov	r2, fp
 80014ac:	9900      	ldr	r1, [sp, #0]
 80014ae:	404a      	eors	r2, r1
 80014b0:	4693      	mov	fp, r2
 80014b2:	4642      	mov	r2, r8
 80014b4:	2a02      	cmp	r2, #2
 80014b6:	dc32      	bgt.n	800151e <__aeabi_dmul+0xfa>
 80014b8:	3a01      	subs	r2, #1
 80014ba:	2a01      	cmp	r2, #1
 80014bc:	d900      	bls.n	80014c0 <__aeabi_dmul+0x9c>
 80014be:	e149      	b.n	8001754 <__aeabi_dmul+0x330>
 80014c0:	2e02      	cmp	r6, #2
 80014c2:	d100      	bne.n	80014c6 <__aeabi_dmul+0xa2>
 80014c4:	e0ca      	b.n	800165c <__aeabi_dmul+0x238>
 80014c6:	2e01      	cmp	r6, #1
 80014c8:	d13d      	bne.n	8001546 <__aeabi_dmul+0x122>
 80014ca:	2300      	movs	r3, #0
 80014cc:	2400      	movs	r4, #0
 80014ce:	2200      	movs	r2, #0
 80014d0:	0010      	movs	r0, r2
 80014d2:	465a      	mov	r2, fp
 80014d4:	051b      	lsls	r3, r3, #20
 80014d6:	4323      	orrs	r3, r4
 80014d8:	07d2      	lsls	r2, r2, #31
 80014da:	4313      	orrs	r3, r2
 80014dc:	0019      	movs	r1, r3
 80014de:	b007      	add	sp, #28
 80014e0:	bcf0      	pop	{r4, r5, r6, r7}
 80014e2:	46bb      	mov	fp, r7
 80014e4:	46b2      	mov	sl, r6
 80014e6:	46a9      	mov	r9, r5
 80014e8:	46a0      	mov	r8, r4
 80014ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ec:	4b92      	ldr	r3, [pc, #584]	@ (8001738 <__aeabi_dmul+0x314>)
 80014ee:	4326      	orrs	r6, r4
 80014f0:	18eb      	adds	r3, r5, r3
 80014f2:	2e00      	cmp	r6, #0
 80014f4:	d100      	bne.n	80014f8 <__aeabi_dmul+0xd4>
 80014f6:	e0bb      	b.n	8001670 <__aeabi_dmul+0x24c>
 80014f8:	2203      	movs	r2, #3
 80014fa:	4641      	mov	r1, r8
 80014fc:	4311      	orrs	r1, r2
 80014fe:	465a      	mov	r2, fp
 8001500:	4688      	mov	r8, r1
 8001502:	9900      	ldr	r1, [sp, #0]
 8001504:	404a      	eors	r2, r1
 8001506:	2180      	movs	r1, #128	@ 0x80
 8001508:	0109      	lsls	r1, r1, #4
 800150a:	468c      	mov	ip, r1
 800150c:	0029      	movs	r1, r5
 800150e:	4461      	add	r1, ip
 8001510:	9101      	str	r1, [sp, #4]
 8001512:	4641      	mov	r1, r8
 8001514:	290a      	cmp	r1, #10
 8001516:	dd00      	ble.n	800151a <__aeabi_dmul+0xf6>
 8001518:	e233      	b.n	8001982 <__aeabi_dmul+0x55e>
 800151a:	4693      	mov	fp, r2
 800151c:	2603      	movs	r6, #3
 800151e:	4642      	mov	r2, r8
 8001520:	2701      	movs	r7, #1
 8001522:	4097      	lsls	r7, r2
 8001524:	21a6      	movs	r1, #166	@ 0xa6
 8001526:	003a      	movs	r2, r7
 8001528:	00c9      	lsls	r1, r1, #3
 800152a:	400a      	ands	r2, r1
 800152c:	420f      	tst	r7, r1
 800152e:	d031      	beq.n	8001594 <__aeabi_dmul+0x170>
 8001530:	9e02      	ldr	r6, [sp, #8]
 8001532:	2e02      	cmp	r6, #2
 8001534:	d100      	bne.n	8001538 <__aeabi_dmul+0x114>
 8001536:	e235      	b.n	80019a4 <__aeabi_dmul+0x580>
 8001538:	2e03      	cmp	r6, #3
 800153a:	d100      	bne.n	800153e <__aeabi_dmul+0x11a>
 800153c:	e1d2      	b.n	80018e4 <__aeabi_dmul+0x4c0>
 800153e:	4654      	mov	r4, sl
 8001540:	4648      	mov	r0, r9
 8001542:	2e01      	cmp	r6, #1
 8001544:	d0c1      	beq.n	80014ca <__aeabi_dmul+0xa6>
 8001546:	9a01      	ldr	r2, [sp, #4]
 8001548:	4b7d      	ldr	r3, [pc, #500]	@ (8001740 <__aeabi_dmul+0x31c>)
 800154a:	4694      	mov	ip, r2
 800154c:	4463      	add	r3, ip
 800154e:	2b00      	cmp	r3, #0
 8001550:	dc00      	bgt.n	8001554 <__aeabi_dmul+0x130>
 8001552:	e0c0      	b.n	80016d6 <__aeabi_dmul+0x2b2>
 8001554:	0742      	lsls	r2, r0, #29
 8001556:	d009      	beq.n	800156c <__aeabi_dmul+0x148>
 8001558:	220f      	movs	r2, #15
 800155a:	4002      	ands	r2, r0
 800155c:	2a04      	cmp	r2, #4
 800155e:	d005      	beq.n	800156c <__aeabi_dmul+0x148>
 8001560:	1d02      	adds	r2, r0, #4
 8001562:	4282      	cmp	r2, r0
 8001564:	4180      	sbcs	r0, r0
 8001566:	4240      	negs	r0, r0
 8001568:	1824      	adds	r4, r4, r0
 800156a:	0010      	movs	r0, r2
 800156c:	01e2      	lsls	r2, r4, #7
 800156e:	d506      	bpl.n	800157e <__aeabi_dmul+0x15a>
 8001570:	4b74      	ldr	r3, [pc, #464]	@ (8001744 <__aeabi_dmul+0x320>)
 8001572:	9a01      	ldr	r2, [sp, #4]
 8001574:	401c      	ands	r4, r3
 8001576:	2380      	movs	r3, #128	@ 0x80
 8001578:	4694      	mov	ip, r2
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	4463      	add	r3, ip
 800157e:	4a72      	ldr	r2, [pc, #456]	@ (8001748 <__aeabi_dmul+0x324>)
 8001580:	4293      	cmp	r3, r2
 8001582:	dc6b      	bgt.n	800165c <__aeabi_dmul+0x238>
 8001584:	0762      	lsls	r2, r4, #29
 8001586:	08c0      	lsrs	r0, r0, #3
 8001588:	0264      	lsls	r4, r4, #9
 800158a:	055b      	lsls	r3, r3, #21
 800158c:	4302      	orrs	r2, r0
 800158e:	0b24      	lsrs	r4, r4, #12
 8001590:	0d5b      	lsrs	r3, r3, #21
 8001592:	e79d      	b.n	80014d0 <__aeabi_dmul+0xac>
 8001594:	2190      	movs	r1, #144	@ 0x90
 8001596:	0089      	lsls	r1, r1, #2
 8001598:	420f      	tst	r7, r1
 800159a:	d163      	bne.n	8001664 <__aeabi_dmul+0x240>
 800159c:	2288      	movs	r2, #136	@ 0x88
 800159e:	423a      	tst	r2, r7
 80015a0:	d100      	bne.n	80015a4 <__aeabi_dmul+0x180>
 80015a2:	e0d7      	b.n	8001754 <__aeabi_dmul+0x330>
 80015a4:	9b00      	ldr	r3, [sp, #0]
 80015a6:	46a2      	mov	sl, r4
 80015a8:	469b      	mov	fp, r3
 80015aa:	4681      	mov	r9, r0
 80015ac:	9602      	str	r6, [sp, #8]
 80015ae:	e7bf      	b.n	8001530 <__aeabi_dmul+0x10c>
 80015b0:	0023      	movs	r3, r4
 80015b2:	4333      	orrs	r3, r6
 80015b4:	d100      	bne.n	80015b8 <__aeabi_dmul+0x194>
 80015b6:	e07f      	b.n	80016b8 <__aeabi_dmul+0x294>
 80015b8:	2c00      	cmp	r4, #0
 80015ba:	d100      	bne.n	80015be <__aeabi_dmul+0x19a>
 80015bc:	e1ad      	b.n	800191a <__aeabi_dmul+0x4f6>
 80015be:	0020      	movs	r0, r4
 80015c0:	f000 feec 	bl	800239c <__clzsi2>
 80015c4:	0002      	movs	r2, r0
 80015c6:	0003      	movs	r3, r0
 80015c8:	3a0b      	subs	r2, #11
 80015ca:	201d      	movs	r0, #29
 80015cc:	0019      	movs	r1, r3
 80015ce:	1a82      	subs	r2, r0, r2
 80015d0:	0030      	movs	r0, r6
 80015d2:	3908      	subs	r1, #8
 80015d4:	40d0      	lsrs	r0, r2
 80015d6:	408c      	lsls	r4, r1
 80015d8:	4304      	orrs	r4, r0
 80015da:	0030      	movs	r0, r6
 80015dc:	4088      	lsls	r0, r1
 80015de:	4a5b      	ldr	r2, [pc, #364]	@ (800174c <__aeabi_dmul+0x328>)
 80015e0:	1aeb      	subs	r3, r5, r3
 80015e2:	4694      	mov	ip, r2
 80015e4:	4463      	add	r3, ip
 80015e6:	1c5a      	adds	r2, r3, #1
 80015e8:	9201      	str	r2, [sp, #4]
 80015ea:	4642      	mov	r2, r8
 80015ec:	2600      	movs	r6, #0
 80015ee:	2a0a      	cmp	r2, #10
 80015f0:	dc00      	bgt.n	80015f4 <__aeabi_dmul+0x1d0>
 80015f2:	e75a      	b.n	80014aa <__aeabi_dmul+0x86>
 80015f4:	e79c      	b.n	8001530 <__aeabi_dmul+0x10c>
 80015f6:	4653      	mov	r3, sl
 80015f8:	4303      	orrs	r3, r0
 80015fa:	4699      	mov	r9, r3
 80015fc:	d054      	beq.n	80016a8 <__aeabi_dmul+0x284>
 80015fe:	4653      	mov	r3, sl
 8001600:	2b00      	cmp	r3, #0
 8001602:	d100      	bne.n	8001606 <__aeabi_dmul+0x1e2>
 8001604:	e177      	b.n	80018f6 <__aeabi_dmul+0x4d2>
 8001606:	4650      	mov	r0, sl
 8001608:	f000 fec8 	bl	800239c <__clzsi2>
 800160c:	230b      	movs	r3, #11
 800160e:	425b      	negs	r3, r3
 8001610:	469c      	mov	ip, r3
 8001612:	0002      	movs	r2, r0
 8001614:	4484      	add	ip, r0
 8001616:	0011      	movs	r1, r2
 8001618:	4650      	mov	r0, sl
 800161a:	3908      	subs	r1, #8
 800161c:	4088      	lsls	r0, r1
 800161e:	231d      	movs	r3, #29
 8001620:	4680      	mov	r8, r0
 8001622:	4660      	mov	r0, ip
 8001624:	1a1b      	subs	r3, r3, r0
 8001626:	0020      	movs	r0, r4
 8001628:	40d8      	lsrs	r0, r3
 800162a:	0003      	movs	r3, r0
 800162c:	4640      	mov	r0, r8
 800162e:	4303      	orrs	r3, r0
 8001630:	469a      	mov	sl, r3
 8001632:	0023      	movs	r3, r4
 8001634:	408b      	lsls	r3, r1
 8001636:	4699      	mov	r9, r3
 8001638:	2300      	movs	r3, #0
 800163a:	4d44      	ldr	r5, [pc, #272]	@ (800174c <__aeabi_dmul+0x328>)
 800163c:	4698      	mov	r8, r3
 800163e:	1aad      	subs	r5, r5, r2
 8001640:	9302      	str	r3, [sp, #8]
 8001642:	e715      	b.n	8001470 <__aeabi_dmul+0x4c>
 8001644:	4652      	mov	r2, sl
 8001646:	4302      	orrs	r2, r0
 8001648:	4691      	mov	r9, r2
 800164a:	d126      	bne.n	800169a <__aeabi_dmul+0x276>
 800164c:	2200      	movs	r2, #0
 800164e:	001d      	movs	r5, r3
 8001650:	2302      	movs	r3, #2
 8001652:	4692      	mov	sl, r2
 8001654:	3208      	adds	r2, #8
 8001656:	4690      	mov	r8, r2
 8001658:	9302      	str	r3, [sp, #8]
 800165a:	e709      	b.n	8001470 <__aeabi_dmul+0x4c>
 800165c:	2400      	movs	r4, #0
 800165e:	2200      	movs	r2, #0
 8001660:	4b35      	ldr	r3, [pc, #212]	@ (8001738 <__aeabi_dmul+0x314>)
 8001662:	e735      	b.n	80014d0 <__aeabi_dmul+0xac>
 8001664:	2300      	movs	r3, #0
 8001666:	2480      	movs	r4, #128	@ 0x80
 8001668:	469b      	mov	fp, r3
 800166a:	0324      	lsls	r4, r4, #12
 800166c:	4b32      	ldr	r3, [pc, #200]	@ (8001738 <__aeabi_dmul+0x314>)
 800166e:	e72f      	b.n	80014d0 <__aeabi_dmul+0xac>
 8001670:	2202      	movs	r2, #2
 8001672:	4641      	mov	r1, r8
 8001674:	4311      	orrs	r1, r2
 8001676:	2280      	movs	r2, #128	@ 0x80
 8001678:	0112      	lsls	r2, r2, #4
 800167a:	4694      	mov	ip, r2
 800167c:	002a      	movs	r2, r5
 800167e:	4462      	add	r2, ip
 8001680:	4688      	mov	r8, r1
 8001682:	9201      	str	r2, [sp, #4]
 8001684:	290a      	cmp	r1, #10
 8001686:	dd00      	ble.n	800168a <__aeabi_dmul+0x266>
 8001688:	e752      	b.n	8001530 <__aeabi_dmul+0x10c>
 800168a:	465a      	mov	r2, fp
 800168c:	2000      	movs	r0, #0
 800168e:	9900      	ldr	r1, [sp, #0]
 8001690:	0004      	movs	r4, r0
 8001692:	404a      	eors	r2, r1
 8001694:	4693      	mov	fp, r2
 8001696:	2602      	movs	r6, #2
 8001698:	e70b      	b.n	80014b2 <__aeabi_dmul+0x8e>
 800169a:	220c      	movs	r2, #12
 800169c:	001d      	movs	r5, r3
 800169e:	2303      	movs	r3, #3
 80016a0:	4681      	mov	r9, r0
 80016a2:	4690      	mov	r8, r2
 80016a4:	9302      	str	r3, [sp, #8]
 80016a6:	e6e3      	b.n	8001470 <__aeabi_dmul+0x4c>
 80016a8:	2300      	movs	r3, #0
 80016aa:	469a      	mov	sl, r3
 80016ac:	3304      	adds	r3, #4
 80016ae:	4698      	mov	r8, r3
 80016b0:	3b03      	subs	r3, #3
 80016b2:	2500      	movs	r5, #0
 80016b4:	9302      	str	r3, [sp, #8]
 80016b6:	e6db      	b.n	8001470 <__aeabi_dmul+0x4c>
 80016b8:	4642      	mov	r2, r8
 80016ba:	3301      	adds	r3, #1
 80016bc:	431a      	orrs	r2, r3
 80016be:	002b      	movs	r3, r5
 80016c0:	4690      	mov	r8, r2
 80016c2:	1c5a      	adds	r2, r3, #1
 80016c4:	9201      	str	r2, [sp, #4]
 80016c6:	4642      	mov	r2, r8
 80016c8:	2400      	movs	r4, #0
 80016ca:	2000      	movs	r0, #0
 80016cc:	2601      	movs	r6, #1
 80016ce:	2a0a      	cmp	r2, #10
 80016d0:	dc00      	bgt.n	80016d4 <__aeabi_dmul+0x2b0>
 80016d2:	e6ea      	b.n	80014aa <__aeabi_dmul+0x86>
 80016d4:	e72c      	b.n	8001530 <__aeabi_dmul+0x10c>
 80016d6:	2201      	movs	r2, #1
 80016d8:	1ad2      	subs	r2, r2, r3
 80016da:	2a38      	cmp	r2, #56	@ 0x38
 80016dc:	dd00      	ble.n	80016e0 <__aeabi_dmul+0x2bc>
 80016de:	e6f4      	b.n	80014ca <__aeabi_dmul+0xa6>
 80016e0:	2a1f      	cmp	r2, #31
 80016e2:	dc00      	bgt.n	80016e6 <__aeabi_dmul+0x2c2>
 80016e4:	e12a      	b.n	800193c <__aeabi_dmul+0x518>
 80016e6:	211f      	movs	r1, #31
 80016e8:	4249      	negs	r1, r1
 80016ea:	1acb      	subs	r3, r1, r3
 80016ec:	0021      	movs	r1, r4
 80016ee:	40d9      	lsrs	r1, r3
 80016f0:	000b      	movs	r3, r1
 80016f2:	2a20      	cmp	r2, #32
 80016f4:	d005      	beq.n	8001702 <__aeabi_dmul+0x2de>
 80016f6:	4a16      	ldr	r2, [pc, #88]	@ (8001750 <__aeabi_dmul+0x32c>)
 80016f8:	9d01      	ldr	r5, [sp, #4]
 80016fa:	4694      	mov	ip, r2
 80016fc:	4465      	add	r5, ip
 80016fe:	40ac      	lsls	r4, r5
 8001700:	4320      	orrs	r0, r4
 8001702:	1e42      	subs	r2, r0, #1
 8001704:	4190      	sbcs	r0, r2
 8001706:	4318      	orrs	r0, r3
 8001708:	2307      	movs	r3, #7
 800170a:	0019      	movs	r1, r3
 800170c:	2400      	movs	r4, #0
 800170e:	4001      	ands	r1, r0
 8001710:	4203      	tst	r3, r0
 8001712:	d00c      	beq.n	800172e <__aeabi_dmul+0x30a>
 8001714:	230f      	movs	r3, #15
 8001716:	4003      	ands	r3, r0
 8001718:	2b04      	cmp	r3, #4
 800171a:	d100      	bne.n	800171e <__aeabi_dmul+0x2fa>
 800171c:	e140      	b.n	80019a0 <__aeabi_dmul+0x57c>
 800171e:	1d03      	adds	r3, r0, #4
 8001720:	4283      	cmp	r3, r0
 8001722:	41a4      	sbcs	r4, r4
 8001724:	0018      	movs	r0, r3
 8001726:	4264      	negs	r4, r4
 8001728:	0761      	lsls	r1, r4, #29
 800172a:	0264      	lsls	r4, r4, #9
 800172c:	0b24      	lsrs	r4, r4, #12
 800172e:	08c2      	lsrs	r2, r0, #3
 8001730:	2300      	movs	r3, #0
 8001732:	430a      	orrs	r2, r1
 8001734:	e6cc      	b.n	80014d0 <__aeabi_dmul+0xac>
 8001736:	46c0      	nop			@ (mov r8, r8)
 8001738:	000007ff 	.word	0x000007ff
 800173c:	fffffc01 	.word	0xfffffc01
 8001740:	000003ff 	.word	0x000003ff
 8001744:	feffffff 	.word	0xfeffffff
 8001748:	000007fe 	.word	0x000007fe
 800174c:	fffffc0d 	.word	0xfffffc0d
 8001750:	0000043e 	.word	0x0000043e
 8001754:	4649      	mov	r1, r9
 8001756:	464a      	mov	r2, r9
 8001758:	0409      	lsls	r1, r1, #16
 800175a:	0c09      	lsrs	r1, r1, #16
 800175c:	000d      	movs	r5, r1
 800175e:	0c16      	lsrs	r6, r2, #16
 8001760:	0c02      	lsrs	r2, r0, #16
 8001762:	0400      	lsls	r0, r0, #16
 8001764:	0c00      	lsrs	r0, r0, #16
 8001766:	4345      	muls	r5, r0
 8001768:	46ac      	mov	ip, r5
 800176a:	0005      	movs	r5, r0
 800176c:	4375      	muls	r5, r6
 800176e:	46a8      	mov	r8, r5
 8001770:	0015      	movs	r5, r2
 8001772:	000f      	movs	r7, r1
 8001774:	4375      	muls	r5, r6
 8001776:	9200      	str	r2, [sp, #0]
 8001778:	9502      	str	r5, [sp, #8]
 800177a:	002a      	movs	r2, r5
 800177c:	9d00      	ldr	r5, [sp, #0]
 800177e:	436f      	muls	r7, r5
 8001780:	4665      	mov	r5, ip
 8001782:	0c2d      	lsrs	r5, r5, #16
 8001784:	46a9      	mov	r9, r5
 8001786:	4447      	add	r7, r8
 8001788:	444f      	add	r7, r9
 800178a:	45b8      	cmp	r8, r7
 800178c:	d905      	bls.n	800179a <__aeabi_dmul+0x376>
 800178e:	0015      	movs	r5, r2
 8001790:	2280      	movs	r2, #128	@ 0x80
 8001792:	0252      	lsls	r2, r2, #9
 8001794:	4690      	mov	r8, r2
 8001796:	4445      	add	r5, r8
 8001798:	9502      	str	r5, [sp, #8]
 800179a:	0c3d      	lsrs	r5, r7, #16
 800179c:	9503      	str	r5, [sp, #12]
 800179e:	4665      	mov	r5, ip
 80017a0:	042d      	lsls	r5, r5, #16
 80017a2:	043f      	lsls	r7, r7, #16
 80017a4:	0c2d      	lsrs	r5, r5, #16
 80017a6:	46ac      	mov	ip, r5
 80017a8:	003d      	movs	r5, r7
 80017aa:	4465      	add	r5, ip
 80017ac:	9504      	str	r5, [sp, #16]
 80017ae:	0c25      	lsrs	r5, r4, #16
 80017b0:	0424      	lsls	r4, r4, #16
 80017b2:	0c24      	lsrs	r4, r4, #16
 80017b4:	46ac      	mov	ip, r5
 80017b6:	0025      	movs	r5, r4
 80017b8:	4375      	muls	r5, r6
 80017ba:	46a8      	mov	r8, r5
 80017bc:	4665      	mov	r5, ip
 80017be:	000f      	movs	r7, r1
 80017c0:	4369      	muls	r1, r5
 80017c2:	4441      	add	r1, r8
 80017c4:	4689      	mov	r9, r1
 80017c6:	4367      	muls	r7, r4
 80017c8:	0c39      	lsrs	r1, r7, #16
 80017ca:	4449      	add	r1, r9
 80017cc:	436e      	muls	r6, r5
 80017ce:	4588      	cmp	r8, r1
 80017d0:	d903      	bls.n	80017da <__aeabi_dmul+0x3b6>
 80017d2:	2280      	movs	r2, #128	@ 0x80
 80017d4:	0252      	lsls	r2, r2, #9
 80017d6:	4690      	mov	r8, r2
 80017d8:	4446      	add	r6, r8
 80017da:	0c0d      	lsrs	r5, r1, #16
 80017dc:	46a8      	mov	r8, r5
 80017de:	0035      	movs	r5, r6
 80017e0:	4445      	add	r5, r8
 80017e2:	9505      	str	r5, [sp, #20]
 80017e4:	9d03      	ldr	r5, [sp, #12]
 80017e6:	043f      	lsls	r7, r7, #16
 80017e8:	46a8      	mov	r8, r5
 80017ea:	0c3f      	lsrs	r7, r7, #16
 80017ec:	0409      	lsls	r1, r1, #16
 80017ee:	19c9      	adds	r1, r1, r7
 80017f0:	4488      	add	r8, r1
 80017f2:	4645      	mov	r5, r8
 80017f4:	9503      	str	r5, [sp, #12]
 80017f6:	4655      	mov	r5, sl
 80017f8:	042e      	lsls	r6, r5, #16
 80017fa:	0c36      	lsrs	r6, r6, #16
 80017fc:	0c2f      	lsrs	r7, r5, #16
 80017fe:	0035      	movs	r5, r6
 8001800:	4345      	muls	r5, r0
 8001802:	4378      	muls	r0, r7
 8001804:	4681      	mov	r9, r0
 8001806:	0038      	movs	r0, r7
 8001808:	46a8      	mov	r8, r5
 800180a:	0c2d      	lsrs	r5, r5, #16
 800180c:	46aa      	mov	sl, r5
 800180e:	9a00      	ldr	r2, [sp, #0]
 8001810:	4350      	muls	r0, r2
 8001812:	4372      	muls	r2, r6
 8001814:	444a      	add	r2, r9
 8001816:	4452      	add	r2, sl
 8001818:	4591      	cmp	r9, r2
 800181a:	d903      	bls.n	8001824 <__aeabi_dmul+0x400>
 800181c:	2580      	movs	r5, #128	@ 0x80
 800181e:	026d      	lsls	r5, r5, #9
 8001820:	46a9      	mov	r9, r5
 8001822:	4448      	add	r0, r9
 8001824:	0c15      	lsrs	r5, r2, #16
 8001826:	46a9      	mov	r9, r5
 8001828:	4645      	mov	r5, r8
 800182a:	042d      	lsls	r5, r5, #16
 800182c:	0c2d      	lsrs	r5, r5, #16
 800182e:	46a8      	mov	r8, r5
 8001830:	4665      	mov	r5, ip
 8001832:	437d      	muls	r5, r7
 8001834:	0412      	lsls	r2, r2, #16
 8001836:	4448      	add	r0, r9
 8001838:	4490      	add	r8, r2
 800183a:	46a9      	mov	r9, r5
 800183c:	0032      	movs	r2, r6
 800183e:	4665      	mov	r5, ip
 8001840:	4362      	muls	r2, r4
 8001842:	436e      	muls	r6, r5
 8001844:	437c      	muls	r4, r7
 8001846:	0c17      	lsrs	r7, r2, #16
 8001848:	1936      	adds	r6, r6, r4
 800184a:	19bf      	adds	r7, r7, r6
 800184c:	42bc      	cmp	r4, r7
 800184e:	d903      	bls.n	8001858 <__aeabi_dmul+0x434>
 8001850:	2480      	movs	r4, #128	@ 0x80
 8001852:	0264      	lsls	r4, r4, #9
 8001854:	46a4      	mov	ip, r4
 8001856:	44e1      	add	r9, ip
 8001858:	9c02      	ldr	r4, [sp, #8]
 800185a:	9e03      	ldr	r6, [sp, #12]
 800185c:	46a4      	mov	ip, r4
 800185e:	9d05      	ldr	r5, [sp, #20]
 8001860:	4466      	add	r6, ip
 8001862:	428e      	cmp	r6, r1
 8001864:	4189      	sbcs	r1, r1
 8001866:	46ac      	mov	ip, r5
 8001868:	0412      	lsls	r2, r2, #16
 800186a:	043c      	lsls	r4, r7, #16
 800186c:	0c12      	lsrs	r2, r2, #16
 800186e:	18a2      	adds	r2, r4, r2
 8001870:	4462      	add	r2, ip
 8001872:	4249      	negs	r1, r1
 8001874:	1854      	adds	r4, r2, r1
 8001876:	4446      	add	r6, r8
 8001878:	46a4      	mov	ip, r4
 800187a:	4546      	cmp	r6, r8
 800187c:	41a4      	sbcs	r4, r4
 800187e:	4682      	mov	sl, r0
 8001880:	4264      	negs	r4, r4
 8001882:	46a0      	mov	r8, r4
 8001884:	42aa      	cmp	r2, r5
 8001886:	4192      	sbcs	r2, r2
 8001888:	458c      	cmp	ip, r1
 800188a:	4189      	sbcs	r1, r1
 800188c:	44e2      	add	sl, ip
 800188e:	44d0      	add	r8, sl
 8001890:	4249      	negs	r1, r1
 8001892:	4252      	negs	r2, r2
 8001894:	430a      	orrs	r2, r1
 8001896:	45a0      	cmp	r8, r4
 8001898:	41a4      	sbcs	r4, r4
 800189a:	4582      	cmp	sl, r0
 800189c:	4189      	sbcs	r1, r1
 800189e:	4264      	negs	r4, r4
 80018a0:	4249      	negs	r1, r1
 80018a2:	430c      	orrs	r4, r1
 80018a4:	4641      	mov	r1, r8
 80018a6:	0c3f      	lsrs	r7, r7, #16
 80018a8:	19d2      	adds	r2, r2, r7
 80018aa:	1912      	adds	r2, r2, r4
 80018ac:	0dcc      	lsrs	r4, r1, #23
 80018ae:	9904      	ldr	r1, [sp, #16]
 80018b0:	0270      	lsls	r0, r6, #9
 80018b2:	4308      	orrs	r0, r1
 80018b4:	1e41      	subs	r1, r0, #1
 80018b6:	4188      	sbcs	r0, r1
 80018b8:	4641      	mov	r1, r8
 80018ba:	444a      	add	r2, r9
 80018bc:	0df6      	lsrs	r6, r6, #23
 80018be:	0252      	lsls	r2, r2, #9
 80018c0:	4330      	orrs	r0, r6
 80018c2:	0249      	lsls	r1, r1, #9
 80018c4:	4314      	orrs	r4, r2
 80018c6:	4308      	orrs	r0, r1
 80018c8:	01d2      	lsls	r2, r2, #7
 80018ca:	d535      	bpl.n	8001938 <__aeabi_dmul+0x514>
 80018cc:	2201      	movs	r2, #1
 80018ce:	0843      	lsrs	r3, r0, #1
 80018d0:	4002      	ands	r2, r0
 80018d2:	4313      	orrs	r3, r2
 80018d4:	07e0      	lsls	r0, r4, #31
 80018d6:	4318      	orrs	r0, r3
 80018d8:	0864      	lsrs	r4, r4, #1
 80018da:	e634      	b.n	8001546 <__aeabi_dmul+0x122>
 80018dc:	9b00      	ldr	r3, [sp, #0]
 80018de:	46a2      	mov	sl, r4
 80018e0:	469b      	mov	fp, r3
 80018e2:	4681      	mov	r9, r0
 80018e4:	2480      	movs	r4, #128	@ 0x80
 80018e6:	4653      	mov	r3, sl
 80018e8:	0324      	lsls	r4, r4, #12
 80018ea:	431c      	orrs	r4, r3
 80018ec:	0324      	lsls	r4, r4, #12
 80018ee:	464a      	mov	r2, r9
 80018f0:	4b2e      	ldr	r3, [pc, #184]	@ (80019ac <__aeabi_dmul+0x588>)
 80018f2:	0b24      	lsrs	r4, r4, #12
 80018f4:	e5ec      	b.n	80014d0 <__aeabi_dmul+0xac>
 80018f6:	f000 fd51 	bl	800239c <__clzsi2>
 80018fa:	2315      	movs	r3, #21
 80018fc:	469c      	mov	ip, r3
 80018fe:	4484      	add	ip, r0
 8001900:	0002      	movs	r2, r0
 8001902:	4663      	mov	r3, ip
 8001904:	3220      	adds	r2, #32
 8001906:	2b1c      	cmp	r3, #28
 8001908:	dc00      	bgt.n	800190c <__aeabi_dmul+0x4e8>
 800190a:	e684      	b.n	8001616 <__aeabi_dmul+0x1f2>
 800190c:	2300      	movs	r3, #0
 800190e:	4699      	mov	r9, r3
 8001910:	0023      	movs	r3, r4
 8001912:	3808      	subs	r0, #8
 8001914:	4083      	lsls	r3, r0
 8001916:	469a      	mov	sl, r3
 8001918:	e68e      	b.n	8001638 <__aeabi_dmul+0x214>
 800191a:	f000 fd3f 	bl	800239c <__clzsi2>
 800191e:	0002      	movs	r2, r0
 8001920:	0003      	movs	r3, r0
 8001922:	3215      	adds	r2, #21
 8001924:	3320      	adds	r3, #32
 8001926:	2a1c      	cmp	r2, #28
 8001928:	dc00      	bgt.n	800192c <__aeabi_dmul+0x508>
 800192a:	e64e      	b.n	80015ca <__aeabi_dmul+0x1a6>
 800192c:	0002      	movs	r2, r0
 800192e:	0034      	movs	r4, r6
 8001930:	3a08      	subs	r2, #8
 8001932:	2000      	movs	r0, #0
 8001934:	4094      	lsls	r4, r2
 8001936:	e652      	b.n	80015de <__aeabi_dmul+0x1ba>
 8001938:	9301      	str	r3, [sp, #4]
 800193a:	e604      	b.n	8001546 <__aeabi_dmul+0x122>
 800193c:	4b1c      	ldr	r3, [pc, #112]	@ (80019b0 <__aeabi_dmul+0x58c>)
 800193e:	0021      	movs	r1, r4
 8001940:	469c      	mov	ip, r3
 8001942:	0003      	movs	r3, r0
 8001944:	9d01      	ldr	r5, [sp, #4]
 8001946:	40d3      	lsrs	r3, r2
 8001948:	4465      	add	r5, ip
 800194a:	40a9      	lsls	r1, r5
 800194c:	4319      	orrs	r1, r3
 800194e:	0003      	movs	r3, r0
 8001950:	40ab      	lsls	r3, r5
 8001952:	1e58      	subs	r0, r3, #1
 8001954:	4183      	sbcs	r3, r0
 8001956:	4319      	orrs	r1, r3
 8001958:	0008      	movs	r0, r1
 800195a:	40d4      	lsrs	r4, r2
 800195c:	074b      	lsls	r3, r1, #29
 800195e:	d009      	beq.n	8001974 <__aeabi_dmul+0x550>
 8001960:	230f      	movs	r3, #15
 8001962:	400b      	ands	r3, r1
 8001964:	2b04      	cmp	r3, #4
 8001966:	d005      	beq.n	8001974 <__aeabi_dmul+0x550>
 8001968:	1d0b      	adds	r3, r1, #4
 800196a:	428b      	cmp	r3, r1
 800196c:	4180      	sbcs	r0, r0
 800196e:	4240      	negs	r0, r0
 8001970:	1824      	adds	r4, r4, r0
 8001972:	0018      	movs	r0, r3
 8001974:	0223      	lsls	r3, r4, #8
 8001976:	d400      	bmi.n	800197a <__aeabi_dmul+0x556>
 8001978:	e6d6      	b.n	8001728 <__aeabi_dmul+0x304>
 800197a:	2301      	movs	r3, #1
 800197c:	2400      	movs	r4, #0
 800197e:	2200      	movs	r2, #0
 8001980:	e5a6      	b.n	80014d0 <__aeabi_dmul+0xac>
 8001982:	290f      	cmp	r1, #15
 8001984:	d1aa      	bne.n	80018dc <__aeabi_dmul+0x4b8>
 8001986:	2380      	movs	r3, #128	@ 0x80
 8001988:	4652      	mov	r2, sl
 800198a:	031b      	lsls	r3, r3, #12
 800198c:	421a      	tst	r2, r3
 800198e:	d0a9      	beq.n	80018e4 <__aeabi_dmul+0x4c0>
 8001990:	421c      	tst	r4, r3
 8001992:	d1a7      	bne.n	80018e4 <__aeabi_dmul+0x4c0>
 8001994:	431c      	orrs	r4, r3
 8001996:	9b00      	ldr	r3, [sp, #0]
 8001998:	0002      	movs	r2, r0
 800199a:	469b      	mov	fp, r3
 800199c:	4b03      	ldr	r3, [pc, #12]	@ (80019ac <__aeabi_dmul+0x588>)
 800199e:	e597      	b.n	80014d0 <__aeabi_dmul+0xac>
 80019a0:	2400      	movs	r4, #0
 80019a2:	e6c1      	b.n	8001728 <__aeabi_dmul+0x304>
 80019a4:	2400      	movs	r4, #0
 80019a6:	4b01      	ldr	r3, [pc, #4]	@ (80019ac <__aeabi_dmul+0x588>)
 80019a8:	0022      	movs	r2, r4
 80019aa:	e591      	b.n	80014d0 <__aeabi_dmul+0xac>
 80019ac:	000007ff 	.word	0x000007ff
 80019b0:	0000041e 	.word	0x0000041e

080019b4 <__aeabi_dsub>:
 80019b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019b6:	464e      	mov	r6, r9
 80019b8:	4645      	mov	r5, r8
 80019ba:	46de      	mov	lr, fp
 80019bc:	4657      	mov	r7, sl
 80019be:	b5e0      	push	{r5, r6, r7, lr}
 80019c0:	b085      	sub	sp, #20
 80019c2:	9000      	str	r0, [sp, #0]
 80019c4:	9101      	str	r1, [sp, #4]
 80019c6:	030c      	lsls	r4, r1, #12
 80019c8:	004f      	lsls	r7, r1, #1
 80019ca:	0fce      	lsrs	r6, r1, #31
 80019cc:	0a61      	lsrs	r1, r4, #9
 80019ce:	9c00      	ldr	r4, [sp, #0]
 80019d0:	46b0      	mov	r8, r6
 80019d2:	0f64      	lsrs	r4, r4, #29
 80019d4:	430c      	orrs	r4, r1
 80019d6:	9900      	ldr	r1, [sp, #0]
 80019d8:	0d7f      	lsrs	r7, r7, #21
 80019da:	00c8      	lsls	r0, r1, #3
 80019dc:	0011      	movs	r1, r2
 80019de:	001a      	movs	r2, r3
 80019e0:	031b      	lsls	r3, r3, #12
 80019e2:	469c      	mov	ip, r3
 80019e4:	9100      	str	r1, [sp, #0]
 80019e6:	9201      	str	r2, [sp, #4]
 80019e8:	0051      	lsls	r1, r2, #1
 80019ea:	0d4b      	lsrs	r3, r1, #21
 80019ec:	4699      	mov	r9, r3
 80019ee:	9b01      	ldr	r3, [sp, #4]
 80019f0:	9d00      	ldr	r5, [sp, #0]
 80019f2:	0fd9      	lsrs	r1, r3, #31
 80019f4:	4663      	mov	r3, ip
 80019f6:	0f6a      	lsrs	r2, r5, #29
 80019f8:	0a5b      	lsrs	r3, r3, #9
 80019fa:	4313      	orrs	r3, r2
 80019fc:	00ea      	lsls	r2, r5, #3
 80019fe:	4694      	mov	ip, r2
 8001a00:	4693      	mov	fp, r2
 8001a02:	4ac1      	ldr	r2, [pc, #772]	@ (8001d08 <__aeabi_dsub+0x354>)
 8001a04:	9003      	str	r0, [sp, #12]
 8001a06:	9302      	str	r3, [sp, #8]
 8001a08:	4591      	cmp	r9, r2
 8001a0a:	d100      	bne.n	8001a0e <__aeabi_dsub+0x5a>
 8001a0c:	e0cd      	b.n	8001baa <__aeabi_dsub+0x1f6>
 8001a0e:	2501      	movs	r5, #1
 8001a10:	4069      	eors	r1, r5
 8001a12:	464d      	mov	r5, r9
 8001a14:	1b7d      	subs	r5, r7, r5
 8001a16:	46aa      	mov	sl, r5
 8001a18:	428e      	cmp	r6, r1
 8001a1a:	d100      	bne.n	8001a1e <__aeabi_dsub+0x6a>
 8001a1c:	e080      	b.n	8001b20 <__aeabi_dsub+0x16c>
 8001a1e:	2d00      	cmp	r5, #0
 8001a20:	dc00      	bgt.n	8001a24 <__aeabi_dsub+0x70>
 8001a22:	e335      	b.n	8002090 <__aeabi_dsub+0x6dc>
 8001a24:	4649      	mov	r1, r9
 8001a26:	2900      	cmp	r1, #0
 8001a28:	d100      	bne.n	8001a2c <__aeabi_dsub+0x78>
 8001a2a:	e0df      	b.n	8001bec <__aeabi_dsub+0x238>
 8001a2c:	4297      	cmp	r7, r2
 8001a2e:	d100      	bne.n	8001a32 <__aeabi_dsub+0x7e>
 8001a30:	e194      	b.n	8001d5c <__aeabi_dsub+0x3a8>
 8001a32:	4652      	mov	r2, sl
 8001a34:	2501      	movs	r5, #1
 8001a36:	2a38      	cmp	r2, #56	@ 0x38
 8001a38:	dc19      	bgt.n	8001a6e <__aeabi_dsub+0xba>
 8001a3a:	2280      	movs	r2, #128	@ 0x80
 8001a3c:	9b02      	ldr	r3, [sp, #8]
 8001a3e:	0412      	lsls	r2, r2, #16
 8001a40:	4313      	orrs	r3, r2
 8001a42:	9302      	str	r3, [sp, #8]
 8001a44:	4652      	mov	r2, sl
 8001a46:	2a1f      	cmp	r2, #31
 8001a48:	dd00      	ble.n	8001a4c <__aeabi_dsub+0x98>
 8001a4a:	e1e3      	b.n	8001e14 <__aeabi_dsub+0x460>
 8001a4c:	4653      	mov	r3, sl
 8001a4e:	2220      	movs	r2, #32
 8001a50:	4661      	mov	r1, ip
 8001a52:	9d02      	ldr	r5, [sp, #8]
 8001a54:	1ad2      	subs	r2, r2, r3
 8001a56:	4095      	lsls	r5, r2
 8001a58:	40d9      	lsrs	r1, r3
 8001a5a:	430d      	orrs	r5, r1
 8001a5c:	4661      	mov	r1, ip
 8001a5e:	4091      	lsls	r1, r2
 8001a60:	000a      	movs	r2, r1
 8001a62:	1e51      	subs	r1, r2, #1
 8001a64:	418a      	sbcs	r2, r1
 8001a66:	4315      	orrs	r5, r2
 8001a68:	9a02      	ldr	r2, [sp, #8]
 8001a6a:	40da      	lsrs	r2, r3
 8001a6c:	1aa4      	subs	r4, r4, r2
 8001a6e:	1b45      	subs	r5, r0, r5
 8001a70:	42a8      	cmp	r0, r5
 8001a72:	4180      	sbcs	r0, r0
 8001a74:	4240      	negs	r0, r0
 8001a76:	1a24      	subs	r4, r4, r0
 8001a78:	0223      	lsls	r3, r4, #8
 8001a7a:	d400      	bmi.n	8001a7e <__aeabi_dsub+0xca>
 8001a7c:	e13d      	b.n	8001cfa <__aeabi_dsub+0x346>
 8001a7e:	0264      	lsls	r4, r4, #9
 8001a80:	0a64      	lsrs	r4, r4, #9
 8001a82:	2c00      	cmp	r4, #0
 8001a84:	d100      	bne.n	8001a88 <__aeabi_dsub+0xd4>
 8001a86:	e147      	b.n	8001d18 <__aeabi_dsub+0x364>
 8001a88:	0020      	movs	r0, r4
 8001a8a:	f000 fc87 	bl	800239c <__clzsi2>
 8001a8e:	0003      	movs	r3, r0
 8001a90:	3b08      	subs	r3, #8
 8001a92:	2120      	movs	r1, #32
 8001a94:	0028      	movs	r0, r5
 8001a96:	1aca      	subs	r2, r1, r3
 8001a98:	40d0      	lsrs	r0, r2
 8001a9a:	409c      	lsls	r4, r3
 8001a9c:	0002      	movs	r2, r0
 8001a9e:	409d      	lsls	r5, r3
 8001aa0:	4322      	orrs	r2, r4
 8001aa2:	429f      	cmp	r7, r3
 8001aa4:	dd00      	ble.n	8001aa8 <__aeabi_dsub+0xf4>
 8001aa6:	e177      	b.n	8001d98 <__aeabi_dsub+0x3e4>
 8001aa8:	1bd8      	subs	r0, r3, r7
 8001aaa:	3001      	adds	r0, #1
 8001aac:	1a09      	subs	r1, r1, r0
 8001aae:	002c      	movs	r4, r5
 8001ab0:	408d      	lsls	r5, r1
 8001ab2:	40c4      	lsrs	r4, r0
 8001ab4:	1e6b      	subs	r3, r5, #1
 8001ab6:	419d      	sbcs	r5, r3
 8001ab8:	0013      	movs	r3, r2
 8001aba:	40c2      	lsrs	r2, r0
 8001abc:	408b      	lsls	r3, r1
 8001abe:	4325      	orrs	r5, r4
 8001ac0:	2700      	movs	r7, #0
 8001ac2:	0014      	movs	r4, r2
 8001ac4:	431d      	orrs	r5, r3
 8001ac6:	076b      	lsls	r3, r5, #29
 8001ac8:	d009      	beq.n	8001ade <__aeabi_dsub+0x12a>
 8001aca:	230f      	movs	r3, #15
 8001acc:	402b      	ands	r3, r5
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	d005      	beq.n	8001ade <__aeabi_dsub+0x12a>
 8001ad2:	1d2b      	adds	r3, r5, #4
 8001ad4:	42ab      	cmp	r3, r5
 8001ad6:	41ad      	sbcs	r5, r5
 8001ad8:	426d      	negs	r5, r5
 8001ada:	1964      	adds	r4, r4, r5
 8001adc:	001d      	movs	r5, r3
 8001ade:	0223      	lsls	r3, r4, #8
 8001ae0:	d400      	bmi.n	8001ae4 <__aeabi_dsub+0x130>
 8001ae2:	e140      	b.n	8001d66 <__aeabi_dsub+0x3b2>
 8001ae4:	4a88      	ldr	r2, [pc, #544]	@ (8001d08 <__aeabi_dsub+0x354>)
 8001ae6:	3701      	adds	r7, #1
 8001ae8:	4297      	cmp	r7, r2
 8001aea:	d100      	bne.n	8001aee <__aeabi_dsub+0x13a>
 8001aec:	e101      	b.n	8001cf2 <__aeabi_dsub+0x33e>
 8001aee:	2601      	movs	r6, #1
 8001af0:	4643      	mov	r3, r8
 8001af2:	4986      	ldr	r1, [pc, #536]	@ (8001d0c <__aeabi_dsub+0x358>)
 8001af4:	08ed      	lsrs	r5, r5, #3
 8001af6:	4021      	ands	r1, r4
 8001af8:	074a      	lsls	r2, r1, #29
 8001afa:	432a      	orrs	r2, r5
 8001afc:	057c      	lsls	r4, r7, #21
 8001afe:	024d      	lsls	r5, r1, #9
 8001b00:	0b2d      	lsrs	r5, r5, #12
 8001b02:	0d64      	lsrs	r4, r4, #21
 8001b04:	401e      	ands	r6, r3
 8001b06:	0524      	lsls	r4, r4, #20
 8001b08:	432c      	orrs	r4, r5
 8001b0a:	07f6      	lsls	r6, r6, #31
 8001b0c:	4334      	orrs	r4, r6
 8001b0e:	0010      	movs	r0, r2
 8001b10:	0021      	movs	r1, r4
 8001b12:	b005      	add	sp, #20
 8001b14:	bcf0      	pop	{r4, r5, r6, r7}
 8001b16:	46bb      	mov	fp, r7
 8001b18:	46b2      	mov	sl, r6
 8001b1a:	46a9      	mov	r9, r5
 8001b1c:	46a0      	mov	r8, r4
 8001b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b20:	2d00      	cmp	r5, #0
 8001b22:	dc00      	bgt.n	8001b26 <__aeabi_dsub+0x172>
 8001b24:	e2d0      	b.n	80020c8 <__aeabi_dsub+0x714>
 8001b26:	4649      	mov	r1, r9
 8001b28:	2900      	cmp	r1, #0
 8001b2a:	d000      	beq.n	8001b2e <__aeabi_dsub+0x17a>
 8001b2c:	e0d4      	b.n	8001cd8 <__aeabi_dsub+0x324>
 8001b2e:	4661      	mov	r1, ip
 8001b30:	9b02      	ldr	r3, [sp, #8]
 8001b32:	4319      	orrs	r1, r3
 8001b34:	d100      	bne.n	8001b38 <__aeabi_dsub+0x184>
 8001b36:	e12b      	b.n	8001d90 <__aeabi_dsub+0x3dc>
 8001b38:	1e69      	subs	r1, r5, #1
 8001b3a:	2d01      	cmp	r5, #1
 8001b3c:	d100      	bne.n	8001b40 <__aeabi_dsub+0x18c>
 8001b3e:	e1d9      	b.n	8001ef4 <__aeabi_dsub+0x540>
 8001b40:	4295      	cmp	r5, r2
 8001b42:	d100      	bne.n	8001b46 <__aeabi_dsub+0x192>
 8001b44:	e10a      	b.n	8001d5c <__aeabi_dsub+0x3a8>
 8001b46:	2501      	movs	r5, #1
 8001b48:	2938      	cmp	r1, #56	@ 0x38
 8001b4a:	dc17      	bgt.n	8001b7c <__aeabi_dsub+0x1c8>
 8001b4c:	468a      	mov	sl, r1
 8001b4e:	4653      	mov	r3, sl
 8001b50:	2b1f      	cmp	r3, #31
 8001b52:	dd00      	ble.n	8001b56 <__aeabi_dsub+0x1a2>
 8001b54:	e1e7      	b.n	8001f26 <__aeabi_dsub+0x572>
 8001b56:	2220      	movs	r2, #32
 8001b58:	1ad2      	subs	r2, r2, r3
 8001b5a:	9b02      	ldr	r3, [sp, #8]
 8001b5c:	4661      	mov	r1, ip
 8001b5e:	4093      	lsls	r3, r2
 8001b60:	001d      	movs	r5, r3
 8001b62:	4653      	mov	r3, sl
 8001b64:	40d9      	lsrs	r1, r3
 8001b66:	4663      	mov	r3, ip
 8001b68:	4093      	lsls	r3, r2
 8001b6a:	001a      	movs	r2, r3
 8001b6c:	430d      	orrs	r5, r1
 8001b6e:	1e51      	subs	r1, r2, #1
 8001b70:	418a      	sbcs	r2, r1
 8001b72:	4653      	mov	r3, sl
 8001b74:	4315      	orrs	r5, r2
 8001b76:	9a02      	ldr	r2, [sp, #8]
 8001b78:	40da      	lsrs	r2, r3
 8001b7a:	18a4      	adds	r4, r4, r2
 8001b7c:	182d      	adds	r5, r5, r0
 8001b7e:	4285      	cmp	r5, r0
 8001b80:	4180      	sbcs	r0, r0
 8001b82:	4240      	negs	r0, r0
 8001b84:	1824      	adds	r4, r4, r0
 8001b86:	0223      	lsls	r3, r4, #8
 8001b88:	d400      	bmi.n	8001b8c <__aeabi_dsub+0x1d8>
 8001b8a:	e0b6      	b.n	8001cfa <__aeabi_dsub+0x346>
 8001b8c:	4b5e      	ldr	r3, [pc, #376]	@ (8001d08 <__aeabi_dsub+0x354>)
 8001b8e:	3701      	adds	r7, #1
 8001b90:	429f      	cmp	r7, r3
 8001b92:	d100      	bne.n	8001b96 <__aeabi_dsub+0x1e2>
 8001b94:	e0ad      	b.n	8001cf2 <__aeabi_dsub+0x33e>
 8001b96:	2101      	movs	r1, #1
 8001b98:	4b5c      	ldr	r3, [pc, #368]	@ (8001d0c <__aeabi_dsub+0x358>)
 8001b9a:	086a      	lsrs	r2, r5, #1
 8001b9c:	401c      	ands	r4, r3
 8001b9e:	4029      	ands	r1, r5
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	07e5      	lsls	r5, r4, #31
 8001ba4:	4315      	orrs	r5, r2
 8001ba6:	0864      	lsrs	r4, r4, #1
 8001ba8:	e78d      	b.n	8001ac6 <__aeabi_dsub+0x112>
 8001baa:	4a59      	ldr	r2, [pc, #356]	@ (8001d10 <__aeabi_dsub+0x35c>)
 8001bac:	9b02      	ldr	r3, [sp, #8]
 8001bae:	4692      	mov	sl, r2
 8001bb0:	4662      	mov	r2, ip
 8001bb2:	44ba      	add	sl, r7
 8001bb4:	431a      	orrs	r2, r3
 8001bb6:	d02c      	beq.n	8001c12 <__aeabi_dsub+0x25e>
 8001bb8:	428e      	cmp	r6, r1
 8001bba:	d02e      	beq.n	8001c1a <__aeabi_dsub+0x266>
 8001bbc:	4652      	mov	r2, sl
 8001bbe:	2a00      	cmp	r2, #0
 8001bc0:	d060      	beq.n	8001c84 <__aeabi_dsub+0x2d0>
 8001bc2:	2f00      	cmp	r7, #0
 8001bc4:	d100      	bne.n	8001bc8 <__aeabi_dsub+0x214>
 8001bc6:	e0db      	b.n	8001d80 <__aeabi_dsub+0x3cc>
 8001bc8:	4663      	mov	r3, ip
 8001bca:	000e      	movs	r6, r1
 8001bcc:	9c02      	ldr	r4, [sp, #8]
 8001bce:	08d8      	lsrs	r0, r3, #3
 8001bd0:	0762      	lsls	r2, r4, #29
 8001bd2:	4302      	orrs	r2, r0
 8001bd4:	08e4      	lsrs	r4, r4, #3
 8001bd6:	0013      	movs	r3, r2
 8001bd8:	4323      	orrs	r3, r4
 8001bda:	d100      	bne.n	8001bde <__aeabi_dsub+0x22a>
 8001bdc:	e254      	b.n	8002088 <__aeabi_dsub+0x6d4>
 8001bde:	2580      	movs	r5, #128	@ 0x80
 8001be0:	032d      	lsls	r5, r5, #12
 8001be2:	4325      	orrs	r5, r4
 8001be4:	032d      	lsls	r5, r5, #12
 8001be6:	4c48      	ldr	r4, [pc, #288]	@ (8001d08 <__aeabi_dsub+0x354>)
 8001be8:	0b2d      	lsrs	r5, r5, #12
 8001bea:	e78c      	b.n	8001b06 <__aeabi_dsub+0x152>
 8001bec:	4661      	mov	r1, ip
 8001bee:	9b02      	ldr	r3, [sp, #8]
 8001bf0:	4319      	orrs	r1, r3
 8001bf2:	d100      	bne.n	8001bf6 <__aeabi_dsub+0x242>
 8001bf4:	e0cc      	b.n	8001d90 <__aeabi_dsub+0x3dc>
 8001bf6:	0029      	movs	r1, r5
 8001bf8:	3901      	subs	r1, #1
 8001bfa:	2d01      	cmp	r5, #1
 8001bfc:	d100      	bne.n	8001c00 <__aeabi_dsub+0x24c>
 8001bfe:	e188      	b.n	8001f12 <__aeabi_dsub+0x55e>
 8001c00:	4295      	cmp	r5, r2
 8001c02:	d100      	bne.n	8001c06 <__aeabi_dsub+0x252>
 8001c04:	e0aa      	b.n	8001d5c <__aeabi_dsub+0x3a8>
 8001c06:	2501      	movs	r5, #1
 8001c08:	2938      	cmp	r1, #56	@ 0x38
 8001c0a:	dd00      	ble.n	8001c0e <__aeabi_dsub+0x25a>
 8001c0c:	e72f      	b.n	8001a6e <__aeabi_dsub+0xba>
 8001c0e:	468a      	mov	sl, r1
 8001c10:	e718      	b.n	8001a44 <__aeabi_dsub+0x90>
 8001c12:	2201      	movs	r2, #1
 8001c14:	4051      	eors	r1, r2
 8001c16:	428e      	cmp	r6, r1
 8001c18:	d1d0      	bne.n	8001bbc <__aeabi_dsub+0x208>
 8001c1a:	4653      	mov	r3, sl
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d100      	bne.n	8001c22 <__aeabi_dsub+0x26e>
 8001c20:	e0be      	b.n	8001da0 <__aeabi_dsub+0x3ec>
 8001c22:	2f00      	cmp	r7, #0
 8001c24:	d000      	beq.n	8001c28 <__aeabi_dsub+0x274>
 8001c26:	e138      	b.n	8001e9a <__aeabi_dsub+0x4e6>
 8001c28:	46ca      	mov	sl, r9
 8001c2a:	0022      	movs	r2, r4
 8001c2c:	4302      	orrs	r2, r0
 8001c2e:	d100      	bne.n	8001c32 <__aeabi_dsub+0x27e>
 8001c30:	e1e2      	b.n	8001ff8 <__aeabi_dsub+0x644>
 8001c32:	4653      	mov	r3, sl
 8001c34:	1e59      	subs	r1, r3, #1
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d100      	bne.n	8001c3c <__aeabi_dsub+0x288>
 8001c3a:	e20d      	b.n	8002058 <__aeabi_dsub+0x6a4>
 8001c3c:	4a32      	ldr	r2, [pc, #200]	@ (8001d08 <__aeabi_dsub+0x354>)
 8001c3e:	4592      	cmp	sl, r2
 8001c40:	d100      	bne.n	8001c44 <__aeabi_dsub+0x290>
 8001c42:	e1d2      	b.n	8001fea <__aeabi_dsub+0x636>
 8001c44:	2701      	movs	r7, #1
 8001c46:	2938      	cmp	r1, #56	@ 0x38
 8001c48:	dc13      	bgt.n	8001c72 <__aeabi_dsub+0x2be>
 8001c4a:	291f      	cmp	r1, #31
 8001c4c:	dd00      	ble.n	8001c50 <__aeabi_dsub+0x29c>
 8001c4e:	e1ee      	b.n	800202e <__aeabi_dsub+0x67a>
 8001c50:	2220      	movs	r2, #32
 8001c52:	9b02      	ldr	r3, [sp, #8]
 8001c54:	1a52      	subs	r2, r2, r1
 8001c56:	0025      	movs	r5, r4
 8001c58:	0007      	movs	r7, r0
 8001c5a:	469a      	mov	sl, r3
 8001c5c:	40cc      	lsrs	r4, r1
 8001c5e:	4090      	lsls	r0, r2
 8001c60:	4095      	lsls	r5, r2
 8001c62:	40cf      	lsrs	r7, r1
 8001c64:	44a2      	add	sl, r4
 8001c66:	1e42      	subs	r2, r0, #1
 8001c68:	4190      	sbcs	r0, r2
 8001c6a:	4653      	mov	r3, sl
 8001c6c:	432f      	orrs	r7, r5
 8001c6e:	4307      	orrs	r7, r0
 8001c70:	9302      	str	r3, [sp, #8]
 8001c72:	003d      	movs	r5, r7
 8001c74:	4465      	add	r5, ip
 8001c76:	4565      	cmp	r5, ip
 8001c78:	4192      	sbcs	r2, r2
 8001c7a:	9b02      	ldr	r3, [sp, #8]
 8001c7c:	4252      	negs	r2, r2
 8001c7e:	464f      	mov	r7, r9
 8001c80:	18d4      	adds	r4, r2, r3
 8001c82:	e780      	b.n	8001b86 <__aeabi_dsub+0x1d2>
 8001c84:	4a23      	ldr	r2, [pc, #140]	@ (8001d14 <__aeabi_dsub+0x360>)
 8001c86:	1c7d      	adds	r5, r7, #1
 8001c88:	4215      	tst	r5, r2
 8001c8a:	d000      	beq.n	8001c8e <__aeabi_dsub+0x2da>
 8001c8c:	e0aa      	b.n	8001de4 <__aeabi_dsub+0x430>
 8001c8e:	4662      	mov	r2, ip
 8001c90:	0025      	movs	r5, r4
 8001c92:	9b02      	ldr	r3, [sp, #8]
 8001c94:	4305      	orrs	r5, r0
 8001c96:	431a      	orrs	r2, r3
 8001c98:	2f00      	cmp	r7, #0
 8001c9a:	d000      	beq.n	8001c9e <__aeabi_dsub+0x2ea>
 8001c9c:	e0f5      	b.n	8001e8a <__aeabi_dsub+0x4d6>
 8001c9e:	2d00      	cmp	r5, #0
 8001ca0:	d100      	bne.n	8001ca4 <__aeabi_dsub+0x2f0>
 8001ca2:	e16b      	b.n	8001f7c <__aeabi_dsub+0x5c8>
 8001ca4:	2a00      	cmp	r2, #0
 8001ca6:	d100      	bne.n	8001caa <__aeabi_dsub+0x2f6>
 8001ca8:	e152      	b.n	8001f50 <__aeabi_dsub+0x59c>
 8001caa:	4663      	mov	r3, ip
 8001cac:	1ac5      	subs	r5, r0, r3
 8001cae:	9b02      	ldr	r3, [sp, #8]
 8001cb0:	1ae2      	subs	r2, r4, r3
 8001cb2:	42a8      	cmp	r0, r5
 8001cb4:	419b      	sbcs	r3, r3
 8001cb6:	425b      	negs	r3, r3
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	021a      	lsls	r2, r3, #8
 8001cbc:	d400      	bmi.n	8001cc0 <__aeabi_dsub+0x30c>
 8001cbe:	e1d5      	b.n	800206c <__aeabi_dsub+0x6b8>
 8001cc0:	4663      	mov	r3, ip
 8001cc2:	1a1d      	subs	r5, r3, r0
 8001cc4:	45ac      	cmp	ip, r5
 8001cc6:	4192      	sbcs	r2, r2
 8001cc8:	2601      	movs	r6, #1
 8001cca:	9b02      	ldr	r3, [sp, #8]
 8001ccc:	4252      	negs	r2, r2
 8001cce:	1b1c      	subs	r4, r3, r4
 8001cd0:	4688      	mov	r8, r1
 8001cd2:	1aa4      	subs	r4, r4, r2
 8001cd4:	400e      	ands	r6, r1
 8001cd6:	e6f6      	b.n	8001ac6 <__aeabi_dsub+0x112>
 8001cd8:	4297      	cmp	r7, r2
 8001cda:	d03f      	beq.n	8001d5c <__aeabi_dsub+0x3a8>
 8001cdc:	4652      	mov	r2, sl
 8001cde:	2501      	movs	r5, #1
 8001ce0:	2a38      	cmp	r2, #56	@ 0x38
 8001ce2:	dd00      	ble.n	8001ce6 <__aeabi_dsub+0x332>
 8001ce4:	e74a      	b.n	8001b7c <__aeabi_dsub+0x1c8>
 8001ce6:	2280      	movs	r2, #128	@ 0x80
 8001ce8:	9b02      	ldr	r3, [sp, #8]
 8001cea:	0412      	lsls	r2, r2, #16
 8001cec:	4313      	orrs	r3, r2
 8001cee:	9302      	str	r3, [sp, #8]
 8001cf0:	e72d      	b.n	8001b4e <__aeabi_dsub+0x19a>
 8001cf2:	003c      	movs	r4, r7
 8001cf4:	2500      	movs	r5, #0
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	e705      	b.n	8001b06 <__aeabi_dsub+0x152>
 8001cfa:	2307      	movs	r3, #7
 8001cfc:	402b      	ands	r3, r5
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d000      	beq.n	8001d04 <__aeabi_dsub+0x350>
 8001d02:	e6e2      	b.n	8001aca <__aeabi_dsub+0x116>
 8001d04:	e06b      	b.n	8001dde <__aeabi_dsub+0x42a>
 8001d06:	46c0      	nop			@ (mov r8, r8)
 8001d08:	000007ff 	.word	0x000007ff
 8001d0c:	ff7fffff 	.word	0xff7fffff
 8001d10:	fffff801 	.word	0xfffff801
 8001d14:	000007fe 	.word	0x000007fe
 8001d18:	0028      	movs	r0, r5
 8001d1a:	f000 fb3f 	bl	800239c <__clzsi2>
 8001d1e:	0003      	movs	r3, r0
 8001d20:	3318      	adds	r3, #24
 8001d22:	2b1f      	cmp	r3, #31
 8001d24:	dc00      	bgt.n	8001d28 <__aeabi_dsub+0x374>
 8001d26:	e6b4      	b.n	8001a92 <__aeabi_dsub+0xde>
 8001d28:	002a      	movs	r2, r5
 8001d2a:	3808      	subs	r0, #8
 8001d2c:	4082      	lsls	r2, r0
 8001d2e:	429f      	cmp	r7, r3
 8001d30:	dd00      	ble.n	8001d34 <__aeabi_dsub+0x380>
 8001d32:	e0b9      	b.n	8001ea8 <__aeabi_dsub+0x4f4>
 8001d34:	1bdb      	subs	r3, r3, r7
 8001d36:	1c58      	adds	r0, r3, #1
 8001d38:	281f      	cmp	r0, #31
 8001d3a:	dc00      	bgt.n	8001d3e <__aeabi_dsub+0x38a>
 8001d3c:	e1a0      	b.n	8002080 <__aeabi_dsub+0x6cc>
 8001d3e:	0015      	movs	r5, r2
 8001d40:	3b1f      	subs	r3, #31
 8001d42:	40dd      	lsrs	r5, r3
 8001d44:	2820      	cmp	r0, #32
 8001d46:	d005      	beq.n	8001d54 <__aeabi_dsub+0x3a0>
 8001d48:	2340      	movs	r3, #64	@ 0x40
 8001d4a:	1a1b      	subs	r3, r3, r0
 8001d4c:	409a      	lsls	r2, r3
 8001d4e:	1e53      	subs	r3, r2, #1
 8001d50:	419a      	sbcs	r2, r3
 8001d52:	4315      	orrs	r5, r2
 8001d54:	2307      	movs	r3, #7
 8001d56:	2700      	movs	r7, #0
 8001d58:	402b      	ands	r3, r5
 8001d5a:	e7d0      	b.n	8001cfe <__aeabi_dsub+0x34a>
 8001d5c:	08c0      	lsrs	r0, r0, #3
 8001d5e:	0762      	lsls	r2, r4, #29
 8001d60:	4302      	orrs	r2, r0
 8001d62:	08e4      	lsrs	r4, r4, #3
 8001d64:	e737      	b.n	8001bd6 <__aeabi_dsub+0x222>
 8001d66:	08ea      	lsrs	r2, r5, #3
 8001d68:	0763      	lsls	r3, r4, #29
 8001d6a:	431a      	orrs	r2, r3
 8001d6c:	4bd3      	ldr	r3, [pc, #844]	@ (80020bc <__aeabi_dsub+0x708>)
 8001d6e:	08e4      	lsrs	r4, r4, #3
 8001d70:	429f      	cmp	r7, r3
 8001d72:	d100      	bne.n	8001d76 <__aeabi_dsub+0x3c2>
 8001d74:	e72f      	b.n	8001bd6 <__aeabi_dsub+0x222>
 8001d76:	0324      	lsls	r4, r4, #12
 8001d78:	0b25      	lsrs	r5, r4, #12
 8001d7a:	057c      	lsls	r4, r7, #21
 8001d7c:	0d64      	lsrs	r4, r4, #21
 8001d7e:	e6c2      	b.n	8001b06 <__aeabi_dsub+0x152>
 8001d80:	46ca      	mov	sl, r9
 8001d82:	0022      	movs	r2, r4
 8001d84:	4302      	orrs	r2, r0
 8001d86:	d158      	bne.n	8001e3a <__aeabi_dsub+0x486>
 8001d88:	4663      	mov	r3, ip
 8001d8a:	000e      	movs	r6, r1
 8001d8c:	9c02      	ldr	r4, [sp, #8]
 8001d8e:	9303      	str	r3, [sp, #12]
 8001d90:	9b03      	ldr	r3, [sp, #12]
 8001d92:	4657      	mov	r7, sl
 8001d94:	08da      	lsrs	r2, r3, #3
 8001d96:	e7e7      	b.n	8001d68 <__aeabi_dsub+0x3b4>
 8001d98:	4cc9      	ldr	r4, [pc, #804]	@ (80020c0 <__aeabi_dsub+0x70c>)
 8001d9a:	1aff      	subs	r7, r7, r3
 8001d9c:	4014      	ands	r4, r2
 8001d9e:	e692      	b.n	8001ac6 <__aeabi_dsub+0x112>
 8001da0:	4dc8      	ldr	r5, [pc, #800]	@ (80020c4 <__aeabi_dsub+0x710>)
 8001da2:	1c7a      	adds	r2, r7, #1
 8001da4:	422a      	tst	r2, r5
 8001da6:	d000      	beq.n	8001daa <__aeabi_dsub+0x3f6>
 8001da8:	e084      	b.n	8001eb4 <__aeabi_dsub+0x500>
 8001daa:	0022      	movs	r2, r4
 8001dac:	4302      	orrs	r2, r0
 8001dae:	2f00      	cmp	r7, #0
 8001db0:	d000      	beq.n	8001db4 <__aeabi_dsub+0x400>
 8001db2:	e0ef      	b.n	8001f94 <__aeabi_dsub+0x5e0>
 8001db4:	2a00      	cmp	r2, #0
 8001db6:	d100      	bne.n	8001dba <__aeabi_dsub+0x406>
 8001db8:	e0e5      	b.n	8001f86 <__aeabi_dsub+0x5d2>
 8001dba:	4662      	mov	r2, ip
 8001dbc:	9902      	ldr	r1, [sp, #8]
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	d100      	bne.n	8001dc4 <__aeabi_dsub+0x410>
 8001dc2:	e0c5      	b.n	8001f50 <__aeabi_dsub+0x59c>
 8001dc4:	4663      	mov	r3, ip
 8001dc6:	18c5      	adds	r5, r0, r3
 8001dc8:	468c      	mov	ip, r1
 8001dca:	4285      	cmp	r5, r0
 8001dcc:	4180      	sbcs	r0, r0
 8001dce:	4464      	add	r4, ip
 8001dd0:	4240      	negs	r0, r0
 8001dd2:	1824      	adds	r4, r4, r0
 8001dd4:	0223      	lsls	r3, r4, #8
 8001dd6:	d502      	bpl.n	8001dde <__aeabi_dsub+0x42a>
 8001dd8:	4bb9      	ldr	r3, [pc, #740]	@ (80020c0 <__aeabi_dsub+0x70c>)
 8001dda:	3701      	adds	r7, #1
 8001ddc:	401c      	ands	r4, r3
 8001dde:	46ba      	mov	sl, r7
 8001de0:	9503      	str	r5, [sp, #12]
 8001de2:	e7d5      	b.n	8001d90 <__aeabi_dsub+0x3dc>
 8001de4:	4662      	mov	r2, ip
 8001de6:	1a85      	subs	r5, r0, r2
 8001de8:	42a8      	cmp	r0, r5
 8001dea:	4192      	sbcs	r2, r2
 8001dec:	4252      	negs	r2, r2
 8001dee:	4691      	mov	r9, r2
 8001df0:	9b02      	ldr	r3, [sp, #8]
 8001df2:	1ae3      	subs	r3, r4, r3
 8001df4:	001a      	movs	r2, r3
 8001df6:	464b      	mov	r3, r9
 8001df8:	1ad2      	subs	r2, r2, r3
 8001dfa:	0013      	movs	r3, r2
 8001dfc:	4691      	mov	r9, r2
 8001dfe:	021a      	lsls	r2, r3, #8
 8001e00:	d46c      	bmi.n	8001edc <__aeabi_dsub+0x528>
 8001e02:	464a      	mov	r2, r9
 8001e04:	464c      	mov	r4, r9
 8001e06:	432a      	orrs	r2, r5
 8001e08:	d000      	beq.n	8001e0c <__aeabi_dsub+0x458>
 8001e0a:	e63a      	b.n	8001a82 <__aeabi_dsub+0xce>
 8001e0c:	2600      	movs	r6, #0
 8001e0e:	2400      	movs	r4, #0
 8001e10:	2500      	movs	r5, #0
 8001e12:	e678      	b.n	8001b06 <__aeabi_dsub+0x152>
 8001e14:	9902      	ldr	r1, [sp, #8]
 8001e16:	4653      	mov	r3, sl
 8001e18:	000d      	movs	r5, r1
 8001e1a:	3a20      	subs	r2, #32
 8001e1c:	40d5      	lsrs	r5, r2
 8001e1e:	2b20      	cmp	r3, #32
 8001e20:	d006      	beq.n	8001e30 <__aeabi_dsub+0x47c>
 8001e22:	2240      	movs	r2, #64	@ 0x40
 8001e24:	1ad2      	subs	r2, r2, r3
 8001e26:	000b      	movs	r3, r1
 8001e28:	4093      	lsls	r3, r2
 8001e2a:	4662      	mov	r2, ip
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	4693      	mov	fp, r2
 8001e30:	465b      	mov	r3, fp
 8001e32:	1e5a      	subs	r2, r3, #1
 8001e34:	4193      	sbcs	r3, r2
 8001e36:	431d      	orrs	r5, r3
 8001e38:	e619      	b.n	8001a6e <__aeabi_dsub+0xba>
 8001e3a:	4653      	mov	r3, sl
 8001e3c:	1e5a      	subs	r2, r3, #1
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d100      	bne.n	8001e44 <__aeabi_dsub+0x490>
 8001e42:	e0c6      	b.n	8001fd2 <__aeabi_dsub+0x61e>
 8001e44:	4e9d      	ldr	r6, [pc, #628]	@ (80020bc <__aeabi_dsub+0x708>)
 8001e46:	45b2      	cmp	sl, r6
 8001e48:	d100      	bne.n	8001e4c <__aeabi_dsub+0x498>
 8001e4a:	e6bd      	b.n	8001bc8 <__aeabi_dsub+0x214>
 8001e4c:	4688      	mov	r8, r1
 8001e4e:	000e      	movs	r6, r1
 8001e50:	2501      	movs	r5, #1
 8001e52:	2a38      	cmp	r2, #56	@ 0x38
 8001e54:	dc10      	bgt.n	8001e78 <__aeabi_dsub+0x4c4>
 8001e56:	2a1f      	cmp	r2, #31
 8001e58:	dc7f      	bgt.n	8001f5a <__aeabi_dsub+0x5a6>
 8001e5a:	2120      	movs	r1, #32
 8001e5c:	0025      	movs	r5, r4
 8001e5e:	1a89      	subs	r1, r1, r2
 8001e60:	0007      	movs	r7, r0
 8001e62:	4088      	lsls	r0, r1
 8001e64:	408d      	lsls	r5, r1
 8001e66:	40d7      	lsrs	r7, r2
 8001e68:	40d4      	lsrs	r4, r2
 8001e6a:	1e41      	subs	r1, r0, #1
 8001e6c:	4188      	sbcs	r0, r1
 8001e6e:	9b02      	ldr	r3, [sp, #8]
 8001e70:	433d      	orrs	r5, r7
 8001e72:	1b1b      	subs	r3, r3, r4
 8001e74:	4305      	orrs	r5, r0
 8001e76:	9302      	str	r3, [sp, #8]
 8001e78:	4662      	mov	r2, ip
 8001e7a:	1b55      	subs	r5, r2, r5
 8001e7c:	45ac      	cmp	ip, r5
 8001e7e:	4192      	sbcs	r2, r2
 8001e80:	9b02      	ldr	r3, [sp, #8]
 8001e82:	4252      	negs	r2, r2
 8001e84:	464f      	mov	r7, r9
 8001e86:	1a9c      	subs	r4, r3, r2
 8001e88:	e5f6      	b.n	8001a78 <__aeabi_dsub+0xc4>
 8001e8a:	2d00      	cmp	r5, #0
 8001e8c:	d000      	beq.n	8001e90 <__aeabi_dsub+0x4dc>
 8001e8e:	e0b7      	b.n	8002000 <__aeabi_dsub+0x64c>
 8001e90:	2a00      	cmp	r2, #0
 8001e92:	d100      	bne.n	8001e96 <__aeabi_dsub+0x4e2>
 8001e94:	e0f0      	b.n	8002078 <__aeabi_dsub+0x6c4>
 8001e96:	2601      	movs	r6, #1
 8001e98:	400e      	ands	r6, r1
 8001e9a:	4663      	mov	r3, ip
 8001e9c:	9802      	ldr	r0, [sp, #8]
 8001e9e:	08d9      	lsrs	r1, r3, #3
 8001ea0:	0742      	lsls	r2, r0, #29
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	08c4      	lsrs	r4, r0, #3
 8001ea6:	e696      	b.n	8001bd6 <__aeabi_dsub+0x222>
 8001ea8:	4c85      	ldr	r4, [pc, #532]	@ (80020c0 <__aeabi_dsub+0x70c>)
 8001eaa:	1aff      	subs	r7, r7, r3
 8001eac:	4014      	ands	r4, r2
 8001eae:	0762      	lsls	r2, r4, #29
 8001eb0:	08e4      	lsrs	r4, r4, #3
 8001eb2:	e760      	b.n	8001d76 <__aeabi_dsub+0x3c2>
 8001eb4:	4981      	ldr	r1, [pc, #516]	@ (80020bc <__aeabi_dsub+0x708>)
 8001eb6:	428a      	cmp	r2, r1
 8001eb8:	d100      	bne.n	8001ebc <__aeabi_dsub+0x508>
 8001eba:	e0c9      	b.n	8002050 <__aeabi_dsub+0x69c>
 8001ebc:	4663      	mov	r3, ip
 8001ebe:	18c1      	adds	r1, r0, r3
 8001ec0:	4281      	cmp	r1, r0
 8001ec2:	4180      	sbcs	r0, r0
 8001ec4:	9b02      	ldr	r3, [sp, #8]
 8001ec6:	4240      	negs	r0, r0
 8001ec8:	18e3      	adds	r3, r4, r3
 8001eca:	181b      	adds	r3, r3, r0
 8001ecc:	07dd      	lsls	r5, r3, #31
 8001ece:	085c      	lsrs	r4, r3, #1
 8001ed0:	2307      	movs	r3, #7
 8001ed2:	0849      	lsrs	r1, r1, #1
 8001ed4:	430d      	orrs	r5, r1
 8001ed6:	0017      	movs	r7, r2
 8001ed8:	402b      	ands	r3, r5
 8001eda:	e710      	b.n	8001cfe <__aeabi_dsub+0x34a>
 8001edc:	4663      	mov	r3, ip
 8001ede:	1a1d      	subs	r5, r3, r0
 8001ee0:	45ac      	cmp	ip, r5
 8001ee2:	4192      	sbcs	r2, r2
 8001ee4:	2601      	movs	r6, #1
 8001ee6:	9b02      	ldr	r3, [sp, #8]
 8001ee8:	4252      	negs	r2, r2
 8001eea:	1b1c      	subs	r4, r3, r4
 8001eec:	4688      	mov	r8, r1
 8001eee:	1aa4      	subs	r4, r4, r2
 8001ef0:	400e      	ands	r6, r1
 8001ef2:	e5c6      	b.n	8001a82 <__aeabi_dsub+0xce>
 8001ef4:	4663      	mov	r3, ip
 8001ef6:	18c5      	adds	r5, r0, r3
 8001ef8:	9b02      	ldr	r3, [sp, #8]
 8001efa:	4285      	cmp	r5, r0
 8001efc:	4180      	sbcs	r0, r0
 8001efe:	469c      	mov	ip, r3
 8001f00:	4240      	negs	r0, r0
 8001f02:	4464      	add	r4, ip
 8001f04:	1824      	adds	r4, r4, r0
 8001f06:	2701      	movs	r7, #1
 8001f08:	0223      	lsls	r3, r4, #8
 8001f0a:	d400      	bmi.n	8001f0e <__aeabi_dsub+0x55a>
 8001f0c:	e6f5      	b.n	8001cfa <__aeabi_dsub+0x346>
 8001f0e:	2702      	movs	r7, #2
 8001f10:	e641      	b.n	8001b96 <__aeabi_dsub+0x1e2>
 8001f12:	4663      	mov	r3, ip
 8001f14:	1ac5      	subs	r5, r0, r3
 8001f16:	42a8      	cmp	r0, r5
 8001f18:	4180      	sbcs	r0, r0
 8001f1a:	9b02      	ldr	r3, [sp, #8]
 8001f1c:	4240      	negs	r0, r0
 8001f1e:	1ae4      	subs	r4, r4, r3
 8001f20:	2701      	movs	r7, #1
 8001f22:	1a24      	subs	r4, r4, r0
 8001f24:	e5a8      	b.n	8001a78 <__aeabi_dsub+0xc4>
 8001f26:	9d02      	ldr	r5, [sp, #8]
 8001f28:	4652      	mov	r2, sl
 8001f2a:	002b      	movs	r3, r5
 8001f2c:	3a20      	subs	r2, #32
 8001f2e:	40d3      	lsrs	r3, r2
 8001f30:	0019      	movs	r1, r3
 8001f32:	4653      	mov	r3, sl
 8001f34:	2b20      	cmp	r3, #32
 8001f36:	d006      	beq.n	8001f46 <__aeabi_dsub+0x592>
 8001f38:	2240      	movs	r2, #64	@ 0x40
 8001f3a:	1ad2      	subs	r2, r2, r3
 8001f3c:	002b      	movs	r3, r5
 8001f3e:	4093      	lsls	r3, r2
 8001f40:	4662      	mov	r2, ip
 8001f42:	431a      	orrs	r2, r3
 8001f44:	4693      	mov	fp, r2
 8001f46:	465d      	mov	r5, fp
 8001f48:	1e6b      	subs	r3, r5, #1
 8001f4a:	419d      	sbcs	r5, r3
 8001f4c:	430d      	orrs	r5, r1
 8001f4e:	e615      	b.n	8001b7c <__aeabi_dsub+0x1c8>
 8001f50:	0762      	lsls	r2, r4, #29
 8001f52:	08c0      	lsrs	r0, r0, #3
 8001f54:	4302      	orrs	r2, r0
 8001f56:	08e4      	lsrs	r4, r4, #3
 8001f58:	e70d      	b.n	8001d76 <__aeabi_dsub+0x3c2>
 8001f5a:	0011      	movs	r1, r2
 8001f5c:	0027      	movs	r7, r4
 8001f5e:	3920      	subs	r1, #32
 8001f60:	40cf      	lsrs	r7, r1
 8001f62:	2a20      	cmp	r2, #32
 8001f64:	d005      	beq.n	8001f72 <__aeabi_dsub+0x5be>
 8001f66:	2140      	movs	r1, #64	@ 0x40
 8001f68:	1a8a      	subs	r2, r1, r2
 8001f6a:	4094      	lsls	r4, r2
 8001f6c:	0025      	movs	r5, r4
 8001f6e:	4305      	orrs	r5, r0
 8001f70:	9503      	str	r5, [sp, #12]
 8001f72:	9d03      	ldr	r5, [sp, #12]
 8001f74:	1e6a      	subs	r2, r5, #1
 8001f76:	4195      	sbcs	r5, r2
 8001f78:	433d      	orrs	r5, r7
 8001f7a:	e77d      	b.n	8001e78 <__aeabi_dsub+0x4c4>
 8001f7c:	2a00      	cmp	r2, #0
 8001f7e:	d100      	bne.n	8001f82 <__aeabi_dsub+0x5ce>
 8001f80:	e744      	b.n	8001e0c <__aeabi_dsub+0x458>
 8001f82:	2601      	movs	r6, #1
 8001f84:	400e      	ands	r6, r1
 8001f86:	4663      	mov	r3, ip
 8001f88:	08d9      	lsrs	r1, r3, #3
 8001f8a:	9b02      	ldr	r3, [sp, #8]
 8001f8c:	075a      	lsls	r2, r3, #29
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	08dc      	lsrs	r4, r3, #3
 8001f92:	e6f0      	b.n	8001d76 <__aeabi_dsub+0x3c2>
 8001f94:	2a00      	cmp	r2, #0
 8001f96:	d028      	beq.n	8001fea <__aeabi_dsub+0x636>
 8001f98:	4662      	mov	r2, ip
 8001f9a:	9f02      	ldr	r7, [sp, #8]
 8001f9c:	08c0      	lsrs	r0, r0, #3
 8001f9e:	433a      	orrs	r2, r7
 8001fa0:	d100      	bne.n	8001fa4 <__aeabi_dsub+0x5f0>
 8001fa2:	e6dc      	b.n	8001d5e <__aeabi_dsub+0x3aa>
 8001fa4:	0762      	lsls	r2, r4, #29
 8001fa6:	4310      	orrs	r0, r2
 8001fa8:	2280      	movs	r2, #128	@ 0x80
 8001faa:	08e4      	lsrs	r4, r4, #3
 8001fac:	0312      	lsls	r2, r2, #12
 8001fae:	4214      	tst	r4, r2
 8001fb0:	d009      	beq.n	8001fc6 <__aeabi_dsub+0x612>
 8001fb2:	08fd      	lsrs	r5, r7, #3
 8001fb4:	4215      	tst	r5, r2
 8001fb6:	d106      	bne.n	8001fc6 <__aeabi_dsub+0x612>
 8001fb8:	4663      	mov	r3, ip
 8001fba:	2601      	movs	r6, #1
 8001fbc:	002c      	movs	r4, r5
 8001fbe:	08d8      	lsrs	r0, r3, #3
 8001fc0:	077b      	lsls	r3, r7, #29
 8001fc2:	4318      	orrs	r0, r3
 8001fc4:	400e      	ands	r6, r1
 8001fc6:	0f42      	lsrs	r2, r0, #29
 8001fc8:	00c0      	lsls	r0, r0, #3
 8001fca:	08c0      	lsrs	r0, r0, #3
 8001fcc:	0752      	lsls	r2, r2, #29
 8001fce:	4302      	orrs	r2, r0
 8001fd0:	e601      	b.n	8001bd6 <__aeabi_dsub+0x222>
 8001fd2:	4663      	mov	r3, ip
 8001fd4:	1a1d      	subs	r5, r3, r0
 8001fd6:	45ac      	cmp	ip, r5
 8001fd8:	4192      	sbcs	r2, r2
 8001fda:	9b02      	ldr	r3, [sp, #8]
 8001fdc:	4252      	negs	r2, r2
 8001fde:	1b1c      	subs	r4, r3, r4
 8001fe0:	000e      	movs	r6, r1
 8001fe2:	4688      	mov	r8, r1
 8001fe4:	2701      	movs	r7, #1
 8001fe6:	1aa4      	subs	r4, r4, r2
 8001fe8:	e546      	b.n	8001a78 <__aeabi_dsub+0xc4>
 8001fea:	4663      	mov	r3, ip
 8001fec:	08d9      	lsrs	r1, r3, #3
 8001fee:	9b02      	ldr	r3, [sp, #8]
 8001ff0:	075a      	lsls	r2, r3, #29
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	08dc      	lsrs	r4, r3, #3
 8001ff6:	e5ee      	b.n	8001bd6 <__aeabi_dsub+0x222>
 8001ff8:	4663      	mov	r3, ip
 8001ffa:	9c02      	ldr	r4, [sp, #8]
 8001ffc:	9303      	str	r3, [sp, #12]
 8001ffe:	e6c7      	b.n	8001d90 <__aeabi_dsub+0x3dc>
 8002000:	08c0      	lsrs	r0, r0, #3
 8002002:	2a00      	cmp	r2, #0
 8002004:	d100      	bne.n	8002008 <__aeabi_dsub+0x654>
 8002006:	e6aa      	b.n	8001d5e <__aeabi_dsub+0x3aa>
 8002008:	0762      	lsls	r2, r4, #29
 800200a:	4310      	orrs	r0, r2
 800200c:	2280      	movs	r2, #128	@ 0x80
 800200e:	08e4      	lsrs	r4, r4, #3
 8002010:	0312      	lsls	r2, r2, #12
 8002012:	4214      	tst	r4, r2
 8002014:	d0d7      	beq.n	8001fc6 <__aeabi_dsub+0x612>
 8002016:	9f02      	ldr	r7, [sp, #8]
 8002018:	08fd      	lsrs	r5, r7, #3
 800201a:	4215      	tst	r5, r2
 800201c:	d1d3      	bne.n	8001fc6 <__aeabi_dsub+0x612>
 800201e:	4663      	mov	r3, ip
 8002020:	2601      	movs	r6, #1
 8002022:	08d8      	lsrs	r0, r3, #3
 8002024:	077b      	lsls	r3, r7, #29
 8002026:	002c      	movs	r4, r5
 8002028:	4318      	orrs	r0, r3
 800202a:	400e      	ands	r6, r1
 800202c:	e7cb      	b.n	8001fc6 <__aeabi_dsub+0x612>
 800202e:	000a      	movs	r2, r1
 8002030:	0027      	movs	r7, r4
 8002032:	3a20      	subs	r2, #32
 8002034:	40d7      	lsrs	r7, r2
 8002036:	2920      	cmp	r1, #32
 8002038:	d005      	beq.n	8002046 <__aeabi_dsub+0x692>
 800203a:	2240      	movs	r2, #64	@ 0x40
 800203c:	1a52      	subs	r2, r2, r1
 800203e:	4094      	lsls	r4, r2
 8002040:	0025      	movs	r5, r4
 8002042:	4305      	orrs	r5, r0
 8002044:	9503      	str	r5, [sp, #12]
 8002046:	9d03      	ldr	r5, [sp, #12]
 8002048:	1e6a      	subs	r2, r5, #1
 800204a:	4195      	sbcs	r5, r2
 800204c:	432f      	orrs	r7, r5
 800204e:	e610      	b.n	8001c72 <__aeabi_dsub+0x2be>
 8002050:	0014      	movs	r4, r2
 8002052:	2500      	movs	r5, #0
 8002054:	2200      	movs	r2, #0
 8002056:	e556      	b.n	8001b06 <__aeabi_dsub+0x152>
 8002058:	9b02      	ldr	r3, [sp, #8]
 800205a:	4460      	add	r0, ip
 800205c:	4699      	mov	r9, r3
 800205e:	4560      	cmp	r0, ip
 8002060:	4192      	sbcs	r2, r2
 8002062:	444c      	add	r4, r9
 8002064:	4252      	negs	r2, r2
 8002066:	0005      	movs	r5, r0
 8002068:	18a4      	adds	r4, r4, r2
 800206a:	e74c      	b.n	8001f06 <__aeabi_dsub+0x552>
 800206c:	001a      	movs	r2, r3
 800206e:	001c      	movs	r4, r3
 8002070:	432a      	orrs	r2, r5
 8002072:	d000      	beq.n	8002076 <__aeabi_dsub+0x6c2>
 8002074:	e6b3      	b.n	8001dde <__aeabi_dsub+0x42a>
 8002076:	e6c9      	b.n	8001e0c <__aeabi_dsub+0x458>
 8002078:	2480      	movs	r4, #128	@ 0x80
 800207a:	2600      	movs	r6, #0
 800207c:	0324      	lsls	r4, r4, #12
 800207e:	e5ae      	b.n	8001bde <__aeabi_dsub+0x22a>
 8002080:	2120      	movs	r1, #32
 8002082:	2500      	movs	r5, #0
 8002084:	1a09      	subs	r1, r1, r0
 8002086:	e517      	b.n	8001ab8 <__aeabi_dsub+0x104>
 8002088:	2200      	movs	r2, #0
 800208a:	2500      	movs	r5, #0
 800208c:	4c0b      	ldr	r4, [pc, #44]	@ (80020bc <__aeabi_dsub+0x708>)
 800208e:	e53a      	b.n	8001b06 <__aeabi_dsub+0x152>
 8002090:	2d00      	cmp	r5, #0
 8002092:	d100      	bne.n	8002096 <__aeabi_dsub+0x6e2>
 8002094:	e5f6      	b.n	8001c84 <__aeabi_dsub+0x2d0>
 8002096:	464b      	mov	r3, r9
 8002098:	1bda      	subs	r2, r3, r7
 800209a:	4692      	mov	sl, r2
 800209c:	2f00      	cmp	r7, #0
 800209e:	d100      	bne.n	80020a2 <__aeabi_dsub+0x6ee>
 80020a0:	e66f      	b.n	8001d82 <__aeabi_dsub+0x3ce>
 80020a2:	2a38      	cmp	r2, #56	@ 0x38
 80020a4:	dc05      	bgt.n	80020b2 <__aeabi_dsub+0x6fe>
 80020a6:	2680      	movs	r6, #128	@ 0x80
 80020a8:	0436      	lsls	r6, r6, #16
 80020aa:	4334      	orrs	r4, r6
 80020ac:	4688      	mov	r8, r1
 80020ae:	000e      	movs	r6, r1
 80020b0:	e6d1      	b.n	8001e56 <__aeabi_dsub+0x4a2>
 80020b2:	4688      	mov	r8, r1
 80020b4:	000e      	movs	r6, r1
 80020b6:	2501      	movs	r5, #1
 80020b8:	e6de      	b.n	8001e78 <__aeabi_dsub+0x4c4>
 80020ba:	46c0      	nop			@ (mov r8, r8)
 80020bc:	000007ff 	.word	0x000007ff
 80020c0:	ff7fffff 	.word	0xff7fffff
 80020c4:	000007fe 	.word	0x000007fe
 80020c8:	2d00      	cmp	r5, #0
 80020ca:	d100      	bne.n	80020ce <__aeabi_dsub+0x71a>
 80020cc:	e668      	b.n	8001da0 <__aeabi_dsub+0x3ec>
 80020ce:	464b      	mov	r3, r9
 80020d0:	1bd9      	subs	r1, r3, r7
 80020d2:	2f00      	cmp	r7, #0
 80020d4:	d101      	bne.n	80020da <__aeabi_dsub+0x726>
 80020d6:	468a      	mov	sl, r1
 80020d8:	e5a7      	b.n	8001c2a <__aeabi_dsub+0x276>
 80020da:	2701      	movs	r7, #1
 80020dc:	2938      	cmp	r1, #56	@ 0x38
 80020de:	dd00      	ble.n	80020e2 <__aeabi_dsub+0x72e>
 80020e0:	e5c7      	b.n	8001c72 <__aeabi_dsub+0x2be>
 80020e2:	2280      	movs	r2, #128	@ 0x80
 80020e4:	0412      	lsls	r2, r2, #16
 80020e6:	4314      	orrs	r4, r2
 80020e8:	e5af      	b.n	8001c4a <__aeabi_dsub+0x296>
 80020ea:	46c0      	nop			@ (mov r8, r8)

080020ec <__aeabi_dcmpun>:
 80020ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ee:	46c6      	mov	lr, r8
 80020f0:	031e      	lsls	r6, r3, #12
 80020f2:	0b36      	lsrs	r6, r6, #12
 80020f4:	46b0      	mov	r8, r6
 80020f6:	4e0d      	ldr	r6, [pc, #52]	@ (800212c <__aeabi_dcmpun+0x40>)
 80020f8:	030c      	lsls	r4, r1, #12
 80020fa:	004d      	lsls	r5, r1, #1
 80020fc:	005f      	lsls	r7, r3, #1
 80020fe:	b500      	push	{lr}
 8002100:	0b24      	lsrs	r4, r4, #12
 8002102:	0d6d      	lsrs	r5, r5, #21
 8002104:	0d7f      	lsrs	r7, r7, #21
 8002106:	42b5      	cmp	r5, r6
 8002108:	d00b      	beq.n	8002122 <__aeabi_dcmpun+0x36>
 800210a:	4908      	ldr	r1, [pc, #32]	@ (800212c <__aeabi_dcmpun+0x40>)
 800210c:	2000      	movs	r0, #0
 800210e:	428f      	cmp	r7, r1
 8002110:	d104      	bne.n	800211c <__aeabi_dcmpun+0x30>
 8002112:	4646      	mov	r6, r8
 8002114:	4316      	orrs	r6, r2
 8002116:	0030      	movs	r0, r6
 8002118:	1e43      	subs	r3, r0, #1
 800211a:	4198      	sbcs	r0, r3
 800211c:	bc80      	pop	{r7}
 800211e:	46b8      	mov	r8, r7
 8002120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002122:	4304      	orrs	r4, r0
 8002124:	2001      	movs	r0, #1
 8002126:	2c00      	cmp	r4, #0
 8002128:	d1f8      	bne.n	800211c <__aeabi_dcmpun+0x30>
 800212a:	e7ee      	b.n	800210a <__aeabi_dcmpun+0x1e>
 800212c:	000007ff 	.word	0x000007ff

08002130 <__aeabi_d2iz>:
 8002130:	000b      	movs	r3, r1
 8002132:	0002      	movs	r2, r0
 8002134:	b570      	push	{r4, r5, r6, lr}
 8002136:	4d16      	ldr	r5, [pc, #88]	@ (8002190 <__aeabi_d2iz+0x60>)
 8002138:	030c      	lsls	r4, r1, #12
 800213a:	b082      	sub	sp, #8
 800213c:	0049      	lsls	r1, r1, #1
 800213e:	2000      	movs	r0, #0
 8002140:	9200      	str	r2, [sp, #0]
 8002142:	9301      	str	r3, [sp, #4]
 8002144:	0b24      	lsrs	r4, r4, #12
 8002146:	0d49      	lsrs	r1, r1, #21
 8002148:	0fde      	lsrs	r6, r3, #31
 800214a:	42a9      	cmp	r1, r5
 800214c:	dd04      	ble.n	8002158 <__aeabi_d2iz+0x28>
 800214e:	4811      	ldr	r0, [pc, #68]	@ (8002194 <__aeabi_d2iz+0x64>)
 8002150:	4281      	cmp	r1, r0
 8002152:	dd03      	ble.n	800215c <__aeabi_d2iz+0x2c>
 8002154:	4b10      	ldr	r3, [pc, #64]	@ (8002198 <__aeabi_d2iz+0x68>)
 8002156:	18f0      	adds	r0, r6, r3
 8002158:	b002      	add	sp, #8
 800215a:	bd70      	pop	{r4, r5, r6, pc}
 800215c:	2080      	movs	r0, #128	@ 0x80
 800215e:	0340      	lsls	r0, r0, #13
 8002160:	4320      	orrs	r0, r4
 8002162:	4c0e      	ldr	r4, [pc, #56]	@ (800219c <__aeabi_d2iz+0x6c>)
 8002164:	1a64      	subs	r4, r4, r1
 8002166:	2c1f      	cmp	r4, #31
 8002168:	dd08      	ble.n	800217c <__aeabi_d2iz+0x4c>
 800216a:	4b0d      	ldr	r3, [pc, #52]	@ (80021a0 <__aeabi_d2iz+0x70>)
 800216c:	1a5b      	subs	r3, r3, r1
 800216e:	40d8      	lsrs	r0, r3
 8002170:	0003      	movs	r3, r0
 8002172:	4258      	negs	r0, r3
 8002174:	2e00      	cmp	r6, #0
 8002176:	d1ef      	bne.n	8002158 <__aeabi_d2iz+0x28>
 8002178:	0018      	movs	r0, r3
 800217a:	e7ed      	b.n	8002158 <__aeabi_d2iz+0x28>
 800217c:	4b09      	ldr	r3, [pc, #36]	@ (80021a4 <__aeabi_d2iz+0x74>)
 800217e:	9a00      	ldr	r2, [sp, #0]
 8002180:	469c      	mov	ip, r3
 8002182:	0003      	movs	r3, r0
 8002184:	4461      	add	r1, ip
 8002186:	408b      	lsls	r3, r1
 8002188:	40e2      	lsrs	r2, r4
 800218a:	4313      	orrs	r3, r2
 800218c:	e7f1      	b.n	8002172 <__aeabi_d2iz+0x42>
 800218e:	46c0      	nop			@ (mov r8, r8)
 8002190:	000003fe 	.word	0x000003fe
 8002194:	0000041d 	.word	0x0000041d
 8002198:	7fffffff 	.word	0x7fffffff
 800219c:	00000433 	.word	0x00000433
 80021a0:	00000413 	.word	0x00000413
 80021a4:	fffffbed 	.word	0xfffffbed

080021a8 <__aeabi_i2d>:
 80021a8:	b570      	push	{r4, r5, r6, lr}
 80021aa:	2800      	cmp	r0, #0
 80021ac:	d016      	beq.n	80021dc <__aeabi_i2d+0x34>
 80021ae:	17c3      	asrs	r3, r0, #31
 80021b0:	18c5      	adds	r5, r0, r3
 80021b2:	405d      	eors	r5, r3
 80021b4:	0fc4      	lsrs	r4, r0, #31
 80021b6:	0028      	movs	r0, r5
 80021b8:	f000 f8f0 	bl	800239c <__clzsi2>
 80021bc:	4b10      	ldr	r3, [pc, #64]	@ (8002200 <__aeabi_i2d+0x58>)
 80021be:	1a1b      	subs	r3, r3, r0
 80021c0:	055b      	lsls	r3, r3, #21
 80021c2:	0d5b      	lsrs	r3, r3, #21
 80021c4:	280a      	cmp	r0, #10
 80021c6:	dc14      	bgt.n	80021f2 <__aeabi_i2d+0x4a>
 80021c8:	0002      	movs	r2, r0
 80021ca:	002e      	movs	r6, r5
 80021cc:	3215      	adds	r2, #21
 80021ce:	4096      	lsls	r6, r2
 80021d0:	220b      	movs	r2, #11
 80021d2:	1a12      	subs	r2, r2, r0
 80021d4:	40d5      	lsrs	r5, r2
 80021d6:	032d      	lsls	r5, r5, #12
 80021d8:	0b2d      	lsrs	r5, r5, #12
 80021da:	e003      	b.n	80021e4 <__aeabi_i2d+0x3c>
 80021dc:	2400      	movs	r4, #0
 80021de:	2300      	movs	r3, #0
 80021e0:	2500      	movs	r5, #0
 80021e2:	2600      	movs	r6, #0
 80021e4:	051b      	lsls	r3, r3, #20
 80021e6:	432b      	orrs	r3, r5
 80021e8:	07e4      	lsls	r4, r4, #31
 80021ea:	4323      	orrs	r3, r4
 80021ec:	0030      	movs	r0, r6
 80021ee:	0019      	movs	r1, r3
 80021f0:	bd70      	pop	{r4, r5, r6, pc}
 80021f2:	380b      	subs	r0, #11
 80021f4:	4085      	lsls	r5, r0
 80021f6:	032d      	lsls	r5, r5, #12
 80021f8:	2600      	movs	r6, #0
 80021fa:	0b2d      	lsrs	r5, r5, #12
 80021fc:	e7f2      	b.n	80021e4 <__aeabi_i2d+0x3c>
 80021fe:	46c0      	nop			@ (mov r8, r8)
 8002200:	0000041e 	.word	0x0000041e

08002204 <__aeabi_f2d>:
 8002204:	b570      	push	{r4, r5, r6, lr}
 8002206:	0242      	lsls	r2, r0, #9
 8002208:	0043      	lsls	r3, r0, #1
 800220a:	0fc4      	lsrs	r4, r0, #31
 800220c:	20fe      	movs	r0, #254	@ 0xfe
 800220e:	0e1b      	lsrs	r3, r3, #24
 8002210:	1c59      	adds	r1, r3, #1
 8002212:	0a55      	lsrs	r5, r2, #9
 8002214:	4208      	tst	r0, r1
 8002216:	d00c      	beq.n	8002232 <__aeabi_f2d+0x2e>
 8002218:	21e0      	movs	r1, #224	@ 0xe0
 800221a:	0089      	lsls	r1, r1, #2
 800221c:	468c      	mov	ip, r1
 800221e:	076d      	lsls	r5, r5, #29
 8002220:	0b12      	lsrs	r2, r2, #12
 8002222:	4463      	add	r3, ip
 8002224:	051b      	lsls	r3, r3, #20
 8002226:	4313      	orrs	r3, r2
 8002228:	07e4      	lsls	r4, r4, #31
 800222a:	4323      	orrs	r3, r4
 800222c:	0028      	movs	r0, r5
 800222e:	0019      	movs	r1, r3
 8002230:	bd70      	pop	{r4, r5, r6, pc}
 8002232:	2b00      	cmp	r3, #0
 8002234:	d114      	bne.n	8002260 <__aeabi_f2d+0x5c>
 8002236:	2d00      	cmp	r5, #0
 8002238:	d01b      	beq.n	8002272 <__aeabi_f2d+0x6e>
 800223a:	0028      	movs	r0, r5
 800223c:	f000 f8ae 	bl	800239c <__clzsi2>
 8002240:	280a      	cmp	r0, #10
 8002242:	dc1c      	bgt.n	800227e <__aeabi_f2d+0x7a>
 8002244:	230b      	movs	r3, #11
 8002246:	002a      	movs	r2, r5
 8002248:	1a1b      	subs	r3, r3, r0
 800224a:	40da      	lsrs	r2, r3
 800224c:	0003      	movs	r3, r0
 800224e:	3315      	adds	r3, #21
 8002250:	409d      	lsls	r5, r3
 8002252:	4b0e      	ldr	r3, [pc, #56]	@ (800228c <__aeabi_f2d+0x88>)
 8002254:	0312      	lsls	r2, r2, #12
 8002256:	1a1b      	subs	r3, r3, r0
 8002258:	055b      	lsls	r3, r3, #21
 800225a:	0b12      	lsrs	r2, r2, #12
 800225c:	0d5b      	lsrs	r3, r3, #21
 800225e:	e7e1      	b.n	8002224 <__aeabi_f2d+0x20>
 8002260:	2d00      	cmp	r5, #0
 8002262:	d009      	beq.n	8002278 <__aeabi_f2d+0x74>
 8002264:	0b13      	lsrs	r3, r2, #12
 8002266:	2280      	movs	r2, #128	@ 0x80
 8002268:	0312      	lsls	r2, r2, #12
 800226a:	431a      	orrs	r2, r3
 800226c:	076d      	lsls	r5, r5, #29
 800226e:	4b08      	ldr	r3, [pc, #32]	@ (8002290 <__aeabi_f2d+0x8c>)
 8002270:	e7d8      	b.n	8002224 <__aeabi_f2d+0x20>
 8002272:	2300      	movs	r3, #0
 8002274:	2200      	movs	r2, #0
 8002276:	e7d5      	b.n	8002224 <__aeabi_f2d+0x20>
 8002278:	2200      	movs	r2, #0
 800227a:	4b05      	ldr	r3, [pc, #20]	@ (8002290 <__aeabi_f2d+0x8c>)
 800227c:	e7d2      	b.n	8002224 <__aeabi_f2d+0x20>
 800227e:	0003      	movs	r3, r0
 8002280:	002a      	movs	r2, r5
 8002282:	3b0b      	subs	r3, #11
 8002284:	409a      	lsls	r2, r3
 8002286:	2500      	movs	r5, #0
 8002288:	e7e3      	b.n	8002252 <__aeabi_f2d+0x4e>
 800228a:	46c0      	nop			@ (mov r8, r8)
 800228c:	00000389 	.word	0x00000389
 8002290:	000007ff 	.word	0x000007ff

08002294 <__aeabi_d2f>:
 8002294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002296:	004b      	lsls	r3, r1, #1
 8002298:	030f      	lsls	r7, r1, #12
 800229a:	0d5b      	lsrs	r3, r3, #21
 800229c:	4c3b      	ldr	r4, [pc, #236]	@ (800238c <__aeabi_d2f+0xf8>)
 800229e:	0f45      	lsrs	r5, r0, #29
 80022a0:	b083      	sub	sp, #12
 80022a2:	0a7f      	lsrs	r7, r7, #9
 80022a4:	1c5e      	adds	r6, r3, #1
 80022a6:	432f      	orrs	r7, r5
 80022a8:	9000      	str	r0, [sp, #0]
 80022aa:	9101      	str	r1, [sp, #4]
 80022ac:	0fca      	lsrs	r2, r1, #31
 80022ae:	00c5      	lsls	r5, r0, #3
 80022b0:	4226      	tst	r6, r4
 80022b2:	d00b      	beq.n	80022cc <__aeabi_d2f+0x38>
 80022b4:	4936      	ldr	r1, [pc, #216]	@ (8002390 <__aeabi_d2f+0xfc>)
 80022b6:	185c      	adds	r4, r3, r1
 80022b8:	2cfe      	cmp	r4, #254	@ 0xfe
 80022ba:	dd13      	ble.n	80022e4 <__aeabi_d2f+0x50>
 80022bc:	20ff      	movs	r0, #255	@ 0xff
 80022be:	2300      	movs	r3, #0
 80022c0:	05c0      	lsls	r0, r0, #23
 80022c2:	4318      	orrs	r0, r3
 80022c4:	07d2      	lsls	r2, r2, #31
 80022c6:	4310      	orrs	r0, r2
 80022c8:	b003      	add	sp, #12
 80022ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d102      	bne.n	80022d6 <__aeabi_d2f+0x42>
 80022d0:	2000      	movs	r0, #0
 80022d2:	2300      	movs	r3, #0
 80022d4:	e7f4      	b.n	80022c0 <__aeabi_d2f+0x2c>
 80022d6:	433d      	orrs	r5, r7
 80022d8:	d0f0      	beq.n	80022bc <__aeabi_d2f+0x28>
 80022da:	2380      	movs	r3, #128	@ 0x80
 80022dc:	03db      	lsls	r3, r3, #15
 80022de:	20ff      	movs	r0, #255	@ 0xff
 80022e0:	433b      	orrs	r3, r7
 80022e2:	e7ed      	b.n	80022c0 <__aeabi_d2f+0x2c>
 80022e4:	2c00      	cmp	r4, #0
 80022e6:	dd14      	ble.n	8002312 <__aeabi_d2f+0x7e>
 80022e8:	9b00      	ldr	r3, [sp, #0]
 80022ea:	00ff      	lsls	r7, r7, #3
 80022ec:	019b      	lsls	r3, r3, #6
 80022ee:	1e58      	subs	r0, r3, #1
 80022f0:	4183      	sbcs	r3, r0
 80022f2:	0f69      	lsrs	r1, r5, #29
 80022f4:	433b      	orrs	r3, r7
 80022f6:	430b      	orrs	r3, r1
 80022f8:	0759      	lsls	r1, r3, #29
 80022fa:	d041      	beq.n	8002380 <__aeabi_d2f+0xec>
 80022fc:	210f      	movs	r1, #15
 80022fe:	4019      	ands	r1, r3
 8002300:	2904      	cmp	r1, #4
 8002302:	d028      	beq.n	8002356 <__aeabi_d2f+0xc2>
 8002304:	3304      	adds	r3, #4
 8002306:	0159      	lsls	r1, r3, #5
 8002308:	d525      	bpl.n	8002356 <__aeabi_d2f+0xc2>
 800230a:	3401      	adds	r4, #1
 800230c:	2300      	movs	r3, #0
 800230e:	b2e0      	uxtb	r0, r4
 8002310:	e7d6      	b.n	80022c0 <__aeabi_d2f+0x2c>
 8002312:	0021      	movs	r1, r4
 8002314:	3117      	adds	r1, #23
 8002316:	dbdb      	blt.n	80022d0 <__aeabi_d2f+0x3c>
 8002318:	2180      	movs	r1, #128	@ 0x80
 800231a:	201e      	movs	r0, #30
 800231c:	0409      	lsls	r1, r1, #16
 800231e:	4339      	orrs	r1, r7
 8002320:	1b00      	subs	r0, r0, r4
 8002322:	281f      	cmp	r0, #31
 8002324:	dd1b      	ble.n	800235e <__aeabi_d2f+0xca>
 8002326:	2602      	movs	r6, #2
 8002328:	4276      	negs	r6, r6
 800232a:	1b34      	subs	r4, r6, r4
 800232c:	000e      	movs	r6, r1
 800232e:	40e6      	lsrs	r6, r4
 8002330:	0034      	movs	r4, r6
 8002332:	2820      	cmp	r0, #32
 8002334:	d004      	beq.n	8002340 <__aeabi_d2f+0xac>
 8002336:	4817      	ldr	r0, [pc, #92]	@ (8002394 <__aeabi_d2f+0x100>)
 8002338:	4684      	mov	ip, r0
 800233a:	4463      	add	r3, ip
 800233c:	4099      	lsls	r1, r3
 800233e:	430d      	orrs	r5, r1
 8002340:	002b      	movs	r3, r5
 8002342:	1e59      	subs	r1, r3, #1
 8002344:	418b      	sbcs	r3, r1
 8002346:	4323      	orrs	r3, r4
 8002348:	0759      	lsls	r1, r3, #29
 800234a:	d015      	beq.n	8002378 <__aeabi_d2f+0xe4>
 800234c:	210f      	movs	r1, #15
 800234e:	2400      	movs	r4, #0
 8002350:	4019      	ands	r1, r3
 8002352:	2904      	cmp	r1, #4
 8002354:	d117      	bne.n	8002386 <__aeabi_d2f+0xf2>
 8002356:	019b      	lsls	r3, r3, #6
 8002358:	0a5b      	lsrs	r3, r3, #9
 800235a:	b2e0      	uxtb	r0, r4
 800235c:	e7b0      	b.n	80022c0 <__aeabi_d2f+0x2c>
 800235e:	4c0e      	ldr	r4, [pc, #56]	@ (8002398 <__aeabi_d2f+0x104>)
 8002360:	191c      	adds	r4, r3, r4
 8002362:	002b      	movs	r3, r5
 8002364:	40a5      	lsls	r5, r4
 8002366:	40c3      	lsrs	r3, r0
 8002368:	40a1      	lsls	r1, r4
 800236a:	1e68      	subs	r0, r5, #1
 800236c:	4185      	sbcs	r5, r0
 800236e:	4329      	orrs	r1, r5
 8002370:	430b      	orrs	r3, r1
 8002372:	2400      	movs	r4, #0
 8002374:	0759      	lsls	r1, r3, #29
 8002376:	d1c1      	bne.n	80022fc <__aeabi_d2f+0x68>
 8002378:	019b      	lsls	r3, r3, #6
 800237a:	2000      	movs	r0, #0
 800237c:	0a5b      	lsrs	r3, r3, #9
 800237e:	e79f      	b.n	80022c0 <__aeabi_d2f+0x2c>
 8002380:	08db      	lsrs	r3, r3, #3
 8002382:	b2e0      	uxtb	r0, r4
 8002384:	e79c      	b.n	80022c0 <__aeabi_d2f+0x2c>
 8002386:	3304      	adds	r3, #4
 8002388:	e7e5      	b.n	8002356 <__aeabi_d2f+0xc2>
 800238a:	46c0      	nop			@ (mov r8, r8)
 800238c:	000007fe 	.word	0x000007fe
 8002390:	fffffc80 	.word	0xfffffc80
 8002394:	fffffca2 	.word	0xfffffca2
 8002398:	fffffc82 	.word	0xfffffc82

0800239c <__clzsi2>:
 800239c:	211c      	movs	r1, #28
 800239e:	2301      	movs	r3, #1
 80023a0:	041b      	lsls	r3, r3, #16
 80023a2:	4298      	cmp	r0, r3
 80023a4:	d301      	bcc.n	80023aa <__clzsi2+0xe>
 80023a6:	0c00      	lsrs	r0, r0, #16
 80023a8:	3910      	subs	r1, #16
 80023aa:	0a1b      	lsrs	r3, r3, #8
 80023ac:	4298      	cmp	r0, r3
 80023ae:	d301      	bcc.n	80023b4 <__clzsi2+0x18>
 80023b0:	0a00      	lsrs	r0, r0, #8
 80023b2:	3908      	subs	r1, #8
 80023b4:	091b      	lsrs	r3, r3, #4
 80023b6:	4298      	cmp	r0, r3
 80023b8:	d301      	bcc.n	80023be <__clzsi2+0x22>
 80023ba:	0900      	lsrs	r0, r0, #4
 80023bc:	3904      	subs	r1, #4
 80023be:	a202      	add	r2, pc, #8	@ (adr r2, 80023c8 <__clzsi2+0x2c>)
 80023c0:	5c10      	ldrb	r0, [r2, r0]
 80023c2:	1840      	adds	r0, r0, r1
 80023c4:	4770      	bx	lr
 80023c6:	46c0      	nop			@ (mov r8, r8)
 80023c8:	02020304 	.word	0x02020304
 80023cc:	01010101 	.word	0x01010101
	...

080023d8 <bmp180_init>:
/**
 * @brief ініціалізація давача температури і тиску BMP180
 * @param hi2c User I2C вказівник дескриптора інтерфейсу I2C.
 */
void bmp180_init(I2C_HandleTypeDef *hi2c) {
	_bmp180_ui2c = hi2c;
 80023d8:	4b01      	ldr	r3, [pc, #4]	@ (80023e0 <bmp180_init+0x8>)
 80023da:	6018      	str	r0, [r3, #0]
}
 80023dc:	4770      	bx	lr
 80023de:	46c0      	nop			@ (mov r8, r8)
 80023e0:	200000e4 	.word	0x200000e4

080023e4 <bmp180_set_oversampling>:
 * @param oss Enum, налаштування oversampling.
 * @note доступні режими дискретизації (точності) вимірюваняя тиску: BMP180_LOW, BMP180_STANDARD, BMP180_HIGH, BMP180_ULTRA.
 * @note детально описано в розділі 3.3.1 даташиту давача
 */
void bmp180_set_oversampling(BMP180_OSS oss) {
	_bmp180_oss = oss;
 80023e4:	4b01      	ldr	r3, [pc, #4]	@ (80023ec <bmp180_set_oversampling+0x8>)
 80023e6:	7018      	strb	r0, [r3, #0]
}
 80023e8:	4770      	bx	lr
 80023ea:	46c0      	nop			@ (mov r8, r8)
 80023ec:	200000c8 	.word	0x200000c8

080023f0 <bmp180_update_calibration_data>:

/**
 * @brief зчитування калібрувальних коефіцієнтів з EEPROM давача BMP180
 * @note викликається один раз перед основним циклом (main loop)
 */
void bmp180_update_calibration_data(void) {
 80023f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023f2:	46ce      	mov	lr, r9
 80023f4:	4647      	mov	r7, r8
 * @brief зчитує байт з вказаного регістра
 * @param reg  - адреса регістра, з якого має бути виконано зчитування
 * @return повертає прочитаний байт
 */
uint8_t bmp180_read_reg(uint8_t reg) {
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 80023f6:	25fa      	movs	r5, #250	@ 0xfa
void bmp180_update_calibration_data(void) {
 80023f8:	b580      	push	{r7, lr}
 80023fa:	270e      	movs	r7, #14
 80023fc:	23aa      	movs	r3, #170	@ 0xaa
	uint8_t result;
	HAL_I2C_Master_Receive(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &result, 1, BMP180_I2C_TIMEOUT);
 80023fe:	240f      	movs	r4, #15
void bmp180_update_calibration_data(void) {
 8002400:	b085      	sub	sp, #20
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 8002402:	4ee0      	ldr	r6, [pc, #896]	@ (8002784 <bmp180_update_calibration_data+0x394>)
 8002404:	446f      	add	r7, sp
 8002406:	00ad      	lsls	r5, r5, #2
	HAL_I2C_Master_Receive(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &result, 1, BMP180_I2C_TIMEOUT);
 8002408:	446c      	add	r4, sp
 800240a:	703b      	strb	r3, [r7, #0]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 800240c:	003a      	movs	r2, r7
 800240e:	6830      	ldr	r0, [r6, #0]
 8002410:	21ee      	movs	r1, #238	@ 0xee
 8002412:	9500      	str	r5, [sp, #0]
 8002414:	3ba9      	subs	r3, #169	@ 0xa9
 8002416:	f002 fb11 	bl	8004a3c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &result, 1, BMP180_I2C_TIMEOUT);
 800241a:	0022      	movs	r2, r4
 800241c:	6830      	ldr	r0, [r6, #0]
 800241e:	2301      	movs	r3, #1
 8002420:	21ee      	movs	r1, #238	@ 0xee
 8002422:	9500      	str	r5, [sp, #0]
 8002424:	f002 fbdc 	bl	8004be0 <HAL_I2C_Master_Receive>
	return result;
 8002428:	7823      	ldrb	r3, [r4, #0]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 800242a:	003a      	movs	r2, r7
	return result;
 800242c:	4698      	mov	r8, r3
 800242e:	23ab      	movs	r3, #171	@ 0xab
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 8002430:	6830      	ldr	r0, [r6, #0]
 8002432:	703b      	strb	r3, [r7, #0]
 8002434:	21ee      	movs	r1, #238	@ 0xee
 8002436:	9500      	str	r5, [sp, #0]
 8002438:	3baa      	subs	r3, #170	@ 0xaa
 800243a:	f002 faff 	bl	8004a3c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &result, 1, BMP180_I2C_TIMEOUT);
 800243e:	0022      	movs	r2, r4
 8002440:	6830      	ldr	r0, [r6, #0]
 8002442:	2301      	movs	r3, #1
 8002444:	21ee      	movs	r1, #238	@ 0xee
 8002446:	9500      	str	r5, [sp, #0]
 8002448:	f002 fbca 	bl	8004be0 <HAL_I2C_Master_Receive>
	_bmp180_eeprom.BMP180_AC1 = (bmp180_read_reg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC1]) << 8) | bmp180_read_reg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC1]);
 800244c:	4643      	mov	r3, r8
	return result;
 800244e:	7821      	ldrb	r1, [r4, #0]
	_bmp180_eeprom.BMP180_AC1 = (bmp180_read_reg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC1]) << 8) | bmp180_read_reg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC1]);
 8002450:	4acd      	ldr	r2, [pc, #820]	@ (8002788 <bmp180_update_calibration_data+0x398>)
 8002452:	021b      	lsls	r3, r3, #8
 8002454:	430b      	orrs	r3, r1
 8002456:	8013      	strh	r3, [r2, #0]
	_bmp180_eeprom.BMP180_AC2 = (bmp180_read_reg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC2]) << 8) | bmp180_read_reg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC2]);
 8002458:	23ac      	movs	r3, #172	@ 0xac
	_bmp180_eeprom.BMP180_AC1 = (bmp180_read_reg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC1]) << 8) | bmp180_read_reg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC1]);
 800245a:	4690      	mov	r8, r2
 800245c:	703b      	strb	r3, [r7, #0]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 800245e:	003a      	movs	r2, r7
 8002460:	6830      	ldr	r0, [r6, #0]
 8002462:	21ee      	movs	r1, #238	@ 0xee
 8002464:	9500      	str	r5, [sp, #0]
 8002466:	3bab      	subs	r3, #171	@ 0xab
 8002468:	f002 fae8 	bl	8004a3c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &result, 1, BMP180_I2C_TIMEOUT);
 800246c:	0022      	movs	r2, r4
 800246e:	6830      	ldr	r0, [r6, #0]
 8002470:	2301      	movs	r3, #1
 8002472:	21ee      	movs	r1, #238	@ 0xee
 8002474:	9500      	str	r5, [sp, #0]
 8002476:	f002 fbb3 	bl	8004be0 <HAL_I2C_Master_Receive>
	return result;
 800247a:	7823      	ldrb	r3, [r4, #0]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 800247c:	003a      	movs	r2, r7
	return result;
 800247e:	4699      	mov	r9, r3
 8002480:	23ad      	movs	r3, #173	@ 0xad
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 8002482:	6830      	ldr	r0, [r6, #0]
 8002484:	703b      	strb	r3, [r7, #0]
 8002486:	21ee      	movs	r1, #238	@ 0xee
 8002488:	9500      	str	r5, [sp, #0]
 800248a:	3bac      	subs	r3, #172	@ 0xac
 800248c:	f002 fad6 	bl	8004a3c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &result, 1, BMP180_I2C_TIMEOUT);
 8002490:	0022      	movs	r2, r4
 8002492:	6830      	ldr	r0, [r6, #0]
 8002494:	2301      	movs	r3, #1
 8002496:	21ee      	movs	r1, #238	@ 0xee
 8002498:	9500      	str	r5, [sp, #0]
 800249a:	f002 fba1 	bl	8004be0 <HAL_I2C_Master_Receive>
	_bmp180_eeprom.BMP180_AC2 = (bmp180_read_reg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC2]) << 8) | bmp180_read_reg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC2]);
 800249e:	464b      	mov	r3, r9
	return result;
 80024a0:	7822      	ldrb	r2, [r4, #0]
	_bmp180_eeprom.BMP180_AC2 = (bmp180_read_reg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC2]) << 8) | bmp180_read_reg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC2]);
 80024a2:	021b      	lsls	r3, r3, #8
 80024a4:	4313      	orrs	r3, r2
 80024a6:	4642      	mov	r2, r8
 80024a8:	8053      	strh	r3, [r2, #2]
	_bmp180_eeprom.BMP180_AC3 = (bmp180_read_reg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC3]) << 8) | bmp180_read_reg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC3]);
 80024aa:	23ae      	movs	r3, #174	@ 0xae
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 80024ac:	003a      	movs	r2, r7
 80024ae:	703b      	strb	r3, [r7, #0]
 80024b0:	6830      	ldr	r0, [r6, #0]
 80024b2:	21ee      	movs	r1, #238	@ 0xee
 80024b4:	9500      	str	r5, [sp, #0]
 80024b6:	3bad      	subs	r3, #173	@ 0xad
 80024b8:	f002 fac0 	bl	8004a3c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &result, 1, BMP180_I2C_TIMEOUT);
 80024bc:	0022      	movs	r2, r4
 80024be:	6830      	ldr	r0, [r6, #0]
 80024c0:	2301      	movs	r3, #1
 80024c2:	21ee      	movs	r1, #238	@ 0xee
 80024c4:	9500      	str	r5, [sp, #0]
 80024c6:	f002 fb8b 	bl	8004be0 <HAL_I2C_Master_Receive>
	return result;
 80024ca:	7823      	ldrb	r3, [r4, #0]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 80024cc:	003a      	movs	r2, r7
	return result;
 80024ce:	4699      	mov	r9, r3
 80024d0:	23af      	movs	r3, #175	@ 0xaf
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 80024d2:	6830      	ldr	r0, [r6, #0]
 80024d4:	703b      	strb	r3, [r7, #0]
 80024d6:	21ee      	movs	r1, #238	@ 0xee
 80024d8:	9500      	str	r5, [sp, #0]
 80024da:	3bae      	subs	r3, #174	@ 0xae
 80024dc:	f002 faae 	bl	8004a3c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &result, 1, BMP180_I2C_TIMEOUT);
 80024e0:	0022      	movs	r2, r4
 80024e2:	6830      	ldr	r0, [r6, #0]
 80024e4:	2301      	movs	r3, #1
 80024e6:	21ee      	movs	r1, #238	@ 0xee
 80024e8:	9500      	str	r5, [sp, #0]
 80024ea:	f002 fb79 	bl	8004be0 <HAL_I2C_Master_Receive>
	_bmp180_eeprom.BMP180_AC3 = (bmp180_read_reg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC3]) << 8) | bmp180_read_reg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC3]);
 80024ee:	464b      	mov	r3, r9
	return result;
 80024f0:	7822      	ldrb	r2, [r4, #0]
	_bmp180_eeprom.BMP180_AC3 = (bmp180_read_reg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC3]) << 8) | bmp180_read_reg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC3]);
 80024f2:	021b      	lsls	r3, r3, #8
 80024f4:	4313      	orrs	r3, r2
 80024f6:	4642      	mov	r2, r8
 80024f8:	8093      	strh	r3, [r2, #4]
	_bmp180_eeprom.BMP180_AC4 = (bmp180_read_reg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC4]) << 8) | bmp180_read_reg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC4]);
 80024fa:	23b0      	movs	r3, #176	@ 0xb0
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 80024fc:	003a      	movs	r2, r7
 80024fe:	703b      	strb	r3, [r7, #0]
 8002500:	6830      	ldr	r0, [r6, #0]
 8002502:	21ee      	movs	r1, #238	@ 0xee
 8002504:	9500      	str	r5, [sp, #0]
 8002506:	3baf      	subs	r3, #175	@ 0xaf
 8002508:	f002 fa98 	bl	8004a3c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &result, 1, BMP180_I2C_TIMEOUT);
 800250c:	0022      	movs	r2, r4
 800250e:	6830      	ldr	r0, [r6, #0]
 8002510:	2301      	movs	r3, #1
 8002512:	21ee      	movs	r1, #238	@ 0xee
 8002514:	9500      	str	r5, [sp, #0]
 8002516:	f002 fb63 	bl	8004be0 <HAL_I2C_Master_Receive>
	return result;
 800251a:	7823      	ldrb	r3, [r4, #0]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 800251c:	003a      	movs	r2, r7
	return result;
 800251e:	4699      	mov	r9, r3
 8002520:	23b1      	movs	r3, #177	@ 0xb1
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 8002522:	6830      	ldr	r0, [r6, #0]
 8002524:	703b      	strb	r3, [r7, #0]
 8002526:	21ee      	movs	r1, #238	@ 0xee
 8002528:	9500      	str	r5, [sp, #0]
 800252a:	3bb0      	subs	r3, #176	@ 0xb0
 800252c:	f002 fa86 	bl	8004a3c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &result, 1, BMP180_I2C_TIMEOUT);
 8002530:	0022      	movs	r2, r4
 8002532:	6830      	ldr	r0, [r6, #0]
 8002534:	2301      	movs	r3, #1
 8002536:	21ee      	movs	r1, #238	@ 0xee
 8002538:	9500      	str	r5, [sp, #0]
 800253a:	f002 fb51 	bl	8004be0 <HAL_I2C_Master_Receive>
	_bmp180_eeprom.BMP180_AC4 = (bmp180_read_reg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC4]) << 8) | bmp180_read_reg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC4]);
 800253e:	464b      	mov	r3, r9
	return result;
 8002540:	7822      	ldrb	r2, [r4, #0]
	_bmp180_eeprom.BMP180_AC4 = (bmp180_read_reg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC4]) << 8) | bmp180_read_reg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC4]);
 8002542:	021b      	lsls	r3, r3, #8
 8002544:	4313      	orrs	r3, r2
 8002546:	4642      	mov	r2, r8
 8002548:	80d3      	strh	r3, [r2, #6]
	_bmp180_eeprom.BMP180_AC5 = (bmp180_read_reg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC5]) << 8) | bmp180_read_reg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC5]);
 800254a:	23b2      	movs	r3, #178	@ 0xb2
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 800254c:	003a      	movs	r2, r7
 800254e:	703b      	strb	r3, [r7, #0]
 8002550:	6830      	ldr	r0, [r6, #0]
 8002552:	21ee      	movs	r1, #238	@ 0xee
 8002554:	9500      	str	r5, [sp, #0]
 8002556:	3bb1      	subs	r3, #177	@ 0xb1
 8002558:	f002 fa70 	bl	8004a3c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &result, 1, BMP180_I2C_TIMEOUT);
 800255c:	0022      	movs	r2, r4
 800255e:	6830      	ldr	r0, [r6, #0]
 8002560:	2301      	movs	r3, #1
 8002562:	21ee      	movs	r1, #238	@ 0xee
 8002564:	9500      	str	r5, [sp, #0]
 8002566:	f002 fb3b 	bl	8004be0 <HAL_I2C_Master_Receive>
	return result;
 800256a:	7823      	ldrb	r3, [r4, #0]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 800256c:	003a      	movs	r2, r7
	return result;
 800256e:	4699      	mov	r9, r3
 8002570:	23b3      	movs	r3, #179	@ 0xb3
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 8002572:	6830      	ldr	r0, [r6, #0]
 8002574:	703b      	strb	r3, [r7, #0]
 8002576:	21ee      	movs	r1, #238	@ 0xee
 8002578:	9500      	str	r5, [sp, #0]
 800257a:	3bb2      	subs	r3, #178	@ 0xb2
 800257c:	f002 fa5e 	bl	8004a3c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &result, 1, BMP180_I2C_TIMEOUT);
 8002580:	0022      	movs	r2, r4
 8002582:	6830      	ldr	r0, [r6, #0]
 8002584:	2301      	movs	r3, #1
 8002586:	21ee      	movs	r1, #238	@ 0xee
 8002588:	9500      	str	r5, [sp, #0]
 800258a:	f002 fb29 	bl	8004be0 <HAL_I2C_Master_Receive>
	_bmp180_eeprom.BMP180_AC5 = (bmp180_read_reg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC5]) << 8) | bmp180_read_reg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC5]);
 800258e:	464b      	mov	r3, r9
	return result;
 8002590:	7822      	ldrb	r2, [r4, #0]
	_bmp180_eeprom.BMP180_AC5 = (bmp180_read_reg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC5]) << 8) | bmp180_read_reg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC5]);
 8002592:	021b      	lsls	r3, r3, #8
 8002594:	4313      	orrs	r3, r2
 8002596:	4642      	mov	r2, r8
 8002598:	8113      	strh	r3, [r2, #8]
	_bmp180_eeprom.BMP180_AC6 = (bmp180_read_reg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC6]) << 8) | bmp180_read_reg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC6]);
 800259a:	23b4      	movs	r3, #180	@ 0xb4
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 800259c:	003a      	movs	r2, r7
 800259e:	703b      	strb	r3, [r7, #0]
 80025a0:	6830      	ldr	r0, [r6, #0]
 80025a2:	21ee      	movs	r1, #238	@ 0xee
 80025a4:	9500      	str	r5, [sp, #0]
 80025a6:	3bb3      	subs	r3, #179	@ 0xb3
 80025a8:	f002 fa48 	bl	8004a3c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &result, 1, BMP180_I2C_TIMEOUT);
 80025ac:	0022      	movs	r2, r4
 80025ae:	6830      	ldr	r0, [r6, #0]
 80025b0:	2301      	movs	r3, #1
 80025b2:	21ee      	movs	r1, #238	@ 0xee
 80025b4:	9500      	str	r5, [sp, #0]
 80025b6:	f002 fb13 	bl	8004be0 <HAL_I2C_Master_Receive>
	return result;
 80025ba:	7823      	ldrb	r3, [r4, #0]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 80025bc:	003a      	movs	r2, r7
	return result;
 80025be:	4699      	mov	r9, r3
 80025c0:	23b5      	movs	r3, #181	@ 0xb5
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 80025c2:	6830      	ldr	r0, [r6, #0]
 80025c4:	703b      	strb	r3, [r7, #0]
 80025c6:	21ee      	movs	r1, #238	@ 0xee
 80025c8:	9500      	str	r5, [sp, #0]
 80025ca:	3bb4      	subs	r3, #180	@ 0xb4
 80025cc:	f002 fa36 	bl	8004a3c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &result, 1, BMP180_I2C_TIMEOUT);
 80025d0:	0022      	movs	r2, r4
 80025d2:	6830      	ldr	r0, [r6, #0]
 80025d4:	2301      	movs	r3, #1
 80025d6:	21ee      	movs	r1, #238	@ 0xee
 80025d8:	9500      	str	r5, [sp, #0]
 80025da:	f002 fb01 	bl	8004be0 <HAL_I2C_Master_Receive>
	_bmp180_eeprom.BMP180_AC6 = (bmp180_read_reg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC6]) << 8) | bmp180_read_reg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC6]);
 80025de:	464b      	mov	r3, r9
	return result;
 80025e0:	7822      	ldrb	r2, [r4, #0]
	_bmp180_eeprom.BMP180_AC6 = (bmp180_read_reg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC6]) << 8) | bmp180_read_reg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC6]);
 80025e2:	021b      	lsls	r3, r3, #8
 80025e4:	4313      	orrs	r3, r2
 80025e6:	4642      	mov	r2, r8
 80025e8:	8153      	strh	r3, [r2, #10]
	_bmp180_eeprom.BMP180_B1 = (bmp180_read_reg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_B1]) << 8) | bmp180_read_reg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_B1]);
 80025ea:	23b6      	movs	r3, #182	@ 0xb6
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 80025ec:	003a      	movs	r2, r7
 80025ee:	703b      	strb	r3, [r7, #0]
 80025f0:	6830      	ldr	r0, [r6, #0]
 80025f2:	21ee      	movs	r1, #238	@ 0xee
 80025f4:	9500      	str	r5, [sp, #0]
 80025f6:	3bb5      	subs	r3, #181	@ 0xb5
 80025f8:	f002 fa20 	bl	8004a3c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &result, 1, BMP180_I2C_TIMEOUT);
 80025fc:	0022      	movs	r2, r4
 80025fe:	6830      	ldr	r0, [r6, #0]
 8002600:	2301      	movs	r3, #1
 8002602:	21ee      	movs	r1, #238	@ 0xee
 8002604:	9500      	str	r5, [sp, #0]
 8002606:	f002 faeb 	bl	8004be0 <HAL_I2C_Master_Receive>
	return result;
 800260a:	7823      	ldrb	r3, [r4, #0]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 800260c:	003a      	movs	r2, r7
	return result;
 800260e:	4699      	mov	r9, r3
 8002610:	23b7      	movs	r3, #183	@ 0xb7
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 8002612:	6830      	ldr	r0, [r6, #0]
 8002614:	703b      	strb	r3, [r7, #0]
 8002616:	21ee      	movs	r1, #238	@ 0xee
 8002618:	9500      	str	r5, [sp, #0]
 800261a:	3bb6      	subs	r3, #182	@ 0xb6
 800261c:	f002 fa0e 	bl	8004a3c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &result, 1, BMP180_I2C_TIMEOUT);
 8002620:	0022      	movs	r2, r4
 8002622:	6830      	ldr	r0, [r6, #0]
 8002624:	2301      	movs	r3, #1
 8002626:	21ee      	movs	r1, #238	@ 0xee
 8002628:	9500      	str	r5, [sp, #0]
 800262a:	f002 fad9 	bl	8004be0 <HAL_I2C_Master_Receive>
	_bmp180_eeprom.BMP180_B1 = (bmp180_read_reg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_B1]) << 8) | bmp180_read_reg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_B1]);
 800262e:	464b      	mov	r3, r9
	return result;
 8002630:	7822      	ldrb	r2, [r4, #0]
	_bmp180_eeprom.BMP180_B1 = (bmp180_read_reg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_B1]) << 8) | bmp180_read_reg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_B1]);
 8002632:	021b      	lsls	r3, r3, #8
 8002634:	4313      	orrs	r3, r2
 8002636:	4642      	mov	r2, r8
 8002638:	8193      	strh	r3, [r2, #12]
	_bmp180_eeprom.BMP180_B2 = (bmp180_read_reg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_B2]) << 8) | bmp180_read_reg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_B2]);
 800263a:	23b8      	movs	r3, #184	@ 0xb8
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 800263c:	003a      	movs	r2, r7
 800263e:	703b      	strb	r3, [r7, #0]
 8002640:	6830      	ldr	r0, [r6, #0]
 8002642:	21ee      	movs	r1, #238	@ 0xee
 8002644:	9500      	str	r5, [sp, #0]
 8002646:	3bb7      	subs	r3, #183	@ 0xb7
 8002648:	f002 f9f8 	bl	8004a3c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &result, 1, BMP180_I2C_TIMEOUT);
 800264c:	0022      	movs	r2, r4
 800264e:	6830      	ldr	r0, [r6, #0]
 8002650:	2301      	movs	r3, #1
 8002652:	21ee      	movs	r1, #238	@ 0xee
 8002654:	9500      	str	r5, [sp, #0]
 8002656:	f002 fac3 	bl	8004be0 <HAL_I2C_Master_Receive>
	return result;
 800265a:	7823      	ldrb	r3, [r4, #0]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 800265c:	003a      	movs	r2, r7
	return result;
 800265e:	4699      	mov	r9, r3
 8002660:	23b9      	movs	r3, #185	@ 0xb9
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 8002662:	6830      	ldr	r0, [r6, #0]
 8002664:	703b      	strb	r3, [r7, #0]
 8002666:	21ee      	movs	r1, #238	@ 0xee
 8002668:	9500      	str	r5, [sp, #0]
 800266a:	3bb8      	subs	r3, #184	@ 0xb8
 800266c:	f002 f9e6 	bl	8004a3c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &result, 1, BMP180_I2C_TIMEOUT);
 8002670:	0022      	movs	r2, r4
 8002672:	6830      	ldr	r0, [r6, #0]
 8002674:	2301      	movs	r3, #1
 8002676:	21ee      	movs	r1, #238	@ 0xee
 8002678:	9500      	str	r5, [sp, #0]
 800267a:	f002 fab1 	bl	8004be0 <HAL_I2C_Master_Receive>
	_bmp180_eeprom.BMP180_B2 = (bmp180_read_reg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_B2]) << 8) | bmp180_read_reg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_B2]);
 800267e:	464b      	mov	r3, r9
	return result;
 8002680:	7822      	ldrb	r2, [r4, #0]
	_bmp180_eeprom.BMP180_B2 = (bmp180_read_reg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_B2]) << 8) | bmp180_read_reg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_B2]);
 8002682:	021b      	lsls	r3, r3, #8
 8002684:	4313      	orrs	r3, r2
 8002686:	4642      	mov	r2, r8
 8002688:	81d3      	strh	r3, [r2, #14]
	_bmp180_eeprom.BMP180_MB = (bmp180_read_reg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MB]) << 8) | bmp180_read_reg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MB]);
 800268a:	23ba      	movs	r3, #186	@ 0xba
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 800268c:	003a      	movs	r2, r7
 800268e:	703b      	strb	r3, [r7, #0]
 8002690:	6830      	ldr	r0, [r6, #0]
 8002692:	21ee      	movs	r1, #238	@ 0xee
 8002694:	9500      	str	r5, [sp, #0]
 8002696:	3bb9      	subs	r3, #185	@ 0xb9
 8002698:	f002 f9d0 	bl	8004a3c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &result, 1, BMP180_I2C_TIMEOUT);
 800269c:	0022      	movs	r2, r4
 800269e:	6830      	ldr	r0, [r6, #0]
 80026a0:	2301      	movs	r3, #1
 80026a2:	21ee      	movs	r1, #238	@ 0xee
 80026a4:	9500      	str	r5, [sp, #0]
 80026a6:	f002 fa9b 	bl	8004be0 <HAL_I2C_Master_Receive>
	return result;
 80026aa:	7823      	ldrb	r3, [r4, #0]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 80026ac:	003a      	movs	r2, r7
	return result;
 80026ae:	4699      	mov	r9, r3
 80026b0:	23bb      	movs	r3, #187	@ 0xbb
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 80026b2:	6830      	ldr	r0, [r6, #0]
 80026b4:	703b      	strb	r3, [r7, #0]
 80026b6:	21ee      	movs	r1, #238	@ 0xee
 80026b8:	9500      	str	r5, [sp, #0]
 80026ba:	3bba      	subs	r3, #186	@ 0xba
 80026bc:	f002 f9be 	bl	8004a3c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &result, 1, BMP180_I2C_TIMEOUT);
 80026c0:	0022      	movs	r2, r4
 80026c2:	6830      	ldr	r0, [r6, #0]
 80026c4:	2301      	movs	r3, #1
 80026c6:	21ee      	movs	r1, #238	@ 0xee
 80026c8:	9500      	str	r5, [sp, #0]
 80026ca:	f002 fa89 	bl	8004be0 <HAL_I2C_Master_Receive>
	_bmp180_eeprom.BMP180_MB = (bmp180_read_reg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MB]) << 8) | bmp180_read_reg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MB]);
 80026ce:	464b      	mov	r3, r9
	return result;
 80026d0:	7822      	ldrb	r2, [r4, #0]
	_bmp180_eeprom.BMP180_MB = (bmp180_read_reg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MB]) << 8) | bmp180_read_reg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MB]);
 80026d2:	021b      	lsls	r3, r3, #8
 80026d4:	4313      	orrs	r3, r2
 80026d6:	4642      	mov	r2, r8
 80026d8:	8213      	strh	r3, [r2, #16]
	_bmp180_eeprom.BMP180_MC = (bmp180_read_reg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MC]) << 8) | bmp180_read_reg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MC]);
 80026da:	23bc      	movs	r3, #188	@ 0xbc
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 80026dc:	003a      	movs	r2, r7
 80026de:	703b      	strb	r3, [r7, #0]
 80026e0:	6830      	ldr	r0, [r6, #0]
 80026e2:	21ee      	movs	r1, #238	@ 0xee
 80026e4:	9500      	str	r5, [sp, #0]
 80026e6:	3bbb      	subs	r3, #187	@ 0xbb
 80026e8:	f002 f9a8 	bl	8004a3c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &result, 1, BMP180_I2C_TIMEOUT);
 80026ec:	0022      	movs	r2, r4
 80026ee:	6830      	ldr	r0, [r6, #0]
 80026f0:	2301      	movs	r3, #1
 80026f2:	21ee      	movs	r1, #238	@ 0xee
 80026f4:	9500      	str	r5, [sp, #0]
 80026f6:	f002 fa73 	bl	8004be0 <HAL_I2C_Master_Receive>
	return result;
 80026fa:	7823      	ldrb	r3, [r4, #0]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 80026fc:	003a      	movs	r2, r7
	return result;
 80026fe:	4699      	mov	r9, r3
 8002700:	23bd      	movs	r3, #189	@ 0xbd
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 8002702:	6830      	ldr	r0, [r6, #0]
 8002704:	703b      	strb	r3, [r7, #0]
 8002706:	21ee      	movs	r1, #238	@ 0xee
 8002708:	9500      	str	r5, [sp, #0]
 800270a:	3bbc      	subs	r3, #188	@ 0xbc
 800270c:	f002 f996 	bl	8004a3c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &result, 1, BMP180_I2C_TIMEOUT);
 8002710:	0022      	movs	r2, r4
 8002712:	6830      	ldr	r0, [r6, #0]
 8002714:	2301      	movs	r3, #1
 8002716:	21ee      	movs	r1, #238	@ 0xee
 8002718:	9500      	str	r5, [sp, #0]
 800271a:	f002 fa61 	bl	8004be0 <HAL_I2C_Master_Receive>
	_bmp180_eeprom.BMP180_MC = (bmp180_read_reg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MC]) << 8) | bmp180_read_reg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MC]);
 800271e:	464b      	mov	r3, r9
	return result;
 8002720:	7822      	ldrb	r2, [r4, #0]
	_bmp180_eeprom.BMP180_MC = (bmp180_read_reg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MC]) << 8) | bmp180_read_reg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MC]);
 8002722:	021b      	lsls	r3, r3, #8
 8002724:	4313      	orrs	r3, r2
 8002726:	4642      	mov	r2, r8
 8002728:	8253      	strh	r3, [r2, #18]
	_bmp180_eeprom.BMP180_MD = (bmp180_read_reg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MD]) << 8) | bmp180_read_reg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MD]);
 800272a:	23be      	movs	r3, #190	@ 0xbe
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 800272c:	003a      	movs	r2, r7
 800272e:	703b      	strb	r3, [r7, #0]
 8002730:	6830      	ldr	r0, [r6, #0]
 8002732:	21ee      	movs	r1, #238	@ 0xee
 8002734:	9500      	str	r5, [sp, #0]
 8002736:	3bbd      	subs	r3, #189	@ 0xbd
 8002738:	f002 f980 	bl	8004a3c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &result, 1, BMP180_I2C_TIMEOUT);
 800273c:	0022      	movs	r2, r4
 800273e:	6830      	ldr	r0, [r6, #0]
 8002740:	2301      	movs	r3, #1
 8002742:	21ee      	movs	r1, #238	@ 0xee
 8002744:	9500      	str	r5, [sp, #0]
 8002746:	f002 fa4b 	bl	8004be0 <HAL_I2C_Master_Receive>
	return result;
 800274a:	7823      	ldrb	r3, [r4, #0]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 800274c:	003a      	movs	r2, r7
	return result;
 800274e:	4699      	mov	r9, r3
 8002750:	23bf      	movs	r3, #191	@ 0xbf
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 8002752:	6830      	ldr	r0, [r6, #0]
 8002754:	703b      	strb	r3, [r7, #0]
 8002756:	21ee      	movs	r1, #238	@ 0xee
 8002758:	9500      	str	r5, [sp, #0]
 800275a:	3bbe      	subs	r3, #190	@ 0xbe
 800275c:	f002 f96e 	bl	8004a3c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &result, 1, BMP180_I2C_TIMEOUT);
 8002760:	0022      	movs	r2, r4
 8002762:	6830      	ldr	r0, [r6, #0]
 8002764:	2301      	movs	r3, #1
 8002766:	21ee      	movs	r1, #238	@ 0xee
 8002768:	9500      	str	r5, [sp, #0]
 800276a:	f002 fa39 	bl	8004be0 <HAL_I2C_Master_Receive>
	_bmp180_eeprom.BMP180_MD = (bmp180_read_reg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MD]) << 8) | bmp180_read_reg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MD]);
 800276e:	464b      	mov	r3, r9
	return result;
 8002770:	7822      	ldrb	r2, [r4, #0]
	_bmp180_eeprom.BMP180_MD = (bmp180_read_reg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MD]) << 8) | bmp180_read_reg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MD]);
 8002772:	021b      	lsls	r3, r3, #8
 8002774:	4313      	orrs	r3, r2
 8002776:	4642      	mov	r2, r8
 8002778:	8293      	strh	r3, [r2, #20]
}
 800277a:	b005      	add	sp, #20
 800277c:	bcc0      	pop	{r6, r7}
 800277e:	46b9      	mov	r9, r7
 8002780:	46b0      	mov	r8, r6
 8002782:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002784:	200000e4 	.word	0x200000e4
 8002788:	200000cc 	.word	0x200000cc

0800278c <bmp180_get_raw_temperature>:

/**
 * @brief вимірює та обчислює значення температури
 * @return повертає значення температури в 0.1 (1/10) градусах Цельсія
 */
int32_t bmp180_get_raw_temperature(void) {
 800278c:	b570      	push	{r4, r5, r6, lr}
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, arr, 2, BMP180_I2C_TIMEOUT);
 800278e:	25fa      	movs	r5, #250	@ 0xfa
int32_t bmp180_get_raw_temperature(void) {
 8002790:	b084      	sub	sp, #16
	uint8_t arr[2] = { reg, cmd };
 8002792:	466a      	mov	r2, sp
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, arr, 2, BMP180_I2C_TIMEOUT);
 8002794:	4e29      	ldr	r6, [pc, #164]	@ (800283c <bmp180_get_raw_temperature+0xb0>)
	uint8_t arr[2] = { reg, cmd };
 8002796:	4b2a      	ldr	r3, [pc, #168]	@ (8002840 <bmp180_get_raw_temperature+0xb4>)
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, arr, 2, BMP180_I2C_TIMEOUT);
 8002798:	00ad      	lsls	r5, r5, #2
	uint8_t arr[2] = { reg, cmd };
 800279a:	8193      	strh	r3, [r2, #12]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, arr, 2, BMP180_I2C_TIMEOUT);
 800279c:	21ee      	movs	r1, #238	@ 0xee
 800279e:	aa03      	add	r2, sp, #12
 80027a0:	2302      	movs	r3, #2
 80027a2:	6830      	ldr	r0, [r6, #0]
 80027a4:	9500      	str	r5, [sp, #0]
 80027a6:	f002 f949 	bl	8004a3c <HAL_I2C_Master_Transmit>
	bmp180_write_reg(BMP180_CONTROL_REG, BMP180_CMD_TEMP);
	HAL_Delay(BMP180_DELAY_TEMP);
 80027aa:	2019      	movs	r0, #25
 80027ac:	f001 fe06 	bl	80043bc <HAL_Delay>
	int32_t ut = (bmp180_read_reg(BMP180_MSB_REG) << 8) | bmp180_read_reg(BMP180_LSB_REG);
 80027b0:	466a      	mov	r2, sp
 80027b2:	23f6      	movs	r3, #246	@ 0xf6
 80027b4:	72d3      	strb	r3, [r2, #11]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 80027b6:	220b      	movs	r2, #11
 80027b8:	6830      	ldr	r0, [r6, #0]
 80027ba:	446a      	add	r2, sp
 80027bc:	21ee      	movs	r1, #238	@ 0xee
 80027be:	9500      	str	r5, [sp, #0]
 80027c0:	3bf5      	subs	r3, #245	@ 0xf5
 80027c2:	f002 f93b 	bl	8004a3c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &result, 1, BMP180_I2C_TIMEOUT);
 80027c6:	6830      	ldr	r0, [r6, #0]
 80027c8:	aa03      	add	r2, sp, #12
 80027ca:	2301      	movs	r3, #1
 80027cc:	21ee      	movs	r1, #238	@ 0xee
 80027ce:	9500      	str	r5, [sp, #0]
 80027d0:	f002 fa06 	bl	8004be0 <HAL_I2C_Master_Receive>
	return result;
 80027d4:	466b      	mov	r3, sp
 80027d6:	466a      	mov	r2, sp
 80027d8:	7b1c      	ldrb	r4, [r3, #12]
 80027da:	23f7      	movs	r3, #247	@ 0xf7
 80027dc:	72d3      	strb	r3, [r2, #11]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 80027de:	220b      	movs	r2, #11
 80027e0:	6830      	ldr	r0, [r6, #0]
 80027e2:	446a      	add	r2, sp
 80027e4:	21ee      	movs	r1, #238	@ 0xee
 80027e6:	9500      	str	r5, [sp, #0]
 80027e8:	3bf6      	subs	r3, #246	@ 0xf6
 80027ea:	f002 f927 	bl	8004a3c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &result, 1, BMP180_I2C_TIMEOUT);
 80027ee:	6830      	ldr	r0, [r6, #0]
 80027f0:	aa03      	add	r2, sp, #12
 80027f2:	2301      	movs	r3, #1
 80027f4:	21ee      	movs	r1, #238	@ 0xee
 80027f6:	9500      	str	r5, [sp, #0]
 80027f8:	f002 f9f2 	bl	8004be0 <HAL_I2C_Master_Receive>
	return result;
 80027fc:	466b      	mov	r3, sp
 80027fe:	7b1b      	ldrb	r3, [r3, #12]
	int32_t ut = (bmp180_read_reg(BMP180_MSB_REG) << 8) | bmp180_read_reg(BMP180_LSB_REG);
 8002800:	0224      	lsls	r4, r4, #8
 8002802:	431c      	orrs	r4, r3
	int32_t x1 = (ut - _bmp180_eeprom.BMP180_AC6) * _bmp180_eeprom.BMP180_AC5 / (1 << 15);
 8002804:	4b0f      	ldr	r3, [pc, #60]	@ (8002844 <bmp180_get_raw_temperature+0xb8>)
 8002806:	895a      	ldrh	r2, [r3, #10]
 8002808:	1aa4      	subs	r4, r4, r2
 800280a:	891a      	ldrh	r2, [r3, #8]
 800280c:	4362      	muls	r2, r4
 800280e:	17d4      	asrs	r4, r2, #31
 8002810:	0464      	lsls	r4, r4, #17
 8002812:	0c64      	lsrs	r4, r4, #17
 8002814:	18a4      	adds	r4, r4, r2
	int32_t x2 = (_bmp180_eeprom.BMP180_MC * (1 << 11)) / (x1 + _bmp180_eeprom.BMP180_MD);
 8002816:	2212      	movs	r2, #18
 8002818:	5e98      	ldrsh	r0, [r3, r2]
 800281a:	2114      	movs	r1, #20
 800281c:	5e59      	ldrsh	r1, [r3, r1]
	int32_t x1 = (ut - _bmp180_eeprom.BMP180_AC6) * _bmp180_eeprom.BMP180_AC5 / (1 << 15);
 800281e:	13e4      	asrs	r4, r4, #15
	int32_t x2 = (_bmp180_eeprom.BMP180_MC * (1 << 11)) / (x1 + _bmp180_eeprom.BMP180_MD);
 8002820:	1909      	adds	r1, r1, r4
 8002822:	02c0      	lsls	r0, r0, #11
 8002824:	f7fd fd0c 	bl	8000240 <__divsi3>
	int32_t b5 = x1 + x2;
 8002828:	1903      	adds	r3, r0, r4
	return (b5 + 8) / (1 << 4);
 800282a:	200f      	movs	r0, #15
 800282c:	3308      	adds	r3, #8
 800282e:	17da      	asrs	r2, r3, #31
 8002830:	4010      	ands	r0, r2
 8002832:	18c0      	adds	r0, r0, r3
 8002834:	1100      	asrs	r0, r0, #4
}
 8002836:	b004      	add	sp, #16
 8002838:	bd70      	pop	{r4, r5, r6, pc}
 800283a:	46c0      	nop			@ (mov r8, r8)
 800283c:	200000e4 	.word	0x200000e4
 8002840:	00002ef4 	.word	0x00002ef4
 8002844:	200000cc 	.word	0x200000cc

08002848 <bmp180_get_temperature>:

/**
 * @brief вимірює та обчислюєзначення температури
 * @return повертає значення температури в градусах Цельсія
 */
float bmp180_get_temperature(void) {
 8002848:	b510      	push	{r4, lr}
	int32_t temp = bmp180_get_raw_temperature();
 800284a:	f7ff ff9f 	bl	800278c <bmp180_get_raw_temperature>
	return temp / 10.0;
 800284e:	f7ff fcab 	bl	80021a8 <__aeabi_i2d>
 8002852:	2200      	movs	r2, #0
 8002854:	4b02      	ldr	r3, [pc, #8]	@ (8002860 <bmp180_get_temperature+0x18>)
 8002856:	f7fe f9a1 	bl	8000b9c <__aeabi_ddiv>
 800285a:	f7ff fd1b 	bl	8002294 <__aeabi_d2f>
}
 800285e:	bd10      	pop	{r4, pc}
 8002860:	40240000 	.word	0x40240000

08002864 <bmp180_get_pressure>:

/**
 * @brief вимірює та обчислює значення тиску
 * @return повертає значення тиску в Паскалях (Pa)
 */
int32_t bmp180_get_pressure(void) {
 8002864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002866:	46de      	mov	lr, fp
 8002868:	4657      	mov	r7, sl
 800286a:	464e      	mov	r6, r9
 800286c:	4645      	mov	r5, r8
 800286e:	b5e0      	push	{r5, r6, r7, lr}
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, arr, 2, BMP180_I2C_TIMEOUT);
 8002870:	25fa      	movs	r5, #250	@ 0xfa
int32_t bmp180_get_pressure(void) {
 8002872:	b085      	sub	sp, #20
	uint8_t arr[2] = { reg, cmd };
 8002874:	4b91      	ldr	r3, [pc, #580]	@ (8002abc <bmp180_get_pressure+0x258>)
 8002876:	ac03      	add	r4, sp, #12
 8002878:	8023      	strh	r3, [r4, #0]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, arr, 2, BMP180_I2C_TIMEOUT);
 800287a:	4b91      	ldr	r3, [pc, #580]	@ (8002ac0 <bmp180_get_pressure+0x25c>)
 800287c:	00ad      	lsls	r5, r5, #2
 800287e:	4699      	mov	r9, r3
 8002880:	0022      	movs	r2, r4
 8002882:	21ee      	movs	r1, #238	@ 0xee
 8002884:	6818      	ldr	r0, [r3, #0]
 8002886:	2302      	movs	r3, #2
 8002888:	9500      	str	r5, [sp, #0]
 800288a:	f002 f8d7 	bl	8004a3c <HAL_I2C_Master_Transmit>
	bmp180_write_reg(BMP180_CONTROL_REG, BMP180_CMD_TEMP);
	HAL_Delay(BMP180_DELAY_TEMP);
 800288e:	260b      	movs	r6, #11
 8002890:	2019      	movs	r0, #25
 8002892:	f001 fd93 	bl	80043bc <HAL_Delay>
	return p;
}

int32_t bmp180_get_UT(void)
{
	return (bmp180_read_reg(BMP180_MSB_REG) << 8) | bmp180_read_reg(BMP180_LSB_REG);
 8002896:	23f6      	movs	r3, #246	@ 0xf6
 8002898:	446e      	add	r6, sp
 800289a:	7033      	strb	r3, [r6, #0]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 800289c:	4698      	mov	r8, r3
 800289e:	464b      	mov	r3, r9
 80028a0:	0032      	movs	r2, r6
 80028a2:	6818      	ldr	r0, [r3, #0]
 80028a4:	21ee      	movs	r1, #238	@ 0xee
 80028a6:	2301      	movs	r3, #1
 80028a8:	9500      	str	r5, [sp, #0]
 80028aa:	f002 f8c7 	bl	8004a3c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &result, 1, BMP180_I2C_TIMEOUT);
 80028ae:	464b      	mov	r3, r9
 80028b0:	0022      	movs	r2, r4
 80028b2:	6818      	ldr	r0, [r3, #0]
 80028b4:	21ee      	movs	r1, #238	@ 0xee
 80028b6:	2301      	movs	r3, #1
 80028b8:	9500      	str	r5, [sp, #0]
 80028ba:	f002 f991 	bl	8004be0 <HAL_I2C_Master_Receive>
	return result;
 80028be:	23f7      	movs	r3, #247	@ 0xf7
 80028c0:	7033      	strb	r3, [r6, #0]
 80028c2:	469b      	mov	fp, r3
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 80028c4:	464b      	mov	r3, r9
	return result;
 80028c6:	7827      	ldrb	r7, [r4, #0]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 80028c8:	0032      	movs	r2, r6
 80028ca:	6818      	ldr	r0, [r3, #0]
 80028cc:	21ee      	movs	r1, #238	@ 0xee
 80028ce:	2301      	movs	r3, #1
 80028d0:	9500      	str	r5, [sp, #0]
 80028d2:	f002 f8b3 	bl	8004a3c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &result, 1, BMP180_I2C_TIMEOUT);
 80028d6:	464b      	mov	r3, r9
 80028d8:	0022      	movs	r2, r4
 80028da:	6818      	ldr	r0, [r3, #0]
 80028dc:	21ee      	movs	r1, #238	@ 0xee
 80028de:	2301      	movs	r3, #1
 80028e0:	9500      	str	r5, [sp, #0]
 80028e2:	f002 f97d 	bl	8004be0 <HAL_I2C_Master_Receive>
	return result;
 80028e6:	7823      	ldrb	r3, [r4, #0]
	bmp180_write_reg(BMP180_CONTROL_REG, BMP180_CMD_PRES[_bmp180_oss]);
 80028e8:	4a76      	ldr	r2, [pc, #472]	@ (8002ac4 <bmp180_get_pressure+0x260>)
	return (bmp180_read_reg(BMP180_MSB_REG) << 8) | bmp180_read_reg(BMP180_LSB_REG);
 80028ea:	023f      	lsls	r7, r7, #8
	bmp180_write_reg(BMP180_CONTROL_REG, BMP180_CMD_PRES[_bmp180_oss]);
 80028ec:	4692      	mov	sl, r2
	return (bmp180_read_reg(BMP180_MSB_REG) << 8) | bmp180_read_reg(BMP180_LSB_REG);
 80028ee:	431f      	orrs	r7, r3
	bmp180_write_reg(BMP180_CONTROL_REG, BMP180_CMD_PRES[_bmp180_oss]);
 80028f0:	7812      	ldrb	r2, [r2, #0]
 80028f2:	4b75      	ldr	r3, [pc, #468]	@ (8002ac8 <bmp180_get_pressure+0x264>)
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, arr, 2, BMP180_I2C_TIMEOUT);
 80028f4:	21ee      	movs	r1, #238	@ 0xee
	bmp180_write_reg(BMP180_CONTROL_REG, BMP180_CMD_PRES[_bmp180_oss]);
 80028f6:	5c9b      	ldrb	r3, [r3, r2]
	uint8_t arr[2] = { reg, cmd };
 80028f8:	22f4      	movs	r2, #244	@ 0xf4
 80028fa:	7063      	strb	r3, [r4, #1]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, arr, 2, BMP180_I2C_TIMEOUT);
 80028fc:	464b      	mov	r3, r9
	uint8_t arr[2] = { reg, cmd };
 80028fe:	7022      	strb	r2, [r4, #0]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, arr, 2, BMP180_I2C_TIMEOUT);
 8002900:	6818      	ldr	r0, [r3, #0]
 8002902:	0022      	movs	r2, r4
 8002904:	2302      	movs	r3, #2
 8002906:	9500      	str	r5, [sp, #0]
 8002908:	f002 f898 	bl	8004a3c <HAL_I2C_Master_Transmit>
	HAL_Delay(BMP180_DELAY_PRES[_bmp180_oss]);
 800290c:	4652      	mov	r2, sl
 800290e:	4b6f      	ldr	r3, [pc, #444]	@ (8002acc <bmp180_get_pressure+0x268>)
 8002910:	7812      	ldrb	r2, [r2, #0]
 8002912:	5c98      	ldrb	r0, [r3, r2]
 8002914:	f001 fd52 	bl	80043bc <HAL_Delay>
}

int32_t bmp180_get_UP(void)
{
	return ((bmp180_read_reg(BMP180_MSB_REG) << 16) | (bmp180_read_reg(BMP180_LSB_REG) << 8) | bmp180_read_reg(BMP180_XLSB_REG)) >> (8 - _bmp180_oss);
 8002918:	4643      	mov	r3, r8
 800291a:	7033      	strb	r3, [r6, #0]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 800291c:	464b      	mov	r3, r9
 800291e:	0032      	movs	r2, r6
 8002920:	6818      	ldr	r0, [r3, #0]
 8002922:	21ee      	movs	r1, #238	@ 0xee
 8002924:	2301      	movs	r3, #1
 8002926:	9500      	str	r5, [sp, #0]
 8002928:	f002 f888 	bl	8004a3c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &result, 1, BMP180_I2C_TIMEOUT);
 800292c:	464b      	mov	r3, r9
 800292e:	0022      	movs	r2, r4
 8002930:	6818      	ldr	r0, [r3, #0]
 8002932:	21ee      	movs	r1, #238	@ 0xee
 8002934:	2301      	movs	r3, #1
 8002936:	9500      	str	r5, [sp, #0]
 8002938:	f002 f952 	bl	8004be0 <HAL_I2C_Master_Receive>
	return result;
 800293c:	7823      	ldrb	r3, [r4, #0]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 800293e:	0032      	movs	r2, r6
	return result;
 8002940:	4698      	mov	r8, r3
 8002942:	465b      	mov	r3, fp
 8002944:	7033      	strb	r3, [r6, #0]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 8002946:	464b      	mov	r3, r9
 8002948:	21ee      	movs	r1, #238	@ 0xee
 800294a:	6818      	ldr	r0, [r3, #0]
 800294c:	2301      	movs	r3, #1
 800294e:	9500      	str	r5, [sp, #0]
 8002950:	f002 f874 	bl	8004a3c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &result, 1, BMP180_I2C_TIMEOUT);
 8002954:	464b      	mov	r3, r9
 8002956:	0022      	movs	r2, r4
 8002958:	6818      	ldr	r0, [r3, #0]
 800295a:	21ee      	movs	r1, #238	@ 0xee
 800295c:	2301      	movs	r3, #1
 800295e:	9500      	str	r5, [sp, #0]
 8002960:	f002 f93e 	bl	8004be0 <HAL_I2C_Master_Receive>
	return ((bmp180_read_reg(BMP180_MSB_REG) << 16) | (bmp180_read_reg(BMP180_LSB_REG) << 8) | bmp180_read_reg(BMP180_XLSB_REG)) >> (8 - _bmp180_oss);
 8002964:	4642      	mov	r2, r8
	return result;
 8002966:	7823      	ldrb	r3, [r4, #0]
	return ((bmp180_read_reg(BMP180_MSB_REG) << 16) | (bmp180_read_reg(BMP180_LSB_REG) << 8) | bmp180_read_reg(BMP180_XLSB_REG)) >> (8 - _bmp180_oss);
 8002968:	0412      	lsls	r2, r2, #16
 800296a:	021b      	lsls	r3, r3, #8
 800296c:	431a      	orrs	r2, r3
 800296e:	23f8      	movs	r3, #248	@ 0xf8
 8002970:	7033      	strb	r3, [r6, #0]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 8002972:	464b      	mov	r3, r9
	return ((bmp180_read_reg(BMP180_MSB_REG) << 16) | (bmp180_read_reg(BMP180_LSB_REG) << 8) | bmp180_read_reg(BMP180_XLSB_REG)) >> (8 - _bmp180_oss);
 8002974:	4690      	mov	r8, r2
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 8002976:	6818      	ldr	r0, [r3, #0]
 8002978:	0032      	movs	r2, r6
 800297a:	2301      	movs	r3, #1
 800297c:	21ee      	movs	r1, #238	@ 0xee
 800297e:	9500      	str	r5, [sp, #0]
 8002980:	f002 f85c 	bl	8004a3c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &result, 1, BMP180_I2C_TIMEOUT);
 8002984:	464b      	mov	r3, r9
 8002986:	0022      	movs	r2, r4
 8002988:	6818      	ldr	r0, [r3, #0]
 800298a:	21ee      	movs	r1, #238	@ 0xee
 800298c:	2301      	movs	r3, #1
 800298e:	9500      	str	r5, [sp, #0]
 8002990:	f002 f926 	bl	8004be0 <HAL_I2C_Master_Receive>
	return result;
 8002994:	7823      	ldrb	r3, [r4, #0]
	int32_t x1 = (ut - _bmp180_eeprom.BMP180_AC6) * _bmp180_eeprom.BMP180_AC5 / (1 << 15);
 8002996:	4c4e      	ldr	r4, [pc, #312]	@ (8002ad0 <bmp180_get_pressure+0x26c>)
	return result;
 8002998:	4699      	mov	r9, r3
	return ((bmp180_read_reg(BMP180_MSB_REG) << 16) | (bmp180_read_reg(BMP180_LSB_REG) << 8) | bmp180_read_reg(BMP180_XLSB_REG)) >> (8 - _bmp180_oss);
 800299a:	4653      	mov	r3, sl
 800299c:	781d      	ldrb	r5, [r3, #0]
	int32_t x1 = (ut - _bmp180_eeprom.BMP180_AC6) * _bmp180_eeprom.BMP180_AC5 / (1 << 15);
 800299e:	8963      	ldrh	r3, [r4, #10]
 80029a0:	1aff      	subs	r7, r7, r3
 80029a2:	8923      	ldrh	r3, [r4, #8]
 80029a4:	437b      	muls	r3, r7
 80029a6:	17df      	asrs	r7, r3, #31
 80029a8:	047f      	lsls	r7, r7, #17
 80029aa:	0c7f      	lsrs	r7, r7, #17
 80029ac:	18ff      	adds	r7, r7, r3
	int32_t x2 = (_bmp180_eeprom.BMP180_MC * (1 << 11)) / (x1 + _bmp180_eeprom.BMP180_MD);
 80029ae:	2312      	movs	r3, #18
 80029b0:	5ee0      	ldrsh	r0, [r4, r3]
 80029b2:	2314      	movs	r3, #20
 80029b4:	5ee1      	ldrsh	r1, [r4, r3]
	int32_t x1 = (ut - _bmp180_eeprom.BMP180_AC6) * _bmp180_eeprom.BMP180_AC5 / (1 << 15);
 80029b6:	13ff      	asrs	r7, r7, #15
	int32_t x2 = (_bmp180_eeprom.BMP180_MC * (1 << 11)) / (x1 + _bmp180_eeprom.BMP180_MD);
 80029b8:	19c9      	adds	r1, r1, r7
 80029ba:	02c0      	lsls	r0, r0, #11
 80029bc:	f7fd fc40 	bl	8000240 <__divsi3>
	int32_t b6 = b5 - 4000;
 80029c0:	4b44      	ldr	r3, [pc, #272]	@ (8002ad4 <bmp180_get_pressure+0x270>)
	int32_t b5 = x1 + x2;
 80029c2:	19c2      	adds	r2, r0, r7
	int32_t b6 = b5 - 4000;
 80029c4:	469c      	mov	ip, r3
 80029c6:	4462      	add	r2, ip
	x1 = (_bmp180_eeprom.BMP180_B2 * (b6 * b6 / (1 << 12))) / (1 << 11);
 80029c8:	0013      	movs	r3, r2
	x1 = _bmp180_eeprom.BMP180_AC3 * b6 / (1 << 13);
 80029ca:	2104      	movs	r1, #4
 80029cc:	5e60      	ldrsh	r0, [r4, r1]
	x1 = (_bmp180_eeprom.BMP180_B2 * (b6 * b6 / (1 << 12))) / (1 << 11);
 80029ce:	4353      	muls	r3, r2
	x1 = _bmp180_eeprom.BMP180_AC3 * b6 / (1 << 13);
 80029d0:	4350      	muls	r0, r2
 80029d2:	17c1      	asrs	r1, r0, #31
 80029d4:	04c9      	lsls	r1, r1, #19
 80029d6:	0cc9      	lsrs	r1, r1, #19
 80029d8:	1808      	adds	r0, r1, r0
	x2 = (_bmp180_eeprom.BMP180_B1 * (b6 * b6 / (1 << 12))) / (1 << 16);
 80029da:	210c      	movs	r1, #12
 80029dc:	5e66      	ldrsh	r6, [r4, r1]
	x1 = (_bmp180_eeprom.BMP180_B2 * (b6 * b6 / (1 << 12))) / (1 << 11);
 80029de:	131b      	asrs	r3, r3, #12
	x2 = (_bmp180_eeprom.BMP180_B1 * (b6 * b6 / (1 << 12))) / (1 << 16);
 80029e0:	435e      	muls	r6, r3
 80029e2:	17f1      	asrs	r1, r6, #31
 80029e4:	0409      	lsls	r1, r1, #16
 80029e6:	0c09      	lsrs	r1, r1, #16
 80029e8:	1989      	adds	r1, r1, r6
	x3 = ((x1 + x2) + 2) / 4;
 80029ea:	2603      	movs	r6, #3
	x1 = _bmp180_eeprom.BMP180_AC3 * b6 / (1 << 13);
 80029ec:	1340      	asrs	r0, r0, #13
	x2 = (_bmp180_eeprom.BMP180_B1 * (b6 * b6 / (1 << 12))) / (1 << 16);
 80029ee:	1409      	asrs	r1, r1, #16
	x3 = ((x1 + x2) + 2) / 4;
 80029f0:	1841      	adds	r1, r0, r1
 80029f2:	3102      	adds	r1, #2
 80029f4:	17cf      	asrs	r7, r1, #31
 80029f6:	4037      	ands	r7, r6
 80029f8:	187f      	adds	r7, r7, r1
	uint32_t b4 = _bmp180_eeprom.BMP180_AC4 * (uint32_t) (x3 + 32768) / (1 << 15);
 80029fa:	2180      	movs	r1, #128	@ 0x80
 80029fc:	0209      	lsls	r1, r1, #8
 80029fe:	468c      	mov	ip, r1
	x3 = ((x1 + x2) + 2) / 4;
 8002a00:	10bf      	asrs	r7, r7, #2
	uint32_t b4 = _bmp180_eeprom.BMP180_AC4 * (uint32_t) (x3 + 32768) / (1 << 15);
 8002a02:	88e1      	ldrh	r1, [r4, #6]
 8002a04:	4467      	add	r7, ip
 8002a06:	4379      	muls	r1, r7
	return ((bmp180_read_reg(BMP180_MSB_REG) << 16) | (bmp180_read_reg(BMP180_LSB_REG) << 8) | bmp180_read_reg(BMP180_XLSB_REG)) >> (8 - _bmp180_oss);
 8002a08:	4640      	mov	r0, r8
 8002a0a:	464f      	mov	r7, r9
 8002a0c:	4338      	orrs	r0, r7
 8002a0e:	2708      	movs	r7, #8
	uint32_t b4 = _bmp180_eeprom.BMP180_AC4 * (uint32_t) (x3 + 32768) / (1 << 15);
 8002a10:	0bc9      	lsrs	r1, r1, #15
	return ((bmp180_read_reg(BMP180_MSB_REG) << 16) | (bmp180_read_reg(BMP180_LSB_REG) << 8) | bmp180_read_reg(BMP180_XLSB_REG)) >> (8 - _bmp180_oss);
 8002a12:	1b7f      	subs	r7, r7, r5
	uint32_t b4 = _bmp180_eeprom.BMP180_AC4 * (uint32_t) (x3 + 32768) / (1 << 15);
 8002a14:	468c      	mov	ip, r1
	return ((bmp180_read_reg(BMP180_MSB_REG) << 16) | (bmp180_read_reg(BMP180_LSB_REG) << 8) | bmp180_read_reg(BMP180_XLSB_REG)) >> (8 - _bmp180_oss);
 8002a16:	4138      	asrs	r0, r7
	x1 = (_bmp180_eeprom.BMP180_B2 * (b6 * b6 / (1 << 12))) / (1 << 11);
 8002a18:	210e      	movs	r1, #14
 8002a1a:	5e67      	ldrsh	r7, [r4, r1]
 8002a1c:	437b      	muls	r3, r7
 8002a1e:	17df      	asrs	r7, r3, #31
 8002a20:	057f      	lsls	r7, r7, #21
 8002a22:	0d7f      	lsrs	r7, r7, #21
 8002a24:	18fb      	adds	r3, r7, r3
	x2 = _bmp180_eeprom.BMP180_AC2 * b6 / (1 << 11);
 8002a26:	2102      	movs	r1, #2
 8002a28:	5e67      	ldrsh	r7, [r4, r1]
	x1 = (_bmp180_eeprom.BMP180_B2 * (b6 * b6 / (1 << 12))) / (1 << 11);
 8002a2a:	12db      	asrs	r3, r3, #11
	x2 = _bmp180_eeprom.BMP180_AC2 * b6 / (1 << 11);
 8002a2c:	437a      	muls	r2, r7
 8002a2e:	17d7      	asrs	r7, r2, #31
 8002a30:	057f      	lsls	r7, r7, #21
 8002a32:	0d7f      	lsrs	r7, r7, #21
 8002a34:	18ba      	adds	r2, r7, r2
 8002a36:	12d2      	asrs	r2, r2, #11
	int32_t x3 = x1 + x2;
 8002a38:	189b      	adds	r3, r3, r2
	int32_t b3 = (((_bmp180_eeprom.BMP180_AC1 * 4 + x3) << _bmp180_oss) + 2) / 4;
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	5e62      	ldrsh	r2, [r4, r1]
 8002a3e:	0092      	lsls	r2, r2, #2
 8002a40:	189b      	adds	r3, r3, r2
 8002a42:	40ab      	lsls	r3, r5
 8002a44:	3302      	adds	r3, #2
 8002a46:	17da      	asrs	r2, r3, #31
 8002a48:	4016      	ands	r6, r2
 8002a4a:	18f6      	adds	r6, r6, r3
 8002a4c:	10b6      	asrs	r6, r6, #2
	uint32_t b7 = ((uint32_t) up - b3) * (50000 >> _bmp180_oss);
 8002a4e:	1b86      	subs	r6, r0, r6
 8002a50:	4821      	ldr	r0, [pc, #132]	@ (8002ad8 <bmp180_get_pressure+0x274>)
 8002a52:	4128      	asrs	r0, r5
 8002a54:	4370      	muls	r0, r6
	if (b7 < 0x80000000)
 8002a56:	2800      	cmp	r0, #0
 8002a58:	db2a      	blt.n	8002ab0 <bmp180_get_pressure+0x24c>
		p = (b7 * 2) / b4;
 8002a5a:	4661      	mov	r1, ip
 8002a5c:	0040      	lsls	r0, r0, #1
 8002a5e:	f7fd fb65 	bl	800012c <__udivsi3>
	x1 = (p / (1 << 8)) * (p / (1 << 8));
 8002a62:	23ff      	movs	r3, #255	@ 0xff
 8002a64:	17c2      	asrs	r2, r0, #31
 8002a66:	4013      	ands	r3, r2
 8002a68:	181b      	adds	r3, r3, r0
 8002a6a:	121b      	asrs	r3, r3, #8
 8002a6c:	435b      	muls	r3, r3
	x1 = (x1 * 3038) / (1 << 16);
 8002a6e:	491b      	ldr	r1, [pc, #108]	@ (8002adc <bmp180_get_pressure+0x278>)
 8002a70:	4359      	muls	r1, r3
	x2 = (-7357 * p) / (1 << 16);
 8002a72:	0143      	lsls	r3, r0, #5
 8002a74:	181b      	adds	r3, r3, r0
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	1a1b      	subs	r3, r3, r0
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	1a1b      	subs	r3, r3, r0
 8002a7e:	00da      	lsls	r2, r3, #3
 8002a80:	1a9b      	subs	r3, r3, r2
 8002a82:	17da      	asrs	r2, r3, #31
 8002a84:	0412      	lsls	r2, r2, #16
 8002a86:	0c12      	lsrs	r2, r2, #16
 8002a88:	18d3      	adds	r3, r2, r3
	p = p + (x1 + x2 + 3791) / (1 << 4);
 8002a8a:	4a15      	ldr	r2, [pc, #84]	@ (8002ae0 <bmp180_get_pressure+0x27c>)
	x1 = (x1 * 3038) / (1 << 16);
 8002a8c:	1409      	asrs	r1, r1, #16
	p = p + (x1 + x2 + 3791) / (1 << 4);
 8002a8e:	4694      	mov	ip, r2
 8002a90:	220f      	movs	r2, #15
	x2 = (-7357 * p) / (1 << 16);
 8002a92:	141b      	asrs	r3, r3, #16
	p = p + (x1 + x2 + 3791) / (1 << 4);
 8002a94:	185b      	adds	r3, r3, r1
 8002a96:	4463      	add	r3, ip
 8002a98:	17d9      	asrs	r1, r3, #31
 8002a9a:	400a      	ands	r2, r1
 8002a9c:	18d3      	adds	r3, r2, r3
 8002a9e:	111b      	asrs	r3, r3, #4
 8002aa0:	1818      	adds	r0, r3, r0
}
 8002aa2:	b005      	add	sp, #20
 8002aa4:	bcf0      	pop	{r4, r5, r6, r7}
 8002aa6:	46bb      	mov	fp, r7
 8002aa8:	46b2      	mov	sl, r6
 8002aaa:	46a9      	mov	r9, r5
 8002aac:	46a0      	mov	r8, r4
 8002aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		p = (b7 / b4) * 2;
 8002ab0:	4661      	mov	r1, ip
 8002ab2:	f7fd fb3b 	bl	800012c <__udivsi3>
 8002ab6:	0040      	lsls	r0, r0, #1
 8002ab8:	e7d3      	b.n	8002a62 <bmp180_get_pressure+0x1fe>
 8002aba:	46c0      	nop			@ (mov r8, r8)
 8002abc:	00002ef4 	.word	0x00002ef4
 8002ac0:	200000e4 	.word	0x200000e4
 8002ac4:	200000c8 	.word	0x200000c8
 8002ac8:	080070dc 	.word	0x080070dc
 8002acc:	080070d8 	.word	0x080070d8
 8002ad0:	200000cc 	.word	0x200000cc
 8002ad4:	fffff060 	.word	0xfffff060
 8002ad8:	0000c350 	.word	0x0000c350
 8002adc:	00000bde 	.word	0x00000bde
 8002ae0:	00000ecf 	.word	0x00000ecf

08002ae4 <dht_init>:
 * GPIOx - GPIO порт, GPIO_Pin - GPIO пін
 * _htim - вказівник на структуру параметрів конфігурації таймера
 * */
void dht_init(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, TIM_HandleTypeDef *_htim)
{
	DHT_PORT = GPIOx;
 8002ae4:	4b03      	ldr	r3, [pc, #12]	@ (8002af4 <dht_init+0x10>)
 8002ae6:	6018      	str	r0, [r3, #0]
	DHT_PIN = GPIO_Pin;
 8002ae8:	4b03      	ldr	r3, [pc, #12]	@ (8002af8 <dht_init+0x14>)
 8002aea:	8019      	strh	r1, [r3, #0]
	htim = _htim;
 8002aec:	4b03      	ldr	r3, [pc, #12]	@ (8002afc <dht_init+0x18>)
 8002aee:	601a      	str	r2, [r3, #0]
}
 8002af0:	4770      	bx	lr
 8002af2:	46c0      	nop			@ (mov r8, r8)
 8002af4:	200000f8 	.word	0x200000f8
 8002af8:	200000f4 	.word	0x200000f4
 8002afc:	200000f0 	.word	0x200000f0

08002b00 <dht_readSensor>:

int dht_readSensor(uint8_t wakeup_delay)
{
 8002b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b02:	46de      	mov	lr, fp
 8002b04:	4657      	mov	r7, sl
 8002b06:	464e      	mov	r6, r9
 8002b08:	4645      	mov	r5, r8
 8002b0a:	b5e0      	push	{r5, r6, r7, lr}
	//__disable_irq();
	uint8_t mask = 128;
    uint8_t idx = 0;

    // очищуємо буфер
    for (uint8_t i = 0; i < 5; i++) bits[i] = 0;
 8002b0c:	2700      	movs	r7, #0
 8002b0e:	4b4c      	ldr	r3, [pc, #304]	@ (8002c40 <dht_readSensor+0x140>)

    // виконуємо запит на читання даних
    set_pin_output(DHT_PORT, DHT_PIN);
 8002b10:	4c4c      	ldr	r4, [pc, #304]	@ (8002c44 <dht_readSensor+0x144>)
 8002b12:	4d4d      	ldr	r5, [pc, #308]	@ (8002c48 <dht_readSensor+0x148>)
    for (uint8_t i = 0; i < 5; i++) bits[i] = 0;
 8002b14:	601f      	str	r7, [r3, #0]
 8002b16:	711f      	strb	r7, [r3, #4]
 8002b18:	4698      	mov	r8, r3
    set_pin_output(DHT_PORT, DHT_PIN);
 8002b1a:	6823      	ldr	r3, [r4, #0]
{
 8002b1c:	b087      	sub	sp, #28
    set_pin_output(DHT_PORT, DHT_PIN);
 8002b1e:	4699      	mov	r9, r3
 8002b20:	882b      	ldrh	r3, [r5, #0]
{
 8002b22:	0006      	movs	r6, r0
    set_pin_output(DHT_PORT, DHT_PIN);
 8002b24:	469a      	mov	sl, r3
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b26:	220c      	movs	r2, #12
 8002b28:	2100      	movs	r1, #0
 8002b2a:	a803      	add	r0, sp, #12
 8002b2c:	f003 fb8e 	bl	800624c <memset>
	GPIO_InitStruct.Pin = GPIO_Pin;
 8002b30:	4653      	mov	r3, sl
 8002b32:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b34:	2301      	movs	r3, #1
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8002b36:	4648      	mov	r0, r9
 8002b38:	a901      	add	r1, sp, #4
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b3a:	9302      	str	r3, [sp, #8]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8002b3c:	f001 fc94 	bl	8004468 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(DHT_PORT, DHT_PIN, 0); // переводимо пін у низький лог. рівень
 8002b40:	2200      	movs	r2, #0
 8002b42:	8829      	ldrh	r1, [r5, #0]
 8002b44:	6820      	ldr	r0, [r4, #0]
 8002b46:	f001 fd8b 	bl	8004660 <HAL_GPIO_WritePin>
    delay_us(wakeup_delay * 1000UL);
 8002b4a:	20fa      	movs	r0, #250	@ 0xfa
 8002b4c:	0080      	lsls	r0, r0, #2
 8002b4e:	4370      	muls	r0, r6
 8002b50:	b280      	uxth	r0, r0
 8002b52:	f000 fb73 	bl	800323c <delay_us>
    set_pin_input(DHT_PORT, DHT_PIN);
 8002b56:	882b      	ldrh	r3, [r5, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b58:	2210      	movs	r2, #16
    set_pin_input(DHT_PORT, DHT_PIN);
 8002b5a:	4699      	mov	r9, r3
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	a802      	add	r0, sp, #8
    set_pin_input(DHT_PORT, DHT_PIN);
 8002b60:	6826      	ldr	r6, [r4, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b62:	f003 fb73 	bl	800624c <memset>
	GPIO_InitStruct.Pin = GPIO_Pin;
 8002b66:	464b      	mov	r3, r9
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8002b68:	0030      	movs	r0, r6
 8002b6a:	a901      	add	r1, sp, #4
	GPIO_InitStruct.Pin = GPIO_Pin;
 8002b6c:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8002b6e:	f001 fc7b 	bl	8004468 <HAL_GPIO_Init>
    delay_us(50);
 8002b72:	2032      	movs	r0, #50	@ 0x32
 8002b74:	f000 fb62 	bl	800323c <delay_us>

    // отримуємо підтвердження від давача або TIMEOUT
    htim->Instance->CNT = 0;
 8002b78:	4e34      	ldr	r6, [pc, #208]	@ (8002c4c <dht_readSensor+0x14c>)
 8002b7a:	6833      	ldr	r3, [r6, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	625f      	str	r7, [r3, #36]	@ 0x24
    while (!(HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN)))
 8002b80:	e002      	b.n	8002b88 <dht_readSensor+0x88>
    {
       if (htim->Instance->CNT > DHTLIB_TIMEOUT)
 8002b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b84:	2bc8      	cmp	r3, #200	@ 0xc8
 8002b86:	d852      	bhi.n	8002c2e <dht_readSensor+0x12e>
    while (!(HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN)))
 8002b88:	8829      	ldrh	r1, [r5, #0]
 8002b8a:	6820      	ldr	r0, [r4, #0]
 8002b8c:	f001 fd62 	bl	8004654 <HAL_GPIO_ReadPin>
       if (htim->Instance->CNT > DHTLIB_TIMEOUT)
 8002b90:	6833      	ldr	r3, [r6, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
    while (!(HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN)))
 8002b94:	2800      	cmp	r0, #0
 8002b96:	d0f4      	beq.n	8002b82 <dht_readSensor+0x82>
       {
    	   return DHTLIB_ERROR_TIMEOUT;
       }
    }
    htim->Instance->CNT = 0;
 8002b98:	2200      	movs	r2, #0
 8002b9a:	625a      	str	r2, [r3, #36]	@ 0x24
    while (HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN))
 8002b9c:	e003      	b.n	8002ba6 <dht_readSensor+0xa6>
    {
       if (htim->Instance->CNT > DHTLIB_TIMEOUT)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba2:	2bc8      	cmp	r3, #200	@ 0xc8
 8002ba4:	d843      	bhi.n	8002c2e <dht_readSensor+0x12e>
    while (HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN))
 8002ba6:	8829      	ldrh	r1, [r5, #0]
 8002ba8:	6820      	ldr	r0, [r4, #0]
 8002baa:	f001 fd53 	bl	8004654 <HAL_GPIO_ReadPin>
       if (htim->Instance->CNT > DHTLIB_TIMEOUT)
 8002bae:	6833      	ldr	r3, [r6, #0]
    while (HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN))
 8002bb0:	1e07      	subs	r7, r0, #0
 8002bb2:	d1f4      	bne.n	8002b9e <dht_readSensor+0x9e>
       if (htim->Instance->CNT > DHTLIB_TIMEOUT)
 8002bb4:	2228      	movs	r2, #40	@ 0x28
 8002bb6:	4691      	mov	r9, r2
	uint8_t mask = 128;
 8002bb8:	3258      	adds	r2, #88	@ 0x58
 8002bba:	4693      	mov	fp, r2
       }
    }
    // читаємо дані - 40 біт => 5 байтів
    for (uint8_t i = 40; i != 0; i--)
    {
        htim->Instance->CNT = 0;
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	4692      	mov	sl, r2
 8002bc0:	4652      	mov	r2, sl
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	625a      	str	r2, [r3, #36]	@ 0x24
        while (!(HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN)))
 8002bc6:	e002      	b.n	8002bce <dht_readSensor+0xce>
        {
           if (htim->Instance->CNT > DHTLIB_TIMEOUT)
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bca:	2bc8      	cmp	r3, #200	@ 0xc8
 8002bcc:	d82f      	bhi.n	8002c2e <dht_readSensor+0x12e>
        while (!(HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN)))
 8002bce:	8829      	ldrh	r1, [r5, #0]
 8002bd0:	6820      	ldr	r0, [r4, #0]
 8002bd2:	f001 fd3f 	bl	8004654 <HAL_GPIO_ReadPin>
           if (htim->Instance->CNT > DHTLIB_TIMEOUT)
 8002bd6:	6833      	ldr	r3, [r6, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
        while (!(HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN)))
 8002bda:	2800      	cmp	r0, #0
 8002bdc:	d0f4      	beq.n	8002bc8 <dht_readSensor+0xc8>
           {
               return DHTLIB_ERROR_TIMEOUT;
           }
        }

        htim->Instance->CNT = 0;
 8002bde:	2200      	movs	r2, #0
 8002be0:	625a      	str	r2, [r3, #36]	@ 0x24

        while (HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN))
 8002be2:	e003      	b.n	8002bec <dht_readSensor+0xec>
        {
           if (htim->Instance->CNT > DHTLIB_TIMEOUT)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be8:	2bc8      	cmp	r3, #200	@ 0xc8
 8002bea:	d820      	bhi.n	8002c2e <dht_readSensor+0x12e>
        while (HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN))
 8002bec:	8829      	ldrh	r1, [r5, #0]
 8002bee:	6820      	ldr	r0, [r4, #0]
 8002bf0:	f001 fd30 	bl	8004654 <HAL_GPIO_ReadPin>
           if (htim->Instance->CNT > DHTLIB_TIMEOUT)
 8002bf4:	6833      	ldr	r3, [r6, #0]
        while (HAL_GPIO_ReadPin(DHT_PORT, DHT_PIN))
 8002bf6:	2800      	cmp	r0, #0
 8002bf8:	d1f4      	bne.n	8002be4 <dht_readSensor+0xe4>
           {
               return DHTLIB_ERROR_TIMEOUT;
           }
        }

        if (htim->Instance->CNT > 40)
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002bfe:	2a28      	cmp	r2, #40	@ 0x28
 8002c00:	d905      	bls.n	8002c0e <dht_readSensor+0x10e>
        {
            bits[idx] |= mask;
 8002c02:	4642      	mov	r2, r8
 8002c04:	4659      	mov	r1, fp
 8002c06:	5dd2      	ldrb	r2, [r2, r7]
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	4641      	mov	r1, r8
 8002c0c:	55ca      	strb	r2, [r1, r7]
        }
        mask >>= 1;
 8002c0e:	465a      	mov	r2, fp
 8002c10:	0852      	lsrs	r2, r2, #1
 8002c12:	4693      	mov	fp, r2
        if (mask == 0)   // наступний байт?
 8002c14:	d103      	bne.n	8002c1e <dht_readSensor+0x11e>
        {
            mask = 128;
 8002c16:	3280      	adds	r2, #128	@ 0x80
 8002c18:	4693      	mov	fp, r2
            idx++;
 8002c1a:	3701      	adds	r7, #1
 8002c1c:	b2ff      	uxtb	r7, r7
    for (uint8_t i = 40; i != 0; i--)
 8002c1e:	464a      	mov	r2, r9
 8002c20:	3a01      	subs	r2, #1
 8002c22:	b2d2      	uxtb	r2, r2
 8002c24:	4691      	mov	r9, r2
 8002c26:	2a00      	cmp	r2, #0
 8002c28:	d1ca      	bne.n	8002bc0 <dht_readSensor+0xc0>
        }
    }
    //__enable_irq();
    return DHTLIB_OK;
 8002c2a:	2000      	movs	r0, #0
 8002c2c:	e001      	b.n	8002c32 <dht_readSensor+0x132>
    	   return DHTLIB_ERROR_TIMEOUT;
 8002c2e:	2002      	movs	r0, #2
 8002c30:	4240      	negs	r0, r0
}
 8002c32:	b007      	add	sp, #28
 8002c34:	bcf0      	pop	{r4, r5, r6, r7}
 8002c36:	46bb      	mov	fp, r7
 8002c38:	46b2      	mov	sl, r6
 8002c3a:	46a9      	mov	r9, r5
 8002c3c:	46a0      	mov	r8, r4
 8002c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c40:	200000e8 	.word	0x200000e8
 8002c44:	200000f8 	.word	0x200000f8
 8002c48:	200000f4 	.word	0x200000f4
 8002c4c:	200000f0 	.word	0x200000f0

08002c50 <dht_read>:

int dht_read(float *humidity, float *temperature)
{
 8002c50:	b570      	push	{r4, r5, r6, lr}
 8002c52:	0006      	movs	r6, r0
 8002c54:	000d      	movs	r5, r1
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c56:	b672      	cpsid	i
    // читаємо дані температури і вологості
    //if (_disableIRQ) noInterrupts();
	__disable_irq();
    int rv = dht_readSensor(DHTLIB_DHT11_WAKEUP);
 8002c58:	2012      	movs	r0, #18
 8002c5a:	f7ff ff51 	bl	8002b00 <dht_readSensor>
  __ASM volatile ("cpsie i" : : : "memory");
 8002c5e:	b662      	cpsie	i
    __enable_irq();
    if (rv != DHTLIB_OK)
 8002c60:	2800      	cmp	r0, #0
 8002c62:	d131      	bne.n	8002cc8 <dht_read+0x78>
        *humidity    = DHTLIB_INVALID_VALUE; // некоректне (недійсне) значення , або NaN prefered?
        *temperature = DHTLIB_INVALID_VALUE; // недійсне значення
        return rv;
    }
    // перетворюємо отримані дані у значення температури і вологості та зберігаємо їх
    *humidity = ((bits[0] << 8) | bits[1]) * 0.1;
 8002c64:	4c1a      	ldr	r4, [pc, #104]	@ (8002cd0 <dht_read+0x80>)
 8002c66:	8820      	ldrh	r0, [r4, #0]
 8002c68:	ba40      	rev16	r0, r0
 8002c6a:	b280      	uxth	r0, r0
 8002c6c:	f7ff fa9c 	bl	80021a8 <__aeabi_i2d>
 8002c70:	4a18      	ldr	r2, [pc, #96]	@ (8002cd4 <dht_read+0x84>)
 8002c72:	4b19      	ldr	r3, [pc, #100]	@ (8002cd8 <dht_read+0x88>)
 8002c74:	f7fe fbd6 	bl	8001424 <__aeabi_dmul>
 8002c78:	f7ff fb0c 	bl	8002294 <__aeabi_d2f>
 8002c7c:	6030      	str	r0, [r6, #0]
    *temperature = ((bits[2] << 8) | bits[3]) * 0.1;
 8002c7e:	8860      	ldrh	r0, [r4, #2]
 8002c80:	ba40      	rev16	r0, r0
 8002c82:	b280      	uxth	r0, r0
 8002c84:	f7ff fa90 	bl	80021a8 <__aeabi_i2d>
 8002c88:	4a12      	ldr	r2, [pc, #72]	@ (8002cd4 <dht_read+0x84>)
 8002c8a:	4b13      	ldr	r3, [pc, #76]	@ (8002cd8 <dht_read+0x88>)
 8002c8c:	f7fe fbca 	bl	8001424 <__aeabi_dmul>
 8002c90:	f7ff fb00 	bl	8002294 <__aeabi_d2f>
    if (bits[2] & 0x80)  // від'ємна температура
 8002c94:	2202      	movs	r2, #2
    *temperature = ((bits[2] << 8) | bits[3]) * 0.1;
 8002c96:	6028      	str	r0, [r5, #0]
    if (bits[2] & 0x80)  // від'ємна температура
 8002c98:	56a2      	ldrsb	r2, [r4, r2]
 8002c9a:	78a3      	ldrb	r3, [r4, #2]
 8002c9c:	2a00      	cmp	r2, #0
 8002c9e:	db0c      	blt.n	8002cba <dht_read+0x6a>
    {
        *temperature = -(*temperature);
    }
    // перевіряємо контрольну суму
    uint8_t sum = bits[0] + bits[1] + bits[2] + bits[3];
 8002ca0:	7861      	ldrb	r1, [r4, #1]
 8002ca2:	7822      	ldrb	r2, [r4, #0]
    if (bits[4] != sum)
 8002ca4:	7920      	ldrb	r0, [r4, #4]
    uint8_t sum = bits[0] + bits[1] + bits[2] + bits[3];
 8002ca6:	1852      	adds	r2, r2, r1
 8002ca8:	78e1      	ldrb	r1, [r4, #3]
 8002caa:	1852      	adds	r2, r2, r1
 8002cac:	189b      	adds	r3, r3, r2
    if (bits[4] != sum)
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	1ac0      	subs	r0, r0, r3
 8002cb2:	1e43      	subs	r3, r0, #1
 8002cb4:	4198      	sbcs	r0, r3
 8002cb6:	4240      	negs	r0, r0
    {
      return DHTLIB_ERROR_CHECKSUM;
    }
    return DHTLIB_OK;
}
 8002cb8:	bd70      	pop	{r4, r5, r6, pc}
        *temperature = -(*temperature);
 8002cba:	2380      	movs	r3, #128	@ 0x80
 8002cbc:	061b      	lsls	r3, r3, #24
 8002cbe:	469c      	mov	ip, r3
 8002cc0:	4460      	add	r0, ip
 8002cc2:	6028      	str	r0, [r5, #0]
    uint8_t sum = bits[0] + bits[1] + bits[2] + bits[3];
 8002cc4:	78a3      	ldrb	r3, [r4, #2]
 8002cc6:	e7eb      	b.n	8002ca0 <dht_read+0x50>
        *humidity    = DHTLIB_INVALID_VALUE; // некоректне (недійсне) значення , або NaN prefered?
 8002cc8:	4b04      	ldr	r3, [pc, #16]	@ (8002cdc <dht_read+0x8c>)
 8002cca:	6033      	str	r3, [r6, #0]
        *temperature = DHTLIB_INVALID_VALUE; // недійсне значення
 8002ccc:	602b      	str	r3, [r5, #0]
        return rv;
 8002cce:	e7f3      	b.n	8002cb8 <dht_read+0x68>
 8002cd0:	200000e8 	.word	0x200000e8
 8002cd4:	9999999a 	.word	0x9999999a
 8002cd8:	3fb99999 	.word	0x3fb99999
 8002cdc:	c479c000 	.word	0xc479c000

08002ce0 <dht_calc_dewpoint>:
/* функція обчислює точку роси
 * вхідні параметри: humidity [%RH], temperature [°C]
 * повертає: обчислене значення точки роси dew_point [°C]
  */
float dht_calc_dewpoint(float *humidity, float *temperature)
{
 8002ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ce2:	0006      	movs	r6, r0
 8002ce4:	b083      	sub	sp, #12
  float logEx, dew_point;
  logEx = 0.66077 + 7.5* (*temperature) / (237.3 + (*temperature))+(log10(*humidity)-2);
 8002ce6:	6808      	ldr	r0, [r1, #0]
 8002ce8:	f7ff fa8c 	bl	8002204 <__aeabi_f2d>
 8002cec:	0004      	movs	r4, r0
 8002cee:	6830      	ldr	r0, [r6, #0]
 8002cf0:	000d      	movs	r5, r1
 8002cf2:	f7ff fa87 	bl	8002204 <__aeabi_f2d>
 8002cf6:	f003 ff27 	bl	8006b48 <log10>
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	9000      	str	r0, [sp, #0]
 8002cfe:	9101      	str	r1, [sp, #4]
 8002d00:	4b22      	ldr	r3, [pc, #136]	@ (8002d8c <dht_calc_dewpoint+0xac>)
 8002d02:	0020      	movs	r0, r4
 8002d04:	0029      	movs	r1, r5
 8002d06:	f7fe fb8d 	bl	8001424 <__aeabi_dmul>
 8002d0a:	4a21      	ldr	r2, [pc, #132]	@ (8002d90 <dht_calc_dewpoint+0xb0>)
 8002d0c:	0006      	movs	r6, r0
 8002d0e:	000f      	movs	r7, r1
 8002d10:	0020      	movs	r0, r4
 8002d12:	0029      	movs	r1, r5
 8002d14:	4b1f      	ldr	r3, [pc, #124]	@ (8002d94 <dht_calc_dewpoint+0xb4>)
 8002d16:	f7fd fbdd 	bl	80004d4 <__aeabi_dadd>
 8002d1a:	0002      	movs	r2, r0
 8002d1c:	000b      	movs	r3, r1
 8002d1e:	0030      	movs	r0, r6
 8002d20:	0039      	movs	r1, r7
 8002d22:	f7fd ff3b 	bl	8000b9c <__aeabi_ddiv>
 8002d26:	4a1c      	ldr	r2, [pc, #112]	@ (8002d98 <dht_calc_dewpoint+0xb8>)
 8002d28:	4b1c      	ldr	r3, [pc, #112]	@ (8002d9c <dht_calc_dewpoint+0xbc>)
 8002d2a:	f7fd fbd3 	bl	80004d4 <__aeabi_dadd>
 8002d2e:	2380      	movs	r3, #128	@ 0x80
 8002d30:	0004      	movs	r4, r0
 8002d32:	000d      	movs	r5, r1
 8002d34:	9800      	ldr	r0, [sp, #0]
 8002d36:	9901      	ldr	r1, [sp, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	05db      	lsls	r3, r3, #23
 8002d3c:	f7fe fe3a 	bl	80019b4 <__aeabi_dsub>
 8002d40:	0002      	movs	r2, r0
 8002d42:	000b      	movs	r3, r1
 8002d44:	0020      	movs	r0, r4
 8002d46:	0029      	movs	r1, r5
 8002d48:	f7fd fbc4 	bl	80004d4 <__aeabi_dadd>
 8002d4c:	f7ff faa2 	bl	8002294 <__aeabi_d2f>
  dew_point = (logEx - 0.66077)*237.3 / (0.66077+7.5-logEx);
 8002d50:	f7ff fa58 	bl	8002204 <__aeabi_f2d>
 8002d54:	4a10      	ldr	r2, [pc, #64]	@ (8002d98 <dht_calc_dewpoint+0xb8>)
 8002d56:	4b11      	ldr	r3, [pc, #68]	@ (8002d9c <dht_calc_dewpoint+0xbc>)
 8002d58:	0004      	movs	r4, r0
 8002d5a:	000d      	movs	r5, r1
 8002d5c:	f7fe fe2a 	bl	80019b4 <__aeabi_dsub>
 8002d60:	4a0b      	ldr	r2, [pc, #44]	@ (8002d90 <dht_calc_dewpoint+0xb0>)
 8002d62:	4b0c      	ldr	r3, [pc, #48]	@ (8002d94 <dht_calc_dewpoint+0xb4>)
 8002d64:	f7fe fb5e 	bl	8001424 <__aeabi_dmul>
 8002d68:	0022      	movs	r2, r4
 8002d6a:	0006      	movs	r6, r0
 8002d6c:	000f      	movs	r7, r1
 8002d6e:	002b      	movs	r3, r5
 8002d70:	480b      	ldr	r0, [pc, #44]	@ (8002da0 <dht_calc_dewpoint+0xc0>)
 8002d72:	490c      	ldr	r1, [pc, #48]	@ (8002da4 <dht_calc_dewpoint+0xc4>)
 8002d74:	f7fe fe1e 	bl	80019b4 <__aeabi_dsub>
 8002d78:	0002      	movs	r2, r0
 8002d7a:	000b      	movs	r3, r1
 8002d7c:	0030      	movs	r0, r6
 8002d7e:	0039      	movs	r1, r7
 8002d80:	f7fd ff0c 	bl	8000b9c <__aeabi_ddiv>
 8002d84:	f7ff fa86 	bl	8002294 <__aeabi_d2f>
  return dew_point;
}
 8002d88:	b003      	add	sp, #12
 8002d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d8c:	401e0000 	.word	0x401e0000
 8002d90:	9999999a 	.word	0x9999999a
 8002d94:	406da999 	.word	0x406da999
 8002d98:	2085b185 	.word	0x2085b185
 8002d9c:	3fe52507 	.word	0x3fe52507
 8002da0:	72085b18 	.word	0x72085b18
 8002da4:	40205250 	.word	0x40205250

08002da8 <lcd16x2_enablePulse>:
/* private functions prototypes */
/**
 * @brief функція генерування сигналу Enable
 */
static void lcd16x2_enablePulse(void)
{
 8002da8:	b570      	push	{r4, r5, r6, lr}
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_SET);
 8002daa:	4d09      	ldr	r5, [pc, #36]	@ (8002dd0 <lcd16x2_enablePulse+0x28>)
 8002dac:	4c09      	ldr	r4, [pc, #36]	@ (8002dd4 <lcd16x2_enablePulse+0x2c>)
 8002dae:	8829      	ldrh	r1, [r5, #0]
 8002db0:	2201      	movs	r2, #1
 8002db2:	6820      	ldr	r0, [r4, #0]
 8002db4:	f001 fc54 	bl	8004660 <HAL_GPIO_WritePin>
  //DWT_Delay_us(T_CONST);
  delay_us(T_CONST);
 8002db8:	2014      	movs	r0, #20
 8002dba:	f000 fa3f 	bl	800323c <delay_us>
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_RESET);
 8002dbe:	8829      	ldrh	r1, [r5, #0]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	6820      	ldr	r0, [r4, #0]
 8002dc4:	f001 fc4c 	bl	8004660 <HAL_GPIO_WritePin>
  //DWT_Delay_us(60);
  delay_us(60);
 8002dc8:	203c      	movs	r0, #60	@ 0x3c
 8002dca:	f000 fa37 	bl	800323c <delay_us>
}
 8002dce:	bd70      	pop	{r4, r5, r6, pc}
 8002dd0:	20000114 	.word	0x20000114
 8002dd4:	20000118 	.word	0x20000118

08002dd8 <lcd16x2_write>:

/**
 * @brief функція запису паралельних даних на шині до LCD
 */
static void lcd16x2_write(uint8_t wbyte)
{
 8002dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dda:	4657      	mov	r7, sl
 8002ddc:	464e      	mov	r6, r9
 8002dde:	46de      	mov	lr, fp
 8002de0:	4645      	mov	r5, r8
 8002de2:	b5e0      	push	{r5, r6, r7, lr}
    HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
    HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
    HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
    HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
    //дані MSB
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8002de4:	2701      	movs	r7, #1
 8002de6:	003b      	movs	r3, r7
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8002de8:	2602      	movs	r6, #2
  uint8_t LSB_nibble = wbyte&0xF, MSB_nibble = (wbyte>>4)&0xF;
 8002dea:	0904      	lsrs	r4, r0, #4
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8002dec:	4023      	ands	r3, r4
 8002dee:	469b      	mov	fp, r3
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8002df0:	0033      	movs	r3, r6
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8002df2:	2504      	movs	r5, #4
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8002df4:	4023      	ands	r3, r4
 8002df6:	469a      	mov	sl, r3
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8002df8:	002b      	movs	r3, r5
 8002dfa:	4023      	ands	r3, r4
 8002dfc:	4699      	mov	r9, r3
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8002dfe:	2308      	movs	r3, #8
{
 8002e00:	b083      	sub	sp, #12
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8002e02:	401c      	ands	r4, r3
    HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8002e04:	4003      	ands	r3, r0
 8002e06:	9301      	str	r3, [sp, #4]
  if(is8BitsMode)
 8002e08:	4b3e      	ldr	r3, [pc, #248]	@ (8002f04 <lcd16x2_write+0x12c>)
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8002e0a:	9400      	str	r4, [sp, #0]
  if(is8BitsMode)
 8002e0c:	781b      	ldrb	r3, [r3, #0]
    HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8002e0e:	4007      	ands	r7, r0
    HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8002e10:	4006      	ands	r6, r0
    HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8002e12:	4005      	ands	r5, r0
  if(is8BitsMode)
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d03a      	beq.n	8002e8e <lcd16x2_write+0xb6>
    HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8002e18:	4c3b      	ldr	r4, [pc, #236]	@ (8002f08 <lcd16x2_write+0x130>)
 8002e1a:	4b3c      	ldr	r3, [pc, #240]	@ (8002f0c <lcd16x2_write+0x134>)
 8002e1c:	003a      	movs	r2, r7
 8002e1e:	8819      	ldrh	r1, [r3, #0]
 8002e20:	6820      	ldr	r0, [r4, #0]
 8002e22:	f001 fc1d 	bl	8004660 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8002e26:	4b3a      	ldr	r3, [pc, #232]	@ (8002f10 <lcd16x2_write+0x138>)
 8002e28:	0032      	movs	r2, r6
 8002e2a:	8819      	ldrh	r1, [r3, #0]
 8002e2c:	6820      	ldr	r0, [r4, #0]
 8002e2e:	f001 fc17 	bl	8004660 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8002e32:	4b38      	ldr	r3, [pc, #224]	@ (8002f14 <lcd16x2_write+0x13c>)
 8002e34:	002a      	movs	r2, r5
 8002e36:	8819      	ldrh	r1, [r3, #0]
 8002e38:	6820      	ldr	r0, [r4, #0]
 8002e3a:	f001 fc11 	bl	8004660 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8002e3e:	4b36      	ldr	r3, [pc, #216]	@ (8002f18 <lcd16x2_write+0x140>)
 8002e40:	6820      	ldr	r0, [r4, #0]
 8002e42:	8819      	ldrh	r1, [r3, #0]
 8002e44:	9a01      	ldr	r2, [sp, #4]
 8002e46:	f001 fc0b 	bl	8004660 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8002e4a:	4d34      	ldr	r5, [pc, #208]	@ (8002f1c <lcd16x2_write+0x144>)
 8002e4c:	4b34      	ldr	r3, [pc, #208]	@ (8002f20 <lcd16x2_write+0x148>)
 8002e4e:	465a      	mov	r2, fp
 8002e50:	8819      	ldrh	r1, [r3, #0]
 8002e52:	6828      	ldr	r0, [r5, #0]
 8002e54:	f001 fc04 	bl	8004660 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8002e58:	4b32      	ldr	r3, [pc, #200]	@ (8002f24 <lcd16x2_write+0x14c>)
 8002e5a:	4652      	mov	r2, sl
 8002e5c:	8819      	ldrh	r1, [r3, #0]
 8002e5e:	6828      	ldr	r0, [r5, #0]
 8002e60:	f001 fbfe 	bl	8004660 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8002e64:	4b30      	ldr	r3, [pc, #192]	@ (8002f28 <lcd16x2_write+0x150>)
 8002e66:	464a      	mov	r2, r9
 8002e68:	8819      	ldrh	r1, [r3, #0]
 8002e6a:	6828      	ldr	r0, [r5, #0]
 8002e6c:	f001 fbf8 	bl	8004660 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8002e70:	4b2e      	ldr	r3, [pc, #184]	@ (8002f2c <lcd16x2_write+0x154>)
 8002e72:	6828      	ldr	r0, [r5, #0]
 8002e74:	8819      	ldrh	r1, [r3, #0]
 8002e76:	9a00      	ldr	r2, [sp, #0]
 8002e78:	f001 fbf2 	bl	8004660 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 8002e7c:	f7ff ff94 	bl	8002da8 <lcd16x2_enablePulse>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
    lcd16x2_enablePulse();
  }
}
 8002e80:	b003      	add	sp, #12
 8002e82:	bcf0      	pop	{r4, r5, r6, r7}
 8002e84:	46bb      	mov	fp, r7
 8002e86:	46b2      	mov	sl, r6
 8002e88:	46a9      	mov	r9, r5
 8002e8a:	46a0      	mov	r8, r4
 8002e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8002e8e:	4b24      	ldr	r3, [pc, #144]	@ (8002f20 <lcd16x2_write+0x148>)
 8002e90:	4c22      	ldr	r4, [pc, #136]	@ (8002f1c <lcd16x2_write+0x144>)
 8002e92:	4698      	mov	r8, r3
 8002e94:	465a      	mov	r2, fp
 8002e96:	8819      	ldrh	r1, [r3, #0]
 8002e98:	6820      	ldr	r0, [r4, #0]
 8002e9a:	f001 fbe1 	bl	8004660 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8002e9e:	4b21      	ldr	r3, [pc, #132]	@ (8002f24 <lcd16x2_write+0x14c>)
 8002ea0:	4652      	mov	r2, sl
 8002ea2:	8819      	ldrh	r1, [r3, #0]
 8002ea4:	6820      	ldr	r0, [r4, #0]
 8002ea6:	469b      	mov	fp, r3
 8002ea8:	f001 fbda 	bl	8004660 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8002eac:	4b1e      	ldr	r3, [pc, #120]	@ (8002f28 <lcd16x2_write+0x150>)
 8002eae:	464a      	mov	r2, r9
 8002eb0:	8819      	ldrh	r1, [r3, #0]
 8002eb2:	6820      	ldr	r0, [r4, #0]
 8002eb4:	469a      	mov	sl, r3
 8002eb6:	f001 fbd3 	bl	8004660 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8002eba:	4b1c      	ldr	r3, [pc, #112]	@ (8002f2c <lcd16x2_write+0x154>)
 8002ebc:	6820      	ldr	r0, [r4, #0]
 8002ebe:	8819      	ldrh	r1, [r3, #0]
 8002ec0:	9a00      	ldr	r2, [sp, #0]
 8002ec2:	4699      	mov	r9, r3
 8002ec4:	f001 fbcc 	bl	8004660 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 8002ec8:	f7ff ff6e 	bl	8002da8 <lcd16x2_enablePulse>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8002ecc:	4643      	mov	r3, r8
 8002ece:	003a      	movs	r2, r7
 8002ed0:	8819      	ldrh	r1, [r3, #0]
 8002ed2:	6820      	ldr	r0, [r4, #0]
 8002ed4:	f001 fbc4 	bl	8004660 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8002ed8:	465b      	mov	r3, fp
 8002eda:	0032      	movs	r2, r6
 8002edc:	8819      	ldrh	r1, [r3, #0]
 8002ede:	6820      	ldr	r0, [r4, #0]
 8002ee0:	f001 fbbe 	bl	8004660 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8002ee4:	4653      	mov	r3, sl
 8002ee6:	002a      	movs	r2, r5
 8002ee8:	8819      	ldrh	r1, [r3, #0]
 8002eea:	6820      	ldr	r0, [r4, #0]
 8002eec:	f001 fbb8 	bl	8004660 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8002ef0:	464b      	mov	r3, r9
 8002ef2:	6820      	ldr	r0, [r4, #0]
 8002ef4:	8819      	ldrh	r1, [r3, #0]
 8002ef6:	9a01      	ldr	r2, [sp, #4]
 8002ef8:	f001 fbb2 	bl	8004660 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 8002efc:	f7ff ff54 	bl	8002da8 <lcd16x2_enablePulse>
}
 8002f00:	e7be      	b.n	8002e80 <lcd16x2_write+0xa8>
 8002f02:	46c0      	nop			@ (mov r8, r8)
 8002f04:	20000002 	.word	0x20000002
 8002f08:	20000110 	.word	0x20000110
 8002f0c:	2000010e 	.word	0x2000010e
 8002f10:	2000010c 	.word	0x2000010c
 8002f14:	2000010a 	.word	0x2000010a
 8002f18:	20000108 	.word	0x20000108
 8002f1c:	20000104 	.word	0x20000104
 8002f20:	20000102 	.word	0x20000102
 8002f24:	20000100 	.word	0x20000100
 8002f28:	200000fe 	.word	0x200000fe
 8002f2c:	200000fc 	.word	0x200000fc

08002f30 <lcd16x2_write4>:
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 8002f30:	4b12      	ldr	r3, [pc, #72]	@ (8002f7c <lcd16x2_write4+0x4c>)

/**
 * @brief 4-бітний запис
 */
static void lcd16x2_write4(uint8_t nib)
{
 8002f32:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 8002f34:	8819      	ldrh	r1, [r3, #0]
 8002f36:	4b12      	ldr	r3, [pc, #72]	@ (8002f80 <lcd16x2_write4+0x50>)
{
 8002f38:	0004      	movs	r4, r0
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 8002f3a:	6818      	ldr	r0, [r3, #0]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f001 fb8f 	bl	8004660 <HAL_GPIO_WritePin>
  nib &= 0xF;
  lcd16x2_rs(false);
  //LSB data
  HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(nib&0x1));
 8002f42:	2201      	movs	r2, #1
 8002f44:	4b0f      	ldr	r3, [pc, #60]	@ (8002f84 <lcd16x2_write4+0x54>)
 8002f46:	4022      	ands	r2, r4
 8002f48:	4c0f      	ldr	r4, [pc, #60]	@ (8002f88 <lcd16x2_write4+0x58>)
 8002f4a:	8819      	ldrh	r1, [r3, #0]
 8002f4c:	6820      	ldr	r0, [r4, #0]
 8002f4e:	f001 fb87 	bl	8004660 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(nib&0x2));
 8002f52:	4b0e      	ldr	r3, [pc, #56]	@ (8002f8c <lcd16x2_write4+0x5c>)
 8002f54:	6820      	ldr	r0, [r4, #0]
 8002f56:	8819      	ldrh	r1, [r3, #0]
 8002f58:	2202      	movs	r2, #2
 8002f5a:	f001 fb81 	bl	8004660 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(nib&0x4));
 8002f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8002f90 <lcd16x2_write4+0x60>)
 8002f60:	6820      	ldr	r0, [r4, #0]
 8002f62:	8819      	ldrh	r1, [r3, #0]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f001 fb7b 	bl	8004660 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(nib&0x8));
 8002f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8002f94 <lcd16x2_write4+0x64>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	8819      	ldrh	r1, [r3, #0]
 8002f70:	6820      	ldr	r0, [r4, #0]
 8002f72:	f001 fb75 	bl	8004660 <HAL_GPIO_WritePin>
  lcd16x2_enablePulse();
 8002f76:	f7ff ff17 	bl	8002da8 <lcd16x2_enablePulse>
}
 8002f7a:	bd10      	pop	{r4, pc}
 8002f7c:	20000116 	.word	0x20000116
 8002f80:	20000118 	.word	0x20000118
 8002f84:	20000102 	.word	0x20000102
 8002f88:	20000104 	.word	0x20000104
 8002f8c:	20000100 	.word	0x20000100
 8002f90:	200000fe 	.word	0x200000fe
 8002f94:	200000fc 	.word	0x200000fc

08002f98 <lcd16x2_writeData>:
{
 8002f98:	b510      	push	{r4, lr}
 8002f9a:	0004      	movs	r4, r0
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 8002f9c:	4b05      	ldr	r3, [pc, #20]	@ (8002fb4 <lcd16x2_writeData+0x1c>)
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	8819      	ldrh	r1, [r3, #0]
 8002fa2:	4b05      	ldr	r3, [pc, #20]	@ (8002fb8 <lcd16x2_writeData+0x20>)
 8002fa4:	6818      	ldr	r0, [r3, #0]
 8002fa6:	f001 fb5b 	bl	8004660 <HAL_GPIO_WritePin>
  lcd16x2_write(data);
 8002faa:	0020      	movs	r0, r4
 8002fac:	f7ff ff14 	bl	8002dd8 <lcd16x2_write>
}
 8002fb0:	bd10      	pop	{r4, pc}
 8002fb2:	46c0      	nop			@ (mov r8, r8)
 8002fb4:	20000116 	.word	0x20000116
 8002fb8:	20000118 	.word	0x20000118

08002fbc <lcd16x2_init_4bits>:
 * @param[in] x_pin пін GPIO (e.g. GPIO_PIN_1)
 */
void lcd16x2_init_4bits(
    GPIO_TypeDef* port_rs_e, uint16_t rs_pin, uint16_t e_pin,
    GPIO_TypeDef* port_4_7, uint16_t d4_pin, uint16_t d5_pin, uint16_t d6_pin, uint16_t d7_pin)
{
 8002fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fbe:	46ce      	mov	lr, r9
 8002fc0:	4647      	mov	r7, r8
 8002fc2:	4688      	mov	r8, r1
 8002fc4:	4694      	mov	ip, r2
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	ac0a      	add	r4, sp, #40	@ 0x28
 8002fca:	8827      	ldrh	r7, [r4, #0]
 8002fcc:	ac0b      	add	r4, sp, #44	@ 0x2c
 8002fce:	8826      	ldrh	r6, [r4, #0]
  //DWT_Delay_Init();
  //Set GPIO Ports and Pins data
  PORT_RS_and_E = port_rs_e;
 8002fd0:	4c2b      	ldr	r4, [pc, #172]	@ (8003080 <lcd16x2_init_4bits+0xc4>)
{
 8002fd2:	4699      	mov	r9, r3
  PORT_RS_and_E = port_rs_e;
 8002fd4:	6020      	str	r0, [r4, #0]
  PIN_RS = rs_pin;
 8002fd6:	4640      	mov	r0, r8
  PIN_E = e_pin;
 8002fd8:	4663      	mov	r3, ip
  PIN_RS = rs_pin;
 8002fda:	4d2a      	ldr	r5, [pc, #168]	@ (8003084 <lcd16x2_init_4bits+0xc8>)
{
 8002fdc:	aa08      	add	r2, sp, #32
  PIN_RS = rs_pin;
 8002fde:	8028      	strh	r0, [r5, #0]
  PIN_E = e_pin;
 8002fe0:	4829      	ldr	r0, [pc, #164]	@ (8003088 <lcd16x2_init_4bits+0xcc>)
{
 8002fe2:	8811      	ldrh	r1, [r2, #0]
  PIN_E = e_pin;
 8002fe4:	8003      	strh	r3, [r0, #0]
  PORT_MSB = port_4_7;
 8002fe6:	464b      	mov	r3, r9
 8002fe8:	4828      	ldr	r0, [pc, #160]	@ (800308c <lcd16x2_init_4bits+0xd0>)
{
 8002fea:	aa09      	add	r2, sp, #36	@ 0x24
  PORT_MSB = port_4_7;
 8002fec:	6003      	str	r3, [r0, #0]
  D4_PIN = d4_pin;
 8002fee:	4b28      	ldr	r3, [pc, #160]	@ (8003090 <lcd16x2_init_4bits+0xd4>)
{
 8002ff0:	8812      	ldrh	r2, [r2, #0]
  D4_PIN = d4_pin;
 8002ff2:	8019      	strh	r1, [r3, #0]
  D5_PIN = d5_pin;
 8002ff4:	4b27      	ldr	r3, [pc, #156]	@ (8003094 <lcd16x2_init_4bits+0xd8>)
  is8BitsMode = false;
  FunctionSet = 0x28;

  //ініцілізація LCD
  //1. очікування щонайменще 15 мс
  LCD_MS_DELAY(20);
 8002ff6:	2014      	movs	r0, #20
  D5_PIN = d5_pin;
 8002ff8:	801a      	strh	r2, [r3, #0]
  is8BitsMode = false;
 8002ffa:	2200      	movs	r2, #0
  D6_PIN = d6_pin;
 8002ffc:	4b26      	ldr	r3, [pc, #152]	@ (8003098 <lcd16x2_init_4bits+0xdc>)
 8002ffe:	801f      	strh	r7, [r3, #0]
  D7_PIN = d7_pin;
 8003000:	4b26      	ldr	r3, [pc, #152]	@ (800309c <lcd16x2_init_4bits+0xe0>)
 8003002:	801e      	strh	r6, [r3, #0]
  is8BitsMode = false;
 8003004:	4b26      	ldr	r3, [pc, #152]	@ (80030a0 <lcd16x2_init_4bits+0xe4>)
 8003006:	701a      	strb	r2, [r3, #0]
  FunctionSet = 0x28;
 8003008:	4b26      	ldr	r3, [pc, #152]	@ (80030a4 <lcd16x2_init_4bits+0xe8>)
 800300a:	3228      	adds	r2, #40	@ 0x28
 800300c:	701a      	strb	r2, [r3, #0]
  LCD_MS_DELAY(20);
 800300e:	f001 f9d5 	bl	80043bc <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_write4(0x3);
 8003012:	2003      	movs	r0, #3
 8003014:	f7ff ff8c 	bl	8002f30 <lcd16x2_write4>
  LCD_MS_DELAY(5);
 8003018:	2005      	movs	r0, #5
 800301a:	f001 f9cf 	bl	80043bc <HAL_Delay>
  lcd16x2_write4(0x3);
 800301e:	2003      	movs	r0, #3
 8003020:	f7ff ff86 	bl	8002f30 <lcd16x2_write4>
  LCD_MS_DELAY(1);
 8003024:	2001      	movs	r0, #1
 8003026:	f001 f9c9 	bl	80043bc <HAL_Delay>
  lcd16x2_write4(0x3);
 800302a:	2003      	movs	r0, #3
 800302c:	f7ff ff80 	bl	8002f30 <lcd16x2_write4>
  LCD_MS_DELAY(1);
 8003030:	2001      	movs	r0, #1
 8003032:	f001 f9c3 	bl	80043bc <HAL_Delay>
  lcd16x2_write4(0x2);  //4-бітний режим
 8003036:	2002      	movs	r0, #2
 8003038:	f7ff ff7a 	bl	8002f30 <lcd16x2_write4>
  LCD_MS_DELAY(1);
 800303c:	2001      	movs	r0, #1
 800303e:	f001 f9bd 	bl	80043bc <HAL_Delay>
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 8003042:	8829      	ldrh	r1, [r5, #0]
 8003044:	2200      	movs	r2, #0
 8003046:	6820      	ldr	r0, [r4, #0]
 8003048:	f001 fb0a 	bl	8004660 <HAL_GPIO_WritePin>
  lcd16x2_write(cmd);
 800304c:	2028      	movs	r0, #40	@ 0x28
 800304e:	f7ff fec3 	bl	8002dd8 <lcd16x2_write>
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 8003052:	8829      	ldrh	r1, [r5, #0]
 8003054:	2200      	movs	r2, #0
 8003056:	6820      	ldr	r0, [r4, #0]
 8003058:	f001 fb02 	bl	8004660 <HAL_GPIO_WritePin>
  lcd16x2_write(cmd);
 800305c:	200f      	movs	r0, #15
 800305e:	f7ff febb 	bl	8002dd8 <lcd16x2_write>
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 8003062:	8829      	ldrh	r1, [r5, #0]
 8003064:	2200      	movs	r2, #0
 8003066:	6820      	ldr	r0, [r4, #0]
 8003068:	f001 fafa 	bl	8004660 <HAL_GPIO_WritePin>
  lcd16x2_write(cmd);
 800306c:	2001      	movs	r0, #1
 800306e:	f7ff feb3 	bl	8002dd8 <lcd16x2_write>
  lcd16x2_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
  //3. управління дисплеєм (вкл. дисплею, вкл. курсора, мигання курсора)
  lcd16x2_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
  //4. очищення LCD і повернення на початок
  lcd16x2_writeCommand(LCD_CLEARDISPLAY);
  LCD_MS_DELAY(3);
 8003072:	2003      	movs	r0, #3
 8003074:	f001 f9a2 	bl	80043bc <HAL_Delay>
}
 8003078:	bcc0      	pop	{r6, r7}
 800307a:	46b9      	mov	r9, r7
 800307c:	46b0      	mov	r8, r6
 800307e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003080:	20000118 	.word	0x20000118
 8003084:	20000116 	.word	0x20000116
 8003088:	20000114 	.word	0x20000114
 800308c:	20000104 	.word	0x20000104
 8003090:	20000102 	.word	0x20000102
 8003094:	20000100 	.word	0x20000100
 8003098:	200000fe 	.word	0x200000fe
 800309c:	200000fc 	.word	0x200000fc
 80030a0:	20000002 	.word	0x20000002
 80030a4:	20000000 	.word	0x20000000

080030a8 <lcd16x2_setCursor>:
 * @brief встановлює крусор у задану позицію
 * @param[in] row - 0 або 1 для рядка1 або рядка2
 * @param[in] col - 0 - 15 (16 стовпців LCD)
 */
void lcd16x2_setCursor(uint8_t row, uint8_t col)
{
 80030a8:	b510      	push	{r4, lr}
  uint8_t maskData;
  maskData = (col)&0x0F;
 80030aa:	240f      	movs	r4, #15
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 80030ac:	4a0b      	ldr	r2, [pc, #44]	@ (80030dc <lcd16x2_setCursor+0x34>)
 80030ae:	4b0c      	ldr	r3, [pc, #48]	@ (80030e0 <lcd16x2_setCursor+0x38>)
  maskData = (col)&0x0F;
 80030b0:	400c      	ands	r4, r1
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	8811      	ldrh	r1, [r2, #0]
 80030b6:	2200      	movs	r2, #0
  if(row==0)
 80030b8:	2800      	cmp	r0, #0
 80030ba:	d107      	bne.n	80030cc <lcd16x2_setCursor+0x24>
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 80030bc:	0018      	movs	r0, r3
 80030be:	f001 facf 	bl	8004660 <HAL_GPIO_WritePin>
  {
    maskData |= (0x80);
 80030c2:	2080      	movs	r0, #128	@ 0x80
  lcd16x2_write(cmd);
 80030c4:	4320      	orrs	r0, r4
 80030c6:	f7ff fe87 	bl	8002dd8 <lcd16x2_write>
  else
  {
    maskData |= (0xc0);
    lcd16x2_writeCommand(maskData);
  }
}
 80030ca:	bd10      	pop	{r4, pc}
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 80030cc:	0018      	movs	r0, r3
 80030ce:	f001 fac7 	bl	8004660 <HAL_GPIO_WritePin>
    maskData |= (0xc0);
 80030d2:	20c0      	movs	r0, #192	@ 0xc0
  lcd16x2_write(cmd);
 80030d4:	4320      	orrs	r0, r4
 80030d6:	f7ff fe7f 	bl	8002dd8 <lcd16x2_write>
}
 80030da:	e7f6      	b.n	80030ca <lcd16x2_setCursor+0x22>
 80030dc:	20000116 	.word	0x20000116
 80030e0:	20000118 	.word	0x20000118

080030e4 <lcd16x2_1stLine>:
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 80030e4:	4b05      	ldr	r3, [pc, #20]	@ (80030fc <lcd16x2_1stLine+0x18>)
/**
 * @brief перехід на перший рядок LCD
 */
void lcd16x2_1stLine(void)
{
 80030e6:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 80030e8:	8819      	ldrh	r1, [r3, #0]
 80030ea:	4b05      	ldr	r3, [pc, #20]	@ (8003100 <lcd16x2_1stLine+0x1c>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	6818      	ldr	r0, [r3, #0]
 80030f0:	f001 fab6 	bl	8004660 <HAL_GPIO_WritePin>
  lcd16x2_write(cmd);
 80030f4:	2080      	movs	r0, #128	@ 0x80
 80030f6:	f7ff fe6f 	bl	8002dd8 <lcd16x2_write>
  lcd16x2_setCursor(0,0);
}
 80030fa:	bd10      	pop	{r4, pc}
 80030fc:	20000116 	.word	0x20000116
 8003100:	20000118 	.word	0x20000118

08003104 <lcd16x2_2ndLine>:
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 8003104:	4b05      	ldr	r3, [pc, #20]	@ (800311c <lcd16x2_2ndLine+0x18>)
/**
 * @brief перехід на другий рядок LCD
 */
void lcd16x2_2ndLine(void)
{
 8003106:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 8003108:	8819      	ldrh	r1, [r3, #0]
 800310a:	4b05      	ldr	r3, [pc, #20]	@ (8003120 <lcd16x2_2ndLine+0x1c>)
 800310c:	2200      	movs	r2, #0
 800310e:	6818      	ldr	r0, [r3, #0]
 8003110:	f001 faa6 	bl	8004660 <HAL_GPIO_WritePin>
  lcd16x2_write(cmd);
 8003114:	20c0      	movs	r0, #192	@ 0xc0
 8003116:	f7ff fe5f 	bl	8002dd8 <lcd16x2_write>
  lcd16x2_setCursor(1,0);
}
 800311a:	bd10      	pop	{r4, pc}
 800311c:	20000116 	.word	0x20000116
 8003120:	20000118 	.word	0x20000118

08003124 <lcd16x2_cursorShow>:

/**
 * @brief включити/виключити курсор
 */
void lcd16x2_cursorShow(bool state)
{
 8003124:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 8003126:	490b      	ldr	r1, [pc, #44]	@ (8003154 <lcd16x2_cursorShow+0x30>)
{
 8003128:	0004      	movs	r4, r0
  if(state)
  {
    DisplayControl |= (0x03);
 800312a:	4a0b      	ldr	r2, [pc, #44]	@ (8003158 <lcd16x2_cursorShow+0x34>)
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 800312c:	6808      	ldr	r0, [r1, #0]
 800312e:	490b      	ldr	r1, [pc, #44]	@ (800315c <lcd16x2_cursorShow+0x38>)
    DisplayControl |= (0x03);
 8003130:	7813      	ldrb	r3, [r2, #0]
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 8003132:	8809      	ldrh	r1, [r1, #0]
  if(state)
 8003134:	2c00      	cmp	r4, #0
 8003136:	d009      	beq.n	800314c <lcd16x2_cursorShow+0x28>
    DisplayControl |= (0x03);
 8003138:	2403      	movs	r4, #3
 800313a:	431c      	orrs	r4, r3
    lcd16x2_writeCommand(DisplayControl);
  }
  else
  {
    DisplayControl &= ~(0x03);
 800313c:	7014      	strb	r4, [r2, #0]
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 800313e:	2200      	movs	r2, #0
 8003140:	f001 fa8e 	bl	8004660 <HAL_GPIO_WritePin>
  lcd16x2_write(cmd);
 8003144:	0020      	movs	r0, r4
 8003146:	f7ff fe47 	bl	8002dd8 <lcd16x2_write>
    lcd16x2_writeCommand(DisplayControl);
  }
}
 800314a:	bd10      	pop	{r4, pc}
    DisplayControl &= ~(0x03);
 800314c:	2403      	movs	r4, #3
 800314e:	43a3      	bics	r3, r4
 8003150:	001c      	movs	r4, r3
 8003152:	e7f3      	b.n	800313c <lcd16x2_cursorShow+0x18>
 8003154:	20000118 	.word	0x20000118
 8003158:	20000001 	.word	0x20000001
 800315c:	20000116 	.word	0x20000116

08003160 <lcd16x2_clear>:
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 8003160:	4b07      	ldr	r3, [pc, #28]	@ (8003180 <lcd16x2_clear+0x20>)

/**
 * @brief очистити дисплей
 */
void lcd16x2_clear(void)
{
 8003162:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 8003164:	8819      	ldrh	r1, [r3, #0]
 8003166:	4b07      	ldr	r3, [pc, #28]	@ (8003184 <lcd16x2_clear+0x24>)
 8003168:	2200      	movs	r2, #0
 800316a:	6818      	ldr	r0, [r3, #0]
 800316c:	f001 fa78 	bl	8004660 <HAL_GPIO_WritePin>
  lcd16x2_write(cmd);
 8003170:	2001      	movs	r0, #1
 8003172:	f7ff fe31 	bl	8002dd8 <lcd16x2_write>
  lcd16x2_writeCommand(LCD_CLEARDISPLAY);
  LCD_MS_DELAY(3);
 8003176:	2003      	movs	r0, #3
 8003178:	f001 f920 	bl	80043bc <HAL_Delay>
}
 800317c:	bd10      	pop	{r4, pc}
 800317e:	46c0      	nop			@ (mov r8, r8)
 8003180:	20000116 	.word	0x20000116
 8003184:	20000118 	.word	0x20000118

08003188 <lcd16x2_printf>:

/**
 * @brief виводить на дисплей будь-які типи даних (наприклад: lcd16x2_printf("Value1 = %.1f", 123.45))
 */
void lcd16x2_printf(const char* str, ...)
{
 8003188:	b40f      	push	{r0, r1, r2, r3}
 800318a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800318c:	46c6      	mov	lr, r8
 800318e:	b500      	push	{lr}
 8003190:	b086      	sub	sp, #24
 8003192:	aa0c      	add	r2, sp, #48	@ 0x30
 8003194:	ca02      	ldmia	r2!, {r1}
  char stringArray[20];
  va_list args;
  va_start(args, str);
  vsprintf(stringArray, str, args);
 8003196:	a801      	add	r0, sp, #4
  va_start(args, str);
 8003198:	9200      	str	r2, [sp, #0]
  vsprintf(stringArray, str, args);
 800319a:	f003 f84b 	bl	8006234 <vsiprintf>
  va_end(args);
  for(uint8_t i = 0;  i < strlen(stringArray) && i < 16; i++)
  {
    lcd16x2_writeData((uint8_t)stringArray[i]);
 800319e:	466b      	mov	r3, sp
 80031a0:	1cde      	adds	r6, r3, #3
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 80031a2:	4b0f      	ldr	r3, [pc, #60]	@ (80031e0 <lcd16x2_printf+0x58>)
  for(uint8_t i = 0;  i < strlen(stringArray) && i < 16; i++)
 80031a4:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 80031a6:	4698      	mov	r8, r3
 80031a8:	4f0e      	ldr	r7, [pc, #56]	@ (80031e4 <lcd16x2_printf+0x5c>)
  for(uint8_t i = 0;  i < strlen(stringArray) && i < 16; i++)
 80031aa:	e009      	b.n	80031c0 <lcd16x2_printf+0x38>
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 80031ac:	4643      	mov	r3, r8
    lcd16x2_writeData((uint8_t)stringArray[i]);
 80031ae:	5d35      	ldrb	r5, [r6, r4]
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 80031b0:	6838      	ldr	r0, [r7, #0]
 80031b2:	2201      	movs	r2, #1
 80031b4:	8819      	ldrh	r1, [r3, #0]
 80031b6:	f001 fa53 	bl	8004660 <HAL_GPIO_WritePin>
  lcd16x2_write(data);
 80031ba:	0028      	movs	r0, r5
 80031bc:	f7ff fe0c 	bl	8002dd8 <lcd16x2_write>
  for(uint8_t i = 0;  i < strlen(stringArray) && i < 16; i++)
 80031c0:	a801      	add	r0, sp, #4
 80031c2:	f7fc ffa1 	bl	8000108 <strlen>
 80031c6:	42a0      	cmp	r0, r4
 80031c8:	d902      	bls.n	80031d0 <lcd16x2_printf+0x48>
 80031ca:	3401      	adds	r4, #1
 80031cc:	2c11      	cmp	r4, #17
 80031ce:	d1ed      	bne.n	80031ac <lcd16x2_printf+0x24>
  }
}
 80031d0:	b006      	add	sp, #24
 80031d2:	bc80      	pop	{r7}
 80031d4:	46b8      	mov	r8, r7
 80031d6:	bcf0      	pop	{r4, r5, r6, r7}
 80031d8:	bc08      	pop	{r3}
 80031da:	b004      	add	sp, #16
 80031dc:	4718      	bx	r3
 80031de:	46c0      	nop			@ (mov r8, r8)
 80031e0:	20000116 	.word	0x20000116
 80031e4:	20000118 	.word	0x20000118

080031e8 <lcd16x2_custom_char>:

void lcd16x2_custom_char(uint8_t loc, unsigned char *msg)
{
 80031e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031ea:	46c6      	mov	lr, r8
 80031ec:	0005      	movs	r5, r0
 80031ee:	000c      	movs	r4, r1
 80031f0:	b500      	push	{lr}
    unsigned char i;
    if (loc < 8)
 80031f2:	2807      	cmp	r0, #7
 80031f4:	d902      	bls.n	80031fc <lcd16x2_custom_char+0x14>
    {
      lcd16x2_writeCommand (0x40 + (loc*8));  /* Command 0x40 and onwards forces the device to point CGRAM address */
      for (i = 0; i < 8; i++)  /* Write 8 byte for generation of 1 character */
    	lcd16x2_writeData((uint8_t)msg[i]);
    }
}
 80031f6:	bc80      	pop	{r7}
 80031f8:	46b8      	mov	r8, r7
 80031fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 80031fc:	4f0d      	ldr	r7, [pc, #52]	@ (8003234 <lcd16x2_custom_char+0x4c>)
 80031fe:	4e0e      	ldr	r6, [pc, #56]	@ (8003238 <lcd16x2_custom_char+0x50>)
 8003200:	2200      	movs	r2, #0
 8003202:	8839      	ldrh	r1, [r7, #0]
 8003204:	6830      	ldr	r0, [r6, #0]
      lcd16x2_writeCommand (0x40 + (loc*8));  /* Command 0x40 and onwards forces the device to point CGRAM address */
 8003206:	3508      	adds	r5, #8
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 8003208:	f001 fa2a 	bl	8004660 <HAL_GPIO_WritePin>
      lcd16x2_writeCommand (0x40 + (loc*8));  /* Command 0x40 and onwards forces the device to point CGRAM address */
 800320c:	00e8      	lsls	r0, r5, #3
  lcd16x2_write(cmd);
 800320e:	b2c0      	uxtb	r0, r0
 8003210:	f7ff fde2 	bl	8002dd8 <lcd16x2_write>
      for (i = 0; i < 8; i++)  /* Write 8 byte for generation of 1 character */
 8003214:	2308      	movs	r3, #8
 8003216:	4698      	mov	r8, r3
 8003218:	44a0      	add	r8, r4
    	lcd16x2_writeData((uint8_t)msg[i]);
 800321a:	7825      	ldrb	r5, [r4, #0]
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 800321c:	2201      	movs	r2, #1
 800321e:	8839      	ldrh	r1, [r7, #0]
 8003220:	6830      	ldr	r0, [r6, #0]
 8003222:	f001 fa1d 	bl	8004660 <HAL_GPIO_WritePin>
      for (i = 0; i < 8; i++)  /* Write 8 byte for generation of 1 character */
 8003226:	3401      	adds	r4, #1
  lcd16x2_write(data);
 8003228:	0028      	movs	r0, r5
 800322a:	f7ff fdd5 	bl	8002dd8 <lcd16x2_write>
      for (i = 0; i < 8; i++)  /* Write 8 byte for generation of 1 character */
 800322e:	4544      	cmp	r4, r8
 8003230:	d1f3      	bne.n	800321a <lcd16x2_custom_char+0x32>
 8003232:	e7e0      	b.n	80031f6 <lcd16x2_custom_char+0xe>
 8003234:	20000116 	.word	0x20000116
 8003238:	20000118 	.word	0x20000118

0800323c <delay_us>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void delay_us(volatile uint16_t us)
{
 800323c:	b510      	push	{r4, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	466b      	mov	r3, sp
 8003242:	1d9c      	adds	r4, r3, #6
  __HAL_TIM_SET_COUNTER(&htim1, 0);  // set the counter value a 0
 8003244:	4b05      	ldr	r3, [pc, #20]	@ (800325c <delay_us+0x20>)
{
 8003246:	8020      	strh	r0, [r4, #0]
  __HAL_TIM_SET_COUNTER(&htim1, 0);  // set the counter value a 0
 8003248:	6819      	ldr	r1, [r3, #0]
 800324a:	2300      	movs	r3, #0
 800324c:	624b      	str	r3, [r1, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 800324e:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8003250:	8823      	ldrh	r3, [r4, #0]
 8003252:	429a      	cmp	r2, r3
 8003254:	d3fb      	bcc.n	800324e <delay_us+0x12>
}
 8003256:	b002      	add	sp, #8
 8003258:	bd10      	pop	{r4, pc}
 800325a:	46c0      	nop			@ (mov r8, r8)
 800325c:	20000288 	.word	0x20000288

08003260 <set_time>:
		while (__HAL_TIM_GET_COUNTER(&htim1) < 1000);
	}
}*/

void set_time(void)
{
 8003260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003262:	46de      	mov	lr, fp
 8003264:	4657      	mov	r7, sl
 8003266:	464e      	mov	r6, r9
 8003268:	4645      	mov	r5, r8
 800326a:	b5e0      	push	{r5, r6, r7, lr}
 800326c:	b08b      	sub	sp, #44	@ 0x2c
    //RTC_TimeTypeDef rtc_time;
    unsigned char i = 0, col = 2;
    const char *time_items[] = { "hh", "mm", "ss", "^^" };
 800326e:	ab06      	add	r3, sp, #24
 8003270:	469b      	mov	fp, r3
 8003272:	465a      	mov	r2, fp
 8003274:	4b72      	ldr	r3, [pc, #456]	@ (8003440 <set_time+0x1e0>)
    unsigned char i = 0, col = 2;
 8003276:	2702      	movs	r7, #2
    const char *time_items[] = { "hh", "mm", "ss", "^^" };
 8003278:	cb13      	ldmia	r3!, {r0, r1, r4}
 800327a:	c213      	stmia	r2!, {r0, r1, r4}
    unsigned char i = 0, col = 2;
 800327c:	2400      	movs	r4, #0
    const char *time_items[] = { "hh", "mm", "ss", "^^" };
 800327e:	681b      	ldr	r3, [r3, #0]
    uint8_t hours = 0, minutes = 0, seconds = 0;
 	bool lcd_output_flag = true, ok = 0;

 	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8003280:	4e70      	ldr	r6, [pc, #448]	@ (8003444 <set_time+0x1e4>)
    const char *time_items[] = { "hh", "mm", "ss", "^^" };
 8003282:	6013      	str	r3, [r2, #0]
 	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8003284:	4b70      	ldr	r3, [pc, #448]	@ (8003448 <set_time+0x1e8>)
 8003286:	2200      	movs	r2, #0
 8003288:	0018      	movs	r0, r3
 800328a:	0031      	movs	r1, r6
 800328c:	9305      	str	r3, [sp, #20]
 800328e:	f002 fa0d 	bl	80056ac <HAL_RTC_GetTime>
    hours = rtc_time.Hours;
 8003292:	7833      	ldrb	r3, [r6, #0]
 8003294:	4d6d      	ldr	r5, [pc, #436]	@ (800344c <set_time+0x1ec>)
 8003296:	469a      	mov	sl, r3
    minutes = rtc_time.Minutes;
 8003298:	7873      	ldrb	r3, [r6, #1]
 800329a:	4699      	mov	r9, r3
    seconds = rtc_time.Seconds;
 800329c:	78b3      	ldrb	r3, [r6, #2]
 800329e:	9702      	str	r7, [sp, #8]
 80032a0:	4698      	mov	r8, r3

    while (!ok)
 80032a2:	4b6b      	ldr	r3, [pc, #428]	@ (8003450 <set_time+0x1f0>)
 80032a4:	9504      	str	r5, [sp, #16]
 80032a6:	9303      	str	r3, [sp, #12]
    {
    	if (lcd_output_flag)
    	{
    		lcd16x2_clear();
 80032a8:	f7ff ff5a 	bl	8003160 <lcd16x2_clear>
    		lcd16x2_setCursor(0,2);
 80032ac:	2102      	movs	r1, #2
 80032ae:	2000      	movs	r0, #0
 80032b0:	f7ff fefa 	bl	80030a8 <lcd16x2_setCursor>
    		sprintf(buffer, "%02d:%02d:%02d OK", hours, minutes, seconds);
 80032b4:	4643      	mov	r3, r8
 80032b6:	9d04      	ldr	r5, [sp, #16]
 80032b8:	4652      	mov	r2, sl
 80032ba:	9903      	ldr	r1, [sp, #12]
 80032bc:	9300      	str	r3, [sp, #0]
 80032be:	0028      	movs	r0, r5
 80032c0:	464b      	mov	r3, r9
 80032c2:	f002 ff81 	bl	80061c8 <siprintf>
    	    lcd16x2_printf(buffer);
 80032c6:	0028      	movs	r0, r5
 80032c8:	f7ff ff5e 	bl	8003188 <lcd16x2_printf>
    	    lcd16x2_setCursor(1,col);
 80032cc:	9902      	ldr	r1, [sp, #8]
 80032ce:	2001      	movs	r0, #1
 80032d0:	f7ff feea 	bl	80030a8 <lcd16x2_setCursor>
    	    lcd16x2_printf(time_items[i]);
 80032d4:	465a      	mov	r2, fp
 80032d6:	00a3      	lsls	r3, r4, #2
 80032d8:	58d0      	ldr	r0, [r2, r3]
 80032da:	f7ff ff55 	bl	8003188 <lcd16x2_printf>
    	    lcd_output_flag = false;
    	}

    	if (HAL_GPIO_ReadPin(SEL_PLUS_BTN_GPIO_Port, SEL_PLUS_BTN_Pin) == GPIO_PIN_SET)
 80032de:	2102      	movs	r1, #2
 80032e0:	485c      	ldr	r0, [pc, #368]	@ (8003454 <set_time+0x1f4>)
 80032e2:	f001 f9b7 	bl	8004654 <HAL_GPIO_ReadPin>
 80032e6:	2801      	cmp	r0, #1
 80032e8:	d01e      	beq.n	8003328 <set_time+0xc8>
 80032ea:	2500      	movs	r5, #0
 80032ec:	2700      	movs	r7, #0
			}
			lcd_output_flag = true;
			HAL_Delay(200);
        }

    	if (HAL_GPIO_ReadPin(SEL_MINUS_BTN_GPIO_Port, SEL_MINUS_BTN_Pin) == GPIO_PIN_SET)
 80032ee:	2180      	movs	r1, #128	@ 0x80
 80032f0:	4858      	ldr	r0, [pc, #352]	@ (8003454 <set_time+0x1f4>)
 80032f2:	f001 f9af 	bl	8004654 <HAL_GPIO_ReadPin>
 80032f6:	2801      	cmp	r0, #1
 80032f8:	d03b      	beq.n	8003372 <set_time+0x112>
            }
	        lcd_output_flag = true;
	        HAL_Delay(200);
        }

    	if (HAL_GPIO_ReadPin(MENU_BTN_GPIO_Port, MENU_BTN_Pin) == GPIO_PIN_SET)
 80032fa:	2101      	movs	r1, #1
 80032fc:	4855      	ldr	r0, [pc, #340]	@ (8003454 <set_time+0x1f4>)
 80032fe:	f001 f9a9 	bl	8004654 <HAL_GPIO_ReadPin>
 8003302:	2801      	cmp	r0, #1
 8003304:	d01e      	beq.n	8003344 <set_time+0xe4>
    		}
    		lcd_output_flag = true;
    		HAL_Delay(200);
         }

         if (HAL_GPIO_ReadPin(EXIT_BTN_GPIO_Port, EXIT_BTN_Pin) == GPIO_PIN_SET)
 8003306:	2090      	movs	r0, #144	@ 0x90
 8003308:	2180      	movs	r1, #128	@ 0x80
 800330a:	05c0      	lsls	r0, r0, #23
 800330c:	f001 f9a2 	bl	8004654 <HAL_GPIO_ReadPin>
 8003310:	2801      	cmp	r0, #1
 8003312:	d02a      	beq.n	800336a <set_time+0x10a>
    while (!ok)
 8003314:	2d00      	cmp	r5, #0
 8003316:	d168      	bne.n	80033ea <set_time+0x18a>
    	if (lcd_output_flag)
 8003318:	2f00      	cmp	r7, #0
 800331a:	d1c5      	bne.n	80032a8 <set_time+0x48>
    	if (HAL_GPIO_ReadPin(SEL_PLUS_BTN_GPIO_Port, SEL_PLUS_BTN_Pin) == GPIO_PIN_SET)
 800331c:	2102      	movs	r1, #2
 800331e:	484d      	ldr	r0, [pc, #308]	@ (8003454 <set_time+0x1f4>)
 8003320:	f001 f998 	bl	8004654 <HAL_GPIO_ReadPin>
 8003324:	2801      	cmp	r0, #1
 8003326:	d1e0      	bne.n	80032ea <set_time+0x8a>
    		switch (i)
 8003328:	2c02      	cmp	r4, #2
 800332a:	d050      	beq.n	80033ce <set_time+0x16e>
 800332c:	d82c      	bhi.n	8003388 <set_time+0x128>
 800332e:	2c00      	cmp	r4, #0
 8003330:	d03f      	beq.n	80033b2 <set_time+0x152>
					if (minutes == 59) minutes = 0;
 8003332:	464b      	mov	r3, r9
 8003334:	2b3b      	cmp	r3, #59	@ 0x3b
 8003336:	d100      	bne.n	800333a <set_time+0xda>
 8003338:	e07d      	b.n	8003436 <set_time+0x1d6>
					else minutes ++;
 800333a:	3301      	adds	r3, #1
 800333c:	b2db      	uxtb	r3, r3
 800333e:	4699      	mov	r9, r3
 8003340:	2500      	movs	r5, #0
 8003342:	e025      	b.n	8003390 <set_time+0x130>
    		if (i == 3)
 8003344:	2c03      	cmp	r4, #3
 8003346:	d030      	beq.n	80033aa <set_time+0x14a>
    			i++; col += 3;
 8003348:	9b02      	ldr	r3, [sp, #8]
 800334a:	3401      	adds	r4, #1
 800334c:	3303      	adds	r3, #3
 800334e:	b2db      	uxtb	r3, r3
 8003350:	b2e4      	uxtb	r4, r4
 8003352:	9302      	str	r3, [sp, #8]
    		HAL_Delay(200);
 8003354:	20c8      	movs	r0, #200	@ 0xc8
 8003356:	f001 f831 	bl	80043bc <HAL_Delay>
         if (HAL_GPIO_ReadPin(EXIT_BTN_GPIO_Port, EXIT_BTN_Pin) == GPIO_PIN_SET)
 800335a:	2090      	movs	r0, #144	@ 0x90
 800335c:	2180      	movs	r1, #128	@ 0x80
 800335e:	05c0      	lsls	r0, r0, #23
    		lcd_output_flag = true;
 8003360:	2701      	movs	r7, #1
         if (HAL_GPIO_ReadPin(EXIT_BTN_GPIO_Port, EXIT_BTN_Pin) == GPIO_PIN_SET)
 8003362:	f001 f977 	bl	8004654 <HAL_GPIO_ReadPin>
 8003366:	2801      	cmp	r0, #1
 8003368:	d1d4      	bne.n	8003314 <set_time+0xb4>
         {
           HAL_Delay(200);
 800336a:	30c7      	adds	r0, #199	@ 0xc7
 800336c:	f001 f826 	bl	80043bc <HAL_Delay>
           return;
 8003370:	e046      	b.n	8003400 <set_time+0x1a0>
    		switch (i)
 8003372:	2c02      	cmp	r4, #2
 8003374:	d025      	beq.n	80033c2 <set_time+0x162>
 8003376:	d810      	bhi.n	800339a <set_time+0x13a>
 8003378:	2c00      	cmp	r4, #0
 800337a:	d030      	beq.n	80033de <set_time+0x17e>
                  	if (minutes == 0) minutes = 59;
 800337c:	464b      	mov	r3, r9
 800337e:	2b00      	cmp	r3, #0
 8003380:	d149      	bne.n	8003416 <set_time+0x1b6>
 8003382:	233b      	movs	r3, #59	@ 0x3b
 8003384:	4699      	mov	r9, r3
 8003386:	e00b      	b.n	80033a0 <set_time+0x140>
    		switch (i)
 8003388:	1ee5      	subs	r5, r4, #3
 800338a:	426b      	negs	r3, r5
 800338c:	415d      	adcs	r5, r3
 800338e:	b2ed      	uxtb	r5, r5
			HAL_Delay(200);
 8003390:	20c8      	movs	r0, #200	@ 0xc8
 8003392:	f001 f813 	bl	80043bc <HAL_Delay>
			lcd_output_flag = true;
 8003396:	2701      	movs	r7, #1
 8003398:	e7a9      	b.n	80032ee <set_time+0x8e>
    		switch (i)
 800339a:	2c03      	cmp	r4, #3
 800339c:	d100      	bne.n	80033a0 <set_time+0x140>
                    ok = 1;
 800339e:	2501      	movs	r5, #1
	        HAL_Delay(200);
 80033a0:	20c8      	movs	r0, #200	@ 0xc8
 80033a2:	f001 f80b 	bl	80043bc <HAL_Delay>
	        lcd_output_flag = true;
 80033a6:	2701      	movs	r7, #1
 80033a8:	e7a7      	b.n	80032fa <set_time+0x9a>
    		  i = 0; col = 2;
 80033aa:	2302      	movs	r3, #2
 80033ac:	2400      	movs	r4, #0
 80033ae:	9302      	str	r3, [sp, #8]
 80033b0:	e7d0      	b.n	8003354 <set_time+0xf4>
					if (hours == 23) hours = 0;
 80033b2:	4653      	mov	r3, sl
 80033b4:	2b17      	cmp	r3, #23
 80033b6:	d03a      	beq.n	800342e <set_time+0x1ce>
					else hours ++;
 80033b8:	3301      	adds	r3, #1
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	469a      	mov	sl, r3
 80033be:	2500      	movs	r5, #0
 80033c0:	e7e6      	b.n	8003390 <set_time+0x130>
                    if (seconds == 0) seconds = 59;
 80033c2:	4643      	mov	r3, r8
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d122      	bne.n	800340e <set_time+0x1ae>
 80033c8:	233b      	movs	r3, #59	@ 0x3b
 80033ca:	4698      	mov	r8, r3
 80033cc:	e7e8      	b.n	80033a0 <set_time+0x140>
					if (seconds == 59) seconds = 0;
 80033ce:	4643      	mov	r3, r8
 80033d0:	2b3b      	cmp	r3, #59	@ 0x3b
 80033d2:	d028      	beq.n	8003426 <set_time+0x1c6>
					else seconds ++;
 80033d4:	3301      	adds	r3, #1
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	4698      	mov	r8, r3
 80033da:	2500      	movs	r5, #0
 80033dc:	e7d8      	b.n	8003390 <set_time+0x130>
	        		if (hours == 0) hours = 23;
 80033de:	4653      	mov	r3, sl
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d11c      	bne.n	800341e <set_time+0x1be>
 80033e4:	2317      	movs	r3, #23
 80033e6:	469a      	mov	sl, r3
 80033e8:	e7da      	b.n	80033a0 <set_time+0x140>
         }
    }

    rtc_time.Hours = hours;
 80033ea:	4653      	mov	r3, sl
 80033ec:	7033      	strb	r3, [r6, #0]
    rtc_time.Minutes = minutes;
 80033ee:	464b      	mov	r3, r9
 80033f0:	7073      	strb	r3, [r6, #1]
    rtc_time.Seconds = seconds;
 80033f2:	4643      	mov	r3, r8

    HAL_StatusTypeDef res = HAL_RTC_SetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 80033f4:	2200      	movs	r2, #0
 80033f6:	0031      	movs	r1, r6
 80033f8:	9805      	ldr	r0, [sp, #20]
    rtc_time.Seconds = seconds;
 80033fa:	70b3      	strb	r3, [r6, #2]
    HAL_StatusTypeDef res = HAL_RTC_SetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 80033fc:	f002 fa60 	bl	80058c0 <HAL_RTC_SetTime>

    /*if (res != HAL_OK) {
       //UART_Printf("HAL_RTC_SetTime failed: %d\r\n", res);
       return -1;
    }*/
}
 8003400:	b00b      	add	sp, #44	@ 0x2c
 8003402:	bcf0      	pop	{r4, r5, r6, r7}
 8003404:	46bb      	mov	fp, r7
 8003406:	46b2      	mov	sl, r6
 8003408:	46a9      	mov	r9, r5
 800340a:	46a0      	mov	r8, r4
 800340c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    else seconds--;
 800340e:	3b01      	subs	r3, #1
 8003410:	b2db      	uxtb	r3, r3
 8003412:	4698      	mov	r8, r3
 8003414:	e7c4      	b.n	80033a0 <set_time+0x140>
                   	else minutes --;
 8003416:	3b01      	subs	r3, #1
 8003418:	b2db      	uxtb	r3, r3
 800341a:	4699      	mov	r9, r3
 800341c:	e7c0      	b.n	80033a0 <set_time+0x140>
                    else hours --;
 800341e:	3b01      	subs	r3, #1
 8003420:	b2db      	uxtb	r3, r3
 8003422:	469a      	mov	sl, r3
 8003424:	e7bc      	b.n	80033a0 <set_time+0x140>
					if (seconds == 59) seconds = 0;
 8003426:	2300      	movs	r3, #0
 8003428:	2500      	movs	r5, #0
 800342a:	4698      	mov	r8, r3
 800342c:	e7b0      	b.n	8003390 <set_time+0x130>
					if (hours == 23) hours = 0;
 800342e:	2300      	movs	r3, #0
 8003430:	2500      	movs	r5, #0
 8003432:	469a      	mov	sl, r3
 8003434:	e7ac      	b.n	8003390 <set_time+0x130>
					if (minutes == 59) minutes = 0;
 8003436:	2300      	movs	r3, #0
 8003438:	2500      	movs	r5, #0
 800343a:	4699      	mov	r9, r3
 800343c:	e7a8      	b.n	8003390 <set_time+0x130>
 800343e:	46c0      	nop			@ (mov r8, r8)
 8003440:	08007030 	.word	0x08007030
 8003444:	200001e4 	.word	0x200001e4
 8003448:	200002d0 	.word	0x200002d0
 800344c:	2000011c 	.word	0x2000011c
 8003450:	080070e0 	.word	0x080070e0
 8003454:	48000400 	.word	0x48000400

08003458 <set_date>:

void set_date(void)
{
 8003458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800345a:	46de      	mov	lr, fp
 800345c:	4657      	mov	r7, sl
 800345e:	464e      	mov	r6, r9
 8003460:	4645      	mov	r5, r8
 8003462:	b5e0      	push	{r5, r6, r7, lr}
	//RTC_DateTypeDef rtc_date;
	const char *date_items[] = { "dd", "mm", "yy" , "wd", "^^"};
 8003464:	4b8f      	ldr	r3, [pc, #572]	@ (80036a4 <set_date+0x24c>)
{
 8003466:	b091      	sub	sp, #68	@ 0x44
	const char *date_items[] = { "dd", "mm", "yy" , "wd", "^^"};
 8003468:	aa0b      	add	r2, sp, #44	@ 0x2c
 800346a:	cb13      	ldmia	r3!, {r0, r1, r4}
 800346c:	c213      	stmia	r2!, {r0, r1, r4}
	uint8_t day = 0, month = 0, year = 0, dow = 0;
	uint8_t i = 0, col = 0;
	bool lcd_output_flag = true, ok = 0;

	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 800346e:	4e8e      	ldr	r6, [pc, #568]	@ (80036a8 <set_date+0x250>)
 8003470:	4d8e      	ldr	r5, [pc, #568]	@ (80036ac <set_date+0x254>)
	const char *date_items[] = { "dd", "mm", "yy" , "wd", "^^"};
 8003472:	cb03      	ldmia	r3!, {r0, r1}
 8003474:	c203      	stmia	r2!, {r0, r1}
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8003476:	0028      	movs	r0, r5
 8003478:	2200      	movs	r2, #0
 800347a:	0031      	movs	r1, r6
 800347c:	f002 f952 	bl	8005724 <HAL_RTC_GetDate>
	day = rtc_date.Date;
 8003480:	78b3      	ldrb	r3, [r6, #2]
	uint8_t i = 0, col = 0;
 8003482:	2700      	movs	r7, #0
	day = rtc_date.Date;
 8003484:	9304      	str	r3, [sp, #16]
	month = rtc_date.Month;
 8003486:	7873      	ldrb	r3, [r6, #1]
	uint8_t i = 0, col = 0;
 8003488:	2400      	movs	r4, #0
	month = rtc_date.Month;
 800348a:	4699      	mov	r9, r3
	year = rtc_date.Year;
 800348c:	78f3      	ldrb	r3, [r6, #3]
 800348e:	9703      	str	r7, [sp, #12]
 8003490:	4698      	mov	r8, r3
	dow = rtc_date.WeekDay;
 8003492:	7833      	ldrb	r3, [r6, #0]
 8003494:	469b      	mov	fp, r3

	while (!ok)
 8003496:	4b86      	ldr	r3, [pc, #536]	@ (80036b0 <set_date+0x258>)
 8003498:	9307      	str	r3, [sp, #28]
 800349a:	4b86      	ldr	r3, [pc, #536]	@ (80036b4 <set_date+0x25c>)
 800349c:	469a      	mov	sl, r3
 800349e:	4b86      	ldr	r3, [pc, #536]	@ (80036b8 <set_date+0x260>)
 80034a0:	9308      	str	r3, [sp, #32]
			lcd_output_flag = false;
		}

        if (HAL_GPIO_ReadPin(SEL_PLUS_BTN_GPIO_Port, SEL_PLUS_BTN_Pin) == GPIO_PIN_SET)
        {
           switch (i)
 80034a2:	4b86      	ldr	r3, [pc, #536]	@ (80036bc <set_date+0x264>)
 80034a4:	9305      	str	r3, [sp, #20]
           HAL_Delay(200);
        }

        if (HAL_GPIO_ReadPin(SEL_MINUS_BTN_GPIO_Port, SEL_MINUS_BTN_Pin) == GPIO_PIN_SET)
        {
        	switch (i)
 80034a6:	4b86      	ldr	r3, [pc, #536]	@ (80036c0 <set_date+0x268>)
 80034a8:	9306      	str	r3, [sp, #24]
 80034aa:	4653      	mov	r3, sl
 80034ac:	46aa      	mov	sl, r5
 80034ae:	0035      	movs	r5, r6
 80034b0:	9309      	str	r3, [sp, #36]	@ 0x24
			lcd16x2_clear();
 80034b2:	f7ff fe55 	bl	8003160 <lcd16x2_clear>
			sprintf(buffer, "%02d/%02d/%02d %s OK", day, month, year, days_of_week[dow]);
 80034b6:	465b      	mov	r3, fp
 80034b8:	9a08      	ldr	r2, [sp, #32]
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	58d3      	ldr	r3, [r2, r3]
 80034be:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80034c0:	9301      	str	r3, [sp, #4]
 80034c2:	4643      	mov	r3, r8
 80034c4:	9a04      	ldr	r2, [sp, #16]
 80034c6:	9907      	ldr	r1, [sp, #28]
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	0030      	movs	r0, r6
 80034cc:	464b      	mov	r3, r9
 80034ce:	f002 fe7b 	bl	80061c8 <siprintf>
			lcd16x2_setCursor(0,0);
 80034d2:	2100      	movs	r1, #0
 80034d4:	2000      	movs	r0, #0
 80034d6:	f7ff fde7 	bl	80030a8 <lcd16x2_setCursor>
			lcd16x2_printf(buffer);
 80034da:	0030      	movs	r0, r6
 80034dc:	f7ff fe54 	bl	8003188 <lcd16x2_printf>
			lcd16x2_setCursor(1,col);
 80034e0:	2001      	movs	r0, #1
 80034e2:	9903      	ldr	r1, [sp, #12]
 80034e4:	f7ff fde0 	bl	80030a8 <lcd16x2_setCursor>
			lcd16x2_printf(date_items[i]);
 80034e8:	210c      	movs	r1, #12
 80034ea:	aa08      	add	r2, sp, #32
 80034ec:	1852      	adds	r2, r2, r1
 80034ee:	00a3      	lsls	r3, r4, #2
 80034f0:	58d0      	ldr	r0, [r2, r3]
 80034f2:	f7ff fe49 	bl	8003188 <lcd16x2_printf>
        if (HAL_GPIO_ReadPin(SEL_PLUS_BTN_GPIO_Port, SEL_PLUS_BTN_Pin) == GPIO_PIN_SET)
 80034f6:	2102      	movs	r1, #2
 80034f8:	4872      	ldr	r0, [pc, #456]	@ (80036c4 <set_date+0x26c>)
 80034fa:	f001 f8ab 	bl	8004654 <HAL_GPIO_ReadPin>
 80034fe:	2801      	cmp	r0, #1
 8003500:	d01f      	beq.n	8003542 <set_date+0xea>
        if (HAL_GPIO_ReadPin(SEL_MINUS_BTN_GPIO_Port, SEL_MINUS_BTN_Pin) == GPIO_PIN_SET)
 8003502:	2180      	movs	r1, #128	@ 0x80
 8003504:	486f      	ldr	r0, [pc, #444]	@ (80036c4 <set_date+0x26c>)
 8003506:	2700      	movs	r7, #0
 8003508:	2600      	movs	r6, #0
 800350a:	f001 f8a3 	bl	8004654 <HAL_GPIO_ReadPin>
 800350e:	2801      	cmp	r0, #1
 8003510:	d029      	beq.n	8003566 <set_date+0x10e>
        	}
        	lcd_output_flag = true;
        	HAL_Delay(200);
         }

        if (HAL_GPIO_ReadPin(MENU_BTN_GPIO_Port, MENU_BTN_Pin) == GPIO_PIN_SET)
 8003512:	2101      	movs	r1, #1
 8003514:	486b      	ldr	r0, [pc, #428]	@ (80036c4 <set_date+0x26c>)
 8003516:	f001 f89d 	bl	8004654 <HAL_GPIO_ReadPin>
 800351a:	2801      	cmp	r0, #1
 800351c:	d04d      	beq.n	80035ba <set_date+0x162>
        	}
        	lcd_output_flag = true;
        	HAL_Delay(200);
     }

     if (HAL_GPIO_ReadPin(EXIT_BTN_GPIO_Port, EXIT_BTN_Pin) == GPIO_PIN_SET)
 800351e:	2090      	movs	r0, #144	@ 0x90
 8003520:	2180      	movs	r1, #128	@ 0x80
 8003522:	05c0      	lsls	r0, r0, #23
 8003524:	f001 f896 	bl	8004654 <HAL_GPIO_ReadPin>
 8003528:	2801      	cmp	r0, #1
 800352a:	d05b      	beq.n	80035e4 <set_date+0x18c>
	while (!ok)
 800352c:	2f00      	cmp	r7, #0
 800352e:	d000      	beq.n	8003532 <set_date+0xda>
 8003530:	e084      	b.n	800363c <set_date+0x1e4>
		if (lcd_output_flag)
 8003532:	2e00      	cmp	r6, #0
 8003534:	d1bd      	bne.n	80034b2 <set_date+0x5a>
        if (HAL_GPIO_ReadPin(SEL_PLUS_BTN_GPIO_Port, SEL_PLUS_BTN_Pin) == GPIO_PIN_SET)
 8003536:	2102      	movs	r1, #2
 8003538:	4862      	ldr	r0, [pc, #392]	@ (80036c4 <set_date+0x26c>)
 800353a:	f001 f88b 	bl	8004654 <HAL_GPIO_ReadPin>
 800353e:	2801      	cmp	r0, #1
 8003540:	d1df      	bne.n	8003502 <set_date+0xaa>
           switch (i)
 8003542:	2c04      	cmp	r4, #4
 8003544:	d900      	bls.n	8003548 <set_date+0xf0>
 8003546:	e0a3      	b.n	8003690 <set_date+0x238>
 8003548:	9a05      	ldr	r2, [sp, #20]
 800354a:	00a3      	lsls	r3, r4, #2
 800354c:	58d3      	ldr	r3, [r2, r3]
 800354e:	469f      	mov	pc, r3
            	  ok = 1; break;
 8003550:	2701      	movs	r7, #1
           HAL_Delay(200);
 8003552:	20c8      	movs	r0, #200	@ 0xc8
 8003554:	f000 ff32 	bl	80043bc <HAL_Delay>
        if (HAL_GPIO_ReadPin(SEL_MINUS_BTN_GPIO_Port, SEL_MINUS_BTN_Pin) == GPIO_PIN_SET)
 8003558:	2180      	movs	r1, #128	@ 0x80
 800355a:	485a      	ldr	r0, [pc, #360]	@ (80036c4 <set_date+0x26c>)
           lcd_output_flag = true;
 800355c:	2601      	movs	r6, #1
        if (HAL_GPIO_ReadPin(SEL_MINUS_BTN_GPIO_Port, SEL_MINUS_BTN_Pin) == GPIO_PIN_SET)
 800355e:	f001 f879 	bl	8004654 <HAL_GPIO_ReadPin>
 8003562:	2801      	cmp	r0, #1
 8003564:	d1d5      	bne.n	8003512 <set_date+0xba>
        	switch (i)
 8003566:	2c04      	cmp	r4, #4
 8003568:	d841      	bhi.n	80035ee <set_date+0x196>
 800356a:	9a06      	ldr	r2, [sp, #24]
 800356c:	00a3      	lsls	r3, r4, #2
 800356e:	58d3      	ldr	r3, [r2, r3]
 8003570:	469f      	mov	pc, r3
            	  if (dow == 6) dow = 0;
 8003572:	465b      	mov	r3, fp
 8003574:	2b06      	cmp	r3, #6
 8003576:	d100      	bne.n	800357a <set_date+0x122>
 8003578:	e081      	b.n	800367e <set_date+0x226>
            	  else dow ++;
 800357a:	3301      	adds	r3, #1
 800357c:	b2db      	uxtb	r3, r3
 800357e:	469b      	mov	fp, r3
 8003580:	2700      	movs	r7, #0
 8003582:	e7e6      	b.n	8003552 <set_date+0xfa>
                  if (year == 99) year = 0;
 8003584:	4643      	mov	r3, r8
 8003586:	2b63      	cmp	r3, #99	@ 0x63
 8003588:	d100      	bne.n	800358c <set_date+0x134>
 800358a:	e07c      	b.n	8003686 <set_date+0x22e>
                  else year ++;
 800358c:	3301      	adds	r3, #1
 800358e:	b2db      	uxtb	r3, r3
 8003590:	4698      	mov	r8, r3
 8003592:	2700      	movs	r7, #0
 8003594:	e7dd      	b.n	8003552 <set_date+0xfa>
                  if (month == 12) month = 1;
 8003596:	464b      	mov	r3, r9
 8003598:	2b0c      	cmp	r3, #12
 800359a:	d100      	bne.n	800359e <set_date+0x146>
 800359c:	e077      	b.n	800368e <set_date+0x236>
                  else month ++;
 800359e:	3301      	adds	r3, #1
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	4699      	mov	r9, r3
 80035a4:	2700      	movs	r7, #0
 80035a6:	e7d4      	b.n	8003552 <set_date+0xfa>
            	  if (day == 31)
 80035a8:	9b04      	ldr	r3, [sp, #16]
 80035aa:	2b1f      	cmp	r3, #31
 80035ac:	d100      	bne.n	80035b0 <set_date+0x158>
 80035ae:	e071      	b.n	8003694 <set_date+0x23c>
                  else day ++;
 80035b0:	3301      	adds	r3, #1
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2700      	movs	r7, #0
 80035b6:	9304      	str	r3, [sp, #16]
 80035b8:	e7cb      	b.n	8003552 <set_date+0xfa>
        	if (i == 4)
 80035ba:	2c04      	cmp	r4, #4
 80035bc:	d036      	beq.n	800362c <set_date+0x1d4>
        		if (i == 3) col += 4;
 80035be:	9b03      	ldr	r3, [sp, #12]
 80035c0:	2c03      	cmp	r4, #3
 80035c2:	d037      	beq.n	8003634 <set_date+0x1dc>
        	    else col += 3;
 80035c4:	3303      	adds	r3, #3
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	9303      	str	r3, [sp, #12]
        		i++;
 80035ca:	3401      	adds	r4, #1
 80035cc:	b2e4      	uxtb	r4, r4
        	HAL_Delay(200);
 80035ce:	20c8      	movs	r0, #200	@ 0xc8
 80035d0:	f000 fef4 	bl	80043bc <HAL_Delay>
     if (HAL_GPIO_ReadPin(EXIT_BTN_GPIO_Port, EXIT_BTN_Pin) == GPIO_PIN_SET)
 80035d4:	2090      	movs	r0, #144	@ 0x90
 80035d6:	2180      	movs	r1, #128	@ 0x80
 80035d8:	05c0      	lsls	r0, r0, #23
        	lcd_output_flag = true;
 80035da:	2601      	movs	r6, #1
     if (HAL_GPIO_ReadPin(EXIT_BTN_GPIO_Port, EXIT_BTN_Pin) == GPIO_PIN_SET)
 80035dc:	f001 f83a 	bl	8004654 <HAL_GPIO_ReadPin>
 80035e0:	2801      	cmp	r0, #1
 80035e2:	d1a3      	bne.n	800352c <set_date+0xd4>
     {
    	 HAL_Delay(200);
 80035e4:	30c7      	adds	r0, #199	@ 0xc7
 80035e6:	f000 fee9 	bl	80043bc <HAL_Delay>
    	 return;
 80035ea:	e036      	b.n	800365a <set_date+0x202>
                case 4: ok = 1; break;
 80035ec:	2701      	movs	r7, #1
        	HAL_Delay(200);
 80035ee:	20c8      	movs	r0, #200	@ 0xc8
 80035f0:	f000 fee4 	bl	80043bc <HAL_Delay>
        	lcd_output_flag = true;
 80035f4:	2601      	movs	r6, #1
 80035f6:	e78c      	b.n	8003512 <set_date+0xba>
                	if (dow == 0) dow = 6;
 80035f8:	465b      	mov	r3, fp
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d138      	bne.n	8003670 <set_date+0x218>
 80035fe:	2306      	movs	r3, #6
 8003600:	469b      	mov	fp, r3
 8003602:	e7f4      	b.n	80035ee <set_date+0x196>
                	if (year == 0) year = 99;
 8003604:	4643      	mov	r3, r8
 8003606:	2b00      	cmp	r3, #0
 8003608:	d12e      	bne.n	8003668 <set_date+0x210>
 800360a:	2363      	movs	r3, #99	@ 0x63
 800360c:	4698      	mov	r8, r3
 800360e:	e7ee      	b.n	80035ee <set_date+0x196>
                    if (month == 1) month = 12;
 8003610:	464b      	mov	r3, r9
 8003612:	2b01      	cmp	r3, #1
 8003614:	d042      	beq.n	800369c <set_date+0x244>
                    else month --;
 8003616:	3b01      	subs	r3, #1
 8003618:	b2db      	uxtb	r3, r3
 800361a:	4699      	mov	r9, r3
 800361c:	e7e7      	b.n	80035ee <set_date+0x196>
                   	if (day == 1) day = 31;
 800361e:	9b04      	ldr	r3, [sp, #16]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d029      	beq.n	8003678 <set_date+0x220>
                    else day --;
 8003624:	3b01      	subs	r3, #1
 8003626:	b2db      	uxtb	r3, r3
 8003628:	9304      	str	r3, [sp, #16]
 800362a:	e7e0      	b.n	80035ee <set_date+0x196>
        		i = 0; col = 0;
 800362c:	2300      	movs	r3, #0
 800362e:	2400      	movs	r4, #0
 8003630:	9303      	str	r3, [sp, #12]
 8003632:	e7cc      	b.n	80035ce <set_date+0x176>
        		if (i == 3) col += 4;
 8003634:	3304      	adds	r3, #4
 8003636:	b2db      	uxtb	r3, r3
 8003638:	9303      	str	r3, [sp, #12]
 800363a:	e7c6      	b.n	80035ca <set_date+0x172>
     }

	}
	rtc_date.WeekDay = dow;
 800363c:	002e      	movs	r6, r5
 800363e:	465b      	mov	r3, fp
 8003640:	7033      	strb	r3, [r6, #0]
	rtc_date.Year = year;
 8003642:	4643      	mov	r3, r8
 8003644:	70f3      	strb	r3, [r6, #3]
	rtc_date.Month = month;
 8003646:	464b      	mov	r3, r9
	rtc_date.WeekDay = dow;
 8003648:	4655      	mov	r5, sl
	rtc_date.Month = month;
 800364a:	7073      	strb	r3, [r6, #1]
	rtc_date.Date = day;
 800364c:	9b04      	ldr	r3, [sp, #16]

	HAL_StatusTypeDef res = HAL_RTC_SetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 800364e:	2200      	movs	r2, #0
 8003650:	0031      	movs	r1, r6
 8003652:	0028      	movs	r0, r5
	rtc_date.Date = day;
 8003654:	70b3      	strb	r3, [r6, #2]
	HAL_StatusTypeDef res = HAL_RTC_SetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8003656:	f002 f9b1 	bl	80059bc <HAL_RTC_SetDate>
	/*if (res != HAL_OK) {
	   //UART_Printf("HAL_RTC_SetDate failed: %d\r\n", res);
	   return -1;
	}*/
}
 800365a:	b011      	add	sp, #68	@ 0x44
 800365c:	bcf0      	pop	{r4, r5, r6, r7}
 800365e:	46bb      	mov	fp, r7
 8003660:	46b2      	mov	sl, r6
 8003662:	46a9      	mov	r9, r5
 8003664:	46a0      	mov	r8, r4
 8003666:	bdf0      	pop	{r4, r5, r6, r7, pc}
                	else year--;
 8003668:	3b01      	subs	r3, #1
 800366a:	b2db      	uxtb	r3, r3
 800366c:	4698      	mov	r8, r3
 800366e:	e7be      	b.n	80035ee <set_date+0x196>
                	else dow --;
 8003670:	3b01      	subs	r3, #1
 8003672:	b2db      	uxtb	r3, r3
 8003674:	469b      	mov	fp, r3
 8003676:	e7ba      	b.n	80035ee <set_date+0x196>
                   	if (day == 1) day = 31;
 8003678:	231f      	movs	r3, #31
 800367a:	9304      	str	r3, [sp, #16]
 800367c:	e7b7      	b.n	80035ee <set_date+0x196>
            	  if (dow == 6) dow = 0;
 800367e:	2300      	movs	r3, #0
 8003680:	2700      	movs	r7, #0
 8003682:	469b      	mov	fp, r3
 8003684:	e765      	b.n	8003552 <set_date+0xfa>
                  if (year == 99) year = 0;
 8003686:	2300      	movs	r3, #0
 8003688:	2700      	movs	r7, #0
 800368a:	4698      	mov	r8, r3
 800368c:	e761      	b.n	8003552 <set_date+0xfa>
                  if (month == 12) month = 1;
 800368e:	46a1      	mov	r9, r4
 8003690:	2700      	movs	r7, #0
 8003692:	e75e      	b.n	8003552 <set_date+0xfa>
            		day = 1;
 8003694:	2301      	movs	r3, #1
 8003696:	2700      	movs	r7, #0
 8003698:	9304      	str	r3, [sp, #16]
 800369a:	e75a      	b.n	8003552 <set_date+0xfa>
                    if (month == 1) month = 12;
 800369c:	230c      	movs	r3, #12
 800369e:	4699      	mov	r9, r3
 80036a0:	e7a5      	b.n	80035ee <set_date+0x196>
 80036a2:	46c0      	nop			@ (mov r8, r8)
 80036a4:	08007040 	.word	0x08007040
 80036a8:	200001f8 	.word	0x200001f8
 80036ac:	200002d0 	.word	0x200002d0
 80036b0:	080070f4 	.word	0x080070f4
 80036b4:	2000011c 	.word	0x2000011c
 80036b8:	20000004 	.word	0x20000004
 80036bc:	0800710c 	.word	0x0800710c
 80036c0:	08007120 	.word	0x08007120
 80036c4:	48000400 	.word	0x48000400

080036c8 <set_pressure_unit>:

void set_pressure_unit()
{
 80036c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036ca:	46c6      	mov	lr, r8
 80036cc:	b500      	push	{lr}
 80036ce:	b086      	sub	sp, #24

  const char pressure_units_menu_title[] = "PRESSURE UNITS";
 80036d0:	ae02      	add	r6, sp, #8
 80036d2:	0032      	movs	r2, r6
 80036d4:	4b3c      	ldr	r3, [pc, #240]	@ (80037c8 <set_pressure_unit+0x100>)
  uint8_t col[] = {7, 6, 6, 6}; //{"mb", "mmHg", "inHg", "hPa"};
  uint8_t i = 0;
  bool lcd_output_flag = true;
 80036d6:	2501      	movs	r5, #1
  const char pressure_units_menu_title[] = "PRESSURE UNITS";
 80036d8:	cb13      	ldmia	r3!, {r0, r1, r4}
 80036da:	c213      	stmia	r2!, {r0, r1, r4}
 80036dc:	8819      	ldrh	r1, [r3, #0]
  uint8_t i = 0;
 80036de:	2400      	movs	r4, #0
  const char pressure_units_menu_title[] = "PRESSURE UNITS";
 80036e0:	8011      	strh	r1, [r2, #0]
 80036e2:	789b      	ldrb	r3, [r3, #2]
    	lcd16x2_setCursor(0,1);
    	lcd16x2_printf(pressure_units_menu_title);
    	lcd16x2_setCursor(1,0);
    	lcd16x2_printf(">>");
    	lcd16x2_setCursor(1,14);
    	lcd16x2_printf("<<");
 80036e4:	4f39      	ldr	r7, [pc, #228]	@ (80037cc <set_pressure_unit+0x104>)
  const char pressure_units_menu_title[] = "PRESSURE UNITS";
 80036e6:	7093      	strb	r3, [r2, #2]
  uint8_t col[] = {7, 6, 6, 6}; //{"mb", "mmHg", "inHg", "hPa"};
 80036e8:	4b39      	ldr	r3, [pc, #228]	@ (80037d0 <set_pressure_unit+0x108>)
 80036ea:	9301      	str	r3, [sp, #4]
    	lcd16x2_printf(">>");
 80036ec:	4b39      	ldr	r3, [pc, #228]	@ (80037d4 <set_pressure_unit+0x10c>)
 80036ee:	4698      	mov	r8, r3
 80036f0:	e012      	b.n	8003718 <set_pressure_unit+0x50>
      else i++;
      lcd_output_flag = true;
      HAL_Delay(200);
    }

    if (HAL_GPIO_ReadPin(SEL_MINUS_BTN_GPIO_Port, SEL_MINUS_BTN_Pin) == GPIO_PIN_SET)
 80036f2:	2180      	movs	r1, #128	@ 0x80
 80036f4:	4838      	ldr	r0, [pc, #224]	@ (80037d8 <set_pressure_unit+0x110>)
 80036f6:	f000 ffad 	bl	8004654 <HAL_GPIO_ReadPin>
 80036fa:	2801      	cmp	r0, #1
 80036fc:	d023      	beq.n	8003746 <set_pressure_unit+0x7e>
      else i--;
      lcd_output_flag = true;
      HAL_Delay(200);
    }

    if (HAL_GPIO_ReadPin(MENU_BTN_GPIO_Port, MENU_BTN_Pin) == GPIO_PIN_SET)
 80036fe:	2101      	movs	r1, #1
 8003700:	4835      	ldr	r0, [pc, #212]	@ (80037d8 <set_pressure_unit+0x110>)
 8003702:	f000 ffa7 	bl	8004654 <HAL_GPIO_ReadPin>
 8003706:	2801      	cmp	r0, #1
 8003708:	d02b      	beq.n	8003762 <set_pressure_unit+0x9a>
    {
      pInd = i;
      HAL_Delay(200);
      return;
    }
    if (HAL_GPIO_ReadPin(EXIT_BTN_GPIO_Port, EXIT_BTN_Pin) == GPIO_PIN_SET)
 800370a:	2090      	movs	r0, #144	@ 0x90
 800370c:	2180      	movs	r1, #128	@ 0x80
 800370e:	05c0      	lsls	r0, r0, #23
 8003710:	f000 ffa0 	bl	8004654 <HAL_GPIO_ReadPin>
 8003714:	2801      	cmp	r0, #1
 8003716:	d053      	beq.n	80037c0 <set_pressure_unit+0xf8>
    if (lcd_output_flag)
 8003718:	2d00      	cmp	r5, #0
 800371a:	d12b      	bne.n	8003774 <set_pressure_unit+0xac>
    if (HAL_GPIO_ReadPin(SEL_PLUS_BTN_GPIO_Port, SEL_PLUS_BTN_Pin) == GPIO_PIN_SET)
 800371c:	2102      	movs	r1, #2
 800371e:	482e      	ldr	r0, [pc, #184]	@ (80037d8 <set_pressure_unit+0x110>)
 8003720:	f000 ff98 	bl	8004654 <HAL_GPIO_ReadPin>
 8003724:	2500      	movs	r5, #0
 8003726:	2801      	cmp	r0, #1
 8003728:	d1e3      	bne.n	80036f2 <set_pressure_unit+0x2a>
      if (i == 3) i = 0;
 800372a:	2c03      	cmp	r4, #3
 800372c:	d046      	beq.n	80037bc <set_pressure_unit+0xf4>
      else i++;
 800372e:	3401      	adds	r4, #1
 8003730:	b2e4      	uxtb	r4, r4
      HAL_Delay(200);
 8003732:	20c8      	movs	r0, #200	@ 0xc8
 8003734:	f000 fe42 	bl	80043bc <HAL_Delay>
    if (HAL_GPIO_ReadPin(SEL_MINUS_BTN_GPIO_Port, SEL_MINUS_BTN_Pin) == GPIO_PIN_SET)
 8003738:	2180      	movs	r1, #128	@ 0x80
 800373a:	4827      	ldr	r0, [pc, #156]	@ (80037d8 <set_pressure_unit+0x110>)
      lcd_output_flag = true;
 800373c:	2501      	movs	r5, #1
    if (HAL_GPIO_ReadPin(SEL_MINUS_BTN_GPIO_Port, SEL_MINUS_BTN_Pin) == GPIO_PIN_SET)
 800373e:	f000 ff89 	bl	8004654 <HAL_GPIO_ReadPin>
 8003742:	2801      	cmp	r0, #1
 8003744:	d1db      	bne.n	80036fe <set_pressure_unit+0x36>
      if (i == 0) i = 3;
 8003746:	2c00      	cmp	r4, #0
 8003748:	d036      	beq.n	80037b8 <set_pressure_unit+0xf0>
      else i--;
 800374a:	3c01      	subs	r4, #1
 800374c:	b2e4      	uxtb	r4, r4
      HAL_Delay(200);
 800374e:	20c8      	movs	r0, #200	@ 0xc8
 8003750:	f000 fe34 	bl	80043bc <HAL_Delay>
    if (HAL_GPIO_ReadPin(MENU_BTN_GPIO_Port, MENU_BTN_Pin) == GPIO_PIN_SET)
 8003754:	2101      	movs	r1, #1
 8003756:	4820      	ldr	r0, [pc, #128]	@ (80037d8 <set_pressure_unit+0x110>)
      lcd_output_flag = true;
 8003758:	2501      	movs	r5, #1
    if (HAL_GPIO_ReadPin(MENU_BTN_GPIO_Port, MENU_BTN_Pin) == GPIO_PIN_SET)
 800375a:	f000 ff7b 	bl	8004654 <HAL_GPIO_ReadPin>
 800375e:	2801      	cmp	r0, #1
 8003760:	d1d3      	bne.n	800370a <set_pressure_unit+0x42>
      pInd = i;
 8003762:	4b1e      	ldr	r3, [pc, #120]	@ (80037dc <set_pressure_unit+0x114>)
      HAL_Delay(200);
 8003764:	30c7      	adds	r0, #199	@ 0xc7
      pInd = i;
 8003766:	701c      	strb	r4, [r3, #0]
      HAL_Delay(200);
 8003768:	f000 fe28 	bl	80043bc <HAL_Delay>
    {
      HAL_Delay(200);
      return;
    }
  }
}
 800376c:	b006      	add	sp, #24
 800376e:	bc80      	pop	{r7}
 8003770:	46b8      	mov	r8, r7
 8003772:	bdf0      	pop	{r4, r5, r6, r7, pc}
    	lcd16x2_clear();
 8003774:	f7ff fcf4 	bl	8003160 <lcd16x2_clear>
    	lcd16x2_setCursor(0,1);
 8003778:	2101      	movs	r1, #1
 800377a:	2000      	movs	r0, #0
 800377c:	f7ff fc94 	bl	80030a8 <lcd16x2_setCursor>
    	lcd16x2_printf(pressure_units_menu_title);
 8003780:	0030      	movs	r0, r6
 8003782:	f7ff fd01 	bl	8003188 <lcd16x2_printf>
    	lcd16x2_setCursor(1,0);
 8003786:	2100      	movs	r1, #0
 8003788:	2001      	movs	r0, #1
 800378a:	f7ff fc8d 	bl	80030a8 <lcd16x2_setCursor>
    	lcd16x2_printf(">>");
 800378e:	4640      	mov	r0, r8
 8003790:	f7ff fcfa 	bl	8003188 <lcd16x2_printf>
    	lcd16x2_setCursor(1,14);
 8003794:	210e      	movs	r1, #14
 8003796:	2001      	movs	r0, #1
 8003798:	f7ff fc86 	bl	80030a8 <lcd16x2_setCursor>
    	lcd16x2_printf("<<");
 800379c:	0038      	movs	r0, r7
 800379e:	f7ff fcf3 	bl	8003188 <lcd16x2_printf>
    	lcd16x2_setCursor(1,col[i]);
 80037a2:	ab01      	add	r3, sp, #4
 80037a4:	5d19      	ldrb	r1, [r3, r4]
 80037a6:	2001      	movs	r0, #1
 80037a8:	f7ff fc7e 	bl	80030a8 <lcd16x2_setCursor>
        lcd16x2_printf(pres_units[i]);
 80037ac:	4b0c      	ldr	r3, [pc, #48]	@ (80037e0 <set_pressure_unit+0x118>)
 80037ae:	00a2      	lsls	r2, r4, #2
 80037b0:	58d0      	ldr	r0, [r2, r3]
 80037b2:	f7ff fce9 	bl	8003188 <lcd16x2_printf>
        lcd_output_flag = false;
 80037b6:	e7b1      	b.n	800371c <set_pressure_unit+0x54>
      if (i == 0) i = 3;
 80037b8:	2403      	movs	r4, #3
 80037ba:	e7c8      	b.n	800374e <set_pressure_unit+0x86>
      if (i == 3) i = 0;
 80037bc:	2400      	movs	r4, #0
 80037be:	e7b8      	b.n	8003732 <set_pressure_unit+0x6a>
      HAL_Delay(200);
 80037c0:	30c7      	adds	r0, #199	@ 0xc7
 80037c2:	f000 fdfb 	bl	80043bc <HAL_Delay>
      return;
 80037c6:	e7d1      	b.n	800376c <set_pressure_unit+0xa4>
 80037c8:	0800713c 	.word	0x0800713c
 80037cc:	08007138 	.word	0x08007138
 80037d0:	06060607 	.word	0x06060607
 80037d4:	08007134 	.word	0x08007134
 80037d8:	48000400 	.word	0x48000400
 80037dc:	20000030 	.word	0x20000030
 80037e0:	20000034 	.word	0x20000034

080037e4 <set_temperature_unit>:

void set_temperature_unit()
{
 80037e4:	b570      	push	{r4, r5, r6, lr}
 80037e6:	b086      	sub	sp, #24

  const char temperature_units_menu_title[] = "TEMPERATURE UNIT";
 80037e8:	ac01      	add	r4, sp, #4
 80037ea:	0022      	movs	r2, r4
 80037ec:	4b38      	ldr	r3, [pc, #224]	@ (80038d0 <set_temperature_unit+0xec>)
 80037ee:	cb23      	ldmia	r3!, {r0, r1, r5}
 80037f0:	c223      	stmia	r2!, {r0, r1, r5}
 80037f2:	6819      	ldr	r1, [r3, #0]
  uint8_t i = 0;
  bool lcd_output_flag = true;
 80037f4:	2501      	movs	r5, #1
  const char temperature_units_menu_title[] = "TEMPERATURE UNIT";
 80037f6:	6011      	str	r1, [r2, #0]
 80037f8:	791b      	ldrb	r3, [r3, #4]
 80037fa:	7113      	strb	r3, [r2, #4]

  lcd16x2_clear();
 80037fc:	f7ff fcb0 	bl	8003160 <lcd16x2_clear>
  lcd16x2_setCursor(0,0);
 8003800:	2100      	movs	r1, #0
 8003802:	2000      	movs	r0, #0
 8003804:	f7ff fc50 	bl	80030a8 <lcd16x2_setCursor>
  lcd16x2_printf(temperature_units_menu_title);
 8003808:	0020      	movs	r0, r4
 800380a:	f7ff fcbd 	bl	8003188 <lcd16x2_printf>
  lcd16x2_setCursor(1,0);
 800380e:	2100      	movs	r1, #0
 8003810:	2001      	movs	r0, #1
 8003812:	f7ff fc49 	bl	80030a8 <lcd16x2_setCursor>
  lcd16x2_printf(">>");
 8003816:	482f      	ldr	r0, [pc, #188]	@ (80038d4 <set_temperature_unit+0xf0>)
 8003818:	f7ff fcb6 	bl	8003188 <lcd16x2_printf>
  lcd16x2_setCursor(1,14);
 800381c:	210e      	movs	r1, #14
 800381e:	2001      	movs	r0, #1
 8003820:	f7ff fc42 	bl	80030a8 <lcd16x2_setCursor>
  lcd16x2_printf("<<");
 8003824:	482c      	ldr	r0, [pc, #176]	@ (80038d8 <set_temperature_unit+0xf4>)
 8003826:	f7ff fcaf 	bl	8003188 <lcd16x2_printf>
  uint8_t i = 0;
 800382a:	2400      	movs	r4, #0
  while(1)
  {
    if (lcd_output_flag)
    {
      lcd16x2_setCursor(1,7);
      lcd16x2_printf(temp_units_2[i]);
 800382c:	4e2b      	ldr	r6, [pc, #172]	@ (80038dc <set_temperature_unit+0xf8>)
 800382e:	e012      	b.n	8003856 <set_temperature_unit+0x72>
      else i++;
      lcd_output_flag = true;
      HAL_Delay(200);
    }

    if (HAL_GPIO_ReadPin(SEL_MINUS_BTN_GPIO_Port, SEL_MINUS_BTN_Pin) == GPIO_PIN_SET)
 8003830:	2180      	movs	r1, #128	@ 0x80
 8003832:	482b      	ldr	r0, [pc, #172]	@ (80038e0 <set_temperature_unit+0xfc>)
 8003834:	f000 ff0e 	bl	8004654 <HAL_GPIO_ReadPin>
 8003838:	2801      	cmp	r0, #1
 800383a:	d023      	beq.n	8003884 <set_temperature_unit+0xa0>
      else i--;
      lcd_output_flag = true;
      HAL_Delay(200);
    }

    if (HAL_GPIO_ReadPin(MENU_BTN_GPIO_Port, MENU_BTN_Pin) == GPIO_PIN_SET)
 800383c:	2101      	movs	r1, #1
 800383e:	4828      	ldr	r0, [pc, #160]	@ (80038e0 <set_temperature_unit+0xfc>)
 8003840:	f000 ff08 	bl	8004654 <HAL_GPIO_ReadPin>
 8003844:	2801      	cmp	r0, #1
 8003846:	d02b      	beq.n	80038a0 <set_temperature_unit+0xbc>
      tInd = i;
      HAL_Delay(200);
      return;
    }

    if (HAL_GPIO_ReadPin(EXIT_BTN_GPIO_Port, EXIT_BTN_Pin) == GPIO_PIN_SET)
 8003848:	2090      	movs	r0, #144	@ 0x90
 800384a:	2180      	movs	r1, #128	@ 0x80
 800384c:	05c0      	lsls	r0, r0, #23
 800384e:	f000 ff01 	bl	8004654 <HAL_GPIO_ReadPin>
 8003852:	2801      	cmp	r0, #1
 8003854:	d038      	beq.n	80038c8 <set_temperature_unit+0xe4>
    if (lcd_output_flag)
 8003856:	2d00      	cmp	r5, #0
 8003858:	d129      	bne.n	80038ae <set_temperature_unit+0xca>
    if (HAL_GPIO_ReadPin(SEL_PLUS_BTN_GPIO_Port, SEL_PLUS_BTN_Pin) == GPIO_PIN_SET)
 800385a:	2102      	movs	r1, #2
 800385c:	4820      	ldr	r0, [pc, #128]	@ (80038e0 <set_temperature_unit+0xfc>)
 800385e:	f000 fef9 	bl	8004654 <HAL_GPIO_ReadPin>
 8003862:	2500      	movs	r5, #0
 8003864:	2801      	cmp	r0, #1
 8003866:	d1e3      	bne.n	8003830 <set_temperature_unit+0x4c>
      if (i == 2) i = 0;
 8003868:	2c02      	cmp	r4, #2
 800386a:	d02b      	beq.n	80038c4 <set_temperature_unit+0xe0>
      else i++;
 800386c:	3401      	adds	r4, #1
 800386e:	b2e4      	uxtb	r4, r4
      HAL_Delay(200);
 8003870:	20c8      	movs	r0, #200	@ 0xc8
 8003872:	f000 fda3 	bl	80043bc <HAL_Delay>
    if (HAL_GPIO_ReadPin(SEL_MINUS_BTN_GPIO_Port, SEL_MINUS_BTN_Pin) == GPIO_PIN_SET)
 8003876:	2180      	movs	r1, #128	@ 0x80
 8003878:	4819      	ldr	r0, [pc, #100]	@ (80038e0 <set_temperature_unit+0xfc>)
      lcd_output_flag = true;
 800387a:	2501      	movs	r5, #1
    if (HAL_GPIO_ReadPin(SEL_MINUS_BTN_GPIO_Port, SEL_MINUS_BTN_Pin) == GPIO_PIN_SET)
 800387c:	f000 feea 	bl	8004654 <HAL_GPIO_ReadPin>
 8003880:	2801      	cmp	r0, #1
 8003882:	d1db      	bne.n	800383c <set_temperature_unit+0x58>
      if (i == 0) i = 2;
 8003884:	2c00      	cmp	r4, #0
 8003886:	d01b      	beq.n	80038c0 <set_temperature_unit+0xdc>
      else i--;
 8003888:	3c01      	subs	r4, #1
 800388a:	b2e4      	uxtb	r4, r4
      HAL_Delay(200);
 800388c:	20c8      	movs	r0, #200	@ 0xc8
 800388e:	f000 fd95 	bl	80043bc <HAL_Delay>
    if (HAL_GPIO_ReadPin(MENU_BTN_GPIO_Port, MENU_BTN_Pin) == GPIO_PIN_SET)
 8003892:	2101      	movs	r1, #1
 8003894:	4812      	ldr	r0, [pc, #72]	@ (80038e0 <set_temperature_unit+0xfc>)
      lcd_output_flag = true;
 8003896:	2501      	movs	r5, #1
    if (HAL_GPIO_ReadPin(MENU_BTN_GPIO_Port, MENU_BTN_Pin) == GPIO_PIN_SET)
 8003898:	f000 fedc 	bl	8004654 <HAL_GPIO_ReadPin>
 800389c:	2801      	cmp	r0, #1
 800389e:	d1d3      	bne.n	8003848 <set_temperature_unit+0x64>
      tInd = i;
 80038a0:	4b10      	ldr	r3, [pc, #64]	@ (80038e4 <set_temperature_unit+0x100>)
      HAL_Delay(200);
 80038a2:	30c7      	adds	r0, #199	@ 0xc7
      tInd = i;
 80038a4:	701c      	strb	r4, [r3, #0]
      HAL_Delay(200);
 80038a6:	f000 fd89 	bl	80043bc <HAL_Delay>
    {
      HAL_Delay(200);
      return;
    }
  }
}
 80038aa:	b006      	add	sp, #24
 80038ac:	bd70      	pop	{r4, r5, r6, pc}
      lcd16x2_setCursor(1,7);
 80038ae:	2107      	movs	r1, #7
 80038b0:	2001      	movs	r0, #1
 80038b2:	f7ff fbf9 	bl	80030a8 <lcd16x2_setCursor>
      lcd16x2_printf(temp_units_2[i]);
 80038b6:	00a3      	lsls	r3, r4, #2
 80038b8:	5998      	ldr	r0, [r3, r6]
 80038ba:	f7ff fc65 	bl	8003188 <lcd16x2_printf>
      lcd_output_flag = false;
 80038be:	e7cc      	b.n	800385a <set_temperature_unit+0x76>
      if (i == 0) i = 2;
 80038c0:	2402      	movs	r4, #2
 80038c2:	e7e3      	b.n	800388c <set_temperature_unit+0xa8>
      if (i == 2) i = 0;
 80038c4:	2400      	movs	r4, #0
 80038c6:	e7d3      	b.n	8003870 <set_temperature_unit+0x8c>
      HAL_Delay(200);
 80038c8:	30c7      	adds	r0, #199	@ 0xc7
 80038ca:	f000 fd77 	bl	80043bc <HAL_Delay>
      return;
 80038ce:	e7ec      	b.n	80038aa <set_temperature_unit+0xc6>
 80038d0:	0800714c 	.word	0x0800714c
 80038d4:	08007134 	.word	0x08007134
 80038d8:	08007138 	.word	0x08007138
 80038dc:	20000044 	.word	0x20000044
 80038e0:	48000400 	.word	0x48000400
 80038e4:	200001fc 	.word	0x200001fc

080038e8 <main_menu>:

void main_menu()
{
 80038e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038ea:	b08b      	sub	sp, #44	@ 0x2c
  char *main_menu_items[] = {"TEMPERATURE UNIT", " PRESSURE UNITS ", "    SET TIME    ", "    SET DATE    ", "      EXIT      "};
 80038ec:	ae05      	add	r6, sp, #20
 80038ee:	0032      	movs	r2, r6
 80038f0:	4b49      	ldr	r3, [pc, #292]	@ (8003a18 <main_menu+0x130>)
  char menu_title[] = "** MAIN MENU **";
 80038f2:	af01      	add	r7, sp, #4
  char *main_menu_items[] = {"TEMPERATURE UNIT", " PRESSURE UNITS ", "    SET TIME    ", "    SET DATE    ", "      EXIT      "};
 80038f4:	cb13      	ldmia	r3!, {r0, r1, r4}
 80038f6:	c213      	stmia	r2!, {r0, r1, r4}
 80038f8:	cb03      	ldmia	r3!, {r0, r1}
 80038fa:	c203      	stmia	r2!, {r0, r1}
  char menu_title[] = "** MAIN MENU **";
 80038fc:	003a      	movs	r2, r7
 80038fe:	4b47      	ldr	r3, [pc, #284]	@ (8003a1c <main_menu+0x134>)
 8003900:	cb13      	ldmia	r3!, {r0, r1, r4}
 8003902:	c213      	stmia	r2!, {r0, r1, r4}
 8003904:	681b      	ldr	r3, [r3, #0]
  int i = 0;
 8003906:	2400      	movs	r4, #0
  char menu_title[] = "** MAIN MENU **";
 8003908:	6013      	str	r3, [r2, #0]
  bool lcd_output_flag = false;

  lcd16x2_clear();
 800390a:	f7ff fc29 	bl	8003160 <lcd16x2_clear>
  lcd16x2_1stLine();
 800390e:	f7ff fbe9 	bl	80030e4 <lcd16x2_1stLine>
  lcd16x2_printf(menu_title);
 8003912:	0038      	movs	r0, r7
 8003914:	f7ff fc38 	bl	8003188 <lcd16x2_printf>
  lcd16x2_2ndLine();
 8003918:	f7ff fbf4 	bl	8003104 <lcd16x2_2ndLine>
  lcd16x2_printf(main_menu_items[i]);
 800391c:	4840      	ldr	r0, [pc, #256]	@ (8003a20 <main_menu+0x138>)
 800391e:	f7ff fc33 	bl	8003188 <lcd16x2_printf>
    {
	  lcd16x2_2ndLine();
	  lcd16x2_printf(main_menu_items[i]);
      lcd_output_flag = false;
    }
    if (HAL_GPIO_ReadPin(SEL_PLUS_BTN_GPIO_Port, SEL_PLUS_BTN_Pin) == GPIO_PIN_SET)
 8003922:	2102      	movs	r1, #2
 8003924:	483f      	ldr	r0, [pc, #252]	@ (8003a24 <main_menu+0x13c>)
 8003926:	f000 fe95 	bl	8004654 <HAL_GPIO_ReadPin>
 800392a:	2500      	movs	r5, #0
 800392c:	2801      	cmp	r0, #1
 800392e:	d021      	beq.n	8003974 <main_menu+0x8c>
      if(i == 4) i = 0;
      else i++;
      lcd_output_flag = true;
      HAL_Delay(200);
    }
    if (HAL_GPIO_ReadPin(SEL_MINUS_BTN_GPIO_Port, SEL_MINUS_BTN_Pin) == GPIO_PIN_SET)
 8003930:	2180      	movs	r1, #128	@ 0x80
 8003932:	483c      	ldr	r0, [pc, #240]	@ (8003a24 <main_menu+0x13c>)
 8003934:	f000 fe8e 	bl	8004654 <HAL_GPIO_ReadPin>
 8003938:	2801      	cmp	r0, #1
 800393a:	d028      	beq.n	800398e <main_menu+0xa6>
      if (i == 0) i = 4;
      else i--;
      lcd_output_flag = true;
      HAL_Delay(200);
    }
    if (HAL_GPIO_ReadPin(MENU_BTN_GPIO_Port, MENU_BTN_Pin) == GPIO_PIN_SET)
 800393c:	2101      	movs	r1, #1
 800393e:	4839      	ldr	r0, [pc, #228]	@ (8003a24 <main_menu+0x13c>)
 8003940:	f000 fe88 	bl	8004654 <HAL_GPIO_ReadPin>
 8003944:	2801      	cmp	r0, #1
 8003946:	d02f      	beq.n	80039a8 <main_menu+0xc0>
      lcd16x2_setCursor(0,0);
      lcd16x2_printf(menu_title);
      lcd16x2_2ndLine();
      lcd16x2_printf(main_menu_items[i]);
    }
    if (HAL_GPIO_ReadPin(EXIT_BTN_GPIO_Port, EXIT_BTN_Pin)== GPIO_PIN_SET)
 8003948:	2090      	movs	r0, #144	@ 0x90
 800394a:	2180      	movs	r1, #128	@ 0x80
 800394c:	05c0      	lsls	r0, r0, #23
 800394e:	f000 fe81 	bl	8004654 <HAL_GPIO_ReadPin>
 8003952:	2801      	cmp	r0, #1
 8003954:	d04d      	beq.n	80039f2 <main_menu+0x10a>
    if (lcd_output_flag)
 8003956:	2d00      	cmp	r5, #0
 8003958:	d0e3      	beq.n	8003922 <main_menu+0x3a>
	  lcd16x2_2ndLine();
 800395a:	f7ff fbd3 	bl	8003104 <lcd16x2_2ndLine>
	  lcd16x2_printf(main_menu_items[i]);
 800395e:	00a3      	lsls	r3, r4, #2
 8003960:	58f0      	ldr	r0, [r6, r3]
 8003962:	f7ff fc11 	bl	8003188 <lcd16x2_printf>
    if (HAL_GPIO_ReadPin(SEL_PLUS_BTN_GPIO_Port, SEL_PLUS_BTN_Pin) == GPIO_PIN_SET)
 8003966:	2102      	movs	r1, #2
 8003968:	482e      	ldr	r0, [pc, #184]	@ (8003a24 <main_menu+0x13c>)
 800396a:	f000 fe73 	bl	8004654 <HAL_GPIO_ReadPin>
 800396e:	2500      	movs	r5, #0
 8003970:	2801      	cmp	r0, #1
 8003972:	d1dd      	bne.n	8003930 <main_menu+0x48>
      if(i == 4) i = 0;
 8003974:	2c04      	cmp	r4, #4
 8003976:	d043      	beq.n	8003a00 <main_menu+0x118>
      else i++;
 8003978:	3401      	adds	r4, #1
      HAL_Delay(200);
 800397a:	20c8      	movs	r0, #200	@ 0xc8
 800397c:	f000 fd1e 	bl	80043bc <HAL_Delay>
    if (HAL_GPIO_ReadPin(SEL_MINUS_BTN_GPIO_Port, SEL_MINUS_BTN_Pin) == GPIO_PIN_SET)
 8003980:	2180      	movs	r1, #128	@ 0x80
 8003982:	4828      	ldr	r0, [pc, #160]	@ (8003a24 <main_menu+0x13c>)
      lcd_output_flag = true;
 8003984:	2501      	movs	r5, #1
    if (HAL_GPIO_ReadPin(SEL_MINUS_BTN_GPIO_Port, SEL_MINUS_BTN_Pin) == GPIO_PIN_SET)
 8003986:	f000 fe65 	bl	8004654 <HAL_GPIO_ReadPin>
 800398a:	2801      	cmp	r0, #1
 800398c:	d1d6      	bne.n	800393c <main_menu+0x54>
      if (i == 0) i = 4;
 800398e:	2c00      	cmp	r4, #0
 8003990:	d034      	beq.n	80039fc <main_menu+0x114>
      else i--;
 8003992:	3c01      	subs	r4, #1
      HAL_Delay(200);
 8003994:	20c8      	movs	r0, #200	@ 0xc8
 8003996:	f000 fd11 	bl	80043bc <HAL_Delay>
    if (HAL_GPIO_ReadPin(MENU_BTN_GPIO_Port, MENU_BTN_Pin) == GPIO_PIN_SET)
 800399a:	2101      	movs	r1, #1
 800399c:	4821      	ldr	r0, [pc, #132]	@ (8003a24 <main_menu+0x13c>)
      lcd_output_flag = true;
 800399e:	2501      	movs	r5, #1
    if (HAL_GPIO_ReadPin(MENU_BTN_GPIO_Port, MENU_BTN_Pin) == GPIO_PIN_SET)
 80039a0:	f000 fe58 	bl	8004654 <HAL_GPIO_ReadPin>
 80039a4:	2801      	cmp	r0, #1
 80039a6:	d1cf      	bne.n	8003948 <main_menu+0x60>
      HAL_Delay(200);
 80039a8:	30c7      	adds	r0, #199	@ 0xc7
 80039aa:	f000 fd07 	bl	80043bc <HAL_Delay>
      switch(i)
 80039ae:	2c03      	cmp	r4, #3
 80039b0:	d028      	beq.n	8003a04 <main_menu+0x11c>
 80039b2:	2c04      	cmp	r4, #4
 80039b4:	d020      	beq.n	80039f8 <main_menu+0x110>
 80039b6:	2c01      	cmp	r4, #1
 80039b8:	d02a      	beq.n	8003a10 <main_menu+0x128>
 80039ba:	2c02      	cmp	r4, #2
 80039bc:	d125      	bne.n	8003a0a <main_menu+0x122>
        case 2: set_time(); break;
 80039be:	f7ff fc4f 	bl	8003260 <set_time>
      lcd16x2_clear();
 80039c2:	f7ff fbcd 	bl	8003160 <lcd16x2_clear>
      lcd16x2_1stLine();
 80039c6:	f7ff fb8d 	bl	80030e4 <lcd16x2_1stLine>
      lcd16x2_setCursor(0,0);
 80039ca:	2100      	movs	r1, #0
 80039cc:	2000      	movs	r0, #0
 80039ce:	f7ff fb6b 	bl	80030a8 <lcd16x2_setCursor>
      lcd16x2_printf(menu_title);
 80039d2:	0038      	movs	r0, r7
 80039d4:	f7ff fbd8 	bl	8003188 <lcd16x2_printf>
      lcd16x2_2ndLine();
 80039d8:	f7ff fb94 	bl	8003104 <lcd16x2_2ndLine>
      lcd16x2_printf(main_menu_items[i]);
 80039dc:	00a3      	lsls	r3, r4, #2
 80039de:	58f0      	ldr	r0, [r6, r3]
 80039e0:	f7ff fbd2 	bl	8003188 <lcd16x2_printf>
    if (HAL_GPIO_ReadPin(EXIT_BTN_GPIO_Port, EXIT_BTN_Pin)== GPIO_PIN_SET)
 80039e4:	2090      	movs	r0, #144	@ 0x90
 80039e6:	2180      	movs	r1, #128	@ 0x80
 80039e8:	05c0      	lsls	r0, r0, #23
 80039ea:	f000 fe33 	bl	8004654 <HAL_GPIO_ReadPin>
 80039ee:	2801      	cmp	r0, #1
 80039f0:	d1b1      	bne.n	8003956 <main_menu+0x6e>
    {
      HAL_Delay(200);
 80039f2:	30c7      	adds	r0, #199	@ 0xc7
 80039f4:	f000 fce2 	bl	80043bc <HAL_Delay>
      return;
    }
  }
}
 80039f8:	b00b      	add	sp, #44	@ 0x2c
 80039fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (i == 0) i = 4;
 80039fc:	2404      	movs	r4, #4
 80039fe:	e7c9      	b.n	8003994 <main_menu+0xac>
      if(i == 4) i = 0;
 8003a00:	2400      	movs	r4, #0
 8003a02:	e7ba      	b.n	800397a <main_menu+0x92>
        case 3: set_date(); break;
 8003a04:	f7ff fd28 	bl	8003458 <set_date>
 8003a08:	e7db      	b.n	80039c2 <main_menu+0xda>
        case 0: set_temperature_unit(); break;
 8003a0a:	f7ff feeb 	bl	80037e4 <set_temperature_unit>
 8003a0e:	e7d8      	b.n	80039c2 <main_menu+0xda>
        case 1: set_pressure_unit(); break;
 8003a10:	f7ff fe5a 	bl	80036c8 <set_pressure_unit>
 8003a14:	e7d5      	b.n	80039c2 <main_menu+0xda>
 8003a16:	46c0      	nop			@ (mov r8, r8)
 8003a18:	08007054 	.word	0x08007054
 8003a1c:	08007160 	.word	0x08007160
 8003a20:	0800714c 	.word	0x0800714c
 8003a24:	48000400 	.word	0x48000400

08003a28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a28:	b510      	push	{r4, lr}
 8003a2a:	b098      	sub	sp, #96	@ 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a2c:	2230      	movs	r2, #48	@ 0x30
 8003a2e:	2100      	movs	r1, #0
 8003a30:	a80c      	add	r0, sp, #48	@ 0x30
 8003a32:	f002 fc0b 	bl	800624c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a36:	2210      	movs	r2, #16
 8003a38:	2100      	movs	r1, #0
 8003a3a:	4668      	mov	r0, sp
 8003a3c:	f002 fc06 	bl	800624c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a40:	2218      	movs	r2, #24
 8003a42:	2100      	movs	r1, #0
 8003a44:	a804      	add	r0, sp, #16
 8003a46:	f002 fc01 	bl	800624c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8003a4a:	230a      	movs	r3, #10
 8003a4c:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003a4e:	3b09      	subs	r3, #9
 8003a50:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003a52:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003a54:	2380      	movs	r3, #128	@ 0x80
 8003a56:	021b      	lsls	r3, r3, #8
 8003a58:	9315      	str	r3, [sp, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8003a5a:	2380      	movs	r3, #128	@ 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003a5c:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a5e:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8003a60:	035b      	lsls	r3, r3, #13
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a62:	a80b      	add	r0, sp, #44	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003a64:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a66:	9414      	str	r4, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8003a68:	9316      	str	r3, [sp, #88]	@ 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a6a:	f001 f9e1 	bl	8004e30 <HAL_RCC_OscConfig>
 8003a6e:	2800      	cmp	r0, #0
 8003a70:	d001      	beq.n	8003a76 <SystemClock_Config+0x4e>
  __ASM volatile ("cpsid i" : : : "memory");
 8003a72:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a74:	e7fe      	b.n	8003a74 <SystemClock_Config+0x4c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a76:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a78:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003a7a:	9003      	str	r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003a7c:	2101      	movs	r1, #1
 8003a7e:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a80:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a82:	9401      	str	r4, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003a84:	f001 fcc4 	bl	8005410 <HAL_RCC_ClockConfig>
 8003a88:	2800      	cmp	r0, #0
 8003a8a:	d001      	beq.n	8003a90 <SystemClock_Config+0x68>
 8003a8c:	b672      	cpsid	i
  while (1)
 8003a8e:	e7fe      	b.n	8003a8e <SystemClock_Config+0x66>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
 8003a90:	2380      	movs	r3, #128	@ 0x80
 8003a92:	4a07      	ldr	r2, [pc, #28]	@ (8003ab0 <SystemClock_Config+0x88>)
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8003a94:	9007      	str	r0, [sp, #28]
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
 8003a96:	009b      	lsls	r3, r3, #2
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a98:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
 8003a9a:	9204      	str	r2, [sp, #16]
 8003a9c:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a9e:	f001 fd5b 	bl	8005558 <HAL_RCCEx_PeriphCLKConfig>
 8003aa2:	2800      	cmp	r0, #0
 8003aa4:	d001      	beq.n	8003aaa <SystemClock_Config+0x82>
 8003aa6:	b672      	cpsid	i
  while (1)
 8003aa8:	e7fe      	b.n	8003aa8 <SystemClock_Config+0x80>
}
 8003aaa:	b018      	add	sp, #96	@ 0x60
 8003aac:	bd10      	pop	{r4, pc}
 8003aae:	46c0      	nop			@ (mov r8, r8)
 8003ab0:	00010020 	.word	0x00010020

08003ab4 <main>:
{
 8003ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ab6:	46de      	mov	lr, fp
 8003ab8:	4645      	mov	r5, r8
 8003aba:	4657      	mov	r7, sl
 8003abc:	464e      	mov	r6, r9
 8003abe:	b5e0      	push	{r5, r6, r7, lr}
  float dht_temperature = 0.0f, dht_humidity = 0.0f;
 8003ac0:	2300      	movs	r3, #0
{
 8003ac2:	b0ab      	sub	sp, #172	@ 0xac
  const char *months[12] = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
 8003ac4:	ac1e      	add	r4, sp, #120	@ 0x78
 8003ac6:	0022      	movs	r2, r4
  float dht_temperature = 0.0f, dht_humidity = 0.0f;
 8003ac8:	9312      	str	r3, [sp, #72]	@ 0x48
 8003aca:	9313      	str	r3, [sp, #76]	@ 0x4c
  const char *months[12] = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
 8003acc:	4bba      	ldr	r3, [pc, #744]	@ (8003db8 <main+0x304>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ace:	2701      	movs	r7, #1
  const char *months[12] = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
 8003ad0:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003ad2:	c223      	stmia	r2!, {r0, r1, r5}
 8003ad4:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003ad6:	c223      	stmia	r2!, {r0, r1, r5}
 8003ad8:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003ada:	c223      	stmia	r2!, {r0, r1, r5}
 8003adc:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003ade:	c223      	stmia	r2!, {r0, r1, r5}
  HAL_Init();
 8003ae0:	f000 fc4a 	bl	8004378 <HAL_Init>
  SystemClock_Config();
 8003ae4:	f7ff ffa0 	bl	8003a28 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ae8:	2214      	movs	r2, #20
 8003aea:	2100      	movs	r1, #0
 8003aec:	a819      	add	r0, sp, #100	@ 0x64
 8003aee:	f002 fbad 	bl	800624c <memset>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003af2:	2180      	movs	r1, #128	@ 0x80
 8003af4:	4bb1      	ldr	r3, [pc, #708]	@ (8003dbc <main+0x308>)
 8003af6:	03c9      	lsls	r1, r1, #15
 8003af8:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, LCD_DB7_Pin|LCD_DB6_Pin|LCD_DB5_Pin|LCD_DB4_Pin
 8003afa:	2090      	movs	r0, #144	@ 0x90
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003afc:	430a      	orrs	r2, r1
 8003afe:	615a      	str	r2, [r3, #20]
 8003b00:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, LCD_DB7_Pin|LCD_DB6_Pin|LCD_DB5_Pin|LCD_DB4_Pin
 8003b02:	4daf      	ldr	r5, [pc, #700]	@ (8003dc0 <main+0x30c>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003b04:	400a      	ands	r2, r1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b06:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003b08:	9214      	str	r2, [sp, #80]	@ 0x50
 8003b0a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b0c:	695a      	ldr	r2, [r3, #20]
 8003b0e:	0289      	lsls	r1, r1, #10
 8003b10:	430a      	orrs	r2, r1
 8003b12:	615a      	str	r2, [r3, #20]
 8003b14:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, LCD_DB7_Pin|LCD_DB6_Pin|LCD_DB5_Pin|LCD_DB4_Pin
 8003b16:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b18:	400a      	ands	r2, r1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b1a:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b1c:	9215      	str	r2, [sp, #84]	@ 0x54
 8003b1e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b20:	695a      	ldr	r2, [r3, #20]
 8003b22:	02c9      	lsls	r1, r1, #11
 8003b24:	430a      	orrs	r2, r1
 8003b26:	615a      	str	r2, [r3, #20]
 8003b28:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, LCD_DB7_Pin|LCD_DB6_Pin|LCD_DB5_Pin|LCD_DB4_Pin
 8003b2a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b2c:	400b      	ands	r3, r1
 8003b2e:	9316      	str	r3, [sp, #88]	@ 0x58
  HAL_GPIO_WritePin(GPIOA, LCD_DB7_Pin|LCD_DB6_Pin|LCD_DB5_Pin|LCD_DB4_Pin
 8003b30:	0029      	movs	r1, r5
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b32:	9b16      	ldr	r3, [sp, #88]	@ 0x58
  HAL_GPIO_WritePin(GPIOA, LCD_DB7_Pin|LCD_DB6_Pin|LCD_DB5_Pin|LCD_DB4_Pin
 8003b34:	f000 fd94 	bl	8004660 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|DHT_DATA_Pin, GPIO_PIN_RESET);
 8003b38:	2200      	movs	r2, #0
 8003b3a:	2118      	movs	r1, #24
 8003b3c:	48a1      	ldr	r0, [pc, #644]	@ (8003dc4 <main+0x310>)
 8003b3e:	f000 fd8f 	bl	8004660 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b42:	2090      	movs	r0, #144	@ 0x90
  GPIO_InitStruct.Pin = LCD_DB7_Pin|LCD_DB6_Pin|LCD_DB5_Pin|LCD_DB4_Pin
 8003b44:	9519      	str	r5, [sp, #100]	@ 0x64
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b46:	2500      	movs	r5, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b48:	a919      	add	r1, sp, #100	@ 0x64
 8003b4a:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b4c:	971a      	str	r7, [sp, #104]	@ 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b4e:	951b      	str	r5, [sp, #108]	@ 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b50:	951c      	str	r5, [sp, #112]	@ 0x70
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b52:	f000 fc89 	bl	8004468 <HAL_GPIO_Init>
  HAL_GPIO_Init(EXIT_BTN_GPIO_Port, &GPIO_InitStruct);
 8003b56:	2090      	movs	r0, #144	@ 0x90
  GPIO_InitStruct.Pin = EXIT_BTN_Pin;
 8003b58:	2380      	movs	r3, #128	@ 0x80
  HAL_GPIO_Init(EXIT_BTN_GPIO_Port, &GPIO_InitStruct);
 8003b5a:	a919      	add	r1, sp, #100	@ 0x64
 8003b5c:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = EXIT_BTN_Pin;
 8003b5e:	9319      	str	r3, [sp, #100]	@ 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b60:	951a      	str	r5, [sp, #104]	@ 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b62:	951b      	str	r5, [sp, #108]	@ 0x6c
  HAL_GPIO_Init(EXIT_BTN_GPIO_Port, &GPIO_InitStruct);
 8003b64:	f000 fc80 	bl	8004468 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MENU_BTN_Pin|SEL_PLUS_BTN_Pin|SEL_MINUS_BTN_Pin;
 8003b68:	2383      	movs	r3, #131	@ 0x83
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b6a:	4896      	ldr	r0, [pc, #600]	@ (8003dc4 <main+0x310>)
 8003b6c:	a919      	add	r1, sp, #100	@ 0x64
  GPIO_InitStruct.Pin = MENU_BTN_Pin|SEL_PLUS_BTN_Pin|SEL_MINUS_BTN_Pin;
 8003b6e:	9319      	str	r3, [sp, #100]	@ 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b70:	951a      	str	r5, [sp, #104]	@ 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b72:	951b      	str	r5, [sp, #108]	@ 0x6c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b74:	f000 fc78 	bl	8004468 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_GREEN_Pin|DHT_DATA_Pin;
 8003b78:	2318      	movs	r3, #24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b7a:	4892      	ldr	r0, [pc, #584]	@ (8003dc4 <main+0x310>)
 8003b7c:	a919      	add	r1, sp, #100	@ 0x64
  GPIO_InitStruct.Pin = LED_GREEN_Pin|DHT_DATA_Pin;
 8003b7e:	9319      	str	r3, [sp, #100]	@ 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b80:	971a      	str	r7, [sp, #104]	@ 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b82:	951b      	str	r5, [sp, #108]	@ 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b84:	951c      	str	r5, [sp, #112]	@ 0x70
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b86:	f000 fc6f 	bl	8004468 <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 8003b8a:	4e8f      	ldr	r6, [pc, #572]	@ (8003dc8 <main+0x314>)
 8003b8c:	4b8f      	ldr	r3, [pc, #572]	@ (8003dcc <main+0x318>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003b8e:	0030      	movs	r0, r6
  hi2c1.Instance = I2C1;
 8003b90:	6033      	str	r3, [r6, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8003b92:	4b8f      	ldr	r3, [pc, #572]	@ (8003dd0 <main+0x31c>)
  hi2c1.Init.OwnAddress1 = 0;
 8003b94:	60b5      	str	r5, [r6, #8]
  hi2c1.Init.Timing = 0x2000090E;
 8003b96:	6073      	str	r3, [r6, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b98:	60f7      	str	r7, [r6, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003b9a:	6135      	str	r5, [r6, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003b9c:	6175      	str	r5, [r6, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003b9e:	61b5      	str	r5, [r6, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003ba0:	61f5      	str	r5, [r6, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003ba2:	6235      	str	r5, [r6, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003ba4:	f000 fef2 	bl	800498c <HAL_I2C_Init>
 8003ba8:	2800      	cmp	r0, #0
 8003baa:	d001      	beq.n	8003bb0 <main+0xfc>
 8003bac:	b672      	cpsid	i
  while (1)
 8003bae:	e7fe      	b.n	8003bae <main+0xfa>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	0030      	movs	r0, r6
 8003bb4:	f001 f8e8 	bl	8004d88 <HAL_I2CEx_ConfigAnalogFilter>
 8003bb8:	1e01      	subs	r1, r0, #0
 8003bba:	d001      	beq.n	8003bc0 <main+0x10c>
 8003bbc:	b672      	cpsid	i
  while (1)
 8003bbe:	e7fe      	b.n	8003bbe <main+0x10a>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003bc0:	0030      	movs	r0, r6
 8003bc2:	f001 f907 	bl	8004dd4 <HAL_I2CEx_ConfigDigitalFilter>
 8003bc6:	1e05      	subs	r5, r0, #0
 8003bc8:	d001      	beq.n	8003bce <main+0x11a>
 8003bca:	b672      	cpsid	i
  while (1)
 8003bcc:	e7fe      	b.n	8003bcc <main+0x118>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003bce:	0001      	movs	r1, r0
 8003bd0:	2210      	movs	r2, #16
 8003bd2:	a819      	add	r0, sp, #100	@ 0x64
 8003bd4:	f002 fb3a 	bl	800624c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bd8:	2208      	movs	r2, #8
 8003bda:	0029      	movs	r1, r5
 8003bdc:	a817      	add	r0, sp, #92	@ 0x5c
 8003bde:	f002 fb35 	bl	800624c <memset>
  htim1.Instance = TIM1;
 8003be2:	4f7c      	ldr	r7, [pc, #496]	@ (8003dd4 <main+0x320>)
 8003be4:	4b7c      	ldr	r3, [pc, #496]	@ (8003dd8 <main+0x324>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003be6:	0038      	movs	r0, r7
  htim1.Instance = TIM1;
 8003be8:	603b      	str	r3, [r7, #0]
  htim1.Init.Prescaler = 48-1;
 8003bea:	232f      	movs	r3, #47	@ 0x2f
 8003bec:	607b      	str	r3, [r7, #4]
  htim1.Init.Period = 0xFFFF-1;
 8003bee:	4b7b      	ldr	r3, [pc, #492]	@ (8003ddc <main+0x328>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bf0:	60bd      	str	r5, [r7, #8]
  htim1.Init.Period = 0xFFFF-1;
 8003bf2:	60fb      	str	r3, [r7, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bf4:	613d      	str	r5, [r7, #16]
  htim1.Init.RepetitionCounter = 0;
 8003bf6:	617d      	str	r5, [r7, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bf8:	61bd      	str	r5, [r7, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003bfa:	f002 f86f 	bl	8005cdc <HAL_TIM_Base_Init>
 8003bfe:	2800      	cmp	r0, #0
 8003c00:	d001      	beq.n	8003c06 <main+0x152>
 8003c02:	b672      	cpsid	i
  while (1)
 8003c04:	e7fe      	b.n	8003c04 <main+0x150>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c06:	2380      	movs	r3, #128	@ 0x80
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003c08:	0038      	movs	r0, r7
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c0a:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003c0c:	a919      	add	r1, sp, #100	@ 0x64
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c0e:	9319      	str	r3, [sp, #100]	@ 0x64
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003c10:	f001 ff66 	bl	8005ae0 <HAL_TIM_ConfigClockSource>
 8003c14:	2800      	cmp	r0, #0
 8003c16:	d001      	beq.n	8003c1c <main+0x168>
 8003c18:	b672      	cpsid	i
  while (1)
 8003c1a:	e7fe      	b.n	8003c1a <main+0x166>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c1c:	9017      	str	r0, [sp, #92]	@ 0x5c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c1e:	9018      	str	r0, [sp, #96]	@ 0x60
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003c20:	a917      	add	r1, sp, #92	@ 0x5c
 8003c22:	0038      	movs	r0, r7
 8003c24:	f002 f886 	bl	8005d34 <HAL_TIMEx_MasterConfigSynchronization>
 8003c28:	1e02      	subs	r2, r0, #0
 8003c2a:	d001      	beq.n	8003c30 <main+0x17c>
 8003c2c:	b672      	cpsid	i
  while (1)
 8003c2e:	e7fe      	b.n	8003c2e <main+0x17a>
  huart2.Instance = USART2;
 8003c30:	4b6b      	ldr	r3, [pc, #428]	@ (8003de0 <main+0x32c>)
 8003c32:	496c      	ldr	r1, [pc, #432]	@ (8003de4 <main+0x330>)
 8003c34:	0018      	movs	r0, r3
 8003c36:	6019      	str	r1, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8003c38:	2396      	movs	r3, #150	@ 0x96
 8003c3a:	021b      	lsls	r3, r3, #8
 8003c3c:	6043      	str	r3, [r0, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003c3e:	230c      	movs	r3, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003c40:	6082      	str	r2, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003c42:	60c2      	str	r2, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003c44:	6102      	str	r2, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003c46:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c48:	6182      	str	r2, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c4a:	61c2      	str	r2, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c4c:	6202      	str	r2, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c4e:	6242      	str	r2, [r0, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003c50:	f002 fa86 	bl	8006160 <HAL_UART_Init>
 8003c54:	4680      	mov	r8, r0
 8003c56:	2800      	cmp	r0, #0
 8003c58:	d001      	beq.n	8003c5e <main+0x1aa>
 8003c5a:	b672      	cpsid	i
  while (1)
 8003c5c:	e7fe      	b.n	8003c5c <main+0x1a8>
  RTC_TimeTypeDef sTime = {0};
 8003c5e:	0001      	movs	r1, r0
 8003c60:	2214      	movs	r2, #20
 8003c62:	a819      	add	r0, sp, #100	@ 0x64
 8003c64:	f002 faf2 	bl	800624c <memset>
  RTC_DateTypeDef sDate = {0};
 8003c68:	4643      	mov	r3, r8
  hrtc.Instance = RTC;
 8003c6a:	4d5f      	ldr	r5, [pc, #380]	@ (8003de8 <main+0x334>)
  RTC_DateTypeDef sDate = {0};
 8003c6c:	9317      	str	r3, [sp, #92]	@ 0x5c
  hrtc.Instance = RTC;
 8003c6e:	4b5f      	ldr	r3, [pc, #380]	@ (8003dec <main+0x338>)
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003c70:	0028      	movs	r0, r5
  hrtc.Instance = RTC;
 8003c72:	602b      	str	r3, [r5, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003c74:	4643      	mov	r3, r8
 8003c76:	606b      	str	r3, [r5, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003c78:	237f      	movs	r3, #127	@ 0x7f
 8003c7a:	60ab      	str	r3, [r5, #8]
  hrtc.Init.SynchPrediv = 255;
 8003c7c:	3380      	adds	r3, #128	@ 0x80
 8003c7e:	60eb      	str	r3, [r5, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003c80:	4643      	mov	r3, r8
 8003c82:	612b      	str	r3, [r5, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003c84:	616b      	str	r3, [r5, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003c86:	61ab      	str	r3, [r5, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003c88:	f001 fdc8 	bl	800581c <HAL_RTC_Init>
 8003c8c:	2800      	cmp	r0, #0
 8003c8e:	d001      	beq.n	8003c94 <main+0x1e0>
 8003c90:	b672      	cpsid	i
  while (1)
 8003c92:	e7fe      	b.n	8003c92 <main+0x1de>
  sTime.Hours = 0x2;
 8003c94:	4b56      	ldr	r3, [pc, #344]	@ (8003df0 <main+0x33c>)
  sTime.Seconds = 0x30;
 8003c96:	212e      	movs	r1, #46	@ 0x2e
  sTime.Hours = 0x2;
 8003c98:	aa0e      	add	r2, sp, #56	@ 0x38
 8003c9a:	8593      	strh	r3, [r2, #44]	@ 0x2c
  sTime.Seconds = 0x30;
 8003c9c:	2330      	movs	r3, #48	@ 0x30
 8003c9e:	1852      	adds	r2, r2, r1
 8003ca0:	7013      	strb	r3, [r2, #0]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003ca2:	a919      	add	r1, sp, #100	@ 0x64
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003ca4:	901c      	str	r0, [sp, #112]	@ 0x70
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003ca6:	901d      	str	r0, [sp, #116]	@ 0x74
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003ca8:	2201      	movs	r2, #1
 8003caa:	0028      	movs	r0, r5
 8003cac:	f001 fe08 	bl	80058c0 <HAL_RTC_SetTime>
 8003cb0:	2800      	cmp	r0, #0
 8003cb2:	d001      	beq.n	8003cb8 <main+0x204>
 8003cb4:	b672      	cpsid	i
  while (1)
 8003cb6:	e7fe      	b.n	8003cb6 <main+0x202>
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8003cb8:	4b4e      	ldr	r3, [pc, #312]	@ (8003df4 <main+0x340>)
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003cba:	2201      	movs	r2, #1
 8003cbc:	0028      	movs	r0, r5
 8003cbe:	a917      	add	r1, sp, #92	@ 0x5c
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8003cc0:	9317      	str	r3, [sp, #92]	@ 0x5c
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003cc2:	f001 fe7b 	bl	80059bc <HAL_RTC_SetDate>
 8003cc6:	2800      	cmp	r0, #0
 8003cc8:	d001      	beq.n	8003cce <main+0x21a>
 8003cca:	b672      	cpsid	i
  while (1)
 8003ccc:	e7fe      	b.n	8003ccc <main+0x218>
  HAL_TIM_Base_Start(&htim1);
 8003cce:	0038      	movs	r0, r7
 8003cd0:	f001 fedc 	bl	8005a8c <HAL_TIM_Base_Start>
  lcd16x2_init_4bits(GPIOA, LCD_RS_Pin, LCD_EN_Pin, GPIOA, LCD_DB4_Pin, LCD_DB5_Pin, LCD_DB6_Pin, LCD_DB7_Pin);
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	4698      	mov	r8, r3
 8003cd8:	9303      	str	r3, [sp, #12]
 8003cda:	18db      	adds	r3, r3, r3
 8003cdc:	469a      	mov	sl, r3
 8003cde:	9302      	str	r3, [sp, #8]
 8003ce0:	3306      	adds	r3, #6
 8003ce2:	9301      	str	r3, [sp, #4]
 8003ce4:	3308      	adds	r3, #8
 8003ce6:	4699      	mov	r9, r3
 8003ce8:	9300      	str	r3, [sp, #0]
 8003cea:	2390      	movs	r3, #144	@ 0x90
 8003cec:	2280      	movs	r2, #128	@ 0x80
 8003cee:	2180      	movs	r1, #128	@ 0x80
 8003cf0:	05db      	lsls	r3, r3, #23
 8003cf2:	0018      	movs	r0, r3
 8003cf4:	0112      	lsls	r2, r2, #4
 8003cf6:	0049      	lsls	r1, r1, #1
 8003cf8:	f7ff f960 	bl	8002fbc <lcd16x2_init_4bits>
  lcd16x2_cursorShow(false);
 8003cfc:	2000      	movs	r0, #0
 8003cfe:	f7ff fa11 	bl	8003124 <lcd16x2_cursorShow>
  lcd16x2_1stLine();
 8003d02:	f7ff f9ef 	bl	80030e4 <lcd16x2_1stLine>
  lcd16x2_printf("STM32 MCU BASED");
 8003d06:	483c      	ldr	r0, [pc, #240]	@ (8003df8 <main+0x344>)
 8003d08:	f7ff fa3e 	bl	8003188 <lcd16x2_printf>
  lcd16x2_2ndLine();
 8003d0c:	f7ff f9fa 	bl	8003104 <lcd16x2_2ndLine>
  lcd16x2_printf("WEATHER STATION");
 8003d10:	483a      	ldr	r0, [pc, #232]	@ (8003dfc <main+0x348>)
 8003d12:	f7ff fa39 	bl	8003188 <lcd16x2_printf>
  HAL_Delay(1000);
 8003d16:	20fa      	movs	r0, #250	@ 0xfa
 8003d18:	0080      	lsls	r0, r0, #2
 8003d1a:	f000 fb4f 	bl	80043bc <HAL_Delay>
  lcd16x2_clear();
 8003d1e:	f7ff fa1f 	bl	8003160 <lcd16x2_clear>
  lcd16x2_setCursor(0, 2);
 8003d22:	4651      	mov	r1, sl
 8003d24:	2000      	movs	r0, #0
 8003d26:	f7ff f9bf 	bl	80030a8 <lcd16x2_setCursor>
  lcd16x2_printf("DEVELOPED BY");
 8003d2a:	4835      	ldr	r0, [pc, #212]	@ (8003e00 <main+0x34c>)
 8003d2c:	f7ff fa2c 	bl	8003188 <lcd16x2_printf>
  lcd16x2_setCursor(1, 0);
 8003d30:	2100      	movs	r1, #0
 8003d32:	4640      	mov	r0, r8
 8003d34:	f7ff f9b8 	bl	80030a8 <lcd16x2_setCursor>
  lcd16x2_printf("ANDRIY HOLOVATYY");
 8003d38:	4832      	ldr	r0, [pc, #200]	@ (8003e04 <main+0x350>)
 8003d3a:	f7ff fa25 	bl	8003188 <lcd16x2_printf>
  HAL_Delay(1000);
 8003d3e:	20fa      	movs	r0, #250	@ 0xfa
 8003d40:	0080      	lsls	r0, r0, #2
 8003d42:	f000 fb3b 	bl	80043bc <HAL_Delay>
  lcd16x2_custom_char(0, temp_icon);
 8003d46:	2000      	movs	r0, #0
 8003d48:	492f      	ldr	r1, [pc, #188]	@ (8003e08 <main+0x354>)
 8003d4a:	f7ff fa4d 	bl	80031e8 <lcd16x2_custom_char>
  lcd16x2_custom_char(1, clock_icon);
 8003d4e:	492f      	ldr	r1, [pc, #188]	@ (8003e0c <main+0x358>)
 8003d50:	4640      	mov	r0, r8
 8003d52:	f7ff fa49 	bl	80031e8 <lcd16x2_custom_char>
  bmp180_init(&hi2c1);
 8003d56:	0030      	movs	r0, r6
 8003d58:	f7fe fb3e 	bl	80023d8 <bmp180_init>
  bmp180_set_oversampling(BMP180_STANDARD); //BMP180_ULTRA);
 8003d5c:	4640      	mov	r0, r8
 8003d5e:	f7fe fb41 	bl	80023e4 <bmp180_set_oversampling>
  bmp180_update_calibration_data();
 8003d62:	f7fe fb45 	bl	80023f0 <bmp180_update_calibration_data>
  dht_init(DHT_DATA_GPIO_Port, DHT_DATA_Pin, &htim1);
 8003d66:	003a      	movs	r2, r7
 8003d68:	4649      	mov	r1, r9
 8003d6a:	4816      	ldr	r0, [pc, #88]	@ (8003dc4 <main+0x310>)
 8003d6c:	f7fe feba 	bl	8002ae4 <dht_init>
  bool flag_weather_date = 0;
 8003d70:	2300      	movs	r3, #0
 8003d72:	9304      	str	r3, [sp, #16]
 8003d74:	4b26      	ldr	r3, [pc, #152]	@ (8003e10 <main+0x35c>)
 8003d76:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003d78:	4b26      	ldr	r3, [pc, #152]	@ (8003e14 <main+0x360>)
 8003d7a:	9305      	str	r3, [sp, #20]
 8003d7c:	4b26      	ldr	r3, [pc, #152]	@ (8003e18 <main+0x364>)
 8003d7e:	9306      	str	r3, [sp, #24]
 8003d80:	4b26      	ldr	r3, [pc, #152]	@ (8003e1c <main+0x368>)
 8003d82:	9310      	str	r3, [sp, #64]	@ 0x40
 8003d84:	4b26      	ldr	r3, [pc, #152]	@ (8003e20 <main+0x36c>)
 8003d86:	4698      	mov	r8, r3
 8003d88:	4b26      	ldr	r3, [pc, #152]	@ (8003e24 <main+0x370>)
 8003d8a:	4646      	mov	r6, r8
 8003d8c:	9311      	str	r3, [sp, #68]	@ 0x44
 8003d8e:	4b26      	ldr	r3, [pc, #152]	@ (8003e28 <main+0x374>)
 8003d90:	46a8      	mov	r8, r5
 8003d92:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d94:	4b25      	ldr	r3, [pc, #148]	@ (8003e2c <main+0x378>)
 8003d96:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003d98:	4b25      	ldr	r3, [pc, #148]	@ (8003e30 <main+0x37c>)
 8003d9a:	930c      	str	r3, [sp, #48]	@ 0x30
 8003d9c:	4b25      	ldr	r3, [pc, #148]	@ (8003e34 <main+0x380>)
 8003d9e:	469a      	mov	sl, r3
 8003da0:	4b25      	ldr	r3, [pc, #148]	@ (8003e38 <main+0x384>)
 8003da2:	4655      	mov	r5, sl
 8003da4:	4699      	mov	r9, r3
 8003da6:	4b25      	ldr	r3, [pc, #148]	@ (8003e3c <main+0x388>)
 8003da8:	464f      	mov	r7, r9
 8003daa:	930d      	str	r3, [sp, #52]	@ 0x34
 8003dac:	4b24      	ldr	r3, [pc, #144]	@ (8003e40 <main+0x38c>)
 8003dae:	930e      	str	r3, [sp, #56]	@ 0x38
 8003db0:	4b24      	ldr	r3, [pc, #144]	@ (8003e44 <main+0x390>)
 8003db2:	930a      	str	r3, [sp, #40]	@ 0x28
 8003db4:	e0f9      	b.n	8003faa <main+0x4f6>
 8003db6:	46c0      	nop			@ (mov r8, r8)
 8003db8:	08007068 	.word	0x08007068
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	0000091b 	.word	0x0000091b
 8003dc4:	48000400 	.word	0x48000400
 8003dc8:	200002f0 	.word	0x200002f0
 8003dcc:	40005400 	.word	0x40005400
 8003dd0:	2000090e 	.word	0x2000090e
 8003dd4:	20000288 	.word	0x20000288
 8003dd8:	40012c00 	.word	0x40012c00
 8003ddc:	0000fffe 	.word	0x0000fffe
 8003de0:	20000200 	.word	0x20000200
 8003de4:	40004400 	.word	0x40004400
 8003de8:	200002d0 	.word	0x200002d0
 8003dec:	40002800 	.word	0x40002800
 8003df0:	00004002 	.word	0x00004002
 8003df4:	24040506 	.word	0x24040506
 8003df8:	08007170 	.word	0x08007170
 8003dfc:	08007180 	.word	0x08007180
 8003e00:	08007190 	.word	0x08007190
 8003e04:	080071a0 	.word	0x080071a0
 8003e08:	20000028 	.word	0x20000028
 8003e0c:	20000020 	.word	0x20000020
 8003e10:	20000030 	.word	0x20000030
 8003e14:	200001fc 	.word	0x200001fc
 8003e18:	20000044 	.word	0x20000044
 8003e1c:	080071b4 	.word	0x080071b4
 8003e20:	2000011c 	.word	0x2000011c
 8003e24:	20000034 	.word	0x20000034
 8003e28:	080071c0 	.word	0x080071c0
 8003e2c:	080071c8 	.word	0x080071c8
 8003e30:	080071cc 	.word	0x080071cc
 8003e34:	200001e4 	.word	0x200001e4
 8003e38:	200001f8 	.word	0x200001f8
 8003e3c:	080071d4 	.word	0x080071d4
 8003e40:	20000004 	.word	0x20000004
 8003e44:	080071e8 	.word	0x080071e8
		bmp180_temperature = bmp180_get_temperature();
 8003e48:	f7fe fcfe 	bl	8002848 <bmp180_get_temperature>
 8003e4c:	4683      	mov	fp, r0
		bmp180_pressure = bmp180_get_pressure();
 8003e4e:	f7fe fd09 	bl	8002864 <bmp180_get_pressure>
		dht_read(&dht_humidity, &dht_temperature);
 8003e52:	a912      	add	r1, sp, #72	@ 0x48
		bmp180_pressure = bmp180_get_pressure();
 8003e54:	4681      	mov	r9, r0
		dht_read(&dht_humidity, &dht_temperature);
 8003e56:	a813      	add	r0, sp, #76	@ 0x4c
 8003e58:	f7fe fefa 	bl	8002c50 <dht_read>
		float dew_point = dht_calc_dewpoint(&dht_humidity, &dht_temperature);
 8003e5c:	a912      	add	r1, sp, #72	@ 0x48
 8003e5e:	a813      	add	r0, sp, #76	@ 0x4c
 8003e60:	f7fe ff3e 	bl	8002ce0 <dht_calc_dewpoint>
		switch (pInd)
 8003e64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
		float dew_point = dht_calc_dewpoint(&dht_humidity, &dht_temperature);
 8003e66:	4682      	mov	sl, r0
		switch (pInd)
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	b25b      	sxtb	r3, r3
 8003e6c:	9307      	str	r3, [sp, #28]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d100      	bne.n	8003e74 <main+0x3c0>
 8003e72:	e0d9      	b.n	8004028 <main+0x574>
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d109      	bne.n	8003e8c <main+0x3d8>
  				bmp180_pressure = bmp180_pressure*0.0295333727;
 8003e78:	4648      	mov	r0, r9
 8003e7a:	f7fe f995 	bl	80021a8 <__aeabi_i2d>
 8003e7e:	4a89      	ldr	r2, [pc, #548]	@ (80040a4 <main+0x5f0>)
 8003e80:	4b89      	ldr	r3, [pc, #548]	@ (80040a8 <main+0x5f4>)
 8003e82:	f7fd facf 	bl	8001424 <__aeabi_dmul>
 8003e86:	f7fe f953 	bl	8002130 <__aeabi_d2iz>
 8003e8a:	4681      	mov	r9, r0
		switch (tInd)
 8003e8c:	9b05      	ldr	r3, [sp, #20]
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	b25b      	sxtb	r3, r3
 8003e92:	9308      	str	r3, [sp, #32]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d100      	bne.n	8003e9a <main+0x3e6>
 8003e98:	e0d8      	b.n	800404c <main+0x598>
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d11d      	bne.n	8003eda <main+0x426>
  				bmp180_temperature = bmp180_temperature + 274.15;
 8003e9e:	4658      	mov	r0, fp
 8003ea0:	f7fe f9b0 	bl	8002204 <__aeabi_f2d>
 8003ea4:	4a81      	ldr	r2, [pc, #516]	@ (80040ac <main+0x5f8>)
 8003ea6:	4b82      	ldr	r3, [pc, #520]	@ (80040b0 <main+0x5fc>)
 8003ea8:	f7fc fb14 	bl	80004d4 <__aeabi_dadd>
 8003eac:	f7fe f9f2 	bl	8002294 <__aeabi_d2f>
 8003eb0:	4683      	mov	fp, r0
  				dht_temperature = dht_temperature + 274.15;
 8003eb2:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8003eb4:	f7fe f9a6 	bl	8002204 <__aeabi_f2d>
 8003eb8:	4a7c      	ldr	r2, [pc, #496]	@ (80040ac <main+0x5f8>)
 8003eba:	4b7d      	ldr	r3, [pc, #500]	@ (80040b0 <main+0x5fc>)
 8003ebc:	f7fc fb0a 	bl	80004d4 <__aeabi_dadd>
 8003ec0:	f7fe f9e8 	bl	8002294 <__aeabi_d2f>
 8003ec4:	9012      	str	r0, [sp, #72]	@ 0x48
  				dew_point = dew_point + 274.15;
 8003ec6:	4650      	mov	r0, sl
 8003ec8:	f7fe f99c 	bl	8002204 <__aeabi_f2d>
 8003ecc:	4a77      	ldr	r2, [pc, #476]	@ (80040ac <main+0x5f8>)
 8003ece:	4b78      	ldr	r3, [pc, #480]	@ (80040b0 <main+0x5fc>)
 8003ed0:	f7fc fb00 	bl	80004d4 <__aeabi_dadd>
 8003ed4:	f7fe f9de 	bl	8002294 <__aeabi_d2f>
 8003ed8:	4682      	mov	sl, r0
		sprintf(buffer, " %d%s %d %s", (int) bmp180_temperature, temp_units_2[tInd], (int) bmp180_pressure/100, pres_units[pInd]);
 8003eda:	9b08      	ldr	r3, [sp, #32]
 8003edc:	4658      	mov	r0, fp
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	9308      	str	r3, [sp, #32]
 8003ee2:	f7fc fad7 	bl	8000494 <__aeabi_f2iz>
 8003ee6:	9b07      	ldr	r3, [sp, #28]
 8003ee8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	58d3      	ldr	r3, [r2, r3]
 8003eee:	4683      	mov	fp, r0
 8003ef0:	2164      	movs	r1, #100	@ 0x64
 8003ef2:	4648      	mov	r0, r9
 8003ef4:	9301      	str	r3, [sp, #4]
 8003ef6:	f7fc f9a3 	bl	8000240 <__divsi3>
 8003efa:	9908      	ldr	r1, [sp, #32]
 8003efc:	9b06      	ldr	r3, [sp, #24]
 8003efe:	9000      	str	r0, [sp, #0]
 8003f00:	465a      	mov	r2, fp
 8003f02:	585b      	ldr	r3, [r3, r1]
 8003f04:	0030      	movs	r0, r6
 8003f06:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8003f08:	f002 f95e 	bl	80061c8 <siprintf>
		lcd16x2_clear();
 8003f0c:	f7ff f928 	bl	8003160 <lcd16x2_clear>
		lcd16x2_1stLine();
 8003f10:	f7ff f8e8 	bl	80030e4 <lcd16x2_1stLine>
		lcd16x2_writeData((uint8_t)0);
 8003f14:	2000      	movs	r0, #0
 8003f16:	f7ff f83f 	bl	8002f98 <lcd16x2_writeData>
		lcd16x2_printf(buffer);
 8003f1a:	0030      	movs	r0, r6
 8003f1c:	f7ff f934 	bl	8003188 <lcd16x2_printf>
		sprintf(buffer, "%d%s %d", (int) dht_temperature, temp_units_2[tInd], (int) dht_humidity);
 8003f20:	2300      	movs	r3, #0
 8003f22:	9a05      	ldr	r2, [sp, #20]
 8003f24:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8003f26:	56d3      	ldrsb	r3, [r2, r3]
 8003f28:	0099      	lsls	r1, r3, #2
 8003f2a:	468b      	mov	fp, r1
 8003f2c:	f7fc fab2 	bl	8000494 <__aeabi_f2iz>
 8003f30:	4681      	mov	r9, r0
 8003f32:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8003f34:	f7fc faae 	bl	8000494 <__aeabi_f2iz>
 8003f38:	4659      	mov	r1, fp
 8003f3a:	9b06      	ldr	r3, [sp, #24]
 8003f3c:	9000      	str	r0, [sp, #0]
 8003f3e:	464a      	mov	r2, r9
 8003f40:	585b      	ldr	r3, [r3, r1]
 8003f42:	0030      	movs	r0, r6
 8003f44:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003f46:	f002 f93f 	bl	80061c8 <siprintf>
		lcd16x2_2ndLine();
 8003f4a:	f7ff f8db 	bl	8003104 <lcd16x2_2ndLine>
		lcd16x2_printf(buffer);
 8003f4e:	0030      	movs	r0, r6
 8003f50:	f7ff f91a 	bl	8003188 <lcd16x2_printf>
		lcd16x2_printf("%% ");
 8003f54:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8003f56:	f7ff f917 	bl	8003188 <lcd16x2_printf>
		sprintf(buffer, "DP:%d%s", (int) dew_point, temp_units_2[tInd]);
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	9a05      	ldr	r2, [sp, #20]
 8003f5e:	4650      	mov	r0, sl
 8003f60:	56d3      	ldrsb	r3, [r2, r3]
 8003f62:	009a      	lsls	r2, r3, #2
 8003f64:	4691      	mov	r9, r2
 8003f66:	f7fc fa95 	bl	8000494 <__aeabi_f2iz>
 8003f6a:	4649      	mov	r1, r9
 8003f6c:	9b06      	ldr	r3, [sp, #24]
 8003f6e:	0002      	movs	r2, r0
 8003f70:	585b      	ldr	r3, [r3, r1]
 8003f72:	0030      	movs	r0, r6
 8003f74:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8003f76:	f002 f927 	bl	80061c8 <siprintf>
		lcd16x2_printf(buffer);
 8003f7a:	0030      	movs	r0, r6
 8003f7c:	f7ff f904 	bl	8003188 <lcd16x2_printf>
	 if (HAL_GPIO_ReadPin(MENU_BTN_GPIO_Port, MENU_BTN_Pin) == GPIO_PIN_SET)
 8003f80:	2101      	movs	r1, #1
 8003f82:	484c      	ldr	r0, [pc, #304]	@ (80040b4 <main+0x600>)
 8003f84:	f000 fb66 	bl	8004654 <HAL_GPIO_ReadPin>
 8003f88:	2801      	cmp	r0, #1
 8003f8a:	d05c      	beq.n	8004046 <main+0x592>
	 if (HAL_GPIO_ReadPin(EXIT_BTN_GPIO_Port, EXIT_BTN_Pin) == GPIO_PIN_SET)
 8003f8c:	2090      	movs	r0, #144	@ 0x90
 8003f8e:	2180      	movs	r1, #128	@ 0x80
 8003f90:	05c0      	lsls	r0, r0, #23
 8003f92:	f000 fb5f 	bl	8004654 <HAL_GPIO_ReadPin>
 8003f96:	2801      	cmp	r0, #1
 8003f98:	d103      	bne.n	8003fa2 <main+0x4ee>
	if (!flag_weather_date)
 8003f9a:	9b04      	ldr	r3, [sp, #16]
 8003f9c:	4058      	eors	r0, r3
 8003f9e:	b2c3      	uxtb	r3, r0
 8003fa0:	9304      	str	r3, [sp, #16]
	 HAL_Delay(700);
 8003fa2:	20af      	movs	r0, #175	@ 0xaf
 8003fa4:	0080      	lsls	r0, r0, #2
 8003fa6:	f000 fa09 	bl	80043bc <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8003faa:	2108      	movs	r1, #8
 8003fac:	4841      	ldr	r0, [pc, #260]	@ (80040b4 <main+0x600>)
 8003fae:	f000 fb5d 	bl	800466c <HAL_GPIO_TogglePin>
	if (!flag_weather_date)
 8003fb2:	9b04      	ldr	r3, [sp, #16]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d100      	bne.n	8003fba <main+0x506>
 8003fb8:	e746      	b.n	8003e48 <main+0x394>
		 HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8003fba:	0029      	movs	r1, r5
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	4640      	mov	r0, r8
 8003fc0:	f001 fb74 	bl	80056ac <HAL_RTC_GetTime>
		 HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8003fc4:	0039      	movs	r1, r7
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	4640      	mov	r0, r8
 8003fca:	f001 fbab 	bl	8005724 <HAL_RTC_GetDate>
		 lcd16x2_clear();
 8003fce:	f7ff f8c7 	bl	8003160 <lcd16x2_clear>
		 lcd16x2_1stLine();
 8003fd2:	f7ff f887 	bl	80030e4 <lcd16x2_1stLine>
		 lcd16x2_writeData((uint8_t)1);
 8003fd6:	2001      	movs	r0, #1
 8003fd8:	f7fe ffde 	bl	8002f98 <lcd16x2_writeData>
		 sprintf(buffer, " %02d:%02d:%02d %s", rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds, days_of_week[rtc_date.WeekDay]);
 8003fdc:	7839      	ldrb	r1, [r7, #0]
 8003fde:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8003fe0:	0089      	lsls	r1, r1, #2
 8003fe2:	5841      	ldr	r1, [r0, r1]
 8003fe4:	786b      	ldrb	r3, [r5, #1]
 8003fe6:	782a      	ldrb	r2, [r5, #0]
 8003fe8:	9101      	str	r1, [sp, #4]
 8003fea:	78a9      	ldrb	r1, [r5, #2]
 8003fec:	0030      	movs	r0, r6
 8003fee:	9100      	str	r1, [sp, #0]
 8003ff0:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003ff2:	f002 f8e9 	bl	80061c8 <siprintf>
		 lcd16x2_printf(buffer);
 8003ff6:	0030      	movs	r0, r6
 8003ff8:	f7ff f8c6 	bl	8003188 <lcd16x2_printf>
		 lcd16x2_2ndLine();
 8003ffc:	f7ff f882 	bl	8003104 <lcd16x2_2ndLine>
		 sprintf(buffer, "%02d/%02d/%d %s", rtc_date.Date, rtc_date.Month, 2000 + rtc_date.Year, months[rtc_date.Month-1]);
 8004000:	20fa      	movs	r0, #250	@ 0xfa
 8004002:	00c0      	lsls	r0, r0, #3
 8004004:	4684      	mov	ip, r0
 8004006:	787b      	ldrb	r3, [r7, #1]
 8004008:	78ba      	ldrb	r2, [r7, #2]
 800400a:	1e59      	subs	r1, r3, #1
 800400c:	0089      	lsls	r1, r1, #2
 800400e:	5861      	ldr	r1, [r4, r1]
 8004010:	0030      	movs	r0, r6
 8004012:	9101      	str	r1, [sp, #4]
 8004014:	78f9      	ldrb	r1, [r7, #3]
 8004016:	4461      	add	r1, ip
 8004018:	9100      	str	r1, [sp, #0]
 800401a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800401c:	f002 f8d4 	bl	80061c8 <siprintf>
		 lcd16x2_printf(buffer);
 8004020:	0030      	movs	r0, r6
 8004022:	f7ff f8b1 	bl	8003188 <lcd16x2_printf>
 8004026:	e7ab      	b.n	8003f80 <main+0x4cc>
  				bmp180_pressure = bmp180_pressure * 0.0295333727*25.399999705;
 8004028:	4648      	mov	r0, r9
 800402a:	f7fe f8bd 	bl	80021a8 <__aeabi_i2d>
 800402e:	4a1d      	ldr	r2, [pc, #116]	@ (80040a4 <main+0x5f0>)
 8004030:	4b1d      	ldr	r3, [pc, #116]	@ (80040a8 <main+0x5f4>)
 8004032:	f7fd f9f7 	bl	8001424 <__aeabi_dmul>
 8004036:	4a20      	ldr	r2, [pc, #128]	@ (80040b8 <main+0x604>)
 8004038:	4b20      	ldr	r3, [pc, #128]	@ (80040bc <main+0x608>)
 800403a:	f7fd f9f3 	bl	8001424 <__aeabi_dmul>
 800403e:	f7fe f877 	bl	8002130 <__aeabi_d2iz>
 8004042:	4681      	mov	r9, r0
  				break;
 8004044:	e722      	b.n	8003e8c <main+0x3d8>
	   main_menu();
 8004046:	f7ff fc4f 	bl	80038e8 <main_menu>
 800404a:	e79f      	b.n	8003f8c <main+0x4d8>
  				bmp180_temperature = (9.0/5.0)*bmp180_temperature + 32.0;
 800404c:	4658      	mov	r0, fp
 800404e:	f7fe f8d9 	bl	8002204 <__aeabi_f2d>
 8004052:	4a1b      	ldr	r2, [pc, #108]	@ (80040c0 <main+0x60c>)
 8004054:	4b1b      	ldr	r3, [pc, #108]	@ (80040c4 <main+0x610>)
 8004056:	f7fd f9e5 	bl	8001424 <__aeabi_dmul>
 800405a:	2200      	movs	r2, #0
 800405c:	4b1a      	ldr	r3, [pc, #104]	@ (80040c8 <main+0x614>)
 800405e:	f7fc fa39 	bl	80004d4 <__aeabi_dadd>
 8004062:	f7fe f917 	bl	8002294 <__aeabi_d2f>
 8004066:	4683      	mov	fp, r0
  				dht_temperature = (9.0/5.0)*dht_temperature + 32.0;
 8004068:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800406a:	f7fe f8cb 	bl	8002204 <__aeabi_f2d>
 800406e:	4a14      	ldr	r2, [pc, #80]	@ (80040c0 <main+0x60c>)
 8004070:	4b14      	ldr	r3, [pc, #80]	@ (80040c4 <main+0x610>)
 8004072:	f7fd f9d7 	bl	8001424 <__aeabi_dmul>
 8004076:	2200      	movs	r2, #0
 8004078:	4b13      	ldr	r3, [pc, #76]	@ (80040c8 <main+0x614>)
 800407a:	f7fc fa2b 	bl	80004d4 <__aeabi_dadd>
 800407e:	f7fe f909 	bl	8002294 <__aeabi_d2f>
 8004082:	9012      	str	r0, [sp, #72]	@ 0x48
  				dew_point = (9.0/5.0)*dew_point + 32.0;
 8004084:	4650      	mov	r0, sl
 8004086:	f7fe f8bd 	bl	8002204 <__aeabi_f2d>
 800408a:	4a0d      	ldr	r2, [pc, #52]	@ (80040c0 <main+0x60c>)
 800408c:	4b0d      	ldr	r3, [pc, #52]	@ (80040c4 <main+0x610>)
 800408e:	f7fd f9c9 	bl	8001424 <__aeabi_dmul>
 8004092:	2200      	movs	r2, #0
 8004094:	4b0c      	ldr	r3, [pc, #48]	@ (80040c8 <main+0x614>)
 8004096:	f7fc fa1d 	bl	80004d4 <__aeabi_dadd>
 800409a:	f7fe f8fb 	bl	8002294 <__aeabi_d2f>
 800409e:	4682      	mov	sl, r0
  				break;
 80040a0:	e71b      	b.n	8003eda <main+0x426>
 80040a2:	46c0      	nop			@ (mov r8, r8)
 80040a4:	178c5e7f 	.word	0x178c5e7f
 80040a8:	3f9e3dff 	.word	0x3f9e3dff
 80040ac:	66666666 	.word	0x66666666
 80040b0:	40712266 	.word	0x40712266
 80040b4:	48000400 	.word	0x48000400
 80040b8:	61736278 	.word	0x61736278
 80040bc:	40396666 	.word	0x40396666
 80040c0:	cccccccd 	.word	0xcccccccd
 80040c4:	3ffccccc 	.word	0x3ffccccc
 80040c8:	40400000 	.word	0x40400000

080040cc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040cc:	2201      	movs	r2, #1
 80040ce:	4b0a      	ldr	r3, [pc, #40]	@ (80040f8 <HAL_MspInit+0x2c>)
{
 80040d0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040d2:	6999      	ldr	r1, [r3, #24]
 80040d4:	4311      	orrs	r1, r2
 80040d6:	6199      	str	r1, [r3, #24]
 80040d8:	6999      	ldr	r1, [r3, #24]
 80040da:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 80040dc:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040de:	9200      	str	r2, [sp, #0]
 80040e0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80040e2:	69da      	ldr	r2, [r3, #28]
 80040e4:	0549      	lsls	r1, r1, #21
 80040e6:	430a      	orrs	r2, r1
 80040e8:	61da      	str	r2, [r3, #28]
 80040ea:	69db      	ldr	r3, [r3, #28]
 80040ec:	400b      	ands	r3, r1
 80040ee:	9301      	str	r3, [sp, #4]
 80040f0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80040f2:	b002      	add	sp, #8
 80040f4:	4770      	bx	lr
 80040f6:	46c0      	nop			@ (mov r8, r8)
 80040f8:	40021000 	.word	0x40021000

080040fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80040fc:	b530      	push	{r4, r5, lr}
 80040fe:	0004      	movs	r4, r0
 8004100:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004102:	2214      	movs	r2, #20
 8004104:	2100      	movs	r1, #0
 8004106:	a804      	add	r0, sp, #16
 8004108:	f002 f8a0 	bl	800624c <memset>
  if(hi2c->Instance==I2C1)
 800410c:	4b1e      	ldr	r3, [pc, #120]	@ (8004188 <HAL_I2C_MspInit+0x8c>)
 800410e:	6822      	ldr	r2, [r4, #0]
 8004110:	429a      	cmp	r2, r3
 8004112:	d001      	beq.n	8004118 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004114:	b00b      	add	sp, #44	@ 0x2c
 8004116:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004118:	2280      	movs	r2, #128	@ 0x80
 800411a:	4c1c      	ldr	r4, [pc, #112]	@ (800418c <HAL_I2C_MspInit+0x90>)
 800411c:	03d2      	lsls	r2, r2, #15
 800411e:	6963      	ldr	r3, [r4, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004120:	2503      	movs	r5, #3
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004122:	4313      	orrs	r3, r2
 8004124:	6163      	str	r3, [r4, #20]
 8004126:	6963      	ldr	r3, [r4, #20]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004128:	4819      	ldr	r0, [pc, #100]	@ (8004190 <HAL_I2C_MspInit+0x94>)
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800412a:	4013      	ands	r3, r2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800412c:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800412e:	9301      	str	r3, [sp, #4]
 8004130:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004132:	6963      	ldr	r3, [r4, #20]
 8004134:	0292      	lsls	r2, r2, #10
 8004136:	4313      	orrs	r3, r2
 8004138:	6163      	str	r3, [r4, #20]
 800413a:	6963      	ldr	r3, [r4, #20]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800413c:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800413e:	4013      	ands	r3, r2
 8004140:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004142:	2202      	movs	r2, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004144:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004146:	2312      	movs	r3, #18
 8004148:	9204      	str	r2, [sp, #16]
 800414a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800414c:	2301      	movs	r3, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800414e:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8004150:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004152:	f000 f989 	bl	8004468 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004156:	2380      	movs	r3, #128	@ 0x80
 8004158:	00db      	lsls	r3, r3, #3
 800415a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800415c:	2312      	movs	r3, #18
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800415e:	2090      	movs	r0, #144	@ 0x90
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004160:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004162:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004164:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004166:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004168:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800416a:	3304      	adds	r3, #4
 800416c:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800416e:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004170:	f000 f97a 	bl	8004468 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004174:	2280      	movs	r2, #128	@ 0x80
 8004176:	69e3      	ldr	r3, [r4, #28]
 8004178:	0392      	lsls	r2, r2, #14
 800417a:	4313      	orrs	r3, r2
 800417c:	61e3      	str	r3, [r4, #28]
 800417e:	69e3      	ldr	r3, [r4, #28]
 8004180:	4013      	ands	r3, r2
 8004182:	9303      	str	r3, [sp, #12]
 8004184:	9b03      	ldr	r3, [sp, #12]
}
 8004186:	e7c5      	b.n	8004114 <HAL_I2C_MspInit+0x18>
 8004188:	40005400 	.word	0x40005400
 800418c:	40021000 	.word	0x40021000
 8004190:	48001400 	.word	0x48001400

08004194 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8004194:	4b05      	ldr	r3, [pc, #20]	@ (80041ac <HAL_RTC_MspInit+0x18>)
 8004196:	6802      	ldr	r2, [r0, #0]
 8004198:	429a      	cmp	r2, r3
 800419a:	d000      	beq.n	800419e <HAL_RTC_MspInit+0xa>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800419c:	4770      	bx	lr
    __HAL_RCC_RTC_ENABLE();
 800419e:	2380      	movs	r3, #128	@ 0x80
 80041a0:	4a03      	ldr	r2, [pc, #12]	@ (80041b0 <HAL_RTC_MspInit+0x1c>)
 80041a2:	021b      	lsls	r3, r3, #8
 80041a4:	6a11      	ldr	r1, [r2, #32]
 80041a6:	430b      	orrs	r3, r1
 80041a8:	6213      	str	r3, [r2, #32]
}
 80041aa:	e7f7      	b.n	800419c <HAL_RTC_MspInit+0x8>
 80041ac:	40002800 	.word	0x40002800
 80041b0:	40021000 	.word	0x40021000

080041b4 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 80041b4:	4b08      	ldr	r3, [pc, #32]	@ (80041d8 <HAL_TIM_Base_MspInit+0x24>)
 80041b6:	6802      	ldr	r2, [r0, #0]
{
 80041b8:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM1)
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d001      	beq.n	80041c2 <HAL_TIM_Base_MspInit+0xe>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80041be:	b002      	add	sp, #8
 80041c0:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 80041c2:	2180      	movs	r1, #128	@ 0x80
 80041c4:	4b05      	ldr	r3, [pc, #20]	@ (80041dc <HAL_TIM_Base_MspInit+0x28>)
 80041c6:	0109      	lsls	r1, r1, #4
 80041c8:	699a      	ldr	r2, [r3, #24]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	619a      	str	r2, [r3, #24]
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	400b      	ands	r3, r1
 80041d2:	9301      	str	r3, [sp, #4]
 80041d4:	9b01      	ldr	r3, [sp, #4]
}
 80041d6:	e7f2      	b.n	80041be <HAL_TIM_Base_MspInit+0xa>
 80041d8:	40012c00 	.word	0x40012c00
 80041dc:	40021000 	.word	0x40021000

080041e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80041e0:	b510      	push	{r4, lr}
 80041e2:	0004      	movs	r4, r0
 80041e4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041e6:	2214      	movs	r2, #20
 80041e8:	2100      	movs	r1, #0
 80041ea:	a802      	add	r0, sp, #8
 80041ec:	f002 f82e 	bl	800624c <memset>
  if(huart->Instance==USART2)
 80041f0:	4b12      	ldr	r3, [pc, #72]	@ (800423c <HAL_UART_MspInit+0x5c>)
 80041f2:	6822      	ldr	r2, [r4, #0]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d001      	beq.n	80041fc <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80041f8:	b008      	add	sp, #32
 80041fa:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 80041fc:	2280      	movs	r2, #128	@ 0x80
 80041fe:	4b10      	ldr	r3, [pc, #64]	@ (8004240 <HAL_UART_MspInit+0x60>)
 8004200:	0292      	lsls	r2, r2, #10
 8004202:	69d9      	ldr	r1, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004204:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_USART2_CLK_ENABLE();
 8004206:	4311      	orrs	r1, r2
 8004208:	61d9      	str	r1, [r3, #28]
 800420a:	69d9      	ldr	r1, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800420c:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_ENABLE();
 800420e:	4011      	ands	r1, r2
 8004210:	9100      	str	r1, [sp, #0]
 8004212:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004214:	6959      	ldr	r1, [r3, #20]
 8004216:	4311      	orrs	r1, r2
 8004218:	6159      	str	r1, [r3, #20]
 800421a:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800421c:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800421e:	4013      	ands	r3, r2
 8004220:	9301      	str	r3, [sp, #4]
 8004222:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8004224:	2302      	movs	r3, #2
 8004226:	4a07      	ldr	r2, [pc, #28]	@ (8004244 <HAL_UART_MspInit+0x64>)
 8004228:	9202      	str	r2, [sp, #8]
 800422a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800422c:	2303      	movs	r3, #3
 800422e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8004230:	3b02      	subs	r3, #2
 8004232:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004234:	f000 f918 	bl	8004468 <HAL_GPIO_Init>
}
 8004238:	e7de      	b.n	80041f8 <HAL_UART_MspInit+0x18>
 800423a:	46c0      	nop			@ (mov r8, r8)
 800423c:	40004400 	.word	0x40004400
 8004240:	40021000 	.word	0x40021000
 8004244:	00008004 	.word	0x00008004

08004248 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004248:	e7fe      	b.n	8004248 <NMI_Handler>
 800424a:	46c0      	nop			@ (mov r8, r8)

0800424c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800424c:	e7fe      	b.n	800424c <HardFault_Handler>
 800424e:	46c0      	nop			@ (mov r8, r8)

08004250 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004250:	4770      	bx	lr
 8004252:	46c0      	nop			@ (mov r8, r8)

08004254 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8004254:	4770      	bx	lr
 8004256:	46c0      	nop			@ (mov r8, r8)

08004258 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004258:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800425a:	f000 f89d 	bl	8004398 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800425e:	bd10      	pop	{r4, pc}

08004260 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004260:	490c      	ldr	r1, [pc, #48]	@ (8004294 <_sbrk+0x34>)
 8004262:	4a0d      	ldr	r2, [pc, #52]	@ (8004298 <_sbrk+0x38>)
{
 8004264:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004266:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004268:	490c      	ldr	r1, [pc, #48]	@ (800429c <_sbrk+0x3c>)
{
 800426a:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 800426c:	6808      	ldr	r0, [r1, #0]
 800426e:	2800      	cmp	r0, #0
 8004270:	d004      	beq.n	800427c <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004272:	18c3      	adds	r3, r0, r3
 8004274:	4293      	cmp	r3, r2
 8004276:	d806      	bhi.n	8004286 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8004278:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 800427a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800427c:	4808      	ldr	r0, [pc, #32]	@ (80042a0 <_sbrk+0x40>)
  if (__sbrk_heap_end + incr > max_heap)
 800427e:	18c3      	adds	r3, r0, r3
    __sbrk_heap_end = &_end;
 8004280:	6008      	str	r0, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8004282:	4293      	cmp	r3, r2
 8004284:	d9f8      	bls.n	8004278 <_sbrk+0x18>
    errno = ENOMEM;
 8004286:	f001 ffe9 	bl	800625c <__errno>
 800428a:	230c      	movs	r3, #12
 800428c:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800428e:	2001      	movs	r0, #1
 8004290:	4240      	negs	r0, r0
 8004292:	e7f2      	b.n	800427a <_sbrk+0x1a>
 8004294:	00000400 	.word	0x00000400
 8004298:	20001800 	.word	0x20001800
 800429c:	20000344 	.word	0x20000344
 80042a0:	20000498 	.word	0x20000498

080042a4 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80042a4:	4770      	bx	lr
 80042a6:	46c0      	nop			@ (mov r8, r8)

080042a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80042a8:	4813      	ldr	r0, [pc, #76]	@ (80042f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80042aa:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80042ac:	f7ff fffa 	bl	80042a4 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80042b0:	4812      	ldr	r0, [pc, #72]	@ (80042fc <LoopForever+0x6>)
    LDR R1, [R0]
 80042b2:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80042b4:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80042b6:	4a12      	ldr	r2, [pc, #72]	@ (8004300 <LoopForever+0xa>)
    CMP R1, R2
 80042b8:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80042ba:	d105      	bne.n	80042c8 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80042bc:	4811      	ldr	r0, [pc, #68]	@ (8004304 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80042be:	4912      	ldr	r1, [pc, #72]	@ (8004308 <LoopForever+0x12>)
    STR R1, [R0]
 80042c0:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80042c2:	4812      	ldr	r0, [pc, #72]	@ (800430c <LoopForever+0x16>)
    LDR R1,=0x00000000
 80042c4:	4912      	ldr	r1, [pc, #72]	@ (8004310 <LoopForever+0x1a>)
    STR R1, [R0]
 80042c6:	6001      	str	r1, [r0, #0]

080042c8 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80042c8:	4812      	ldr	r0, [pc, #72]	@ (8004314 <LoopForever+0x1e>)
  ldr r1, =_edata
 80042ca:	4913      	ldr	r1, [pc, #76]	@ (8004318 <LoopForever+0x22>)
  ldr r2, =_sidata
 80042cc:	4a13      	ldr	r2, [pc, #76]	@ (800431c <LoopForever+0x26>)
  movs r3, #0
 80042ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042d0:	e002      	b.n	80042d8 <LoopCopyDataInit>

080042d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042d6:	3304      	adds	r3, #4

080042d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042dc:	d3f9      	bcc.n	80042d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042de:	4a10      	ldr	r2, [pc, #64]	@ (8004320 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80042e0:	4c10      	ldr	r4, [pc, #64]	@ (8004324 <LoopForever+0x2e>)
  movs r3, #0
 80042e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042e4:	e001      	b.n	80042ea <LoopFillZerobss>

080042e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042e8:	3204      	adds	r2, #4

080042ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042ec:	d3fb      	bcc.n	80042e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80042ee:	f001 ffbb 	bl	8006268 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80042f2:	f7ff fbdf 	bl	8003ab4 <main>

080042f6 <LoopForever>:

LoopForever:
    b LoopForever
 80042f6:	e7fe      	b.n	80042f6 <LoopForever>
  ldr   r0, =_estack
 80042f8:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 80042fc:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8004300:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8004304:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8004308:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 800430c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8004310:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8004314:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004318:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 800431c:	0800734c 	.word	0x0800734c
  ldr r2, =_sbss
 8004320:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8004324:	20000494 	.word	0x20000494

08004328 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004328:	e7fe      	b.n	8004328 <ADC1_IRQHandler>
	...

0800432c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800432c:	b570      	push	{r4, r5, r6, lr}
 800432e:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004330:	20fa      	movs	r0, #250	@ 0xfa
 8004332:	4b0e      	ldr	r3, [pc, #56]	@ (800436c <HAL_InitTick+0x40>)
 8004334:	0080      	lsls	r0, r0, #2
 8004336:	7819      	ldrb	r1, [r3, #0]
 8004338:	f7fb fef8 	bl	800012c <__udivsi3>
 800433c:	4d0c      	ldr	r5, [pc, #48]	@ (8004370 <HAL_InitTick+0x44>)
 800433e:	0001      	movs	r1, r0
 8004340:	6828      	ldr	r0, [r5, #0]
 8004342:	f7fb fef3 	bl	800012c <__udivsi3>
 8004346:	f000 f875 	bl	8004434 <HAL_SYSTICK_Config>
 800434a:	2800      	cmp	r0, #0
 800434c:	d10c      	bne.n	8004368 <HAL_InitTick+0x3c>
  {
    return HAL_ERROR;
 800434e:	3001      	adds	r0, #1
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004350:	2c03      	cmp	r4, #3
 8004352:	d900      	bls.n	8004356 <HAL_InitTick+0x2a>
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8004354:	bd70      	pop	{r4, r5, r6, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004356:	3802      	subs	r0, #2
 8004358:	2200      	movs	r2, #0
 800435a:	0021      	movs	r1, r4
 800435c:	f000 f840 	bl	80043e0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004360:	4b04      	ldr	r3, [pc, #16]	@ (8004374 <HAL_InitTick+0x48>)
 8004362:	2000      	movs	r0, #0
 8004364:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8004366:	e7f5      	b.n	8004354 <HAL_InitTick+0x28>
    return HAL_ERROR;
 8004368:	2001      	movs	r0, #1
 800436a:	e7f3      	b.n	8004354 <HAL_InitTick+0x28>
 800436c:	20000054 	.word	0x20000054
 8004370:	20000050 	.word	0x20000050
 8004374:	20000058 	.word	0x20000058

08004378 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004378:	2110      	movs	r1, #16
 800437a:	4a06      	ldr	r2, [pc, #24]	@ (8004394 <HAL_Init+0x1c>)
{
 800437c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800437e:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8004380:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004382:	430b      	orrs	r3, r1
 8004384:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8004386:	f7ff ffd1 	bl	800432c <HAL_InitTick>
  HAL_MspInit();
 800438a:	f7ff fe9f 	bl	80040cc <HAL_MspInit>
}
 800438e:	2000      	movs	r0, #0
 8004390:	bd10      	pop	{r4, pc}
 8004392:	46c0      	nop			@ (mov r8, r8)
 8004394:	40022000 	.word	0x40022000

08004398 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004398:	4a03      	ldr	r2, [pc, #12]	@ (80043a8 <HAL_IncTick+0x10>)
 800439a:	4b04      	ldr	r3, [pc, #16]	@ (80043ac <HAL_IncTick+0x14>)
 800439c:	6811      	ldr	r1, [r2, #0]
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	185b      	adds	r3, r3, r1
 80043a2:	6013      	str	r3, [r2, #0]
}
 80043a4:	4770      	bx	lr
 80043a6:	46c0      	nop			@ (mov r8, r8)
 80043a8:	20000348 	.word	0x20000348
 80043ac:	20000054 	.word	0x20000054

080043b0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80043b0:	4b01      	ldr	r3, [pc, #4]	@ (80043b8 <HAL_GetTick+0x8>)
 80043b2:	6818      	ldr	r0, [r3, #0]
}
 80043b4:	4770      	bx	lr
 80043b6:	46c0      	nop			@ (mov r8, r8)
 80043b8:	20000348 	.word	0x20000348

080043bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80043bc:	b570      	push	{r4, r5, r6, lr}
 80043be:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80043c0:	f7ff fff6 	bl	80043b0 <HAL_GetTick>
 80043c4:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80043c6:	1c63      	adds	r3, r4, #1
 80043c8:	d002      	beq.n	80043d0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80043ca:	4b04      	ldr	r3, [pc, #16]	@ (80043dc <HAL_Delay+0x20>)
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80043d0:	f7ff ffee 	bl	80043b0 <HAL_GetTick>
 80043d4:	1b40      	subs	r0, r0, r5
 80043d6:	42a0      	cmp	r0, r4
 80043d8:	d3fa      	bcc.n	80043d0 <HAL_Delay+0x14>
  {
  }
}
 80043da:	bd70      	pop	{r4, r5, r6, pc}
 80043dc:	20000054 	.word	0x20000054

080043e0 <HAL_NVIC_SetPriority>:
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80043e0:	22ff      	movs	r2, #255	@ 0xff
 80043e2:	2303      	movs	r3, #3
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80043e4:	b510      	push	{r4, lr}
 80043e6:	0014      	movs	r4, r2
 80043e8:	4003      	ands	r3, r0
 80043ea:	00db      	lsls	r3, r3, #3
 80043ec:	409c      	lsls	r4, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80043ee:	0189      	lsls	r1, r1, #6
 80043f0:	400a      	ands	r2, r1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80043f2:	43e4      	mvns	r4, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80043f4:	409a      	lsls	r2, r3
  if ((int32_t)(IRQn) >= 0)
 80043f6:	2800      	cmp	r0, #0
 80043f8:	db0b      	blt.n	8004412 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80043fa:	4b0c      	ldr	r3, [pc, #48]	@ (800442c <HAL_NVIC_SetPriority+0x4c>)
 80043fc:	21c0      	movs	r1, #192	@ 0xc0
 80043fe:	469c      	mov	ip, r3
 8004400:	0880      	lsrs	r0, r0, #2
 8004402:	0080      	lsls	r0, r0, #2
 8004404:	4460      	add	r0, ip
 8004406:	0089      	lsls	r1, r1, #2
 8004408:	5843      	ldr	r3, [r0, r1]
 800440a:	4023      	ands	r3, r4
 800440c:	4313      	orrs	r3, r2
 800440e:	5043      	str	r3, [r0, r1]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8004410:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004412:	230f      	movs	r3, #15
 8004414:	4906      	ldr	r1, [pc, #24]	@ (8004430 <HAL_NVIC_SetPriority+0x50>)
 8004416:	4003      	ands	r3, r0
 8004418:	468c      	mov	ip, r1
 800441a:	3b08      	subs	r3, #8
 800441c:	089b      	lsrs	r3, r3, #2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	4463      	add	r3, ip
 8004422:	69d9      	ldr	r1, [r3, #28]
 8004424:	400c      	ands	r4, r1
 8004426:	4314      	orrs	r4, r2
 8004428:	61dc      	str	r4, [r3, #28]
 800442a:	e7f1      	b.n	8004410 <HAL_NVIC_SetPriority+0x30>
 800442c:	e000e100 	.word	0xe000e100
 8004430:	e000ed00 	.word	0xe000ed00

08004434 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004434:	2280      	movs	r2, #128	@ 0x80
 8004436:	1e43      	subs	r3, r0, #1
 8004438:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 800443a:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800443c:	4293      	cmp	r3, r2
 800443e:	d20e      	bcs.n	800445e <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004440:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004442:	4a07      	ldr	r2, [pc, #28]	@ (8004460 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004444:	4807      	ldr	r0, [pc, #28]	@ (8004464 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004446:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004448:	6a03      	ldr	r3, [r0, #32]
 800444a:	0609      	lsls	r1, r1, #24
 800444c:	021b      	lsls	r3, r3, #8
 800444e:	0a1b      	lsrs	r3, r3, #8
 8004450:	430b      	orrs	r3, r1
 8004452:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004454:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004456:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004458:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800445a:	3307      	adds	r3, #7
 800445c:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800445e:	4770      	bx	lr
 8004460:	e000e010 	.word	0xe000e010
 8004464:	e000ed00 	.word	0xe000ed00

08004468 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800446a:	46de      	mov	lr, fp
 800446c:	4657      	mov	r7, sl
 800446e:	464e      	mov	r6, r9
 8004470:	4645      	mov	r5, r8
 8004472:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004474:	680c      	ldr	r4, [r1, #0]
  uint32_t position = 0x00u;
 8004476:	2300      	movs	r3, #0
{
 8004478:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800447a:	2c00      	cmp	r4, #0
 800447c:	d06e      	beq.n	800455c <HAL_GPIO_Init+0xf4>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800447e:	4a70      	ldr	r2, [pc, #448]	@ (8004640 <HAL_GPIO_Init+0x1d8>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004480:	4e70      	ldr	r6, [pc, #448]	@ (8004644 <HAL_GPIO_Init+0x1dc>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004482:	4693      	mov	fp, r2
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004484:	9102      	str	r1, [sp, #8]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004486:	2201      	movs	r2, #1
 8004488:	409a      	lsls	r2, r3
 800448a:	4694      	mov	ip, r2
 800448c:	4022      	ands	r2, r4
 800448e:	9200      	str	r2, [sp, #0]
    if (iocurrent != 0x00u)
 8004490:	4662      	mov	r2, ip
 8004492:	4214      	tst	r4, r2
 8004494:	d05e      	beq.n	8004554 <HAL_GPIO_Init+0xec>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004496:	9902      	ldr	r1, [sp, #8]
 8004498:	005d      	lsls	r5, r3, #1
 800449a:	684a      	ldr	r2, [r1, #4]
 800449c:	4692      	mov	sl, r2
 800449e:	2203      	movs	r2, #3
 80044a0:	4651      	mov	r1, sl
 80044a2:	400a      	ands	r2, r1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80044a4:	2103      	movs	r1, #3
 80044a6:	40a9      	lsls	r1, r5
 80044a8:	43c9      	mvns	r1, r1
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80044aa:	1e57      	subs	r7, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80044ac:	9101      	str	r1, [sp, #4]
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80044ae:	2f01      	cmp	r7, #1
 80044b0:	d95b      	bls.n	800456a <HAL_GPIO_Init+0x102>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044b2:	2a03      	cmp	r2, #3
 80044b4:	d000      	beq.n	80044b8 <HAL_GPIO_Init+0x50>
 80044b6:	e0ae      	b.n	8004616 <HAL_GPIO_Init+0x1ae>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80044b8:	40aa      	lsls	r2, r5
      temp = GPIOx->MODER;
 80044ba:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80044bc:	9901      	ldr	r1, [sp, #4]
 80044be:	4039      	ands	r1, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80044c0:	430a      	orrs	r2, r1
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80044c2:	21c0      	movs	r1, #192	@ 0xc0
      GPIOx->MODER = temp;
 80044c4:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80044c6:	4652      	mov	r2, sl
 80044c8:	0289      	lsls	r1, r1, #10
 80044ca:	420a      	tst	r2, r1
 80044cc:	d042      	beq.n	8004554 <HAL_GPIO_Init+0xec>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044ce:	465a      	mov	r2, fp
 80044d0:	2101      	movs	r1, #1
 80044d2:	465d      	mov	r5, fp
 80044d4:	6992      	ldr	r2, [r2, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80044d6:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044d8:	430a      	orrs	r2, r1
 80044da:	61aa      	str	r2, [r5, #24]
 80044dc:	69aa      	ldr	r2, [r5, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80044de:	2503      	movs	r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044e0:	400a      	ands	r2, r1
 80044e2:	4959      	ldr	r1, [pc, #356]	@ (8004648 <HAL_GPIO_Init+0x1e0>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80044e4:	401d      	ands	r5, r3
 80044e6:	468c      	mov	ip, r1
 80044e8:	00ad      	lsls	r5, r5, #2
 80044ea:	40af      	lsls	r7, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044ec:	9205      	str	r2, [sp, #20]
 80044ee:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 80044f0:	089a      	lsrs	r2, r3, #2
 80044f2:	0092      	lsls	r2, r2, #2
 80044f4:	4462      	add	r2, ip
 80044f6:	6891      	ldr	r1, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80044f8:	43b9      	bics	r1, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80044fa:	2790      	movs	r7, #144	@ 0x90
 80044fc:	05ff      	lsls	r7, r7, #23
 80044fe:	42b8      	cmp	r0, r7
 8004500:	d00a      	beq.n	8004518 <HAL_GPIO_Init+0xb0>
 8004502:	4f52      	ldr	r7, [pc, #328]	@ (800464c <HAL_GPIO_Init+0x1e4>)
 8004504:	42b8      	cmp	r0, r7
 8004506:	d100      	bne.n	800450a <HAL_GPIO_Init+0xa2>
 8004508:	e092      	b.n	8004630 <HAL_GPIO_Init+0x1c8>
 800450a:	4f51      	ldr	r7, [pc, #324]	@ (8004650 <HAL_GPIO_Init+0x1e8>)
 800450c:	42b8      	cmp	r0, r7
 800450e:	d100      	bne.n	8004512 <HAL_GPIO_Init+0xaa>
 8004510:	e092      	b.n	8004638 <HAL_GPIO_Init+0x1d0>
 8004512:	2705      	movs	r7, #5
 8004514:	40af      	lsls	r7, r5
 8004516:	4339      	orrs	r1, r7
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004518:	2780      	movs	r7, #128	@ 0x80
 800451a:	4655      	mov	r5, sl
        SYSCFG->EXTICR[position >> 2u] = temp;
 800451c:	6091      	str	r1, [r2, #8]
        temp &= ~(iocurrent);
 800451e:	9900      	ldr	r1, [sp, #0]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004520:	037f      	lsls	r7, r7, #13
        temp &= ~(iocurrent);
 8004522:	43c9      	mvns	r1, r1
        temp = EXTI->RTSR;
 8004524:	68b2      	ldr	r2, [r6, #8]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004526:	423d      	tst	r5, r7
 8004528:	d000      	beq.n	800452c <HAL_GPIO_Init+0xc4>
 800452a:	e071      	b.n	8004610 <HAL_GPIO_Init+0x1a8>
        temp &= ~(iocurrent);
 800452c:	400a      	ands	r2, r1
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800452e:	4655      	mov	r5, sl
        EXTI->RTSR = temp;
 8004530:	60b2      	str	r2, [r6, #8]
        temp = EXTI->FTSR;
 8004532:	68f2      	ldr	r2, [r6, #12]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004534:	02ad      	lsls	r5, r5, #10
 8004536:	d468      	bmi.n	800460a <HAL_GPIO_Init+0x1a2>
        temp &= ~(iocurrent);
 8004538:	400a      	ands	r2, r1
        EXTI->FTSR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800453a:	4655      	mov	r5, sl
        EXTI->FTSR = temp;
 800453c:	60f2      	str	r2, [r6, #12]
        temp = EXTI->EMR;
 800453e:	6872      	ldr	r2, [r6, #4]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004540:	03ad      	lsls	r5, r5, #14
 8004542:	d45f      	bmi.n	8004604 <HAL_GPIO_Init+0x19c>
        temp &= ~(iocurrent);
 8004544:	400a      	ands	r2, r1
        }
        EXTI->EMR = temp;

        temp = EXTI->IMR;
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004546:	4655      	mov	r5, sl
        EXTI->EMR = temp;
 8004548:	6072      	str	r2, [r6, #4]
        temp = EXTI->IMR;
 800454a:	6832      	ldr	r2, [r6, #0]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800454c:	03ed      	lsls	r5, r5, #15
 800454e:	d455      	bmi.n	80045fc <HAL_GPIO_Init+0x194>
        temp &= ~(iocurrent);
 8004550:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8004552:	6032      	str	r2, [r6, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004554:	0022      	movs	r2, r4
      }
    }

    position++;
 8004556:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004558:	40da      	lsrs	r2, r3
 800455a:	d194      	bne.n	8004486 <HAL_GPIO_Init+0x1e>
  } 
}
 800455c:	b007      	add	sp, #28
 800455e:	bcf0      	pop	{r4, r5, r6, r7}
 8004560:	46bb      	mov	fp, r7
 8004562:	46b2      	mov	sl, r6
 8004564:	46a9      	mov	r9, r5
 8004566:	46a0      	mov	r8, r4
 8004568:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 800456a:	6881      	ldr	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800456c:	000f      	movs	r7, r1
 800456e:	9901      	ldr	r1, [sp, #4]
 8004570:	400f      	ands	r7, r1
 8004572:	46b9      	mov	r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004574:	9f02      	ldr	r7, [sp, #8]
 8004576:	68f9      	ldr	r1, [r7, #12]
 8004578:	000f      	movs	r7, r1
 800457a:	40af      	lsls	r7, r5
 800457c:	46b8      	mov	r8, r7
 800457e:	464f      	mov	r7, r9
 8004580:	4641      	mov	r1, r8
 8004582:	430f      	orrs	r7, r1
        GPIOx->OSPEEDR = temp;
 8004584:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8004586:	6841      	ldr	r1, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004588:	000f      	movs	r7, r1
 800458a:	4661      	mov	r1, ip
 800458c:	438f      	bics	r7, r1
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800458e:	4651      	mov	r1, sl
 8004590:	0909      	lsrs	r1, r1, #4
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004592:	46b8      	mov	r8, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004594:	000f      	movs	r7, r1
 8004596:	2101      	movs	r1, #1
 8004598:	400f      	ands	r7, r1
 800459a:	409f      	lsls	r7, r3
 800459c:	46bc      	mov	ip, r7
 800459e:	4647      	mov	r7, r8
 80045a0:	4661      	mov	r1, ip
 80045a2:	430f      	orrs	r7, r1
        GPIOx->OTYPER = temp;
 80045a4:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80045a6:	68c1      	ldr	r1, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80045a8:	000f      	movs	r7, r1
 80045aa:	9901      	ldr	r1, [sp, #4]
 80045ac:	400f      	ands	r7, r1
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80045ae:	9902      	ldr	r1, [sp, #8]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80045b0:	46b8      	mov	r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80045b2:	6889      	ldr	r1, [r1, #8]
 80045b4:	000f      	movs	r7, r1
 80045b6:	40af      	lsls	r7, r5
 80045b8:	46bc      	mov	ip, r7
 80045ba:	4647      	mov	r7, r8
 80045bc:	4661      	mov	r1, ip
 80045be:	430f      	orrs	r7, r1
        GPIOx->PUPDR = temp;
 80045c0:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045c2:	2a02      	cmp	r2, #2
 80045c4:	d000      	beq.n	80045c8 <HAL_GPIO_Init+0x160>
 80045c6:	e777      	b.n	80044b8 <HAL_GPIO_Init+0x50>
        temp = GPIOx->AFR[position >> 3u];
 80045c8:	08d9      	lsrs	r1, r3, #3
 80045ca:	0089      	lsls	r1, r1, #2
 80045cc:	468c      	mov	ip, r1
 80045ce:	4484      	add	ip, r0
 80045d0:	4661      	mov	r1, ip
 80045d2:	6a0f      	ldr	r7, [r1, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80045d4:	2107      	movs	r1, #7
 80045d6:	4019      	ands	r1, r3
 80045d8:	0089      	lsls	r1, r1, #2
 80045da:	4688      	mov	r8, r1
        temp = GPIOx->AFR[position >> 3u];
 80045dc:	9703      	str	r7, [sp, #12]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80045de:	210f      	movs	r1, #15
 80045e0:	4647      	mov	r7, r8
 80045e2:	40b9      	lsls	r1, r7
 80045e4:	9f03      	ldr	r7, [sp, #12]
 80045e6:	438f      	bics	r7, r1
 80045e8:	9703      	str	r7, [sp, #12]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80045ea:	4647      	mov	r7, r8
 80045ec:	9902      	ldr	r1, [sp, #8]
 80045ee:	6909      	ldr	r1, [r1, #16]
 80045f0:	40b9      	lsls	r1, r7
 80045f2:	9f03      	ldr	r7, [sp, #12]
 80045f4:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3u] = temp;
 80045f6:	4661      	mov	r1, ip
 80045f8:	620f      	str	r7, [r1, #32]
 80045fa:	e75d      	b.n	80044b8 <HAL_GPIO_Init+0x50>
          temp |= iocurrent;
 80045fc:	9900      	ldr	r1, [sp, #0]
 80045fe:	4311      	orrs	r1, r2
 8004600:	000a      	movs	r2, r1
 8004602:	e7a6      	b.n	8004552 <HAL_GPIO_Init+0xea>
          temp |= iocurrent;
 8004604:	9d00      	ldr	r5, [sp, #0]
 8004606:	432a      	orrs	r2, r5
 8004608:	e79d      	b.n	8004546 <HAL_GPIO_Init+0xde>
          temp |= iocurrent;
 800460a:	9d00      	ldr	r5, [sp, #0]
 800460c:	432a      	orrs	r2, r5
 800460e:	e794      	b.n	800453a <HAL_GPIO_Init+0xd2>
          temp |= iocurrent;
 8004610:	9d00      	ldr	r5, [sp, #0]
 8004612:	432a      	orrs	r2, r5
 8004614:	e78b      	b.n	800452e <HAL_GPIO_Init+0xc6>
        temp = GPIOx->PUPDR;
 8004616:	68c1      	ldr	r1, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004618:	9f01      	ldr	r7, [sp, #4]
 800461a:	4039      	ands	r1, r7
 800461c:	4688      	mov	r8, r1
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800461e:	9902      	ldr	r1, [sp, #8]
 8004620:	6889      	ldr	r1, [r1, #8]
 8004622:	40a9      	lsls	r1, r5
 8004624:	468c      	mov	ip, r1
 8004626:	4641      	mov	r1, r8
 8004628:	4667      	mov	r7, ip
 800462a:	4339      	orrs	r1, r7
        GPIOx->PUPDR = temp;
 800462c:	60c1      	str	r1, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800462e:	e743      	b.n	80044b8 <HAL_GPIO_Init+0x50>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004630:	2701      	movs	r7, #1
 8004632:	40af      	lsls	r7, r5
 8004634:	4339      	orrs	r1, r7
 8004636:	e76f      	b.n	8004518 <HAL_GPIO_Init+0xb0>
 8004638:	2702      	movs	r7, #2
 800463a:	40af      	lsls	r7, r5
 800463c:	4339      	orrs	r1, r7
 800463e:	e76b      	b.n	8004518 <HAL_GPIO_Init+0xb0>
 8004640:	40021000 	.word	0x40021000
 8004644:	40010400 	.word	0x40010400
 8004648:	40010000 	.word	0x40010000
 800464c:	48000400 	.word	0x48000400
 8004650:	48000800 	.word	0x48000800

08004654 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004654:	6900      	ldr	r0, [r0, #16]
 8004656:	4008      	ands	r0, r1
 8004658:	1e43      	subs	r3, r0, #1
 800465a:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 800465c:	b2c0      	uxtb	r0, r0
  }
 800465e:	4770      	bx	lr

08004660 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004660:	2a00      	cmp	r2, #0
 8004662:	d001      	beq.n	8004668 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004664:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004666:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004668:	6281      	str	r1, [r0, #40]	@ 0x28
}
 800466a:	e7fc      	b.n	8004666 <HAL_GPIO_WritePin+0x6>

0800466c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800466c:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800466e:	0013      	movs	r3, r2
 8004670:	400b      	ands	r3, r1
 8004672:	041b      	lsls	r3, r3, #16
 8004674:	4391      	bics	r1, r2
 8004676:	430b      	orrs	r3, r1
 8004678:	6183      	str	r3, [r0, #24]
}
 800467a:	4770      	bx	lr

0800467c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800467c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800467e:	46c6      	mov	lr, r8
 8004680:	001f      	movs	r7, r3
 8004682:	4680      	mov	r8, r0
 8004684:	000d      	movs	r5, r1
 8004686:	0016      	movs	r6, r2
 8004688:	b500      	push	{lr}
 800468a:	6803      	ldr	r3, [r0, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800468c:	e001      	b.n	8004692 <I2C_WaitOnFlagUntilTimeout+0x16>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800468e:	1c7a      	adds	r2, r7, #1
 8004690:	d10a      	bne.n	80046a8 <I2C_WaitOnFlagUntilTimeout+0x2c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004692:	699c      	ldr	r4, [r3, #24]
 8004694:	402c      	ands	r4, r5
 8004696:	1b64      	subs	r4, r4, r5
 8004698:	4262      	negs	r2, r4
 800469a:	4154      	adcs	r4, r2
 800469c:	42b4      	cmp	r4, r6
 800469e:	d0f6      	beq.n	800468e <I2C_WaitOnFlagUntilTimeout+0x12>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80046a0:	2000      	movs	r0, #0
}
 80046a2:	bc80      	pop	{r7}
 80046a4:	46b8      	mov	r8, r7
 80046a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046a8:	f7ff fe82 	bl	80043b0 <HAL_GetTick>
 80046ac:	9b06      	ldr	r3, [sp, #24]
 80046ae:	1ac0      	subs	r0, r0, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80046b0:	4643      	mov	r3, r8
 80046b2:	681b      	ldr	r3, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046b4:	42b8      	cmp	r0, r7
 80046b6:	d915      	bls.n	80046e4 <I2C_WaitOnFlagUntilTimeout+0x68>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80046b8:	699a      	ldr	r2, [r3, #24]
 80046ba:	402a      	ands	r2, r5
 80046bc:	1b52      	subs	r2, r2, r5
 80046be:	4251      	negs	r1, r2
 80046c0:	414a      	adcs	r2, r1
 80046c2:	42b2      	cmp	r2, r6
 80046c4:	d1e5      	bne.n	8004692 <I2C_WaitOnFlagUntilTimeout+0x16>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046c6:	4643      	mov	r3, r8
 80046c8:	2220      	movs	r2, #32
 80046ca:	4641      	mov	r1, r8
 80046cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          return HAL_ERROR;
 80046ce:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046d0:	4313      	orrs	r3, r2
 80046d2:	644b      	str	r3, [r1, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80046d4:	2341      	movs	r3, #65	@ 0x41
 80046d6:	54ca      	strb	r2, [r1, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046d8:	2300      	movs	r3, #0
 80046da:	3222      	adds	r2, #34	@ 0x22
 80046dc:	548b      	strb	r3, [r1, r2]
          __HAL_UNLOCK(hi2c);
 80046de:	3a02      	subs	r2, #2
 80046e0:	548b      	strb	r3, [r1, r2]
          return HAL_ERROR;
 80046e2:	e7de      	b.n	80046a2 <I2C_WaitOnFlagUntilTimeout+0x26>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046e4:	2f00      	cmp	r7, #0
 80046e6:	d1d4      	bne.n	8004692 <I2C_WaitOnFlagUntilTimeout+0x16>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80046e8:	699a      	ldr	r2, [r3, #24]
 80046ea:	402a      	ands	r2, r5
 80046ec:	1b52      	subs	r2, r2, r5
 80046ee:	4251      	negs	r1, r2
 80046f0:	414a      	adcs	r2, r1
 80046f2:	42b2      	cmp	r2, r6
 80046f4:	d1cd      	bne.n	8004692 <I2C_WaitOnFlagUntilTimeout+0x16>
 80046f6:	e7e6      	b.n	80046c6 <I2C_WaitOnFlagUntilTimeout+0x4a>

080046f8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046fa:	0016      	movs	r6, r2
  uint32_t error_code = 0;
  uint32_t tickstart = Tickstart;
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80046fc:	2210      	movs	r2, #16
{
 80046fe:	46c6      	mov	lr, r8
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004700:	0015      	movs	r5, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8004702:	6803      	ldr	r3, [r0, #0]
{
 8004704:	000f      	movs	r7, r1
  uint32_t itflag   = hi2c->Instance->ISR;
 8004706:	6999      	ldr	r1, [r3, #24]
{
 8004708:	0004      	movs	r4, r0
 800470a:	b500      	push	{lr}
  HAL_StatusTypeDef status = HAL_OK;
 800470c:	2000      	movs	r0, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800470e:	400d      	ands	r5, r1
 8004710:	420a      	tst	r2, r1
 8004712:	d012      	beq.n	800473a <I2C_IsErrorOccurred+0x42>
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004714:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004716:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004718:	0028      	movs	r0, r5
 800471a:	699a      	ldr	r2, [r3, #24]
 800471c:	4010      	ands	r0, r2
 800471e:	4215      	tst	r5, r2
 8004720:	d000      	beq.n	8004724 <I2C_IsErrorOccurred+0x2c>
 8004722:	e073      	b.n	800480c <I2C_IsErrorOccurred+0x114>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004724:	1c7a      	adds	r2, r7, #1
 8004726:	d145      	bne.n	80047b4 <I2C_IsErrorOccurred+0xbc>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004728:	2120      	movs	r1, #32
 800472a:	699a      	ldr	r2, [r3, #24]
 800472c:	4211      	tst	r1, r2
 800472e:	d0fc      	beq.n	800472a <I2C_IsErrorOccurred+0x32>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004730:	2220      	movs	r2, #32
 8004732:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004734:	2504      	movs	r5, #4
 8004736:	4305      	orrs	r5, r0

    status = HAL_ERROR;
 8004738:	2001      	movs	r0, #1
  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800473a:	2180      	movs	r1, #128	@ 0x80
  itflag = hi2c->Instance->ISR;
 800473c:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800473e:	0049      	lsls	r1, r1, #1
 8004740:	420a      	tst	r2, r1
 8004742:	d02c      	beq.n	800479e <I2C_IsErrorOccurred+0xa6>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004744:	2001      	movs	r0, #1

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004746:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8004748:	4305      	orrs	r5, r0

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800474a:	0551      	lsls	r1, r2, #21
 800474c:	d504      	bpl.n	8004758 <I2C_IsErrorOccurred+0x60>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800474e:	2108      	movs	r1, #8
 8004750:	430d      	orrs	r5, r1

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004752:	2180      	movs	r1, #128	@ 0x80
 8004754:	00c9      	lsls	r1, r1, #3
 8004756:	61d9      	str	r1, [r3, #28]

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004758:	0592      	lsls	r2, r2, #22
 800475a:	d504      	bpl.n	8004766 <I2C_IsErrorOccurred+0x6e>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800475c:	2202      	movs	r2, #2
 800475e:	4315      	orrs	r5, r2

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004760:	32ff      	adds	r2, #255	@ 0xff
 8004762:	32ff      	adds	r2, #255	@ 0xff
 8004764:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004766:	699a      	ldr	r2, [r3, #24]
 8004768:	0792      	lsls	r2, r2, #30
 800476a:	d501      	bpl.n	8004770 <I2C_IsErrorOccurred+0x78>
    hi2c->Instance->TXDR = 0x00U;
 800476c:	2200      	movs	r2, #0
 800476e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004770:	2201      	movs	r2, #1
 8004772:	6999      	ldr	r1, [r3, #24]
 8004774:	420a      	tst	r2, r1
 8004776:	d019      	beq.n	80047ac <I2C_IsErrorOccurred+0xb4>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004778:	685a      	ldr	r2, [r3, #4]
 800477a:	4925      	ldr	r1, [pc, #148]	@ (8004810 <I2C_IsErrorOccurred+0x118>)
    hi2c->ErrorCode |= error_code;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800477c:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 800477e:	400a      	ands	r2, r1
 8004780:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 8004782:	6c63      	ldr	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004784:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 8004786:	432b      	orrs	r3, r5
 8004788:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800478a:	2341      	movs	r3, #65	@ 0x41
 800478c:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800478e:	2300      	movs	r3, #0
 8004790:	3222      	adds	r2, #34	@ 0x22
 8004792:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 8004794:	3a02      	subs	r2, #2
 8004796:	54a3      	strb	r3, [r4, r2]
  }

  return status;
}
 8004798:	bc80      	pop	{r7}
 800479a:	46b8      	mov	r8, r7
 800479c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800479e:	0551      	lsls	r1, r2, #21
 80047a0:	d4d5      	bmi.n	800474e <I2C_IsErrorOccurred+0x56>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80047a2:	0592      	lsls	r2, r2, #22
 80047a4:	d4da      	bmi.n	800475c <I2C_IsErrorOccurred+0x64>
  if (status != HAL_OK)
 80047a6:	2800      	cmp	r0, #0
 80047a8:	d0f6      	beq.n	8004798 <I2C_IsErrorOccurred+0xa0>
 80047aa:	e7dc      	b.n	8004766 <I2C_IsErrorOccurred+0x6e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80047ac:	6999      	ldr	r1, [r3, #24]
 80047ae:	430a      	orrs	r2, r1
 80047b0:	619a      	str	r2, [r3, #24]
 80047b2:	e7e1      	b.n	8004778 <I2C_IsErrorOccurred+0x80>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80047b4:	f7ff fdfc 	bl	80043b0 <HAL_GetTick>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80047b8:	6823      	ldr	r3, [r4, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80047ba:	1b80      	subs	r0, r0, r6
 80047bc:	42b8      	cmp	r0, r7
 80047be:	d801      	bhi.n	80047c4 <I2C_IsErrorOccurred+0xcc>
 80047c0:	2f00      	cmp	r7, #0
 80047c2:	d1a9      	bne.n	8004718 <I2C_IsErrorOccurred+0x20>
          tmp2 = hi2c->Mode;
 80047c4:	2242      	movs	r2, #66	@ 0x42
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80047c6:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 80047c8:	5ca2      	ldrb	r2, [r4, r2]
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80047ca:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 80047cc:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80047ce:	0409      	lsls	r1, r1, #16
 80047d0:	d503      	bpl.n	80047da <I2C_IsErrorOccurred+0xe2>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80047d2:	2180      	movs	r1, #128	@ 0x80
 80047d4:	01c9      	lsls	r1, r1, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80047d6:	4208      	tst	r0, r1
 80047d8:	d00e      	beq.n	80047f8 <I2C_IsErrorOccurred+0x100>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047da:	2220      	movs	r2, #32
 80047dc:	4690      	mov	r8, r2
 80047de:	4641      	mov	r1, r8
 80047e0:	699a      	ldr	r2, [r3, #24]
 80047e2:	4211      	tst	r1, r2
 80047e4:	d198      	bne.n	8004718 <I2C_IsErrorOccurred+0x20>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80047e6:	f7ff fde3 	bl	80043b0 <HAL_GetTick>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80047ea:	6823      	ldr	r3, [r4, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80047ec:	1b80      	subs	r0, r0, r6
 80047ee:	2819      	cmp	r0, #25
 80047f0:	d9f5      	bls.n	80047de <I2C_IsErrorOccurred+0xe6>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80047f2:	2020      	movs	r0, #32
 80047f4:	699a      	ldr	r2, [r3, #24]
 80047f6:	e79d      	b.n	8004734 <I2C_IsErrorOccurred+0x3c>
              (tmp1 != I2C_CR2_STOP) && \
 80047f8:	2a20      	cmp	r2, #32
 80047fa:	d0ee      	beq.n	80047da <I2C_IsErrorOccurred+0xe2>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80047fc:	685a      	ldr	r2, [r3, #4]
 80047fe:	4311      	orrs	r1, r2
 8004800:	6059      	str	r1, [r3, #4]
            tickstart = HAL_GetTick();
 8004802:	f7ff fdd5 	bl	80043b0 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004806:	6823      	ldr	r3, [r4, #0]
            tickstart = HAL_GetTick();
 8004808:	0006      	movs	r6, r0
 800480a:	e7e6      	b.n	80047da <I2C_IsErrorOccurred+0xe2>
 800480c:	2000      	movs	r0, #0
 800480e:	e78f      	b.n	8004730 <I2C_IsErrorOccurred+0x38>
 8004810:	fe00e800 	.word	0xfe00e800

08004814 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8004814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004816:	0004      	movs	r4, r0
 8004818:	000d      	movs	r5, r1
 800481a:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800481c:	2702      	movs	r7, #2
 800481e:	6803      	ldr	r3, [r0, #0]
 8004820:	e009      	b.n	8004836 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004822:	0032      	movs	r2, r6
 8004824:	0029      	movs	r1, r5
 8004826:	0020      	movs	r0, r4
 8004828:	f7ff ff66 	bl	80046f8 <I2C_IsErrorOccurred>
 800482c:	2800      	cmp	r0, #0
 800482e:	d11f      	bne.n	8004870 <I2C_WaitOnTXISFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8004830:	1c6b      	adds	r3, r5, #1
 8004832:	d105      	bne.n	8004840 <I2C_WaitOnTXISFlagUntilTimeout+0x2c>
 8004834:	6823      	ldr	r3, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	421f      	tst	r7, r3
 800483a:	d0f2      	beq.n	8004822 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
  return HAL_OK;
 800483c:	2000      	movs	r0, #0
}
 800483e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004840:	f7ff fdb6 	bl	80043b0 <HAL_GetTick>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004844:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004846:	1b80      	subs	r0, r0, r6
 8004848:	42a8      	cmp	r0, r5
 800484a:	d801      	bhi.n	8004850 <I2C_WaitOnTXISFlagUntilTimeout+0x3c>
 800484c:	2d00      	cmp	r5, #0
 800484e:	d1f2      	bne.n	8004836 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004850:	2102      	movs	r1, #2
 8004852:	0008      	movs	r0, r1
 8004854:	699a      	ldr	r2, [r3, #24]
 8004856:	4010      	ands	r0, r2
 8004858:	4211      	tst	r1, r2
 800485a:	d1ec      	bne.n	8004836 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800485c:	2220      	movs	r2, #32
 800485e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004860:	4313      	orrs	r3, r2
 8004862:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004864:	2341      	movs	r3, #65	@ 0x41
 8004866:	54e2      	strb	r2, [r4, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004868:	3301      	adds	r3, #1
 800486a:	54e0      	strb	r0, [r4, r3]
          __HAL_UNLOCK(hi2c);
 800486c:	3b02      	subs	r3, #2
 800486e:	54e0      	strb	r0, [r4, r3]
      return HAL_ERROR;
 8004870:	2001      	movs	r0, #1
 8004872:	e7e4      	b.n	800483e <I2C_WaitOnTXISFlagUntilTimeout+0x2a>

08004874 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8004874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004876:	6803      	ldr	r3, [r0, #0]
{
 8004878:	0006      	movs	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800487a:	699b      	ldr	r3, [r3, #24]
{
 800487c:	000c      	movs	r4, r1
 800487e:	0017      	movs	r7, r2
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004880:	2520      	movs	r5, #32
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004882:	069b      	lsls	r3, r3, #26
 8004884:	d510      	bpl.n	80048a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
 8004886:	e018      	b.n	80048ba <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004888:	f7ff fd92 	bl	80043b0 <HAL_GetTick>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800488c:	6833      	ldr	r3, [r6, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800488e:	1bc0      	subs	r0, r0, r7
 8004890:	42a0      	cmp	r0, r4
 8004892:	d801      	bhi.n	8004898 <I2C_WaitOnSTOPFlagUntilTimeout+0x24>
 8004894:	2c00      	cmp	r4, #0
 8004896:	d104      	bne.n	80048a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004898:	0029      	movs	r1, r5
 800489a:	699a      	ldr	r2, [r3, #24]
 800489c:	4011      	ands	r1, r2
 800489e:	4215      	tst	r5, r2
 80048a0:	d00d      	beq.n	80048be <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	421d      	tst	r5, r3
 80048a6:	d108      	bne.n	80048ba <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80048a8:	003a      	movs	r2, r7
 80048aa:	0021      	movs	r1, r4
 80048ac:	0030      	movs	r0, r6
 80048ae:	f7ff ff23 	bl	80046f8 <I2C_IsErrorOccurred>
 80048b2:	2800      	cmp	r0, #0
 80048b4:	d0e8      	beq.n	8004888 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
      return HAL_ERROR;
 80048b6:	2001      	movs	r0, #1
}
 80048b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 80048ba:	2000      	movs	r0, #0
 80048bc:	e7fc      	b.n	80048b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048be:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 80048c0:	432b      	orrs	r3, r5
 80048c2:	6473      	str	r3, [r6, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80048c4:	2341      	movs	r3, #65	@ 0x41
 80048c6:	54f5      	strb	r5, [r6, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048c8:	3301      	adds	r3, #1
 80048ca:	54f1      	strb	r1, [r6, r3]
        __HAL_UNLOCK(hi2c);
 80048cc:	3b02      	subs	r3, #2
 80048ce:	54f1      	strb	r1, [r6, r3]
        return HAL_ERROR;
 80048d0:	e7f1      	b.n	80048b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x42>
 80048d2:	46c0      	nop			@ (mov r8, r8)

080048d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80048d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048d6:	46c6      	mov	lr, r8
 80048d8:	0017      	movs	r7, r2
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80048da:	2220      	movs	r2, #32
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80048dc:	6803      	ldr	r3, [r0, #0]
{
 80048de:	0004      	movs	r4, r0
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80048e0:	699b      	ldr	r3, [r3, #24]
{
 80048e2:	000d      	movs	r5, r1
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80048e4:	4690      	mov	r8, r2
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80048e6:	2604      	movs	r6, #4
{
 80048e8:	b500      	push	{lr}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80048ea:	075b      	lsls	r3, r3, #29
 80048ec:	d515      	bpl.n	800491a <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
 80048ee:	e01d      	b.n	800492c <I2C_WaitOnRXNEFlagUntilTimeout+0x58>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80048f0:	4641      	mov	r1, r8
 80048f2:	6823      	ldr	r3, [r4, #0]
 80048f4:	699a      	ldr	r2, [r3, #24]
 80048f6:	4211      	tst	r1, r2
 80048f8:	d11c      	bne.n	8004934 <I2C_WaitOnRXNEFlagUntilTimeout+0x60>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048fa:	f7ff fd59 	bl	80043b0 <HAL_GetTick>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80048fe:	6823      	ldr	r3, [r4, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004900:	1bc0      	subs	r0, r0, r7
 8004902:	42a8      	cmp	r0, r5
 8004904:	d801      	bhi.n	800490a <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
 8004906:	2d00      	cmp	r5, #0
 8004908:	d104      	bne.n	8004914 <I2C_WaitOnRXNEFlagUntilTimeout+0x40>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800490a:	0031      	movs	r1, r6
 800490c:	699a      	ldr	r2, [r3, #24]
 800490e:	4011      	ands	r1, r2
 8004910:	4216      	tst	r6, r2
 8004912:	d02d      	beq.n	8004970 <I2C_WaitOnRXNEFlagUntilTimeout+0x9c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	421e      	tst	r6, r3
 8004918:	d108      	bne.n	800492c <I2C_WaitOnRXNEFlagUntilTimeout+0x58>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800491a:	003a      	movs	r2, r7
 800491c:	0029      	movs	r1, r5
 800491e:	0020      	movs	r0, r4
 8004920:	f7ff feea 	bl	80046f8 <I2C_IsErrorOccurred>
 8004924:	2800      	cmp	r0, #0
 8004926:	d0e3      	beq.n	80048f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x1c>
      return HAL_ERROR;
 8004928:	2001      	movs	r0, #1
 800492a:	e000      	b.n	800492e <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
        return HAL_OK;
 800492c:	2000      	movs	r0, #0
}
 800492e:	bc80      	pop	{r7}
 8004930:	46b8      	mov	r8, r7
 8004932:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004934:	699a      	ldr	r2, [r3, #24]
 8004936:	0752      	lsls	r2, r2, #29
 8004938:	d502      	bpl.n	8004940 <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
 800493a:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 800493c:	2a00      	cmp	r2, #0
 800493e:	d1f5      	bne.n	800492c <I2C_WaitOnRXNEFlagUntilTimeout+0x58>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004940:	2210      	movs	r2, #16
 8004942:	0010      	movs	r0, r2
 8004944:	6999      	ldr	r1, [r3, #24]
 8004946:	4008      	ands	r0, r1
 8004948:	420a      	tst	r2, r1
 800494a:	d01b      	beq.n	8004984 <I2C_WaitOnRXNEFlagUntilTimeout+0xb0>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800494c:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800494e:	3a0c      	subs	r2, #12
 8004950:	6462      	str	r2, [r4, #68]	@ 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004952:	2120      	movs	r1, #32
 8004954:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8004956:	685a      	ldr	r2, [r3, #4]
 8004958:	480b      	ldr	r0, [pc, #44]	@ (8004988 <I2C_WaitOnRXNEFlagUntilTimeout+0xb4>)
 800495a:	4002      	ands	r2, r0
 800495c:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 800495e:	2341      	movs	r3, #65	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004960:	2242      	movs	r2, #66	@ 0x42
        hi2c->State = HAL_I2C_STATE_READY;
 8004962:	54e1      	strb	r1, [r4, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004964:	2300      	movs	r3, #0
 8004966:	54a3      	strb	r3, [r4, r2]
        __HAL_UNLOCK(hi2c);
 8004968:	3a02      	subs	r2, #2
      return HAL_ERROR;
 800496a:	2001      	movs	r0, #1
        __HAL_UNLOCK(hi2c);
 800496c:	54a3      	strb	r3, [r4, r2]
        return HAL_ERROR;
 800496e:	e7de      	b.n	800492e <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004970:	2220      	movs	r2, #32
 8004972:	6c63      	ldr	r3, [r4, #68]	@ 0x44
      return HAL_ERROR;
 8004974:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004976:	4313      	orrs	r3, r2
 8004978:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800497a:	2341      	movs	r3, #65	@ 0x41
 800497c:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hi2c);
 800497e:	3b01      	subs	r3, #1
 8004980:	54e1      	strb	r1, [r4, r3]
        return HAL_ERROR;
 8004982:	e7d4      	b.n	800492e <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004984:	6460      	str	r0, [r4, #68]	@ 0x44
 8004986:	e7e4      	b.n	8004952 <I2C_WaitOnRXNEFlagUntilTimeout+0x7e>
 8004988:	fe00e800 	.word	0xfe00e800

0800498c <HAL_I2C_Init>:
{
 800498c:	b510      	push	{r4, lr}
 800498e:	1e04      	subs	r4, r0, #0
  if (hi2c == NULL)
 8004990:	d04c      	beq.n	8004a2c <HAL_I2C_Init+0xa0>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004992:	2341      	movs	r3, #65	@ 0x41
 8004994:	5cc3      	ldrb	r3, [r0, r3]
 8004996:	b2da      	uxtb	r2, r3
 8004998:	2b00      	cmp	r3, #0
 800499a:	d042      	beq.n	8004a22 <HAL_I2C_Init+0x96>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800499c:	2341      	movs	r3, #65	@ 0x41
 800499e:	2224      	movs	r2, #36	@ 0x24
  __HAL_I2C_DISABLE(hi2c);
 80049a0:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 80049a2:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 80049a4:	6823      	ldr	r3, [r4, #0]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80049a6:	68a0      	ldr	r0, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	438a      	bics	r2, r1
 80049ac:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80049ae:	4920      	ldr	r1, [pc, #128]	@ (8004a30 <HAL_I2C_Init+0xa4>)
 80049b0:	6862      	ldr	r2, [r4, #4]
 80049b2:	400a      	ands	r2, r1
 80049b4:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80049b6:	689a      	ldr	r2, [r3, #8]
 80049b8:	491e      	ldr	r1, [pc, #120]	@ (8004a34 <HAL_I2C_Init+0xa8>)
 80049ba:	400a      	ands	r2, r1
 80049bc:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80049be:	68e2      	ldr	r2, [r4, #12]
 80049c0:	2a01      	cmp	r2, #1
 80049c2:	d029      	beq.n	8004a18 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80049c4:	2184      	movs	r1, #132	@ 0x84
 80049c6:	0209      	lsls	r1, r1, #8
 80049c8:	4301      	orrs	r1, r0
 80049ca:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80049cc:	2a02      	cmp	r2, #2
 80049ce:	d102      	bne.n	80049d6 <HAL_I2C_Init+0x4a>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80049d0:	2280      	movs	r2, #128	@ 0x80
 80049d2:	0112      	lsls	r2, r2, #4
 80049d4:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80049d6:	6859      	ldr	r1, [r3, #4]
 80049d8:	4a17      	ldr	r2, [pc, #92]	@ (8004a38 <HAL_I2C_Init+0xac>)
  return HAL_OK;
 80049da:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80049dc:	430a      	orrs	r2, r1
 80049de:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80049e0:	68da      	ldr	r2, [r3, #12]
 80049e2:	4914      	ldr	r1, [pc, #80]	@ (8004a34 <HAL_I2C_Init+0xa8>)
 80049e4:	400a      	ands	r2, r1
 80049e6:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80049e8:	6961      	ldr	r1, [r4, #20]
 80049ea:	6922      	ldr	r2, [r4, #16]
 80049ec:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80049ee:	69a1      	ldr	r1, [r4, #24]
 80049f0:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80049f2:	430a      	orrs	r2, r1
 80049f4:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80049f6:	6a21      	ldr	r1, [r4, #32]
 80049f8:	69e2      	ldr	r2, [r4, #28]
 80049fa:	430a      	orrs	r2, r1
  __HAL_I2C_ENABLE(hi2c);
 80049fc:	2101      	movs	r1, #1
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80049fe:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	430a      	orrs	r2, r1
 8004a04:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a06:	2300      	movs	r3, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8004a08:	2241      	movs	r2, #65	@ 0x41
 8004a0a:	311f      	adds	r1, #31
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a0c:	6463      	str	r3, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004a0e:	54a1      	strb	r1, [r4, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a10:	3201      	adds	r2, #1
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a12:	6323      	str	r3, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a14:	54a3      	strb	r3, [r4, r2]
}
 8004a16:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004a18:	2280      	movs	r2, #128	@ 0x80
 8004a1a:	0212      	lsls	r2, r2, #8
 8004a1c:	4302      	orrs	r2, r0
 8004a1e:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004a20:	e7d9      	b.n	80049d6 <HAL_I2C_Init+0x4a>
    hi2c->Lock = HAL_UNLOCKED;
 8004a22:	3340      	adds	r3, #64	@ 0x40
 8004a24:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 8004a26:	f7ff fb69 	bl	80040fc <HAL_I2C_MspInit>
 8004a2a:	e7b7      	b.n	800499c <HAL_I2C_Init+0x10>
    return HAL_ERROR;
 8004a2c:	2001      	movs	r0, #1
 8004a2e:	e7f2      	b.n	8004a16 <HAL_I2C_Init+0x8a>
 8004a30:	f0ffffff 	.word	0xf0ffffff
 8004a34:	ffff7fff 	.word	0xffff7fff
 8004a38:	02008000 	.word	0x02008000

08004a3c <HAL_I2C_Master_Transmit>:
{
 8004a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a3e:	46d6      	mov	lr, sl
 8004a40:	464f      	mov	r7, r9
 8004a42:	4646      	mov	r6, r8
 8004a44:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a46:	2341      	movs	r3, #65	@ 0x41
{
 8004a48:	b5c0      	push	{r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a4a:	5cc3      	ldrb	r3, [r0, r3]
{
 8004a4c:	b082      	sub	sp, #8
 8004a4e:	0004      	movs	r4, r0
 8004a50:	4688      	mov	r8, r1
 8004a52:	4692      	mov	sl, r2
 8004a54:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a56:	2b20      	cmp	r3, #32
 8004a58:	d000      	beq.n	8004a5c <HAL_I2C_Master_Transmit+0x20>
 8004a5a:	e088      	b.n	8004b6e <HAL_I2C_Master_Transmit+0x132>
    __HAL_LOCK(hi2c);
 8004a5c:	3320      	adds	r3, #32
 8004a5e:	5cc2      	ldrb	r2, [r0, r3]
 8004a60:	2a01      	cmp	r2, #1
 8004a62:	d100      	bne.n	8004a66 <HAL_I2C_Master_Transmit+0x2a>
 8004a64:	e083      	b.n	8004b6e <HAL_I2C_Master_Transmit+0x132>
 8004a66:	2201      	movs	r2, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a68:	2780      	movs	r7, #128	@ 0x80
    __HAL_LOCK(hi2c);
 8004a6a:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 8004a6c:	f7ff fca0 	bl	80043b0 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a70:	6823      	ldr	r3, [r4, #0]
 8004a72:	023f      	lsls	r7, r7, #8
 8004a74:	699a      	ldr	r2, [r3, #24]
    tickstart = HAL_GetTick();
 8004a76:	0006      	movs	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a78:	423a      	tst	r2, r7
 8004a7a:	d00c      	beq.n	8004a96 <HAL_I2C_Master_Transmit+0x5a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a7c:	f7ff fc98 	bl	80043b0 <HAL_GetTick>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004a80:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a82:	1b80      	subs	r0, r0, r6
 8004a84:	2819      	cmp	r0, #25
 8004a86:	d903      	bls.n	8004a90 <HAL_I2C_Master_Transmit+0x54>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004a88:	699a      	ldr	r2, [r3, #24]
 8004a8a:	423a      	tst	r2, r7
 8004a8c:	d000      	beq.n	8004a90 <HAL_I2C_Master_Transmit+0x54>
 8004a8e:	e08e      	b.n	8004bae <HAL_I2C_Master_Transmit+0x172>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a90:	699a      	ldr	r2, [r3, #24]
 8004a92:	423a      	tst	r2, r7
 8004a94:	d1f2      	bne.n	8004a7c <HAL_I2C_Master_Transmit+0x40>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a96:	2241      	movs	r2, #65	@ 0x41
 8004a98:	2121      	movs	r1, #33	@ 0x21
 8004a9a:	54a1      	strb	r1, [r4, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004a9c:	3201      	adds	r2, #1
 8004a9e:	3911      	subs	r1, #17
 8004aa0:	54a1      	strb	r1, [r4, r2]
    hi2c->pBuffPtr  = pData;
 8004aa2:	4651      	mov	r1, sl
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004aa4:	2200      	movs	r2, #0
    hi2c->pBuffPtr  = pData;
 8004aa6:	6261      	str	r1, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004aa8:	4649      	mov	r1, r9
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004aaa:	6462      	str	r2, [r4, #68]	@ 0x44
    hi2c->XferCount = Size;
 8004aac:	8561      	strh	r1, [r4, #42]	@ 0x2a
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004aae:	4641      	mov	r1, r8
    hi2c->XferISR   = NULL;
 8004ab0:	6362      	str	r2, [r4, #52]	@ 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ab2:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ab4:	058f      	lsls	r7, r1, #22
 8004ab6:	0dbf      	lsrs	r7, r7, #22
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ab8:	2aff      	cmp	r2, #255	@ 0xff
 8004aba:	d85f      	bhi.n	8004b7c <HAL_I2C_Master_Transmit+0x140>
      hi2c->XferSize = hi2c->XferCount;
 8004abc:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004abe:	4842      	ldr	r0, [pc, #264]	@ (8004bc8 <HAL_I2C_Master_Transmit+0x18c>)
 8004ac0:	6859      	ldr	r1, [r3, #4]
      hi2c->XferSize = hi2c->XferCount;
 8004ac2:	b292      	uxth	r2, r2
 8004ac4:	8522      	strh	r2, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8004ac6:	4001      	ands	r1, r0
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004ac8:	b2d2      	uxtb	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, \
 8004aca:	4339      	orrs	r1, r7
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004acc:	0412      	lsls	r2, r2, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	493e      	ldr	r1, [pc, #248]	@ (8004bcc <HAL_I2C_Master_Transmit+0x190>)
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	605a      	str	r2, [r3, #4]
    while (hi2c->XferCount > 0U)
 8004ad6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ad8:	0032      	movs	r2, r6
 8004ada:	0029      	movs	r1, r5
 8004adc:	0020      	movs	r0, r4
    while (hi2c->XferCount > 0U)
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d033      	beq.n	8004b4a <HAL_I2C_Master_Transmit+0x10e>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ae2:	f7ff fe97 	bl	8004814 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ae6:	2800      	cmp	r0, #0
 8004ae8:	d000      	beq.n	8004aec <HAL_I2C_Master_Transmit+0xb0>
 8004aea:	e06b      	b.n	8004bc4 <HAL_I2C_Master_Transmit+0x188>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004aec:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004aee:	6822      	ldr	r2, [r4, #0]
 8004af0:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8004af2:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004af4:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8004af6:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8004af8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004afa:	3b01      	subs	r3, #1
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8004b00:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004b02:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8004b04:	3b01      	subs	r3, #1
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004b0a:	2a00      	cmp	r2, #0
 8004b0c:	d0e3      	beq.n	8004ad6 <HAL_I2C_Master_Transmit+0x9a>
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1e1      	bne.n	8004ad6 <HAL_I2C_Master_Transmit+0x9a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004b12:	002b      	movs	r3, r5
 8004b14:	2200      	movs	r2, #0
 8004b16:	2180      	movs	r1, #128	@ 0x80
 8004b18:	0020      	movs	r0, r4
 8004b1a:	9600      	str	r6, [sp, #0]
 8004b1c:	f7ff fdae 	bl	800467c <I2C_WaitOnFlagUntilTimeout>
 8004b20:	2800      	cmp	r0, #0
 8004b22:	d14f      	bne.n	8004bc4 <HAL_I2C_Master_Transmit+0x188>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b24:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8004b26:	6822      	ldr	r2, [r4, #0]
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b28:	2bff      	cmp	r3, #255	@ 0xff
 8004b2a:	d931      	bls.n	8004b90 <HAL_I2C_Master_Transmit+0x154>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b2c:	23ff      	movs	r3, #255	@ 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 8004b2e:	4928      	ldr	r1, [pc, #160]	@ (8004bd0 <HAL_I2C_Master_Transmit+0x194>)
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b30:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8004b32:	6853      	ldr	r3, [r2, #4]
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b34:	0020      	movs	r0, r4
  MODIFY_REG(hi2c->Instance->CR2, \
 8004b36:	400b      	ands	r3, r1
 8004b38:	4926      	ldr	r1, [pc, #152]	@ (8004bd4 <HAL_I2C_Master_Transmit+0x198>)
 8004b3a:	433b      	orrs	r3, r7
 8004b3c:	430b      	orrs	r3, r1
 8004b3e:	6053      	str	r3, [r2, #4]
    while (hi2c->XferCount > 0U)
 8004b40:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b42:	0032      	movs	r2, r6
 8004b44:	0029      	movs	r1, r5
    while (hi2c->XferCount > 0U)
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1cb      	bne.n	8004ae2 <HAL_I2C_Master_Transmit+0xa6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b4a:	f7ff fe93 	bl	8004874 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004b4e:	2800      	cmp	r0, #0
 8004b50:	d138      	bne.n	8004bc4 <HAL_I2C_Master_Transmit+0x188>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b52:	2120      	movs	r1, #32
 8004b54:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8004b56:	4d20      	ldr	r5, [pc, #128]	@ (8004bd8 <HAL_I2C_Master_Transmit+0x19c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b58:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004b5a:	685a      	ldr	r2, [r3, #4]
 8004b5c:	402a      	ands	r2, r5
 8004b5e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004b60:	2341      	movs	r3, #65	@ 0x41
 8004b62:	54e1      	strb	r1, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004b64:	3301      	adds	r3, #1
 8004b66:	54e0      	strb	r0, [r4, r3]
    __HAL_UNLOCK(hi2c);
 8004b68:	3b02      	subs	r3, #2
 8004b6a:	54e0      	strb	r0, [r4, r3]
    return HAL_OK;
 8004b6c:	e000      	b.n	8004b70 <HAL_I2C_Master_Transmit+0x134>
    __HAL_LOCK(hi2c);
 8004b6e:	2002      	movs	r0, #2
}
 8004b70:	b002      	add	sp, #8
 8004b72:	bce0      	pop	{r5, r6, r7}
 8004b74:	46ba      	mov	sl, r7
 8004b76:	46b1      	mov	r9, r6
 8004b78:	46a8      	mov	r8, r5
 8004b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b7c:	22ff      	movs	r2, #255	@ 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 8004b7e:	4912      	ldr	r1, [pc, #72]	@ (8004bc8 <HAL_I2C_Master_Transmit+0x18c>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b80:	8522      	strh	r2, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8004b82:	685a      	ldr	r2, [r3, #4]
 8004b84:	400a      	ands	r2, r1
 8004b86:	4915      	ldr	r1, [pc, #84]	@ (8004bdc <HAL_I2C_Master_Transmit+0x1a0>)
 8004b88:	433a      	orrs	r2, r7
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004b8e:	e7a2      	b.n	8004ad6 <HAL_I2C_Master_Transmit+0x9a>
          hi2c->XferSize = hi2c->XferCount;
 8004b90:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8004b92:	480f      	ldr	r0, [pc, #60]	@ (8004bd0 <HAL_I2C_Master_Transmit+0x194>)
          hi2c->XferSize = hi2c->XferCount;
 8004b94:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8004b96:	6851      	ldr	r1, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 8004b98:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8004b9e:	4001      	ands	r1, r0
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ba0:	433b      	orrs	r3, r7
  MODIFY_REG(hi2c->Instance->CR2, \
 8004ba2:	430b      	orrs	r3, r1
 8004ba4:	2180      	movs	r1, #128	@ 0x80
 8004ba6:	0489      	lsls	r1, r1, #18
 8004ba8:	430b      	orrs	r3, r1
 8004baa:	6053      	str	r3, [r2, #4]
}
 8004bac:	e793      	b.n	8004ad6 <HAL_I2C_Master_Transmit+0x9a>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bae:	2220      	movs	r2, #32
 8004bb0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004bb6:	2341      	movs	r3, #65	@ 0x41
 8004bb8:	54e2      	strb	r2, [r4, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	3222      	adds	r2, #34	@ 0x22
 8004bbe:	54a3      	strb	r3, [r4, r2]
          __HAL_UNLOCK(hi2c);
 8004bc0:	3a02      	subs	r2, #2
 8004bc2:	54a3      	strb	r3, [r4, r2]
      return HAL_ERROR;
 8004bc4:	2001      	movs	r0, #1
 8004bc6:	e7d3      	b.n	8004b70 <HAL_I2C_Master_Transmit+0x134>
 8004bc8:	fc009800 	.word	0xfc009800
 8004bcc:	02002000 	.word	0x02002000
 8004bd0:	fc009c00 	.word	0xfc009c00
 8004bd4:	01ff0000 	.word	0x01ff0000
 8004bd8:	fe00e800 	.word	0xfe00e800
 8004bdc:	01ff2000 	.word	0x01ff2000

08004be0 <HAL_I2C_Master_Receive>:
{
 8004be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004be2:	46d6      	mov	lr, sl
 8004be4:	464f      	mov	r7, r9
 8004be6:	4646      	mov	r6, r8
 8004be8:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bea:	2341      	movs	r3, #65	@ 0x41
{
 8004bec:	b5c0      	push	{r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bee:	5cc3      	ldrb	r3, [r0, r3]
{
 8004bf0:	b082      	sub	sp, #8
 8004bf2:	0004      	movs	r4, r0
 8004bf4:	4688      	mov	r8, r1
 8004bf6:	4692      	mov	sl, r2
 8004bf8:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bfa:	2b20      	cmp	r3, #32
 8004bfc:	d000      	beq.n	8004c00 <HAL_I2C_Master_Receive+0x20>
 8004bfe:	e089      	b.n	8004d14 <HAL_I2C_Master_Receive+0x134>
    __HAL_LOCK(hi2c);
 8004c00:	3320      	adds	r3, #32
 8004c02:	5cc2      	ldrb	r2, [r0, r3]
 8004c04:	2a01      	cmp	r2, #1
 8004c06:	d100      	bne.n	8004c0a <HAL_I2C_Master_Receive+0x2a>
 8004c08:	e084      	b.n	8004d14 <HAL_I2C_Master_Receive+0x134>
 8004c0a:	2201      	movs	r2, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c0c:	2780      	movs	r7, #128	@ 0x80
    __HAL_LOCK(hi2c);
 8004c0e:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 8004c10:	f7ff fbce 	bl	80043b0 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c14:	6823      	ldr	r3, [r4, #0]
 8004c16:	023f      	lsls	r7, r7, #8
 8004c18:	699a      	ldr	r2, [r3, #24]
    tickstart = HAL_GetTick();
 8004c1a:	0006      	movs	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c1c:	423a      	tst	r2, r7
 8004c1e:	d00c      	beq.n	8004c3a <HAL_I2C_Master_Receive+0x5a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c20:	f7ff fbc6 	bl	80043b0 <HAL_GetTick>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004c24:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c26:	1b80      	subs	r0, r0, r6
 8004c28:	2819      	cmp	r0, #25
 8004c2a:	d903      	bls.n	8004c34 <HAL_I2C_Master_Receive+0x54>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004c2c:	699a      	ldr	r2, [r3, #24]
 8004c2e:	423a      	tst	r2, r7
 8004c30:	d000      	beq.n	8004c34 <HAL_I2C_Master_Receive+0x54>
 8004c32:	e08f      	b.n	8004d54 <HAL_I2C_Master_Receive+0x174>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c34:	699a      	ldr	r2, [r3, #24]
 8004c36:	423a      	tst	r2, r7
 8004c38:	d1f2      	bne.n	8004c20 <HAL_I2C_Master_Receive+0x40>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004c3a:	2241      	movs	r2, #65	@ 0x41
 8004c3c:	2122      	movs	r1, #34	@ 0x22
 8004c3e:	54a1      	strb	r1, [r4, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004c40:	3201      	adds	r2, #1
 8004c42:	3912      	subs	r1, #18
 8004c44:	54a1      	strb	r1, [r4, r2]
    hi2c->pBuffPtr  = pData;
 8004c46:	4651      	mov	r1, sl
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c48:	2200      	movs	r2, #0
    hi2c->pBuffPtr  = pData;
 8004c4a:	6261      	str	r1, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004c4c:	4649      	mov	r1, r9
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c4e:	6462      	str	r2, [r4, #68]	@ 0x44
    hi2c->XferCount = Size;
 8004c50:	8561      	strh	r1, [r4, #42]	@ 0x2a
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004c52:	4641      	mov	r1, r8
    hi2c->XferISR   = NULL;
 8004c54:	6362      	str	r2, [r4, #52]	@ 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c56:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004c58:	058f      	lsls	r7, r1, #22
 8004c5a:	0dbf      	lsrs	r7, r7, #22
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c5c:	2aff      	cmp	r2, #255	@ 0xff
 8004c5e:	d860      	bhi.n	8004d22 <HAL_I2C_Master_Receive+0x142>
      hi2c->XferSize = hi2c->XferCount;
 8004c60:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8004c62:	4843      	ldr	r0, [pc, #268]	@ (8004d70 <HAL_I2C_Master_Receive+0x190>)
 8004c64:	6859      	ldr	r1, [r3, #4]
      hi2c->XferSize = hi2c->XferCount;
 8004c66:	b292      	uxth	r2, r2
 8004c68:	8522      	strh	r2, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8004c6a:	4001      	ands	r1, r0
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004c6c:	b2d2      	uxtb	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, \
 8004c6e:	4339      	orrs	r1, r7
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004c70:	0412      	lsls	r2, r2, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8004c72:	430a      	orrs	r2, r1
 8004c74:	493f      	ldr	r1, [pc, #252]	@ (8004d74 <HAL_I2C_Master_Receive+0x194>)
 8004c76:	430a      	orrs	r2, r1
 8004c78:	605a      	str	r2, [r3, #4]
    while (hi2c->XferCount > 0U)
 8004c7a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c7c:	0032      	movs	r2, r6
 8004c7e:	0029      	movs	r1, r5
 8004c80:	0020      	movs	r0, r4
    while (hi2c->XferCount > 0U)
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d034      	beq.n	8004cf0 <HAL_I2C_Master_Receive+0x110>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c86:	f7ff fe25 	bl	80048d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c8a:	2800      	cmp	r0, #0
 8004c8c:	d000      	beq.n	8004c90 <HAL_I2C_Master_Receive+0xb0>
 8004c8e:	e06c      	b.n	8004d6a <HAL_I2C_Master_Receive+0x18a>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004c90:	6823      	ldr	r3, [r4, #0]
 8004c92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c94:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004c96:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8004c98:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->pBuffPtr++;
 8004c9a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8004c9c:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8004c9e:	3301      	adds	r3, #1
      hi2c->XferCount--;
 8004ca0:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 8004ca2:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8004ca4:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8004ca6:	8562      	strh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8004ca8:	3b01      	subs	r3, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004caa:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004cb0:	2a00      	cmp	r2, #0
 8004cb2:	d0e2      	beq.n	8004c7a <HAL_I2C_Master_Receive+0x9a>
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d1e0      	bne.n	8004c7a <HAL_I2C_Master_Receive+0x9a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004cb8:	002b      	movs	r3, r5
 8004cba:	2200      	movs	r2, #0
 8004cbc:	2180      	movs	r1, #128	@ 0x80
 8004cbe:	0020      	movs	r0, r4
 8004cc0:	9600      	str	r6, [sp, #0]
 8004cc2:	f7ff fcdb 	bl	800467c <I2C_WaitOnFlagUntilTimeout>
 8004cc6:	2800      	cmp	r0, #0
 8004cc8:	d14f      	bne.n	8004d6a <HAL_I2C_Master_Receive+0x18a>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004cca:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8004ccc:	6822      	ldr	r2, [r4, #0]
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004cce:	2bff      	cmp	r3, #255	@ 0xff
 8004cd0:	d931      	bls.n	8004d36 <HAL_I2C_Master_Receive+0x156>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004cd2:	23ff      	movs	r3, #255	@ 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 8004cd4:	4928      	ldr	r1, [pc, #160]	@ (8004d78 <HAL_I2C_Master_Receive+0x198>)
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004cd6:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8004cd8:	6853      	ldr	r3, [r2, #4]
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cda:	0020      	movs	r0, r4
  MODIFY_REG(hi2c->Instance->CR2, \
 8004cdc:	400b      	ands	r3, r1
 8004cde:	4927      	ldr	r1, [pc, #156]	@ (8004d7c <HAL_I2C_Master_Receive+0x19c>)
 8004ce0:	433b      	orrs	r3, r7
 8004ce2:	430b      	orrs	r3, r1
 8004ce4:	6053      	str	r3, [r2, #4]
    while (hi2c->XferCount > 0U)
 8004ce6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ce8:	0032      	movs	r2, r6
 8004cea:	0029      	movs	r1, r5
    while (hi2c->XferCount > 0U)
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d1ca      	bne.n	8004c86 <HAL_I2C_Master_Receive+0xa6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cf0:	f7ff fdc0 	bl	8004874 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004cf4:	2800      	cmp	r0, #0
 8004cf6:	d138      	bne.n	8004d6a <HAL_I2C_Master_Receive+0x18a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cf8:	2120      	movs	r1, #32
 8004cfa:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8004cfc:	4d20      	ldr	r5, [pc, #128]	@ (8004d80 <HAL_I2C_Master_Receive+0x1a0>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cfe:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004d00:	685a      	ldr	r2, [r3, #4]
 8004d02:	402a      	ands	r2, r5
 8004d04:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004d06:	2341      	movs	r3, #65	@ 0x41
 8004d08:	54e1      	strb	r1, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	54e0      	strb	r0, [r4, r3]
    __HAL_UNLOCK(hi2c);
 8004d0e:	3b02      	subs	r3, #2
 8004d10:	54e0      	strb	r0, [r4, r3]
    return HAL_OK;
 8004d12:	e000      	b.n	8004d16 <HAL_I2C_Master_Receive+0x136>
    __HAL_LOCK(hi2c);
 8004d14:	2002      	movs	r0, #2
}
 8004d16:	b002      	add	sp, #8
 8004d18:	bce0      	pop	{r5, r6, r7}
 8004d1a:	46ba      	mov	sl, r7
 8004d1c:	46b1      	mov	r9, r6
 8004d1e:	46a8      	mov	r8, r5
 8004d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d22:	22ff      	movs	r2, #255	@ 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 8004d24:	4912      	ldr	r1, [pc, #72]	@ (8004d70 <HAL_I2C_Master_Receive+0x190>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d26:	8522      	strh	r2, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8004d28:	685a      	ldr	r2, [r3, #4]
 8004d2a:	400a      	ands	r2, r1
 8004d2c:	4915      	ldr	r1, [pc, #84]	@ (8004d84 <HAL_I2C_Master_Receive+0x1a4>)
 8004d2e:	433a      	orrs	r2, r7
 8004d30:	430a      	orrs	r2, r1
 8004d32:	605a      	str	r2, [r3, #4]
}
 8004d34:	e7a1      	b.n	8004c7a <HAL_I2C_Master_Receive+0x9a>
          hi2c->XferSize = hi2c->XferCount;
 8004d36:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8004d38:	480f      	ldr	r0, [pc, #60]	@ (8004d78 <HAL_I2C_Master_Receive+0x198>)
          hi2c->XferSize = hi2c->XferCount;
 8004d3a:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8004d3c:	6851      	ldr	r1, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 8004d3e:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8004d44:	4001      	ands	r1, r0
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d46:	433b      	orrs	r3, r7
  MODIFY_REG(hi2c->Instance->CR2, \
 8004d48:	430b      	orrs	r3, r1
 8004d4a:	2180      	movs	r1, #128	@ 0x80
 8004d4c:	0489      	lsls	r1, r1, #18
 8004d4e:	430b      	orrs	r3, r1
 8004d50:	6053      	str	r3, [r2, #4]
}
 8004d52:	e792      	b.n	8004c7a <HAL_I2C_Master_Receive+0x9a>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d54:	2220      	movs	r2, #32
 8004d56:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004d5c:	2341      	movs	r3, #65	@ 0x41
 8004d5e:	54e2      	strb	r2, [r4, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d60:	2300      	movs	r3, #0
 8004d62:	3222      	adds	r2, #34	@ 0x22
 8004d64:	54a3      	strb	r3, [r4, r2]
          __HAL_UNLOCK(hi2c);
 8004d66:	3a02      	subs	r2, #2
 8004d68:	54a3      	strb	r3, [r4, r2]
      return HAL_ERROR;
 8004d6a:	2001      	movs	r0, #1
 8004d6c:	e7d3      	b.n	8004d16 <HAL_I2C_Master_Receive+0x136>
 8004d6e:	46c0      	nop			@ (mov r8, r8)
 8004d70:	fc009800 	.word	0xfc009800
 8004d74:	02002400 	.word	0x02002400
 8004d78:	fc009c00 	.word	0xfc009c00
 8004d7c:	01ff0000 	.word	0x01ff0000
 8004d80:	fe00e800 	.word	0xfe00e800
 8004d84:	01ff2400 	.word	0x01ff2400

08004d88 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004d88:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d8a:	2441      	movs	r4, #65	@ 0x41
 8004d8c:	5d03      	ldrb	r3, [r0, r4]
{
 8004d8e:	468c      	mov	ip, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d90:	b2dd      	uxtb	r5, r3
 8004d92:	2b20      	cmp	r3, #32
 8004d94:	d11a      	bne.n	8004dcc <HAL_I2CEx_ConfigAnalogFilter+0x44>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d96:	2640      	movs	r6, #64	@ 0x40
 8004d98:	5d83      	ldrb	r3, [r0, r6]
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d016      	beq.n	8004dcc <HAL_I2CEx_ConfigAnalogFilter+0x44>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d9e:	2324      	movs	r3, #36	@ 0x24

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004da0:	2701      	movs	r7, #1
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004da2:	5503      	strb	r3, [r0, r4]
    __HAL_I2C_DISABLE(hi2c);
 8004da4:	6803      	ldr	r3, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004da6:	490a      	ldr	r1, [pc, #40]	@ (8004dd0 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	43ba      	bics	r2, r7
 8004dac:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	400a      	ands	r2, r1
 8004db2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004db4:	4662      	mov	r2, ip
 8004db6:	6819      	ldr	r1, [r3, #0]
 8004db8:	4311      	orrs	r1, r2
 8004dba:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	433a      	orrs	r2, r7
 8004dc0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dc2:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004dc4:	5505      	strb	r5, [r0, r4]
    __HAL_UNLOCK(hi2c);
 8004dc6:	5583      	strb	r3, [r0, r6]

    return HAL_OK;
 8004dc8:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8004dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8004dcc:	2002      	movs	r0, #2
 8004dce:	e7fc      	b.n	8004dca <HAL_I2CEx_ConfigAnalogFilter+0x42>
 8004dd0:	ffffefff 	.word	0xffffefff

08004dd4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dd6:	46ce      	mov	lr, r9
 8004dd8:	4647      	mov	r7, r8

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dda:	2441      	movs	r4, #65	@ 0x41
{
 8004ddc:	b580      	push	{r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dde:	5d03      	ldrb	r3, [r0, r4]
 8004de0:	b2dd      	uxtb	r5, r3
 8004de2:	2b20      	cmp	r3, #32
 8004de4:	d11f      	bne.n	8004e26 <HAL_I2CEx_ConfigDigitalFilter+0x52>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004de6:	2640      	movs	r6, #64	@ 0x40
 8004de8:	5d83      	ldrb	r3, [r0, r6]
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d01b      	beq.n	8004e26 <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004dee:	2324      	movs	r3, #36	@ 0x24

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004df0:	2701      	movs	r7, #1
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004df2:	5503      	strb	r3, [r0, r4]
    __HAL_I2C_DISABLE(hi2c);
 8004df4:	6802      	ldr	r2, [r0, #0]
 8004df6:	46b9      	mov	r9, r7
 8004df8:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004dfa:	0209      	lsls	r1, r1, #8
    __HAL_I2C_DISABLE(hi2c);
 8004dfc:	43bb      	bics	r3, r7
 8004dfe:	6013      	str	r3, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 8004e00:	6813      	ldr	r3, [r2, #0]
 8004e02:	4698      	mov	r8, r3
    tmpreg &= ~(I2C_CR1_DNF);
 8004e04:	4647      	mov	r7, r8
 8004e06:	4b09      	ldr	r3, [pc, #36]	@ (8004e2c <HAL_I2CEx_ConfigDigitalFilter+0x58>)
 8004e08:	401f      	ands	r7, r3
    tmpreg |= DigitalFilter << 8U;
 8004e0a:	4339      	orrs	r1, r7

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004e0c:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e0e:	4649      	mov	r1, r9
 8004e10:	6813      	ldr	r3, [r2, #0]
 8004e12:	430b      	orrs	r3, r1
 8004e14:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e16:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004e18:	5505      	strb	r5, [r0, r4]
    __HAL_UNLOCK(hi2c);
 8004e1a:	5583      	strb	r3, [r0, r6]

    return HAL_OK;
 8004e1c:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8004e1e:	bcc0      	pop	{r6, r7}
 8004e20:	46b9      	mov	r9, r7
 8004e22:	46b0      	mov	r8, r6
 8004e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8004e26:	2002      	movs	r0, #2
 8004e28:	e7f9      	b.n	8004e1e <HAL_I2CEx_ConfigDigitalFilter+0x4a>
 8004e2a:	46c0      	nop			@ (mov r8, r8)
 8004e2c:	fffff0ff 	.word	0xfffff0ff

08004e30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e32:	46ce      	mov	lr, r9
 8004e34:	4647      	mov	r7, r8
 8004e36:	b580      	push	{r7, lr}
 8004e38:	0004      	movs	r4, r0
 8004e3a:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e3c:	2800      	cmp	r0, #0
 8004e3e:	d100      	bne.n	8004e42 <HAL_RCC_OscConfig+0x12>
 8004e40:	e115      	b.n	800506e <HAL_RCC_OscConfig+0x23e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e42:	6803      	ldr	r3, [r0, #0]
 8004e44:	07da      	lsls	r2, r3, #31
 8004e46:	d52f      	bpl.n	8004ea8 <HAL_RCC_OscConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004e48:	210c      	movs	r1, #12
 8004e4a:	48c6      	ldr	r0, [pc, #792]	@ (8005164 <HAL_RCC_OscConfig+0x334>)
 8004e4c:	6842      	ldr	r2, [r0, #4]
 8004e4e:	400a      	ands	r2, r1
 8004e50:	2a04      	cmp	r2, #4
 8004e52:	d100      	bne.n	8004e56 <HAL_RCC_OscConfig+0x26>
 8004e54:	e12d      	b.n	80050b2 <HAL_RCC_OscConfig+0x282>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004e56:	6842      	ldr	r2, [r0, #4]
 8004e58:	4011      	ands	r1, r2
 8004e5a:	2908      	cmp	r1, #8
 8004e5c:	d100      	bne.n	8004e60 <HAL_RCC_OscConfig+0x30>
 8004e5e:	e11f      	b.n	80050a0 <HAL_RCC_OscConfig+0x270>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e60:	6863      	ldr	r3, [r4, #4]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d100      	bne.n	8004e68 <HAL_RCC_OscConfig+0x38>
 8004e66:	e12e      	b.n	80050c6 <HAL_RCC_OscConfig+0x296>
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d100      	bne.n	8004e6e <HAL_RCC_OscConfig+0x3e>
 8004e6c:	e150      	b.n	8005110 <HAL_RCC_OscConfig+0x2e0>
 8004e6e:	2b05      	cmp	r3, #5
 8004e70:	d100      	bne.n	8004e74 <HAL_RCC_OscConfig+0x44>
 8004e72:	e27b      	b.n	800536c <HAL_RCC_OscConfig+0x53c>
 8004e74:	4bbb      	ldr	r3, [pc, #748]	@ (8005164 <HAL_RCC_OscConfig+0x334>)
 8004e76:	49bc      	ldr	r1, [pc, #752]	@ (8005168 <HAL_RCC_OscConfig+0x338>)
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	400a      	ands	r2, r1
 8004e7c:	601a      	str	r2, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	49ba      	ldr	r1, [pc, #744]	@ (800516c <HAL_RCC_OscConfig+0x33c>)
 8004e82:	400a      	ands	r2, r1
 8004e84:	601a      	str	r2, [r3, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e86:	f7ff fa93 	bl	80043b0 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e8a:	2680      	movs	r6, #128	@ 0x80
        tickstart = HAL_GetTick();
 8004e8c:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e8e:	4fb5      	ldr	r7, [pc, #724]	@ (8005164 <HAL_RCC_OscConfig+0x334>)
 8004e90:	02b6      	lsls	r6, r6, #10
 8004e92:	e005      	b.n	8004ea0 <HAL_RCC_OscConfig+0x70>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e94:	f7ff fa8c 	bl	80043b0 <HAL_GetTick>
 8004e98:	1b40      	subs	r0, r0, r5
 8004e9a:	2864      	cmp	r0, #100	@ 0x64
 8004e9c:	d900      	bls.n	8004ea0 <HAL_RCC_OscConfig+0x70>
 8004e9e:	e135      	b.n	800510c <HAL_RCC_OscConfig+0x2dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	4233      	tst	r3, r6
 8004ea4:	d0f6      	beq.n	8004e94 <HAL_RCC_OscConfig+0x64>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ea6:	6823      	ldr	r3, [r4, #0]
 8004ea8:	079a      	lsls	r2, r3, #30
 8004eaa:	d529      	bpl.n	8004f00 <HAL_RCC_OscConfig+0xd0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004eac:	220c      	movs	r2, #12
 8004eae:	49ad      	ldr	r1, [pc, #692]	@ (8005164 <HAL_RCC_OscConfig+0x334>)
 8004eb0:	6848      	ldr	r0, [r1, #4]
 8004eb2:	4202      	tst	r2, r0
 8004eb4:	d100      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x88>
 8004eb6:	e0d3      	b.n	8005060 <HAL_RCC_OscConfig+0x230>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004eb8:	6848      	ldr	r0, [r1, #4]
 8004eba:	4002      	ands	r2, r0
 8004ebc:	2a08      	cmp	r2, #8
 8004ebe:	d100      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x92>
 8004ec0:	e0c5      	b.n	800504e <HAL_RCC_OscConfig+0x21e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ec2:	68e3      	ldr	r3, [r4, #12]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ec4:	4da7      	ldr	r5, [pc, #668]	@ (8005164 <HAL_RCC_OscConfig+0x334>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d100      	bne.n	8004ecc <HAL_RCC_OscConfig+0x9c>
 8004eca:	e165      	b.n	8005198 <HAL_RCC_OscConfig+0x368>
        __HAL_RCC_HSI_ENABLE();
 8004ecc:	2201      	movs	r2, #1
 8004ece:	682b      	ldr	r3, [r5, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ed0:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004ed6:	f7ff fa6b 	bl	80043b0 <HAL_GetTick>
 8004eda:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004edc:	e005      	b.n	8004eea <HAL_RCC_OscConfig+0xba>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ede:	f7ff fa67 	bl	80043b0 <HAL_GetTick>
 8004ee2:	1b80      	subs	r0, r0, r6
 8004ee4:	2802      	cmp	r0, #2
 8004ee6:	d900      	bls.n	8004eea <HAL_RCC_OscConfig+0xba>
 8004ee8:	e110      	b.n	800510c <HAL_RCC_OscConfig+0x2dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eea:	682b      	ldr	r3, [r5, #0]
 8004eec:	421f      	tst	r7, r3
 8004eee:	d0f6      	beq.n	8004ede <HAL_RCC_OscConfig+0xae>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ef0:	21f8      	movs	r1, #248	@ 0xf8
 8004ef2:	682a      	ldr	r2, [r5, #0]
 8004ef4:	6923      	ldr	r3, [r4, #16]
 8004ef6:	438a      	bics	r2, r1
 8004ef8:	00db      	lsls	r3, r3, #3
 8004efa:	4313      	orrs	r3, r2
 8004efc:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004efe:	6823      	ldr	r3, [r4, #0]
 8004f00:	071a      	lsls	r2, r3, #28
 8004f02:	d42d      	bmi.n	8004f60 <HAL_RCC_OscConfig+0x130>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f04:	075a      	lsls	r2, r3, #29
 8004f06:	d545      	bpl.n	8004f94 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f08:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8004f0a:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f0c:	4b95      	ldr	r3, [pc, #596]	@ (8005164 <HAL_RCC_OscConfig+0x334>)
 8004f0e:	0552      	lsls	r2, r2, #21
 8004f10:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8004f12:	4681      	mov	r9, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f14:	4211      	tst	r1, r2
 8004f16:	d108      	bne.n	8004f2a <HAL_RCC_OscConfig+0xfa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f18:	69d9      	ldr	r1, [r3, #28]
 8004f1a:	4311      	orrs	r1, r2
 8004f1c:	61d9      	str	r1, [r3, #28]
 8004f1e:	69db      	ldr	r3, [r3, #28]
 8004f20:	4013      	ands	r3, r2
 8004f22:	9301      	str	r3, [sp, #4]
 8004f24:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004f26:	2301      	movs	r3, #1
 8004f28:	4699      	mov	r9, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f2a:	2780      	movs	r7, #128	@ 0x80
 8004f2c:	4e90      	ldr	r6, [pc, #576]	@ (8005170 <HAL_RCC_OscConfig+0x340>)
 8004f2e:	007f      	lsls	r7, r7, #1
 8004f30:	6833      	ldr	r3, [r6, #0]
 8004f32:	423b      	tst	r3, r7
 8004f34:	d100      	bne.n	8004f38 <HAL_RCC_OscConfig+0x108>
 8004f36:	e0cd      	b.n	80050d4 <HAL_RCC_OscConfig+0x2a4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f38:	68a3      	ldr	r3, [r4, #8]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d100      	bne.n	8004f40 <HAL_RCC_OscConfig+0x110>
 8004f3e:	e13e      	b.n	80051be <HAL_RCC_OscConfig+0x38e>
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d100      	bne.n	8004f46 <HAL_RCC_OscConfig+0x116>
 8004f44:	e0fd      	b.n	8005142 <HAL_RCC_OscConfig+0x312>
 8004f46:	2b05      	cmp	r3, #5
 8004f48:	d100      	bne.n	8004f4c <HAL_RCC_OscConfig+0x11c>
 8004f4a:	e1cb      	b.n	80052e4 <HAL_RCC_OscConfig+0x4b4>
 8004f4c:	2101      	movs	r1, #1
 8004f4e:	4b85      	ldr	r3, [pc, #532]	@ (8005164 <HAL_RCC_OscConfig+0x334>)
 8004f50:	6a1a      	ldr	r2, [r3, #32]
 8004f52:	438a      	bics	r2, r1
 8004f54:	621a      	str	r2, [r3, #32]
 8004f56:	6a1a      	ldr	r2, [r3, #32]
 8004f58:	3103      	adds	r1, #3
 8004f5a:	438a      	bics	r2, r1
 8004f5c:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f5e:	e132      	b.n	80051c6 <HAL_RCC_OscConfig+0x396>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f60:	69e3      	ldr	r3, [r4, #28]
      __HAL_RCC_LSI_ENABLE();
 8004f62:	4d80      	ldr	r5, [pc, #512]	@ (8005164 <HAL_RCC_OscConfig+0x334>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d100      	bne.n	8004f6a <HAL_RCC_OscConfig+0x13a>
 8004f68:	e087      	b.n	800507a <HAL_RCC_OscConfig+0x24a>
      __HAL_RCC_LSI_ENABLE();
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f6e:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8004f70:	4313      	orrs	r3, r2
 8004f72:	626b      	str	r3, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 8004f74:	f7ff fa1c 	bl	80043b0 <HAL_GetTick>
 8004f78:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f7a:	e005      	b.n	8004f88 <HAL_RCC_OscConfig+0x158>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f7c:	f7ff fa18 	bl	80043b0 <HAL_GetTick>
 8004f80:	1b80      	subs	r0, r0, r6
 8004f82:	2802      	cmp	r0, #2
 8004f84:	d900      	bls.n	8004f88 <HAL_RCC_OscConfig+0x158>
 8004f86:	e0c1      	b.n	800510c <HAL_RCC_OscConfig+0x2dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f88:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8004f8a:	421f      	tst	r7, r3
 8004f8c:	d0f6      	beq.n	8004f7c <HAL_RCC_OscConfig+0x14c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f8e:	6823      	ldr	r3, [r4, #0]
 8004f90:	075a      	lsls	r2, r3, #29
 8004f92:	d4b9      	bmi.n	8004f08 <HAL_RCC_OscConfig+0xd8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004f94:	06da      	lsls	r2, r3, #27
 8004f96:	d512      	bpl.n	8004fbe <HAL_RCC_OscConfig+0x18e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004f98:	6962      	ldr	r2, [r4, #20]
 8004f9a:	2a01      	cmp	r2, #1
 8004f9c:	d100      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x170>
 8004f9e:	e1c6      	b.n	800532e <HAL_RCC_OscConfig+0x4fe>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004fa0:	3205      	adds	r2, #5
 8004fa2:	d000      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x176>
 8004fa4:	e121      	b.n	80051ea <HAL_RCC_OscConfig+0x3ba>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004fa6:	2004      	movs	r0, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004fa8:	25f8      	movs	r5, #248	@ 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 8004faa:	496e      	ldr	r1, [pc, #440]	@ (8005164 <HAL_RCC_OscConfig+0x334>)
 8004fac:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
 8004fae:	4382      	bics	r2, r0
 8004fb0:	634a      	str	r2, [r1, #52]	@ 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004fb2:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 8004fb4:	69a2      	ldr	r2, [r4, #24]
 8004fb6:	43a8      	bics	r0, r5
 8004fb8:	00d2      	lsls	r2, r2, #3
 8004fba:	4302      	orrs	r2, r0
 8004fbc:	634a      	str	r2, [r1, #52]	@ 0x34
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004fbe:	069b      	lsls	r3, r3, #26
 8004fc0:	d524      	bpl.n	800500c <HAL_RCC_OscConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004fc2:	220c      	movs	r2, #12
 8004fc4:	4967      	ldr	r1, [pc, #412]	@ (8005164 <HAL_RCC_OscConfig+0x334>)
 8004fc6:	684b      	ldr	r3, [r1, #4]
 8004fc8:	4013      	ands	r3, r2
 8004fca:	2b0c      	cmp	r3, #12
 8004fcc:	d100      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x1a0>
 8004fce:	e12c      	b.n	800522a <HAL_RCC_OscConfig+0x3fa>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004fd0:	684b      	ldr	r3, [r1, #4]
 8004fd2:	401a      	ands	r2, r3
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004fd4:	2a08      	cmp	r2, #8
 8004fd6:	d100      	bne.n	8004fda <HAL_RCC_OscConfig+0x1aa>
 8004fd8:	e120      	b.n	800521c <HAL_RCC_OscConfig+0x3ec>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004fda:	6a23      	ldr	r3, [r4, #32]
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004fdc:	4d61      	ldr	r5, [pc, #388]	@ (8005164 <HAL_RCC_OscConfig+0x334>)
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d100      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x1b4>
 8004fe2:	e12c      	b.n	800523e <HAL_RCC_OscConfig+0x40e>
        __HAL_RCC_HSI48_ENABLE();
 8004fe4:	2380      	movs	r3, #128	@ 0x80
 8004fe6:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8004fe8:	025b      	lsls	r3, r3, #9
 8004fea:	4313      	orrs	r3, r2
 8004fec:	636b      	str	r3, [r5, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fee:	f7ff f9df 	bl	80043b0 <HAL_GetTick>
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004ff2:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8004ff4:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004ff6:	02bf      	lsls	r7, r7, #10
 8004ff8:	e005      	b.n	8005006 <HAL_RCC_OscConfig+0x1d6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ffa:	f7ff f9d9 	bl	80043b0 <HAL_GetTick>
 8004ffe:	1b80      	subs	r0, r0, r6
 8005000:	2802      	cmp	r0, #2
 8005002:	d900      	bls.n	8005006 <HAL_RCC_OscConfig+0x1d6>
 8005004:	e082      	b.n	800510c <HAL_RCC_OscConfig+0x2dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005006:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8005008:	423b      	tst	r3, r7
 800500a:	d0f6      	beq.n	8004ffa <HAL_RCC_OscConfig+0x1ca>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800500c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800500e:	2b00      	cmp	r3, #0
 8005010:	d01b      	beq.n	800504a <HAL_RCC_OscConfig+0x21a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005012:	220c      	movs	r2, #12
 8005014:	4d53      	ldr	r5, [pc, #332]	@ (8005164 <HAL_RCC_OscConfig+0x334>)
 8005016:	6869      	ldr	r1, [r5, #4]
 8005018:	400a      	ands	r2, r1
 800501a:	2a08      	cmp	r2, #8
 800501c:	d100      	bne.n	8005020 <HAL_RCC_OscConfig+0x1f0>
 800501e:	e16b      	b.n	80052f8 <HAL_RCC_OscConfig+0x4c8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005020:	2b02      	cmp	r3, #2
 8005022:	d100      	bne.n	8005026 <HAL_RCC_OscConfig+0x1f6>
 8005024:	e126      	b.n	8005274 <HAL_RCC_OscConfig+0x444>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005026:	682b      	ldr	r3, [r5, #0]
 8005028:	4a52      	ldr	r2, [pc, #328]	@ (8005174 <HAL_RCC_OscConfig+0x344>)
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800502a:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 800502c:	4013      	ands	r3, r2
 800502e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005030:	f7ff f9be 	bl	80043b0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005034:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 8005036:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005038:	e004      	b.n	8005044 <HAL_RCC_OscConfig+0x214>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800503a:	f7ff f9b9 	bl	80043b0 <HAL_GetTick>
 800503e:	1b00      	subs	r0, r0, r4
 8005040:	2802      	cmp	r0, #2
 8005042:	d863      	bhi.n	800510c <HAL_RCC_OscConfig+0x2dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005044:	682b      	ldr	r3, [r5, #0]
 8005046:	4233      	tst	r3, r6
 8005048:	d1f7      	bne.n	800503a <HAL_RCC_OscConfig+0x20a>
        }
      }
    }
  }

  return HAL_OK;
 800504a:	2000      	movs	r0, #0
 800504c:	e010      	b.n	8005070 <HAL_RCC_OscConfig+0x240>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800504e:	684a      	ldr	r2, [r1, #4]
 8005050:	21c0      	movs	r1, #192	@ 0xc0
 8005052:	0249      	lsls	r1, r1, #9
 8005054:	400a      	ands	r2, r1
 8005056:	2180      	movs	r1, #128	@ 0x80
 8005058:	0209      	lsls	r1, r1, #8
 800505a:	428a      	cmp	r2, r1
 800505c:	d000      	beq.n	8005060 <HAL_RCC_OscConfig+0x230>
 800505e:	e730      	b.n	8004ec2 <HAL_RCC_OscConfig+0x92>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005060:	4a40      	ldr	r2, [pc, #256]	@ (8005164 <HAL_RCC_OscConfig+0x334>)
 8005062:	6812      	ldr	r2, [r2, #0]
 8005064:	0792      	lsls	r2, r2, #30
 8005066:	d545      	bpl.n	80050f4 <HAL_RCC_OscConfig+0x2c4>
 8005068:	68e2      	ldr	r2, [r4, #12]
 800506a:	2a01      	cmp	r2, #1
 800506c:	d042      	beq.n	80050f4 <HAL_RCC_OscConfig+0x2c4>
    return HAL_ERROR;
 800506e:	2001      	movs	r0, #1
}
 8005070:	b003      	add	sp, #12
 8005072:	bcc0      	pop	{r6, r7}
 8005074:	46b9      	mov	r9, r7
 8005076:	46b0      	mov	r8, r6
 8005078:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_LSI_DISABLE();
 800507a:	2201      	movs	r2, #1
 800507c:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800507e:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8005080:	4393      	bics	r3, r2
 8005082:	626b      	str	r3, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 8005084:	f7ff f994 	bl	80043b0 <HAL_GetTick>
 8005088:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800508a:	e004      	b.n	8005096 <HAL_RCC_OscConfig+0x266>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800508c:	f7ff f990 	bl	80043b0 <HAL_GetTick>
 8005090:	1b80      	subs	r0, r0, r6
 8005092:	2802      	cmp	r0, #2
 8005094:	d83a      	bhi.n	800510c <HAL_RCC_OscConfig+0x2dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005096:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8005098:	421f      	tst	r7, r3
 800509a:	d1f7      	bne.n	800508c <HAL_RCC_OscConfig+0x25c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800509c:	6823      	ldr	r3, [r4, #0]
 800509e:	e777      	b.n	8004f90 <HAL_RCC_OscConfig+0x160>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80050a0:	21c0      	movs	r1, #192	@ 0xc0
 80050a2:	6842      	ldr	r2, [r0, #4]
 80050a4:	0249      	lsls	r1, r1, #9
 80050a6:	400a      	ands	r2, r1
 80050a8:	2180      	movs	r1, #128	@ 0x80
 80050aa:	0249      	lsls	r1, r1, #9
 80050ac:	428a      	cmp	r2, r1
 80050ae:	d000      	beq.n	80050b2 <HAL_RCC_OscConfig+0x282>
 80050b0:	e6d6      	b.n	8004e60 <HAL_RCC_OscConfig+0x30>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050b2:	4a2c      	ldr	r2, [pc, #176]	@ (8005164 <HAL_RCC_OscConfig+0x334>)
 80050b4:	6812      	ldr	r2, [r2, #0]
 80050b6:	0392      	lsls	r2, r2, #14
 80050b8:	d400      	bmi.n	80050bc <HAL_RCC_OscConfig+0x28c>
 80050ba:	e6f5      	b.n	8004ea8 <HAL_RCC_OscConfig+0x78>
 80050bc:	6862      	ldr	r2, [r4, #4]
 80050be:	2a00      	cmp	r2, #0
 80050c0:	d000      	beq.n	80050c4 <HAL_RCC_OscConfig+0x294>
 80050c2:	e6f1      	b.n	8004ea8 <HAL_RCC_OscConfig+0x78>
 80050c4:	e7d3      	b.n	800506e <HAL_RCC_OscConfig+0x23e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050c6:	2380      	movs	r3, #128	@ 0x80
 80050c8:	4a26      	ldr	r2, [pc, #152]	@ (8005164 <HAL_RCC_OscConfig+0x334>)
 80050ca:	025b      	lsls	r3, r3, #9
 80050cc:	6811      	ldr	r1, [r2, #0]
 80050ce:	430b      	orrs	r3, r1
 80050d0:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050d2:	e6d8      	b.n	8004e86 <HAL_RCC_OscConfig+0x56>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050d4:	6833      	ldr	r3, [r6, #0]
 80050d6:	433b      	orrs	r3, r7
 80050d8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80050da:	f7ff f969 	bl	80043b0 <HAL_GetTick>
 80050de:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050e0:	e004      	b.n	80050ec <HAL_RCC_OscConfig+0x2bc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050e2:	f7ff f965 	bl	80043b0 <HAL_GetTick>
 80050e6:	1b40      	subs	r0, r0, r5
 80050e8:	2864      	cmp	r0, #100	@ 0x64
 80050ea:	d80f      	bhi.n	800510c <HAL_RCC_OscConfig+0x2dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050ec:	6833      	ldr	r3, [r6, #0]
 80050ee:	423b      	tst	r3, r7
 80050f0:	d0f7      	beq.n	80050e2 <HAL_RCC_OscConfig+0x2b2>
 80050f2:	e721      	b.n	8004f38 <HAL_RCC_OscConfig+0x108>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050f4:	25f8      	movs	r5, #248	@ 0xf8
 80050f6:	481b      	ldr	r0, [pc, #108]	@ (8005164 <HAL_RCC_OscConfig+0x334>)
 80050f8:	6922      	ldr	r2, [r4, #16]
 80050fa:	6801      	ldr	r1, [r0, #0]
 80050fc:	00d2      	lsls	r2, r2, #3
 80050fe:	43a9      	bics	r1, r5
 8005100:	430a      	orrs	r2, r1
 8005102:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005104:	071a      	lsls	r2, r3, #28
 8005106:	d400      	bmi.n	800510a <HAL_RCC_OscConfig+0x2da>
 8005108:	e6fc      	b.n	8004f04 <HAL_RCC_OscConfig+0xd4>
 800510a:	e729      	b.n	8004f60 <HAL_RCC_OscConfig+0x130>
            return HAL_TIMEOUT;
 800510c:	2003      	movs	r0, #3
 800510e:	e7af      	b.n	8005070 <HAL_RCC_OscConfig+0x240>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005110:	4d14      	ldr	r5, [pc, #80]	@ (8005164 <HAL_RCC_OscConfig+0x334>)
 8005112:	4a15      	ldr	r2, [pc, #84]	@ (8005168 <HAL_RCC_OscConfig+0x338>)
 8005114:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005116:	2780      	movs	r7, #128	@ 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005118:	4013      	ands	r3, r2
 800511a:	602b      	str	r3, [r5, #0]
 800511c:	682b      	ldr	r3, [r5, #0]
 800511e:	4a13      	ldr	r2, [pc, #76]	@ (800516c <HAL_RCC_OscConfig+0x33c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005120:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005122:	4013      	ands	r3, r2
 8005124:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005126:	f7ff f943 	bl	80043b0 <HAL_GetTick>
 800512a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800512c:	e004      	b.n	8005138 <HAL_RCC_OscConfig+0x308>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800512e:	f7ff f93f 	bl	80043b0 <HAL_GetTick>
 8005132:	1b80      	subs	r0, r0, r6
 8005134:	2864      	cmp	r0, #100	@ 0x64
 8005136:	d8e9      	bhi.n	800510c <HAL_RCC_OscConfig+0x2dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005138:	682b      	ldr	r3, [r5, #0]
 800513a:	423b      	tst	r3, r7
 800513c:	d1f7      	bne.n	800512e <HAL_RCC_OscConfig+0x2fe>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800513e:	6823      	ldr	r3, [r4, #0]
 8005140:	e6b2      	b.n	8004ea8 <HAL_RCC_OscConfig+0x78>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005142:	2201      	movs	r2, #1
 8005144:	4e07      	ldr	r6, [pc, #28]	@ (8005164 <HAL_RCC_OscConfig+0x334>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005146:	4d0c      	ldr	r5, [pc, #48]	@ (8005178 <HAL_RCC_OscConfig+0x348>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005148:	6a33      	ldr	r3, [r6, #32]
 800514a:	4393      	bics	r3, r2
 800514c:	6233      	str	r3, [r6, #32]
 800514e:	6a33      	ldr	r3, [r6, #32]
 8005150:	3203      	adds	r2, #3
 8005152:	4393      	bics	r3, r2
 8005154:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8005156:	f7ff f92b 	bl	80043b0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800515a:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 800515c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800515e:	4698      	mov	r8, r3
 8005160:	e011      	b.n	8005186 <HAL_RCC_OscConfig+0x356>
 8005162:	46c0      	nop			@ (mov r8, r8)
 8005164:	40021000 	.word	0x40021000
 8005168:	fffeffff 	.word	0xfffeffff
 800516c:	fffbffff 	.word	0xfffbffff
 8005170:	40007000 	.word	0x40007000
 8005174:	feffffff 	.word	0xfeffffff
 8005178:	00001388 	.word	0x00001388
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800517c:	f7ff f918 	bl	80043b0 <HAL_GetTick>
 8005180:	1bc0      	subs	r0, r0, r7
 8005182:	42a8      	cmp	r0, r5
 8005184:	d8c2      	bhi.n	800510c <HAL_RCC_OscConfig+0x2dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005186:	4642      	mov	r2, r8
 8005188:	6a33      	ldr	r3, [r6, #32]
 800518a:	421a      	tst	r2, r3
 800518c:	d1f6      	bne.n	800517c <HAL_RCC_OscConfig+0x34c>
    if(pwrclkchanged == SET)
 800518e:	464b      	mov	r3, r9
 8005190:	2b01      	cmp	r3, #1
 8005192:	d068      	beq.n	8005266 <HAL_RCC_OscConfig+0x436>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8005194:	6823      	ldr	r3, [r4, #0]
 8005196:	e6fd      	b.n	8004f94 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8005198:	2201      	movs	r2, #1
 800519a:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800519c:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 800519e:	4393      	bics	r3, r2
 80051a0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80051a2:	f7ff f905 	bl	80043b0 <HAL_GetTick>
 80051a6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051a8:	e004      	b.n	80051b4 <HAL_RCC_OscConfig+0x384>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051aa:	f7ff f901 	bl	80043b0 <HAL_GetTick>
 80051ae:	1b80      	subs	r0, r0, r6
 80051b0:	2802      	cmp	r0, #2
 80051b2:	d8ab      	bhi.n	800510c <HAL_RCC_OscConfig+0x2dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051b4:	682b      	ldr	r3, [r5, #0]
 80051b6:	421f      	tst	r7, r3
 80051b8:	d1f7      	bne.n	80051aa <HAL_RCC_OscConfig+0x37a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051ba:	6823      	ldr	r3, [r4, #0]
 80051bc:	e6a0      	b.n	8004f00 <HAL_RCC_OscConfig+0xd0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051be:	4971      	ldr	r1, [pc, #452]	@ (8005384 <HAL_RCC_OscConfig+0x554>)
 80051c0:	6a0a      	ldr	r2, [r1, #32]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 80051c6:	f7ff f8f3 	bl	80043b0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051ca:	4b6e      	ldr	r3, [pc, #440]	@ (8005384 <HAL_RCC_OscConfig+0x554>)
      tickstart = HAL_GetTick();
 80051cc:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051ce:	4698      	mov	r8, r3
 80051d0:	2702      	movs	r7, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051d2:	4d6d      	ldr	r5, [pc, #436]	@ (8005388 <HAL_RCC_OscConfig+0x558>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051d4:	e004      	b.n	80051e0 <HAL_RCC_OscConfig+0x3b0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051d6:	f7ff f8eb 	bl	80043b0 <HAL_GetTick>
 80051da:	1b80      	subs	r0, r0, r6
 80051dc:	42a8      	cmp	r0, r5
 80051de:	d895      	bhi.n	800510c <HAL_RCC_OscConfig+0x2dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051e0:	4643      	mov	r3, r8
 80051e2:	6a1b      	ldr	r3, [r3, #32]
 80051e4:	421f      	tst	r7, r3
 80051e6:	d0f6      	beq.n	80051d6 <HAL_RCC_OscConfig+0x3a6>
 80051e8:	e7d1      	b.n	800518e <HAL_RCC_OscConfig+0x35e>
      __HAL_RCC_HSI14ADC_DISABLE();
 80051ea:	2204      	movs	r2, #4
 80051ec:	4d65      	ldr	r5, [pc, #404]	@ (8005384 <HAL_RCC_OscConfig+0x554>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80051ee:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80051f0:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80051f2:	4313      	orrs	r3, r2
 80051f4:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_DISABLE();
 80051f6:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80051f8:	3a03      	subs	r2, #3
 80051fa:	4393      	bics	r3, r2
 80051fc:	636b      	str	r3, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 80051fe:	f7ff f8d7 	bl	80043b0 <HAL_GetTick>
 8005202:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005204:	e005      	b.n	8005212 <HAL_RCC_OscConfig+0x3e2>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005206:	f7ff f8d3 	bl	80043b0 <HAL_GetTick>
 800520a:	1b80      	subs	r0, r0, r6
 800520c:	2802      	cmp	r0, #2
 800520e:	d900      	bls.n	8005212 <HAL_RCC_OscConfig+0x3e2>
 8005210:	e77c      	b.n	800510c <HAL_RCC_OscConfig+0x2dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005212:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8005214:	421f      	tst	r7, r3
 8005216:	d1f6      	bne.n	8005206 <HAL_RCC_OscConfig+0x3d6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005218:	6823      	ldr	r3, [r4, #0]
 800521a:	e6d0      	b.n	8004fbe <HAL_RCC_OscConfig+0x18e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800521c:	22c0      	movs	r2, #192	@ 0xc0
 800521e:	684b      	ldr	r3, [r1, #4]
 8005220:	0252      	lsls	r2, r2, #9
 8005222:	4013      	ands	r3, r2
 8005224:	4293      	cmp	r3, r2
 8005226:	d000      	beq.n	800522a <HAL_RCC_OscConfig+0x3fa>
 8005228:	e6d7      	b.n	8004fda <HAL_RCC_OscConfig+0x1aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800522a:	4b56      	ldr	r3, [pc, #344]	@ (8005384 <HAL_RCC_OscConfig+0x554>)
 800522c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800522e:	039b      	lsls	r3, r3, #14
 8005230:	d400      	bmi.n	8005234 <HAL_RCC_OscConfig+0x404>
 8005232:	e6eb      	b.n	800500c <HAL_RCC_OscConfig+0x1dc>
 8005234:	6a23      	ldr	r3, [r4, #32]
 8005236:	2b01      	cmp	r3, #1
 8005238:	d000      	beq.n	800523c <HAL_RCC_OscConfig+0x40c>
 800523a:	e718      	b.n	800506e <HAL_RCC_OscConfig+0x23e>
 800523c:	e6e6      	b.n	800500c <HAL_RCC_OscConfig+0x1dc>
        __HAL_RCC_HSI48_DISABLE();
 800523e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8005240:	4a52      	ldr	r2, [pc, #328]	@ (800538c <HAL_RCC_OscConfig+0x55c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8005242:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI48_DISABLE();
 8005244:	4013      	ands	r3, r2
 8005246:	636b      	str	r3, [r5, #52]	@ 0x34
        tickstart = HAL_GetTick();
 8005248:	f7ff f8b2 	bl	80043b0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800524c:	02bf      	lsls	r7, r7, #10
        tickstart = HAL_GetTick();
 800524e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8005250:	e005      	b.n	800525e <HAL_RCC_OscConfig+0x42e>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005252:	f7ff f8ad 	bl	80043b0 <HAL_GetTick>
 8005256:	1b80      	subs	r0, r0, r6
 8005258:	2802      	cmp	r0, #2
 800525a:	d900      	bls.n	800525e <HAL_RCC_OscConfig+0x42e>
 800525c:	e756      	b.n	800510c <HAL_RCC_OscConfig+0x2dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800525e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8005260:	423b      	tst	r3, r7
 8005262:	d1f6      	bne.n	8005252 <HAL_RCC_OscConfig+0x422>
 8005264:	e6d2      	b.n	800500c <HAL_RCC_OscConfig+0x1dc>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005266:	4a47      	ldr	r2, [pc, #284]	@ (8005384 <HAL_RCC_OscConfig+0x554>)
 8005268:	4949      	ldr	r1, [pc, #292]	@ (8005390 <HAL_RCC_OscConfig+0x560>)
 800526a:	69d3      	ldr	r3, [r2, #28]
 800526c:	400b      	ands	r3, r1
 800526e:	61d3      	str	r3, [r2, #28]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8005270:	6823      	ldr	r3, [r4, #0]
 8005272:	e68f      	b.n	8004f94 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_PLL_DISABLE();
 8005274:	682b      	ldr	r3, [r5, #0]
 8005276:	4a47      	ldr	r2, [pc, #284]	@ (8005394 <HAL_RCC_OscConfig+0x564>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005278:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 800527a:	4013      	ands	r3, r2
 800527c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800527e:	f7ff f897 	bl	80043b0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005282:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8005284:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005286:	e005      	b.n	8005294 <HAL_RCC_OscConfig+0x464>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005288:	f7ff f892 	bl	80043b0 <HAL_GetTick>
 800528c:	1b80      	subs	r0, r0, r6
 800528e:	2802      	cmp	r0, #2
 8005290:	d900      	bls.n	8005294 <HAL_RCC_OscConfig+0x464>
 8005292:	e73b      	b.n	800510c <HAL_RCC_OscConfig+0x2dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005294:	682b      	ldr	r3, [r5, #0]
 8005296:	423b      	tst	r3, r7
 8005298:	d1f6      	bne.n	8005288 <HAL_RCC_OscConfig+0x458>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800529a:	220f      	movs	r2, #15
 800529c:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800529e:	4e39      	ldr	r6, [pc, #228]	@ (8005384 <HAL_RCC_OscConfig+0x554>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052a0:	4393      	bics	r3, r2
 80052a2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80052a4:	4313      	orrs	r3, r2
 80052a6:	62eb      	str	r3, [r5, #44]	@ 0x2c
 80052a8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80052aa:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80052ac:	686a      	ldr	r2, [r5, #4]
 80052ae:	430b      	orrs	r3, r1
 80052b0:	4939      	ldr	r1, [pc, #228]	@ (8005398 <HAL_RCC_OscConfig+0x568>)
 80052b2:	400a      	ands	r2, r1
 80052b4:	4313      	orrs	r3, r2
 80052b6:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80052b8:	2380      	movs	r3, #128	@ 0x80
 80052ba:	682a      	ldr	r2, [r5, #0]
 80052bc:	045b      	lsls	r3, r3, #17
 80052be:	4313      	orrs	r3, r2
 80052c0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80052c2:	f7ff f875 	bl	80043b0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052c6:	2580      	movs	r5, #128	@ 0x80
        tickstart = HAL_GetTick();
 80052c8:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052ca:	04ad      	lsls	r5, r5, #18
 80052cc:	e005      	b.n	80052da <HAL_RCC_OscConfig+0x4aa>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052ce:	f7ff f86f 	bl	80043b0 <HAL_GetTick>
 80052d2:	1b00      	subs	r0, r0, r4
 80052d4:	2802      	cmp	r0, #2
 80052d6:	d900      	bls.n	80052da <HAL_RCC_OscConfig+0x4aa>
 80052d8:	e718      	b.n	800510c <HAL_RCC_OscConfig+0x2dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052da:	6833      	ldr	r3, [r6, #0]
 80052dc:	422b      	tst	r3, r5
 80052de:	d0f6      	beq.n	80052ce <HAL_RCC_OscConfig+0x49e>
  return HAL_OK;
 80052e0:	2000      	movs	r0, #0
 80052e2:	e6c5      	b.n	8005070 <HAL_RCC_OscConfig+0x240>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052e4:	2104      	movs	r1, #4
 80052e6:	4b27      	ldr	r3, [pc, #156]	@ (8005384 <HAL_RCC_OscConfig+0x554>)
 80052e8:	6a1a      	ldr	r2, [r3, #32]
 80052ea:	430a      	orrs	r2, r1
 80052ec:	621a      	str	r2, [r3, #32]
 80052ee:	6a1a      	ldr	r2, [r3, #32]
 80052f0:	3903      	subs	r1, #3
 80052f2:	430a      	orrs	r2, r1
 80052f4:	621a      	str	r2, [r3, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052f6:	e766      	b.n	80051c6 <HAL_RCC_OscConfig+0x396>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d100      	bne.n	80052fe <HAL_RCC_OscConfig+0x4ce>
 80052fc:	e6b7      	b.n	800506e <HAL_RCC_OscConfig+0x23e>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80052fe:	22c0      	movs	r2, #192	@ 0xc0
        pll_config  = RCC->CFGR;
 8005300:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005302:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8005304:	0252      	lsls	r2, r2, #9
        pll_config2 = RCC->CFGR2;
 8005306:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005308:	401a      	ands	r2, r3
 800530a:	428a      	cmp	r2, r1
 800530c:	d000      	beq.n	8005310 <HAL_RCC_OscConfig+0x4e0>
 800530e:	e6ae      	b.n	800506e <HAL_RCC_OscConfig+0x23e>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005310:	220f      	movs	r2, #15
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005312:	6b21      	ldr	r1, [r4, #48]	@ 0x30
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005314:	4002      	ands	r2, r0
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005316:	428a      	cmp	r2, r1
 8005318:	d000      	beq.n	800531c <HAL_RCC_OscConfig+0x4ec>
 800531a:	e6a8      	b.n	800506e <HAL_RCC_OscConfig+0x23e>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800531c:	22f0      	movs	r2, #240	@ 0xf0
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800531e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005320:	0392      	lsls	r2, r2, #14
 8005322:	4013      	ands	r3, r2
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005324:	1a18      	subs	r0, r3, r0
 8005326:	1e43      	subs	r3, r0, #1
 8005328:	4198      	sbcs	r0, r3
 800532a:	b2c0      	uxtb	r0, r0
 800532c:	e6a0      	b.n	8005070 <HAL_RCC_OscConfig+0x240>
      __HAL_RCC_HSI14ADC_DISABLE();
 800532e:	2104      	movs	r1, #4
 8005330:	4d14      	ldr	r5, [pc, #80]	@ (8005384 <HAL_RCC_OscConfig+0x554>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005332:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8005334:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8005336:	430b      	orrs	r3, r1
 8005338:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_ENABLE();
 800533a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800533c:	4313      	orrs	r3, r2
 800533e:	636b      	str	r3, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8005340:	f7ff f836 	bl	80043b0 <HAL_GetTick>
 8005344:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005346:	e005      	b.n	8005354 <HAL_RCC_OscConfig+0x524>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005348:	f7ff f832 	bl	80043b0 <HAL_GetTick>
 800534c:	1b80      	subs	r0, r0, r6
 800534e:	2802      	cmp	r0, #2
 8005350:	d900      	bls.n	8005354 <HAL_RCC_OscConfig+0x524>
 8005352:	e6db      	b.n	800510c <HAL_RCC_OscConfig+0x2dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005354:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8005356:	421f      	tst	r7, r3
 8005358:	d0f6      	beq.n	8005348 <HAL_RCC_OscConfig+0x518>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800535a:	21f8      	movs	r1, #248	@ 0xf8
 800535c:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 800535e:	69a3      	ldr	r3, [r4, #24]
 8005360:	438a      	bics	r2, r1
 8005362:	00db      	lsls	r3, r3, #3
 8005364:	4313      	orrs	r3, r2
 8005366:	636b      	str	r3, [r5, #52]	@ 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005368:	6823      	ldr	r3, [r4, #0]
 800536a:	e628      	b.n	8004fbe <HAL_RCC_OscConfig+0x18e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800536c:	2280      	movs	r2, #128	@ 0x80
 800536e:	4b05      	ldr	r3, [pc, #20]	@ (8005384 <HAL_RCC_OscConfig+0x554>)
 8005370:	02d2      	lsls	r2, r2, #11
 8005372:	6819      	ldr	r1, [r3, #0]
 8005374:	430a      	orrs	r2, r1
 8005376:	601a      	str	r2, [r3, #0]
 8005378:	2280      	movs	r2, #128	@ 0x80
 800537a:	6819      	ldr	r1, [r3, #0]
 800537c:	0252      	lsls	r2, r2, #9
 800537e:	430a      	orrs	r2, r1
 8005380:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005382:	e580      	b.n	8004e86 <HAL_RCC_OscConfig+0x56>
 8005384:	40021000 	.word	0x40021000
 8005388:	00001388 	.word	0x00001388
 800538c:	fffeffff 	.word	0xfffeffff
 8005390:	efffffff 	.word	0xefffffff
 8005394:	feffffff 	.word	0xfeffffff
 8005398:	ffc27fff 	.word	0xffc27fff

0800539c <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800539c:	200c      	movs	r0, #12
  tmpreg = RCC->CFGR;
 800539e:	4a16      	ldr	r2, [pc, #88]	@ (80053f8 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 80053a0:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 80053a2:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80053a4:	4018      	ands	r0, r3
 80053a6:	2808      	cmp	r0, #8
 80053a8:	d009      	beq.n	80053be <HAL_RCC_GetSysClockFreq+0x22>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80053aa:	380c      	subs	r0, #12
 80053ac:	4243      	negs	r3, r0
 80053ae:	4158      	adcs	r0, r3
 80053b0:	4b12      	ldr	r3, [pc, #72]	@ (80053fc <HAL_RCC_GetSysClockFreq+0x60>)
 80053b2:	4240      	negs	r0, r0
 80053b4:	4018      	ands	r0, r3
 80053b6:	4b12      	ldr	r3, [pc, #72]	@ (8005400 <HAL_RCC_GetSysClockFreq+0x64>)
 80053b8:	469c      	mov	ip, r3
 80053ba:	4460      	add	r0, ip
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80053bc:	bd10      	pop	{r4, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80053be:	210f      	movs	r1, #15
 80053c0:	0c98      	lsrs	r0, r3, #18
 80053c2:	4c10      	ldr	r4, [pc, #64]	@ (8005404 <HAL_RCC_GetSysClockFreq+0x68>)
 80053c4:	4008      	ands	r0, r1
 80053c6:	5c24      	ldrb	r4, [r4, r0]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80053c8:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 80053ca:	4a0f      	ldr	r2, [pc, #60]	@ (8005408 <HAL_RCC_GetSysClockFreq+0x6c>)
 80053cc:	4001      	ands	r1, r0
 80053ce:	5c51      	ldrb	r1, [r2, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80053d0:	22c0      	movs	r2, #192	@ 0xc0
 80053d2:	2080      	movs	r0, #128	@ 0x80
 80053d4:	0252      	lsls	r2, r2, #9
 80053d6:	4013      	ands	r3, r2
 80053d8:	0240      	lsls	r0, r0, #9
 80053da:	4283      	cmp	r3, r0
 80053dc:	d001      	beq.n	80053e2 <HAL_RCC_GetSysClockFreq+0x46>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d004      	beq.n	80053ec <HAL_RCC_GetSysClockFreq+0x50>
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80053e2:	4807      	ldr	r0, [pc, #28]	@ (8005400 <HAL_RCC_GetSysClockFreq+0x64>)
 80053e4:	f7fa fea2 	bl	800012c <__udivsi3>
 80053e8:	4360      	muls	r0, r4
 80053ea:	e7e7      	b.n	80053bc <HAL_RCC_GetSysClockFreq+0x20>
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80053ec:	4807      	ldr	r0, [pc, #28]	@ (800540c <HAL_RCC_GetSysClockFreq+0x70>)
 80053ee:	f7fa fe9d 	bl	800012c <__udivsi3>
 80053f2:	4360      	muls	r0, r4
 80053f4:	e7e2      	b.n	80053bc <HAL_RCC_GetSysClockFreq+0x20>
 80053f6:	46c0      	nop			@ (mov r8, r8)
 80053f8:	40021000 	.word	0x40021000
 80053fc:	02625a00 	.word	0x02625a00
 8005400:	007a1200 	.word	0x007a1200
 8005404:	080072fc 	.word	0x080072fc
 8005408:	080072ec 	.word	0x080072ec
 800540c:	02dc6c00 	.word	0x02dc6c00

08005410 <HAL_RCC_ClockConfig>:
{
 8005410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005412:	46ce      	mov	lr, r9
 8005414:	4647      	mov	r7, r8
 8005416:	0004      	movs	r4, r0
 8005418:	000d      	movs	r5, r1
 800541a:	b580      	push	{r7, lr}
  if(RCC_ClkInitStruct == NULL)
 800541c:	2800      	cmp	r0, #0
 800541e:	d00d      	beq.n	800543c <HAL_RCC_ClockConfig+0x2c>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005420:	2301      	movs	r3, #1
 8005422:	493f      	ldr	r1, [pc, #252]	@ (8005520 <HAL_RCC_ClockConfig+0x110>)
 8005424:	680a      	ldr	r2, [r1, #0]
 8005426:	401a      	ands	r2, r3
 8005428:	42aa      	cmp	r2, r5
 800542a:	d20c      	bcs.n	8005446 <HAL_RCC_ClockConfig+0x36>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800542c:	680a      	ldr	r2, [r1, #0]
 800542e:	439a      	bics	r2, r3
 8005430:	432a      	orrs	r2, r5
 8005432:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005434:	680a      	ldr	r2, [r1, #0]
 8005436:	4013      	ands	r3, r2
 8005438:	42ab      	cmp	r3, r5
 800543a:	d004      	beq.n	8005446 <HAL_RCC_ClockConfig+0x36>
    return HAL_ERROR;
 800543c:	2001      	movs	r0, #1
}
 800543e:	bcc0      	pop	{r6, r7}
 8005440:	46b9      	mov	r9, r7
 8005442:	46b0      	mov	r8, r6
 8005444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005446:	6823      	ldr	r3, [r4, #0]
 8005448:	079a      	lsls	r2, r3, #30
 800544a:	d50e      	bpl.n	800546a <HAL_RCC_ClockConfig+0x5a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800544c:	075a      	lsls	r2, r3, #29
 800544e:	d505      	bpl.n	800545c <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005450:	22e0      	movs	r2, #224	@ 0xe0
 8005452:	4934      	ldr	r1, [pc, #208]	@ (8005524 <HAL_RCC_ClockConfig+0x114>)
 8005454:	00d2      	lsls	r2, r2, #3
 8005456:	6848      	ldr	r0, [r1, #4]
 8005458:	4302      	orrs	r2, r0
 800545a:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800545c:	20f0      	movs	r0, #240	@ 0xf0
 800545e:	4931      	ldr	r1, [pc, #196]	@ (8005524 <HAL_RCC_ClockConfig+0x114>)
 8005460:	684a      	ldr	r2, [r1, #4]
 8005462:	4382      	bics	r2, r0
 8005464:	68a0      	ldr	r0, [r4, #8]
 8005466:	4302      	orrs	r2, r0
 8005468:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800546a:	07db      	lsls	r3, r3, #31
 800546c:	d524      	bpl.n	80054b8 <HAL_RCC_ClockConfig+0xa8>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800546e:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005470:	4b2c      	ldr	r3, [pc, #176]	@ (8005524 <HAL_RCC_ClockConfig+0x114>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005472:	2a01      	cmp	r2, #1
 8005474:	d04a      	beq.n	800550c <HAL_RCC_ClockConfig+0xfc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005476:	2a02      	cmp	r2, #2
 8005478:	d044      	beq.n	8005504 <HAL_RCC_ClockConfig+0xf4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800547a:	2a03      	cmp	r2, #3
 800547c:	d04c      	beq.n	8005518 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	079b      	lsls	r3, r3, #30
 8005482:	d5db      	bpl.n	800543c <HAL_RCC_ClockConfig+0x2c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005484:	2103      	movs	r1, #3
 8005486:	4e27      	ldr	r6, [pc, #156]	@ (8005524 <HAL_RCC_ClockConfig+0x114>)
 8005488:	6873      	ldr	r3, [r6, #4]
 800548a:	438b      	bics	r3, r1
 800548c:	4313      	orrs	r3, r2
 800548e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8005490:	f7fe ff8e 	bl	80043b0 <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005494:	230c      	movs	r3, #12
 8005496:	4698      	mov	r8, r3
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005498:	4b23      	ldr	r3, [pc, #140]	@ (8005528 <HAL_RCC_ClockConfig+0x118>)
    tickstart = HAL_GetTick();
 800549a:	0007      	movs	r7, r0
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800549c:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800549e:	e004      	b.n	80054aa <HAL_RCC_ClockConfig+0x9a>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054a0:	f7fe ff86 	bl	80043b0 <HAL_GetTick>
 80054a4:	1bc0      	subs	r0, r0, r7
 80054a6:	4548      	cmp	r0, r9
 80054a8:	d834      	bhi.n	8005514 <HAL_RCC_ClockConfig+0x104>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054aa:	4643      	mov	r3, r8
 80054ac:	6872      	ldr	r2, [r6, #4]
 80054ae:	401a      	ands	r2, r3
 80054b0:	6863      	ldr	r3, [r4, #4]
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d1f3      	bne.n	80054a0 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80054b8:	2101      	movs	r1, #1
 80054ba:	4a19      	ldr	r2, [pc, #100]	@ (8005520 <HAL_RCC_ClockConfig+0x110>)
 80054bc:	6813      	ldr	r3, [r2, #0]
 80054be:	400b      	ands	r3, r1
 80054c0:	42ab      	cmp	r3, r5
 80054c2:	d905      	bls.n	80054d0 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054c4:	6813      	ldr	r3, [r2, #0]
 80054c6:	438b      	bics	r3, r1
 80054c8:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ca:	6813      	ldr	r3, [r2, #0]
 80054cc:	4219      	tst	r1, r3
 80054ce:	d1b5      	bne.n	800543c <HAL_RCC_ClockConfig+0x2c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054d0:	6823      	ldr	r3, [r4, #0]
 80054d2:	075b      	lsls	r3, r3, #29
 80054d4:	d506      	bpl.n	80054e4 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80054d6:	4a13      	ldr	r2, [pc, #76]	@ (8005524 <HAL_RCC_ClockConfig+0x114>)
 80054d8:	4914      	ldr	r1, [pc, #80]	@ (800552c <HAL_RCC_ClockConfig+0x11c>)
 80054da:	6853      	ldr	r3, [r2, #4]
 80054dc:	400b      	ands	r3, r1
 80054de:	68e1      	ldr	r1, [r4, #12]
 80054e0:	430b      	orrs	r3, r1
 80054e2:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80054e4:	f7ff ff5a 	bl	800539c <HAL_RCC_GetSysClockFreq>
 80054e8:	4b0e      	ldr	r3, [pc, #56]	@ (8005524 <HAL_RCC_ClockConfig+0x114>)
 80054ea:	4a11      	ldr	r2, [pc, #68]	@ (8005530 <HAL_RCC_ClockConfig+0x120>)
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	4911      	ldr	r1, [pc, #68]	@ (8005534 <HAL_RCC_ClockConfig+0x124>)
 80054f0:	061b      	lsls	r3, r3, #24
 80054f2:	0f1b      	lsrs	r3, r3, #28
 80054f4:	5cd3      	ldrb	r3, [r2, r3]
 80054f6:	40d8      	lsrs	r0, r3
 80054f8:	6008      	str	r0, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80054fa:	2000      	movs	r0, #0
 80054fc:	f7fe ff16 	bl	800432c <HAL_InitTick>
  return HAL_OK;
 8005500:	2000      	movs	r0, #0
 8005502:	e79c      	b.n	800543e <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	019b      	lsls	r3, r3, #6
 8005508:	d4bc      	bmi.n	8005484 <HAL_RCC_ClockConfig+0x74>
 800550a:	e797      	b.n	800543c <HAL_RCC_ClockConfig+0x2c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	039b      	lsls	r3, r3, #14
 8005510:	d4b8      	bmi.n	8005484 <HAL_RCC_ClockConfig+0x74>
 8005512:	e793      	b.n	800543c <HAL_RCC_ClockConfig+0x2c>
        return HAL_TIMEOUT;
 8005514:	2003      	movs	r0, #3
 8005516:	e792      	b.n	800543e <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005518:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800551a:	039b      	lsls	r3, r3, #14
 800551c:	d4b2      	bmi.n	8005484 <HAL_RCC_ClockConfig+0x74>
 800551e:	e78d      	b.n	800543c <HAL_RCC_ClockConfig+0x2c>
 8005520:	40022000 	.word	0x40022000
 8005524:	40021000 	.word	0x40021000
 8005528:	00001388 	.word	0x00001388
 800552c:	fffff8ff 	.word	0xfffff8ff
 8005530:	080072dc 	.word	0x080072dc
 8005534:	20000050 	.word	0x20000050

08005538 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8005538:	4b04      	ldr	r3, [pc, #16]	@ (800554c <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 800553a:	4a05      	ldr	r2, [pc, #20]	@ (8005550 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	4905      	ldr	r1, [pc, #20]	@ (8005554 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005540:	055b      	lsls	r3, r3, #21
 8005542:	0f5b      	lsrs	r3, r3, #29
 8005544:	5ccb      	ldrb	r3, [r1, r3]
 8005546:	6810      	ldr	r0, [r2, #0]
 8005548:	40d8      	lsrs	r0, r3
}    
 800554a:	4770      	bx	lr
 800554c:	40021000 	.word	0x40021000
 8005550:	20000050 	.word	0x20000050
 8005554:	080072d4 	.word	0x080072d4

08005558 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800555a:	46ce      	mov	lr, r9
 800555c:	4647      	mov	r7, r8
 800555e:	b580      	push	{r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005560:	6803      	ldr	r3, [r0, #0]
{
 8005562:	0004      	movs	r4, r0
 8005564:	b083      	sub	sp, #12
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005566:	03da      	lsls	r2, r3, #15
 8005568:	d530      	bpl.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x74>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800556a:	2280      	movs	r2, #128	@ 0x80
 800556c:	4b49      	ldr	r3, [pc, #292]	@ (8005694 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800556e:	0552      	lsls	r2, r2, #21
 8005570:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8005572:	2700      	movs	r7, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005574:	4211      	tst	r1, r2
 8005576:	d054      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0xca>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005578:	2680      	movs	r6, #128	@ 0x80
 800557a:	4d47      	ldr	r5, [pc, #284]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800557c:	0076      	lsls	r6, r6, #1
 800557e:	682b      	ldr	r3, [r5, #0]
 8005580:	4233      	tst	r3, r6
 8005582:	d05c      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0xe6>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005584:	4d43      	ldr	r5, [pc, #268]	@ (8005694 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005586:	23c0      	movs	r3, #192	@ 0xc0
 8005588:	6a2a      	ldr	r2, [r5, #32]
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	0010      	movs	r0, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800558e:	6861      	ldr	r1, [r4, #4]
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005590:	4018      	ands	r0, r3
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005592:	421a      	tst	r2, r3
 8005594:	d011      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005596:	400b      	ands	r3, r1
 8005598:	4283      	cmp	r3, r0
 800559a:	d00e      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800559c:	2080      	movs	r0, #128	@ 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800559e:	6a2b      	ldr	r3, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80055a0:	6a2e      	ldr	r6, [r5, #32]
 80055a2:	0240      	lsls	r0, r0, #9
 80055a4:	4330      	orrs	r0, r6
 80055a6:	6228      	str	r0, [r5, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80055a8:	6a28      	ldr	r0, [r5, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80055aa:	4a3c      	ldr	r2, [pc, #240]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x144>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 80055ac:	4e3c      	ldr	r6, [pc, #240]	@ (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x148>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80055ae:	401a      	ands	r2, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80055b0:	4030      	ands	r0, r6
 80055b2:	6228      	str	r0, [r5, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80055b4:	622a      	str	r2, [r5, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80055b6:	07db      	lsls	r3, r3, #31
 80055b8:	d458      	bmi.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x114>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055ba:	4a36      	ldr	r2, [pc, #216]	@ (8005694 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80055bc:	4837      	ldr	r0, [pc, #220]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x144>)
 80055be:	6a13      	ldr	r3, [r2, #32]
 80055c0:	4003      	ands	r3, r0
 80055c2:	430b      	orrs	r3, r1
 80055c4:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80055c6:	2f01      	cmp	r7, #1
 80055c8:	d04a      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x108>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80055ca:	6823      	ldr	r3, [r4, #0]
 80055cc:	07da      	lsls	r2, r3, #31
 80055ce:	d506      	bpl.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80055d0:	2003      	movs	r0, #3
 80055d2:	4930      	ldr	r1, [pc, #192]	@ (8005694 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80055d4:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80055d6:	4382      	bics	r2, r0
 80055d8:	68a0      	ldr	r0, [r4, #8]
 80055da:	4302      	orrs	r2, r0
 80055dc:	630a      	str	r2, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055de:	069a      	lsls	r2, r3, #26
 80055e0:	d506      	bpl.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80055e2:	2010      	movs	r0, #16
 80055e4:	492b      	ldr	r1, [pc, #172]	@ (8005694 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80055e6:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80055e8:	4382      	bics	r2, r0
 80055ea:	68e0      	ldr	r0, [r4, #12]
 80055ec:	4302      	orrs	r2, r0
 80055ee:	630a      	str	r2, [r1, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80055f0:	039a      	lsls	r2, r3, #14
 80055f2:	d506      	bpl.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80055f4:	2080      	movs	r0, #128	@ 0x80
 80055f6:	4927      	ldr	r1, [pc, #156]	@ (8005694 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80055f8:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80055fa:	4382      	bics	r2, r0
 80055fc:	6960      	ldr	r0, [r4, #20]
 80055fe:	4302      	orrs	r2, r0
 8005600:	630a      	str	r2, [r1, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005602:	055b      	lsls	r3, r3, #21
 8005604:	d405      	bmi.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0xba>
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8005606:	2000      	movs	r0, #0
}
 8005608:	b003      	add	sp, #12
 800560a:	bcc0      	pop	{r6, r7}
 800560c:	46b9      	mov	r9, r7
 800560e:	46b0      	mov	r8, r6
 8005610:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005612:	2140      	movs	r1, #64	@ 0x40
 8005614:	4a1f      	ldr	r2, [pc, #124]	@ (8005694 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005616:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8005618:	438b      	bics	r3, r1
 800561a:	6921      	ldr	r1, [r4, #16]
 800561c:	430b      	orrs	r3, r1
 800561e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005620:	e7f1      	b.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0xae>
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005622:	2680      	movs	r6, #128	@ 0x80
    __HAL_RCC_PWR_CLK_ENABLE();
 8005624:	69d9      	ldr	r1, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005626:	4d1c      	ldr	r5, [pc, #112]	@ (8005698 <HAL_RCCEx_PeriphCLKConfig+0x140>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8005628:	4311      	orrs	r1, r2
 800562a:	61d9      	str	r1, [r3, #28]
 800562c:	69db      	ldr	r3, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800562e:	0076      	lsls	r6, r6, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8005630:	4013      	ands	r3, r2
 8005632:	9301      	str	r3, [sp, #4]
 8005634:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005636:	682b      	ldr	r3, [r5, #0]
      pwrclkchanged = SET;
 8005638:	3701      	adds	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800563a:	4233      	tst	r3, r6
 800563c:	d1a2      	bne.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800563e:	682b      	ldr	r3, [r5, #0]
 8005640:	4333      	orrs	r3, r6
 8005642:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8005644:	f7fe feb4 	bl	80043b0 <HAL_GetTick>
 8005648:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800564a:	682b      	ldr	r3, [r5, #0]
 800564c:	4233      	tst	r3, r6
 800564e:	d199      	bne.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x2c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005650:	f7fe feae 	bl	80043b0 <HAL_GetTick>
 8005654:	4643      	mov	r3, r8
 8005656:	1ac0      	subs	r0, r0, r3
 8005658:	2864      	cmp	r0, #100	@ 0x64
 800565a:	d9f6      	bls.n	800564a <HAL_RCCEx_PeriphCLKConfig+0xf2>
          return HAL_TIMEOUT;
 800565c:	2003      	movs	r0, #3
 800565e:	e7d3      	b.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005660:	69d3      	ldr	r3, [r2, #28]
 8005662:	4910      	ldr	r1, [pc, #64]	@ (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005664:	400b      	ands	r3, r1
 8005666:	61d3      	str	r3, [r2, #28]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005668:	6823      	ldr	r3, [r4, #0]
 800566a:	e7af      	b.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x74>
        tickstart = HAL_GetTick();
 800566c:	f7fe fea0 	bl	80043b0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005670:	2302      	movs	r3, #2
 8005672:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005674:	4b0c      	ldr	r3, [pc, #48]	@ (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
        tickstart = HAL_GetTick();
 8005676:	0006      	movs	r6, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005678:	4699      	mov	r9, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800567a:	e004      	b.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x12e>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800567c:	f7fe fe98 	bl	80043b0 <HAL_GetTick>
 8005680:	1b80      	subs	r0, r0, r6
 8005682:	4548      	cmp	r0, r9
 8005684:	d8ea      	bhi.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x104>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005686:	4642      	mov	r2, r8
 8005688:	6a2b      	ldr	r3, [r5, #32]
 800568a:	421a      	tst	r2, r3
 800568c:	d0f6      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x124>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800568e:	6861      	ldr	r1, [r4, #4]
 8005690:	e793      	b.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005692:	46c0      	nop			@ (mov r8, r8)
 8005694:	40021000 	.word	0x40021000
 8005698:	40007000 	.word	0x40007000
 800569c:	fffffcff 	.word	0xfffffcff
 80056a0:	fffeffff 	.word	0xfffeffff
 80056a4:	efffffff 	.word	0xefffffff
 80056a8:	00001388 	.word	0x00001388

080056ac <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80056ac:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80056ae:	253f      	movs	r5, #63	@ 0x3f
{
 80056b0:	46c6      	mov	lr, r8
 80056b2:	4690      	mov	r8, r2
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80056b4:	6800      	ldr	r0, [r0, #0]
{
 80056b6:	b500      	push	{lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80056b8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80056ba:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80056bc:	6903      	ldr	r3, [r0, #16]
 80056be:	045b      	lsls	r3, r3, #17
 80056c0:	0c5b      	lsrs	r3, r3, #17
 80056c2:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80056c4:	6803      	ldr	r3, [r0, #0]
 80056c6:	4816      	ldr	r0, [pc, #88]	@ (8005720 <HAL_RTC_GetTime+0x74>)
 80056c8:	4003      	ands	r3, r0
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80056ca:	0a1c      	lsrs	r4, r3, #8
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80056cc:	0c1f      	lsrs	r7, r3, #16
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80056ce:	b2e4      	uxtb	r4, r4
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80056d0:	b2de      	uxtb	r6, r3
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80056d2:	403d      	ands	r5, r7
 80056d4:	0220      	lsls	r0, r4, #8
 80056d6:	0432      	lsls	r2, r6, #16
 80056d8:	4328      	orrs	r0, r5
 80056da:	0d9b      	lsrs	r3, r3, #22
 80056dc:	061b      	lsls	r3, r3, #24
 80056de:	4310      	orrs	r0, r2
 80056e0:	4303      	orrs	r3, r0
 80056e2:	600b      	str	r3, [r1, #0]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80056e4:	4643      	mov	r3, r8
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d115      	bne.n	8005716 <HAL_RTC_GetTime+0x6a>
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
  uint32_t tens = 0U;
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80056ea:	220f      	movs	r2, #15
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80056ec:	092d      	lsrs	r5, r5, #4
 80056ee:	00ab      	lsls	r3, r5, #2
 80056f0:	195b      	adds	r3, r3, r5
 80056f2:	0920      	lsrs	r0, r4, #4
 80056f4:	005b      	lsls	r3, r3, #1
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80056f6:	4017      	ands	r7, r2
 80056f8:	19df      	adds	r7, r3, r7
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80056fa:	0083      	lsls	r3, r0, #2
 80056fc:	181b      	adds	r3, r3, r0
 80056fe:	005b      	lsls	r3, r3, #1
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8005700:	4014      	ands	r4, r2
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8005702:	0930      	lsrs	r0, r6, #4
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8005704:	191c      	adds	r4, r3, r4
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8005706:	0083      	lsls	r3, r0, #2
 8005708:	181b      	adds	r3, r3, r0
 800570a:	005b      	lsls	r3, r3, #1
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800570c:	4032      	ands	r2, r6
 800570e:	189b      	adds	r3, r3, r2
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005710:	700f      	strb	r7, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005712:	704c      	strb	r4, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005714:	708b      	strb	r3, [r1, #2]
}
 8005716:	2000      	movs	r0, #0
 8005718:	bc80      	pop	{r7}
 800571a:	46b8      	mov	r8, r7
 800571c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800571e:	46c0      	nop			@ (mov r8, r8)
 8005720:	007f7f7f 	.word	0x007f7f7f

08005724 <HAL_RTC_GetDate>:
{
 8005724:	b570      	push	{r4, r5, r6, lr}
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005726:	241f      	movs	r4, #31
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005728:	6803      	ldr	r3, [r0, #0]
 800572a:	4814      	ldr	r0, [pc, #80]	@ (800577c <HAL_RTC_GetDate+0x58>)
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	4003      	ands	r3, r0
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005730:	0a18      	lsrs	r0, r3, #8
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005732:	0c1e      	lsrs	r6, r3, #16
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005734:	b2c5      	uxtb	r5, r0
 8005736:	4020      	ands	r0, r4
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005738:	b2dc      	uxtb	r4, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800573a:	041b      	lsls	r3, r3, #16
 800573c:	0f5b      	lsrs	r3, r3, #29
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800573e:	70ce      	strb	r6, [r1, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005740:	7048      	strb	r0, [r1, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005742:	708c      	strb	r4, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005744:	700b      	strb	r3, [r1, #0]
  if (Format == RTC_FORMAT_BIN)
 8005746:	2a00      	cmp	r2, #0
 8005748:	d115      	bne.n	8005776 <HAL_RTC_GetDate+0x52>
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800574a:	0932      	lsrs	r2, r6, #4
 800574c:	0093      	lsls	r3, r2, #2
 800574e:	189b      	adds	r3, r3, r2
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8005750:	220f      	movs	r2, #15
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8005752:	005b      	lsls	r3, r3, #1
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8005754:	4016      	ands	r6, r2
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8005756:	0900      	lsrs	r0, r0, #4
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8005758:	199b      	adds	r3, r3, r6
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800575a:	70cb      	strb	r3, [r1, #3]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800575c:	0083      	lsls	r3, r0, #2
 800575e:	181b      	adds	r3, r3, r0
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8005760:	4015      	ands	r5, r2
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8005762:	005b      	lsls	r3, r3, #1
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8005764:	195b      	adds	r3, r3, r5
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8005766:	0920      	lsrs	r0, r4, #4
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005768:	704b      	strb	r3, [r1, #1]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800576a:	0083      	lsls	r3, r0, #2
 800576c:	181b      	adds	r3, r3, r0
 800576e:	005b      	lsls	r3, r3, #1
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8005770:	4022      	ands	r2, r4
 8005772:	189b      	adds	r3, r3, r2
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005774:	708b      	strb	r3, [r1, #2]
}
 8005776:	2000      	movs	r0, #0
 8005778:	bd70      	pop	{r4, r5, r6, pc}
 800577a:	46c0      	nop			@ (mov r8, r8)
 800577c:	00ffff3f 	.word	0x00ffff3f

08005780 <RTC_EnterInitMode>:
{
 8005780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005782:	46c6      	mov	lr, r8
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005784:	6802      	ldr	r2, [r0, #0]
{
 8005786:	0004      	movs	r4, r0
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005788:	68d3      	ldr	r3, [r2, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800578a:	2500      	movs	r5, #0
{
 800578c:	b500      	push	{lr}
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800578e:	065b      	lsls	r3, r3, #25
 8005790:	d503      	bpl.n	800579a <RTC_EnterInitMode+0x1a>
}
 8005792:	0028      	movs	r0, r5
 8005794:	bc80      	pop	{r7}
 8005796:	46b8      	mov	r8, r7
 8005798:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800579a:	2180      	movs	r1, #128	@ 0x80
 800579c:	68d3      	ldr	r3, [r2, #12]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800579e:	2740      	movs	r7, #64	@ 0x40
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80057a0:	430b      	orrs	r3, r1
 80057a2:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 80057a4:	f7fe fe04 	bl	80043b0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80057a8:	23fa      	movs	r3, #250	@ 0xfa
 80057aa:	009b      	lsls	r3, r3, #2
    tickstart = HAL_GetTick();
 80057ac:	0006      	movs	r6, r0
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80057ae:	4698      	mov	r8, r3
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80057b0:	6823      	ldr	r3, [r4, #0]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	421f      	tst	r7, r3
 80057b6:	d1ec      	bne.n	8005792 <RTC_EnterInitMode+0x12>
 80057b8:	2d01      	cmp	r5, #1
 80057ba:	d0ea      	beq.n	8005792 <RTC_EnterInitMode+0x12>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80057bc:	f7fe fdf8 	bl	80043b0 <HAL_GetTick>
 80057c0:	1b80      	subs	r0, r0, r6
 80057c2:	4540      	cmp	r0, r8
 80057c4:	d9f4      	bls.n	80057b0 <RTC_EnterInitMode+0x30>
        hrtc->State = HAL_RTC_STATE_ERROR;
 80057c6:	2304      	movs	r3, #4
        status = HAL_ERROR;
 80057c8:	2501      	movs	r5, #1
        hrtc->State = HAL_RTC_STATE_ERROR;
 80057ca:	7763      	strb	r3, [r4, #29]
        status = HAL_ERROR;
 80057cc:	e7f0      	b.n	80057b0 <RTC_EnterInitMode+0x30>
 80057ce:	46c0      	nop			@ (mov r8, r8)

080057d0 <RTC_ExitInitMode>:
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80057d0:	2180      	movs	r1, #128	@ 0x80
{
 80057d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80057d4:	6803      	ldr	r3, [r0, #0]
{
 80057d6:	0004      	movs	r4, r0
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80057d8:	68da      	ldr	r2, [r3, #12]
 80057da:	438a      	bics	r2, r1
 80057dc:	60da      	str	r2, [r3, #12]
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80057de:	689a      	ldr	r2, [r3, #8]
 80057e0:	0692      	lsls	r2, r2, #26
 80057e2:	d501      	bpl.n	80057e8 <RTC_ExitInitMode+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 80057e4:	2000      	movs	r0, #0
}
 80057e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80057e8:	4a0b      	ldr	r2, [pc, #44]	@ (8005818 <RTC_ExitInitMode+0x48>)
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80057ea:	27fa      	movs	r7, #250	@ 0xfa
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80057ec:	60da      	str	r2, [r3, #12]
  tickstart = HAL_GetTick();
 80057ee:	f7fe fddf 	bl	80043b0 <HAL_GetTick>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80057f2:	2620      	movs	r6, #32
  tickstart = HAL_GetTick();
 80057f4:	0005      	movs	r5, r0
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80057f6:	00bf      	lsls	r7, r7, #2
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80057f8:	e004      	b.n	8005804 <RTC_ExitInitMode+0x34>
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80057fa:	f7fe fdd9 	bl	80043b0 <HAL_GetTick>
 80057fe:	1b40      	subs	r0, r0, r5
 8005800:	42b8      	cmp	r0, r7
 8005802:	d804      	bhi.n	800580e <RTC_ExitInitMode+0x3e>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005804:	6823      	ldr	r3, [r4, #0]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	421e      	tst	r6, r3
 800580a:	d0f6      	beq.n	80057fa <RTC_ExitInitMode+0x2a>
 800580c:	e7ea      	b.n	80057e4 <RTC_ExitInitMode+0x14>
      hrtc->State = HAL_RTC_STATE_ERROR;
 800580e:	2304      	movs	r3, #4
      status = HAL_ERROR;
 8005810:	2001      	movs	r0, #1
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005812:	7763      	strb	r3, [r4, #29]
  return status;
 8005814:	e7e7      	b.n	80057e6 <RTC_ExitInitMode+0x16>
 8005816:	46c0      	nop			@ (mov r8, r8)
 8005818:	00017959 	.word	0x00017959

0800581c <HAL_RTC_Init>:
{
 800581c:	b510      	push	{r4, lr}
 800581e:	1e04      	subs	r4, r0, #0
  if (hrtc == NULL)
 8005820:	d047      	beq.n	80058b2 <HAL_RTC_Init+0x96>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005822:	7f43      	ldrb	r3, [r0, #29]
 8005824:	b2da      	uxtb	r2, r3
 8005826:	2b00      	cmp	r3, #0
 8005828:	d009      	beq.n	800583e <HAL_RTC_Init+0x22>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800582a:	2302      	movs	r3, #2
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800582c:	6822      	ldr	r2, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800582e:	7763      	strb	r3, [r4, #29]
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005830:	68d3      	ldr	r3, [r2, #12]
 8005832:	06db      	lsls	r3, r3, #27
 8005834:	d50c      	bpl.n	8005850 <HAL_RTC_Init+0x34>
    hrtc->State = HAL_RTC_STATE_READY;
 8005836:	2301      	movs	r3, #1
 8005838:	2000      	movs	r0, #0
 800583a:	7763      	strb	r3, [r4, #29]
}
 800583c:	bd10      	pop	{r4, pc}
    hrtc->Lock = HAL_UNLOCKED;
 800583e:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8005840:	f7fe fca8 	bl	8004194 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005844:	2302      	movs	r3, #2
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005846:	6822      	ldr	r2, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005848:	7763      	strb	r3, [r4, #29]
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800584a:	68d3      	ldr	r3, [r2, #12]
 800584c:	06db      	lsls	r3, r3, #27
 800584e:	d4f2      	bmi.n	8005836 <HAL_RTC_Init+0x1a>
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005850:	23ca      	movs	r3, #202	@ 0xca
 8005852:	6253      	str	r3, [r2, #36]	@ 0x24
 8005854:	3b77      	subs	r3, #119	@ 0x77
 8005856:	6253      	str	r3, [r2, #36]	@ 0x24
    status = RTC_EnterInitMode(hrtc);
 8005858:	0020      	movs	r0, r4
 800585a:	f7ff ff91 	bl	8005780 <RTC_EnterInitMode>
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800585e:	6823      	ldr	r3, [r4, #0]
    if (status == HAL_OK)
 8005860:	2800      	cmp	r0, #0
 8005862:	d002      	beq.n	800586a <HAL_RTC_Init+0x4e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005864:	22ff      	movs	r2, #255	@ 0xff
 8005866:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 8005868:	e7e8      	b.n	800583c <HAL_RTC_Init+0x20>
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800586a:	689a      	ldr	r2, [r3, #8]
 800586c:	4912      	ldr	r1, [pc, #72]	@ (80058b8 <HAL_RTC_Init+0x9c>)
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800586e:	6920      	ldr	r0, [r4, #16]
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005870:	400a      	ands	r2, r1
 8005872:	609a      	str	r2, [r3, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005874:	6862      	ldr	r2, [r4, #4]
 8005876:	6899      	ldr	r1, [r3, #8]
 8005878:	4302      	orrs	r2, r0
 800587a:	6960      	ldr	r0, [r4, #20]
 800587c:	4302      	orrs	r2, r0
 800587e:	430a      	orrs	r2, r1
 8005880:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005882:	68e2      	ldr	r2, [r4, #12]
      status = RTC_ExitInitMode(hrtc);
 8005884:	0020      	movs	r0, r4
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005886:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005888:	68a2      	ldr	r2, [r4, #8]
 800588a:	6919      	ldr	r1, [r3, #16]
 800588c:	0412      	lsls	r2, r2, #16
 800588e:	430a      	orrs	r2, r1
 8005890:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 8005892:	f7ff ff9d 	bl	80057d0 <RTC_ExitInitMode>
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005896:	6823      	ldr	r3, [r4, #0]
    if (status == HAL_OK)
 8005898:	2800      	cmp	r0, #0
 800589a:	d1e3      	bne.n	8005864 <HAL_RTC_Init+0x48>
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800589c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800589e:	4907      	ldr	r1, [pc, #28]	@ (80058bc <HAL_RTC_Init+0xa0>)
 80058a0:	400a      	ands	r2, r1
 80058a2:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80058a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80058a6:	69a1      	ldr	r1, [r4, #24]
 80058a8:	430a      	orrs	r2, r1
 80058aa:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058ac:	22ff      	movs	r2, #255	@ 0xff
 80058ae:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 80058b0:	e7c1      	b.n	8005836 <HAL_RTC_Init+0x1a>
    return HAL_ERROR;
 80058b2:	2001      	movs	r0, #1
 80058b4:	e7c2      	b.n	800583c <HAL_RTC_Init+0x20>
 80058b6:	46c0      	nop			@ (mov r8, r8)
 80058b8:	ff8fffbf 	.word	0xff8fffbf
 80058bc:	fffbffff 	.word	0xfffbffff

080058c0 <HAL_RTC_SetTime>:
{
 80058c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 80058c2:	7f03      	ldrb	r3, [r0, #28]
{
 80058c4:	0005      	movs	r5, r0
 80058c6:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d100      	bne.n	80058ce <HAL_RTC_SetTime+0xe>
 80058cc:	e070      	b.n	80059b0 <HAL_RTC_SetTime+0xf0>
 80058ce:	2301      	movs	r3, #1
 80058d0:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80058d2:	3301      	adds	r3, #1
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80058d4:	6801      	ldr	r1, [r0, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80058d6:	7743      	strb	r3, [r0, #29]
  if (Format == RTC_FORMAT_BIN)
 80058d8:	2a00      	cmp	r2, #0
 80058da:	d01e      	beq.n	800591a <HAL_RTC_SetTime+0x5a>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80058dc:	2040      	movs	r0, #64	@ 0x40
 80058de:	0003      	movs	r3, r0
 80058e0:	688a      	ldr	r2, [r1, #8]
 80058e2:	4013      	ands	r3, r2
 80058e4:	4210      	tst	r0, r2
 80058e6:	d05f      	beq.n	80059a8 <HAL_RTC_SetTime+0xe8>
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80058e8:	78f3      	ldrb	r3, [r6, #3]
 80058ea:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80058ec:	7837      	ldrb	r7, [r6, #0]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80058ee:	7872      	ldrb	r2, [r6, #1]
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80058f0:	043f      	lsls	r7, r7, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80058f2:	0212      	lsls	r2, r2, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80058f4:	4317      	orrs	r7, r2
              ((uint32_t) sTime->Seconds)                       | \
 80058f6:	78b2      	ldrb	r2, [r6, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80058f8:	4317      	orrs	r7, r2
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80058fa:	431f      	orrs	r7, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80058fc:	23ca      	movs	r3, #202	@ 0xca
 80058fe:	624b      	str	r3, [r1, #36]	@ 0x24
 8005900:	3b77      	subs	r3, #119	@ 0x77
  status = RTC_EnterInitMode(hrtc);
 8005902:	0028      	movs	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005904:	624b      	str	r3, [r1, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 8005906:	f7ff ff3b 	bl	8005780 <RTC_EnterInitMode>
  if (status == HAL_OK)
 800590a:	2800      	cmp	r0, #0
 800590c:	d036      	beq.n	800597c <HAL_RTC_SetTime+0xbc>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800590e:	22ff      	movs	r2, #255	@ 0xff
 8005910:	682b      	ldr	r3, [r5, #0]
 8005912:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 8005914:	2300      	movs	r3, #0
 8005916:	772b      	strb	r3, [r5, #28]
}
 8005918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800591a:	2440      	movs	r4, #64	@ 0x40
 800591c:	0020      	movs	r0, r4
 800591e:	688b      	ldr	r3, [r1, #8]
 8005920:	4018      	ands	r0, r3
 8005922:	421c      	tst	r4, r3
 8005924:	d042      	beq.n	80059ac <HAL_RTC_SetTime+0xec>
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005926:	78f0      	ldrb	r0, [r6, #3]
 8005928:	0580      	lsls	r0, r0, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800592a:	7833      	ldrb	r3, [r6, #0]
  while (number >= 10U)
 800592c:	2b09      	cmp	r3, #9
 800592e:	d908      	bls.n	8005942 <HAL_RTC_SetTime+0x82>
  uint32_t bcdhigh = 0U;
 8005930:	2400      	movs	r4, #0
    number -= 10U;
 8005932:	3b0a      	subs	r3, #10
 8005934:	b2db      	uxtb	r3, r3
    bcdhigh++;
 8005936:	3401      	adds	r4, #1
  while (number >= 10U)
 8005938:	2b09      	cmp	r3, #9
 800593a:	d8fa      	bhi.n	8005932 <HAL_RTC_SetTime+0x72>
  return ((uint8_t)(bcdhigh << 4U) | number);
 800593c:	0124      	lsls	r4, r4, #4
 800593e:	4323      	orrs	r3, r4
 8005940:	b2db      	uxtb	r3, r3
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005942:	041f      	lsls	r7, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005944:	7873      	ldrb	r3, [r6, #1]
  while (number >= 10U)
 8005946:	2b09      	cmp	r3, #9
 8005948:	d908      	bls.n	800595c <HAL_RTC_SetTime+0x9c>
  uint32_t bcdhigh = 0U;
 800594a:	2400      	movs	r4, #0
    number -= 10U;
 800594c:	3b0a      	subs	r3, #10
 800594e:	b2db      	uxtb	r3, r3
    bcdhigh++;
 8005950:	3401      	adds	r4, #1
  while (number >= 10U)
 8005952:	2b09      	cmp	r3, #9
 8005954:	d8fa      	bhi.n	800594c <HAL_RTC_SetTime+0x8c>
  return ((uint8_t)(bcdhigh << 4U) | number);
 8005956:	0124      	lsls	r4, r4, #4
 8005958:	4323      	orrs	r3, r4
 800595a:	b2db      	uxtb	r3, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800595c:	78b4      	ldrb	r4, [r6, #2]
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800595e:	021b      	lsls	r3, r3, #8
  while (number >= 10U)
 8005960:	2c09      	cmp	r4, #9
 8005962:	d907      	bls.n	8005974 <HAL_RTC_SetTime+0xb4>
    number -= 10U;
 8005964:	3c0a      	subs	r4, #10
 8005966:	b2e4      	uxtb	r4, r4
    bcdhigh++;
 8005968:	3201      	adds	r2, #1
  while (number >= 10U)
 800596a:	2c09      	cmp	r4, #9
 800596c:	d8fa      	bhi.n	8005964 <HAL_RTC_SetTime+0xa4>
  return ((uint8_t)(bcdhigh << 4U) | number);
 800596e:	0112      	lsls	r2, r2, #4
 8005970:	4314      	orrs	r4, r2
 8005972:	b2e4      	uxtb	r4, r4
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005974:	4307      	orrs	r7, r0
 8005976:	431f      	orrs	r7, r3
 8005978:	4327      	orrs	r7, r4
 800597a:	e7bf      	b.n	80058fc <HAL_RTC_SetTime+0x3c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800597c:	4a0d      	ldr	r2, [pc, #52]	@ (80059b4 <HAL_RTC_SetTime+0xf4>)
 800597e:	682b      	ldr	r3, [r5, #0]
 8005980:	4017      	ands	r7, r2
 8005982:	601f      	str	r7, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005984:	689a      	ldr	r2, [r3, #8]
 8005986:	490c      	ldr	r1, [pc, #48]	@ (80059b8 <HAL_RTC_SetTime+0xf8>)
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005988:	6930      	ldr	r0, [r6, #16]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800598a:	400a      	ands	r2, r1
 800598c:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800598e:	68f2      	ldr	r2, [r6, #12]
 8005990:	6899      	ldr	r1, [r3, #8]
 8005992:	4302      	orrs	r2, r0
 8005994:	430a      	orrs	r2, r1
    status = RTC_ExitInitMode(hrtc);
 8005996:	0028      	movs	r0, r5
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005998:	609a      	str	r2, [r3, #8]
    status = RTC_ExitInitMode(hrtc);
 800599a:	f7ff ff19 	bl	80057d0 <RTC_ExitInitMode>
  if (status == HAL_OK)
 800599e:	2800      	cmp	r0, #0
 80059a0:	d1b5      	bne.n	800590e <HAL_RTC_SetTime+0x4e>
    hrtc->State = HAL_RTC_STATE_READY;
 80059a2:	2301      	movs	r3, #1
 80059a4:	776b      	strb	r3, [r5, #29]
 80059a6:	e7b2      	b.n	800590e <HAL_RTC_SetTime+0x4e>
      sTime->TimeFormat = 0x00U;
 80059a8:	70f3      	strb	r3, [r6, #3]
 80059aa:	e79f      	b.n	80058ec <HAL_RTC_SetTime+0x2c>
      sTime->TimeFormat = 0x00U;
 80059ac:	70f0      	strb	r0, [r6, #3]
 80059ae:	e7bc      	b.n	800592a <HAL_RTC_SetTime+0x6a>
  __HAL_LOCK(hrtc);
 80059b0:	2002      	movs	r0, #2
 80059b2:	e7b1      	b.n	8005918 <HAL_RTC_SetTime+0x58>
 80059b4:	007f7f7f 	.word	0x007f7f7f
 80059b8:	fffbffff 	.word	0xfffbffff

080059bc <HAL_RTC_SetDate>:
{
 80059bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 80059be:	7f03      	ldrb	r3, [r0, #28]
{
 80059c0:	0005      	movs	r5, r0
  __HAL_LOCK(hrtc);
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d05b      	beq.n	8005a7e <HAL_RTC_SetDate+0xc2>
 80059c6:	2301      	movs	r3, #1
 80059c8:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80059ca:	3301      	adds	r3, #1
 80059cc:	7743      	strb	r3, [r0, #29]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80059ce:	780f      	ldrb	r7, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80059d0:	78cb      	ldrb	r3, [r1, #3]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80059d2:	7848      	ldrb	r0, [r1, #1]
                  ((uint32_t) sDate->Date)                      | \
 80059d4:	788e      	ldrb	r6, [r1, #2]
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80059d6:	037f      	lsls	r7, r7, #13
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80059d8:	2a00      	cmp	r2, #0
 80059da:	d014      	beq.n	8005a06 <HAL_RTC_SetDate+0x4a>
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80059dc:	041c      	lsls	r4, r3, #16
 80059de:	433c      	orrs	r4, r7
 80059e0:	4334      	orrs	r4, r6
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80059e2:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80059e4:	4304      	orrs	r4, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80059e6:	22ca      	movs	r2, #202	@ 0xca
 80059e8:	682b      	ldr	r3, [r5, #0]
  status = RTC_EnterInitMode(hrtc);
 80059ea:	0028      	movs	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80059ec:	625a      	str	r2, [r3, #36]	@ 0x24
 80059ee:	3a77      	subs	r2, #119	@ 0x77
 80059f0:	625a      	str	r2, [r3, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 80059f2:	f7ff fec5 	bl	8005780 <RTC_EnterInitMode>
  if (status == HAL_OK)
 80059f6:	2800      	cmp	r0, #0
 80059f8:	d032      	beq.n	8005a60 <HAL_RTC_SetDate+0xa4>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059fa:	22ff      	movs	r2, #255	@ 0xff
 80059fc:	682b      	ldr	r3, [r5, #0]
 80059fe:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 8005a00:	2300      	movs	r3, #0
 8005a02:	772b      	strb	r3, [r5, #28]
}
 8005a04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005a06:	2410      	movs	r4, #16
 8005a08:	4204      	tst	r4, r0
 8005a0a:	d035      	beq.n	8005a78 <HAL_RTC_SetDate+0xbc>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005a0c:	43a0      	bics	r0, r4
 8005a0e:	300a      	adds	r0, #10
 8005a10:	b2c0      	uxtb	r0, r0
 8005a12:	7048      	strb	r0, [r1, #1]
  while (number >= 10U)
 8005a14:	2b09      	cmp	r3, #9
 8005a16:	d934      	bls.n	8005a82 <HAL_RTC_SetDate+0xc6>
  uint32_t bcdhigh = 0U;
 8005a18:	2100      	movs	r1, #0
    number -= 10U;
 8005a1a:	3b0a      	subs	r3, #10
 8005a1c:	b2db      	uxtb	r3, r3
    bcdhigh++;
 8005a1e:	3101      	adds	r1, #1
  while (number >= 10U)
 8005a20:	2b09      	cmp	r3, #9
 8005a22:	d8fa      	bhi.n	8005a1a <HAL_RTC_SetDate+0x5e>
  return ((uint8_t)(bcdhigh << 4U) | number);
 8005a24:	0109      	lsls	r1, r1, #4
 8005a26:	430b      	orrs	r3, r1
 8005a28:	b2db      	uxtb	r3, r3
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005a2a:	041b      	lsls	r3, r3, #16
  while (number >= 10U)
 8005a2c:	2809      	cmp	r0, #9
 8005a2e:	d908      	bls.n	8005a42 <HAL_RTC_SetDate+0x86>
  uint32_t bcdhigh = 0U;
 8005a30:	2100      	movs	r1, #0
    number -= 10U;
 8005a32:	380a      	subs	r0, #10
 8005a34:	b2c0      	uxtb	r0, r0
    bcdhigh++;
 8005a36:	3101      	adds	r1, #1
  while (number >= 10U)
 8005a38:	2809      	cmp	r0, #9
 8005a3a:	d8fa      	bhi.n	8005a32 <HAL_RTC_SetDate+0x76>
  return ((uint8_t)(bcdhigh << 4U) | number);
 8005a3c:	0109      	lsls	r1, r1, #4
 8005a3e:	4308      	orrs	r0, r1
 8005a40:	b2c0      	uxtb	r0, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005a42:	0204      	lsls	r4, r0, #8
  while (number >= 10U)
 8005a44:	2e09      	cmp	r6, #9
 8005a46:	d907      	bls.n	8005a58 <HAL_RTC_SetDate+0x9c>
    number -= 10U;
 8005a48:	3e0a      	subs	r6, #10
 8005a4a:	b2f6      	uxtb	r6, r6
    bcdhigh++;
 8005a4c:	3201      	adds	r2, #1
  while (number >= 10U)
 8005a4e:	2e09      	cmp	r6, #9
 8005a50:	d8fa      	bhi.n	8005a48 <HAL_RTC_SetDate+0x8c>
  return ((uint8_t)(bcdhigh << 4U) | number);
 8005a52:	0112      	lsls	r2, r2, #4
 8005a54:	4316      	orrs	r6, r2
 8005a56:	b2f6      	uxtb	r6, r6
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005a58:	433b      	orrs	r3, r7
 8005a5a:	431c      	orrs	r4, r3
 8005a5c:	4334      	orrs	r4, r6
 8005a5e:	e7c2      	b.n	80059e6 <HAL_RTC_SetDate+0x2a>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005a60:	4a09      	ldr	r2, [pc, #36]	@ (8005a88 <HAL_RTC_SetDate+0xcc>)
 8005a62:	682b      	ldr	r3, [r5, #0]
 8005a64:	4014      	ands	r4, r2
    status = RTC_ExitInitMode(hrtc);
 8005a66:	0028      	movs	r0, r5
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005a68:	605c      	str	r4, [r3, #4]
    status = RTC_ExitInitMode(hrtc);
 8005a6a:	f7ff feb1 	bl	80057d0 <RTC_ExitInitMode>
  if (status == HAL_OK)
 8005a6e:	2800      	cmp	r0, #0
 8005a70:	d1c3      	bne.n	80059fa <HAL_RTC_SetDate+0x3e>
    hrtc->State = HAL_RTC_STATE_READY;
 8005a72:	2301      	movs	r3, #1
 8005a74:	776b      	strb	r3, [r5, #29]
 8005a76:	e7c0      	b.n	80059fa <HAL_RTC_SetDate+0x3e>
  while (number >= 10U)
 8005a78:	2b09      	cmp	r3, #9
 8005a7a:	d8cd      	bhi.n	8005a18 <HAL_RTC_SetDate+0x5c>
 8005a7c:	e7d5      	b.n	8005a2a <HAL_RTC_SetDate+0x6e>
  __HAL_LOCK(hrtc);
 8005a7e:	2002      	movs	r0, #2
 8005a80:	e7c0      	b.n	8005a04 <HAL_RTC_SetDate+0x48>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005a82:	041b      	lsls	r3, r3, #16
  while (number >= 10U)
 8005a84:	e7d4      	b.n	8005a30 <HAL_RTC_SetDate+0x74>
 8005a86:	46c0      	nop			@ (mov r8, r8)
 8005a88:	00ffff3f 	.word	0x00ffff3f

08005a8c <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a8c:	213d      	movs	r1, #61	@ 0x3d
{
 8005a8e:	b510      	push	{r4, lr}
  if (htim->State != HAL_TIM_STATE_READY)
 8005a90:	5c42      	ldrb	r2, [r0, r1]
{
 8005a92:	0003      	movs	r3, r0
  if (htim->State != HAL_TIM_STATE_READY)
 8005a94:	b2d4      	uxtb	r4, r2
  {
    return HAL_ERROR;
 8005a96:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8005a98:	2a01      	cmp	r2, #1
 8005a9a:	d110      	bne.n	8005abe <HAL_TIM_Base_Start+0x32>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a9c:	3201      	adds	r2, #1
 8005a9e:	545a      	strb	r2, [r3, r1]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a0d      	ldr	r2, [pc, #52]	@ (8005ad8 <HAL_TIM_Base_Start+0x4c>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d00b      	beq.n	8005ac0 <HAL_TIM_Base_Start+0x34>
 8005aa8:	2280      	movs	r2, #128	@ 0x80
 8005aaa:	05d2      	lsls	r2, r2, #23
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d007      	beq.n	8005ac0 <HAL_TIM_Base_Start+0x34>
 8005ab0:	4a0a      	ldr	r2, [pc, #40]	@ (8005adc <HAL_TIM_Base_Start+0x50>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d004      	beq.n	8005ac0 <HAL_TIM_Base_Start+0x34>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	4322      	orrs	r2, r4
 8005aba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005abc:	2000      	movs	r0, #0
}
 8005abe:	bd10      	pop	{r4, pc}
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ac0:	2207      	movs	r2, #7
 8005ac2:	6899      	ldr	r1, [r3, #8]
 8005ac4:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ac6:	2a06      	cmp	r2, #6
 8005ac8:	d0f8      	beq.n	8005abc <HAL_TIM_Base_Start+0x30>
      __HAL_TIM_ENABLE(htim);
 8005aca:	2101      	movs	r1, #1
 8005acc:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8005ace:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	601a      	str	r2, [r3, #0]
 8005ad4:	e7f3      	b.n	8005abe <HAL_TIM_Base_Start+0x32>
 8005ad6:	46c0      	nop			@ (mov r8, r8)
 8005ad8:	40012c00 	.word	0x40012c00
 8005adc:	40000400 	.word	0x40000400

08005ae0 <HAL_TIM_ConfigClockSource>:
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ae0:	233c      	movs	r3, #60	@ 0x3c
{
 8005ae2:	b570      	push	{r4, r5, r6, lr}
 8005ae4:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 8005ae6:	5cc0      	ldrb	r0, [r0, r3]
 8005ae8:	2801      	cmp	r0, #1
 8005aea:	d100      	bne.n	8005aee <HAL_TIM_ConfigClockSource+0xe>
 8005aec:	e073      	b.n	8005bd6 <HAL_TIM_ConfigClockSource+0xf6>
 8005aee:	2401      	movs	r4, #1

  htim->State = HAL_TIM_STATE_BUSY;
 8005af0:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8005af2:	54d4      	strb	r4, [r2, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8005af4:	3301      	adds	r3, #1
 8005af6:	54d0      	strb	r0, [r2, r3]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005af8:	6810      	ldr	r0, [r2, #0]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005afa:	4d51      	ldr	r5, [pc, #324]	@ (8005c40 <HAL_TIM_ConfigClockSource+0x160>)
  tmpsmcr = htim->Instance->SMCR;
 8005afc:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005afe:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8005b00:	6083      	str	r3, [r0, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b02:	680b      	ldr	r3, [r1, #0]
 8005b04:	2b60      	cmp	r3, #96	@ 0x60
 8005b06:	d100      	bne.n	8005b0a <HAL_TIM_ConfigClockSource+0x2a>
 8005b08:	e067      	b.n	8005bda <HAL_TIM_ConfigClockSource+0xfa>
 8005b0a:	d81d      	bhi.n	8005b48 <HAL_TIM_ConfigClockSource+0x68>
 8005b0c:	2b40      	cmp	r3, #64	@ 0x40
 8005b0e:	d100      	bne.n	8005b12 <HAL_TIM_ConfigClockSource+0x32>
 8005b10:	e07d      	b.n	8005c0e <HAL_TIM_ConfigClockSource+0x12e>
 8005b12:	d93f      	bls.n	8005b94 <HAL_TIM_ConfigClockSource+0xb4>
 8005b14:	2b50      	cmp	r3, #80	@ 0x50
 8005b16:	d135      	bne.n	8005b84 <HAL_TIM_ConfigClockSource+0xa4>
      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
                               sClockSourceConfig->ClockPolarity,
 8005b18:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005b1a:	68cb      	ldr	r3, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b1c:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b1e:	6a06      	ldr	r6, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b20:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b22:	43a6      	bics	r6, r4
 8005b24:	6206      	str	r6, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b26:	26f0      	movs	r6, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8005b28:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b2a:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b2c:	4323      	orrs	r3, r4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b2e:	240a      	movs	r4, #10
 8005b30:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8005b32:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b34:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8005b36:	6201      	str	r1, [r0, #32]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b38:	2170      	movs	r1, #112	@ 0x70
  tmpsmcr = TIMx->SMCR;
 8005b3a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b3c:	438b      	bics	r3, r1
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b3e:	3919      	subs	r1, #25
 8005b40:	430b      	orrs	r3, r1
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b42:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005b44:	2000      	movs	r0, #0
 8005b46:	e01e      	b.n	8005b86 <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 8005b48:	2480      	movs	r4, #128	@ 0x80
 8005b4a:	0164      	lsls	r4, r4, #5
 8005b4c:	42a3      	cmp	r3, r4
 8005b4e:	d0f9      	beq.n	8005b44 <HAL_TIM_ConfigClockSource+0x64>
 8005b50:	2480      	movs	r4, #128	@ 0x80
 8005b52:	01a4      	lsls	r4, r4, #6
 8005b54:	42a3      	cmp	r3, r4
 8005b56:	d12b      	bne.n	8005bb0 <HAL_TIM_ConfigClockSource+0xd0>
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b58:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b5a:	4b3a      	ldr	r3, [pc, #232]	@ (8005c44 <HAL_TIM_ConfigClockSource+0x164>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b5c:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b5e:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b60:	688b      	ldr	r3, [r1, #8]
 8005b62:	68c9      	ldr	r1, [r1, #12]
 8005b64:	432b      	orrs	r3, r5
 8005b66:	0209      	lsls	r1, r1, #8
 8005b68:	430b      	orrs	r3, r1
 8005b6a:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b6c:	6083      	str	r3, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b6e:	2380      	movs	r3, #128	@ 0x80
 8005b70:	6881      	ldr	r1, [r0, #8]
 8005b72:	01db      	lsls	r3, r3, #7
 8005b74:	430b      	orrs	r3, r1
 8005b76:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005b78:	2000      	movs	r0, #0
 8005b7a:	e004      	b.n	8005b86 <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 8005b7c:	2110      	movs	r1, #16
 8005b7e:	001c      	movs	r4, r3
 8005b80:	438c      	bics	r4, r1
 8005b82:	d00c      	beq.n	8005b9e <HAL_TIM_ConfigClockSource+0xbe>
      status = HAL_ERROR;
 8005b84:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8005b86:	233d      	movs	r3, #61	@ 0x3d
 8005b88:	2101      	movs	r1, #1
 8005b8a:	54d1      	strb	r1, [r2, r3]
  __HAL_UNLOCK(htim);
 8005b8c:	2100      	movs	r1, #0
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	54d1      	strb	r1, [r2, r3]
}
 8005b92:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8005b94:	2b20      	cmp	r3, #32
 8005b96:	d002      	beq.n	8005b9e <HAL_TIM_ConfigClockSource+0xbe>
 8005b98:	d9f0      	bls.n	8005b7c <HAL_TIM_ConfigClockSource+0x9c>
 8005b9a:	2b30      	cmp	r3, #48	@ 0x30
 8005b9c:	d1f2      	bne.n	8005b84 <HAL_TIM_ConfigClockSource+0xa4>
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b9e:	2470      	movs	r4, #112	@ 0x70
  tmpsmcr = TIMx->SMCR;
 8005ba0:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ba2:	43a1      	bics	r1, r4
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ba4:	430b      	orrs	r3, r1
 8005ba6:	2107      	movs	r1, #7
 8005ba8:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8005baa:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005bac:	2000      	movs	r0, #0
 8005bae:	e7ea      	b.n	8005b86 <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 8005bb0:	2b70      	cmp	r3, #112	@ 0x70
 8005bb2:	d1e7      	bne.n	8005b84 <HAL_TIM_ConfigClockSource+0xa4>
  tmpsmcr = TIMx->SMCR;
 8005bb4:	6884      	ldr	r4, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bb6:	4b23      	ldr	r3, [pc, #140]	@ (8005c44 <HAL_TIM_ConfigClockSource+0x164>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bb8:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bba:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bbc:	688b      	ldr	r3, [r1, #8]
 8005bbe:	68c9      	ldr	r1, [r1, #12]
 8005bc0:	432b      	orrs	r3, r5
 8005bc2:	0209      	lsls	r1, r1, #8
 8005bc4:	430b      	orrs	r3, r1
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005bc6:	2177      	movs	r1, #119	@ 0x77
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bc8:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 8005bca:	6083      	str	r3, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 8005bcc:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005bce:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 8005bd0:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005bd2:	2000      	movs	r0, #0
 8005bd4:	e7d7      	b.n	8005b86 <HAL_TIM_ConfigClockSource+0xa6>
  __HAL_LOCK(htim);
 8005bd6:	2002      	movs	r0, #2
 8005bd8:	e7db      	b.n	8005b92 <HAL_TIM_ConfigClockSource+0xb2>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bda:	2510      	movs	r5, #16
 8005bdc:	6a04      	ldr	r4, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8005bde:	684b      	ldr	r3, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005be0:	43ac      	bics	r4, r5
                               sClockSourceConfig->ClockFilter);
 8005be2:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005be4:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005be6:	6985      	ldr	r5, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005be8:	4e17      	ldr	r6, [pc, #92]	@ (8005c48 <HAL_TIM_ConfigClockSource+0x168>)
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bea:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bec:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bee:	4329      	orrs	r1, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bf0:	25a0      	movs	r5, #160	@ 0xa0
  tmpccer = TIMx->CCER;
 8005bf2:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8005bf4:	6181      	str	r1, [r0, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bf6:	2170      	movs	r1, #112	@ 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bf8:	43ac      	bics	r4, r5
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bfa:	011b      	lsls	r3, r3, #4
 8005bfc:	4323      	orrs	r3, r4
  TIMx->CCER = tmpccer;
 8005bfe:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005c00:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c02:	438b      	bics	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c04:	3909      	subs	r1, #9
 8005c06:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8005c08:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005c0a:	2000      	movs	r0, #0
 8005c0c:	e7bb      	b.n	8005b86 <HAL_TIM_ConfigClockSource+0xa6>
                               sClockSourceConfig->ClockPolarity,
 8005c0e:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005c10:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8005c12:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c14:	6a06      	ldr	r6, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c16:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c18:	43a6      	bics	r6, r4
 8005c1a:	6206      	str	r6, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c1c:	26f0      	movs	r6, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8005c1e:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c20:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c22:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c24:	240a      	movs	r4, #10
 8005c26:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8005c28:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8005c2a:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8005c2c:	6201      	str	r1, [r0, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c2e:	2170      	movs	r1, #112	@ 0x70
  tmpsmcr = TIMx->SMCR;
 8005c30:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c32:	438b      	bics	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c34:	3929      	subs	r1, #41	@ 0x29
 8005c36:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8005c38:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005c3a:	2000      	movs	r0, #0
 8005c3c:	e7a3      	b.n	8005b86 <HAL_TIM_ConfigClockSource+0xa6>
 8005c3e:	46c0      	nop			@ (mov r8, r8)
 8005c40:	ffff0088 	.word	0xffff0088
 8005c44:	ffff00ff 	.word	0xffff00ff
 8005c48:	ffff0fff 	.word	0xffff0fff

08005c4c <TIM_Base_SetConfig>:
{
 8005c4c:	b570      	push	{r4, r5, r6, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c4e:	4e1d      	ldr	r6, [pc, #116]	@ (8005cc4 <TIM_Base_SetConfig+0x78>)
  tmpcr1 = TIMx->CR1;
 8005c50:	6803      	ldr	r3, [r0, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c52:	694d      	ldr	r5, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c54:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 8005c56:	680a      	ldr	r2, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c58:	42b0      	cmp	r0, r6
 8005c5a:	d02d      	beq.n	8005cb8 <TIM_Base_SetConfig+0x6c>
 8005c5c:	2680      	movs	r6, #128	@ 0x80
 8005c5e:	05f6      	lsls	r6, r6, #23
 8005c60:	42b0      	cmp	r0, r6
 8005c62:	d018      	beq.n	8005c96 <TIM_Base_SetConfig+0x4a>
 8005c64:	4e18      	ldr	r6, [pc, #96]	@ (8005cc8 <TIM_Base_SetConfig+0x7c>)
 8005c66:	42b0      	cmp	r0, r6
 8005c68:	d015      	beq.n	8005c96 <TIM_Base_SetConfig+0x4a>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c6a:	4e18      	ldr	r6, [pc, #96]	@ (8005ccc <TIM_Base_SetConfig+0x80>)
 8005c6c:	42b0      	cmp	r0, r6
 8005c6e:	d016      	beq.n	8005c9e <TIM_Base_SetConfig+0x52>
 8005c70:	4e17      	ldr	r6, [pc, #92]	@ (8005cd0 <TIM_Base_SetConfig+0x84>)
 8005c72:	42b0      	cmp	r0, r6
 8005c74:	d002      	beq.n	8005c7c <TIM_Base_SetConfig+0x30>
 8005c76:	4e17      	ldr	r6, [pc, #92]	@ (8005cd4 <TIM_Base_SetConfig+0x88>)
 8005c78:	42b0      	cmp	r0, r6
 8005c7a:	d114      	bne.n	8005ca6 <TIM_Base_SetConfig+0x5a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c7c:	4e16      	ldr	r6, [pc, #88]	@ (8005cd8 <TIM_Base_SetConfig+0x8c>)
 8005c7e:	4033      	ands	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c80:	68ce      	ldr	r6, [r1, #12]
 8005c82:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c84:	2680      	movs	r6, #128	@ 0x80
 8005c86:	43b3      	bics	r3, r6
 8005c88:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8005c8a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c8c:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005c8e:	6282      	str	r2, [r0, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005c90:	690b      	ldr	r3, [r1, #16]
 8005c92:	6303      	str	r3, [r0, #48]	@ 0x30
 8005c94:	e00d      	b.n	8005cb2 <TIM_Base_SetConfig+0x66>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c96:	2670      	movs	r6, #112	@ 0x70
 8005c98:	43b3      	bics	r3, r6
    tmpcr1 |= Structure->CounterMode;
 8005c9a:	684e      	ldr	r6, [r1, #4]
 8005c9c:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c9e:	4e0e      	ldr	r6, [pc, #56]	@ (8005cd8 <TIM_Base_SetConfig+0x8c>)
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ca0:	68c9      	ldr	r1, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ca2:	4033      	ands	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ca4:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ca6:	2180      	movs	r1, #128	@ 0x80
 8005ca8:	438b      	bics	r3, r1
 8005caa:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8005cac:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cae:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005cb0:	6282      	str	r2, [r0, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	6143      	str	r3, [r0, #20]
}
 8005cb6:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cb8:	2670      	movs	r6, #112	@ 0x70
 8005cba:	43b3      	bics	r3, r6
    tmpcr1 |= Structure->CounterMode;
 8005cbc:	684e      	ldr	r6, [r1, #4]
 8005cbe:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cc0:	e7dc      	b.n	8005c7c <TIM_Base_SetConfig+0x30>
 8005cc2:	46c0      	nop			@ (mov r8, r8)
 8005cc4:	40012c00 	.word	0x40012c00
 8005cc8:	40000400 	.word	0x40000400
 8005ccc:	40002000 	.word	0x40002000
 8005cd0:	40014400 	.word	0x40014400
 8005cd4:	40014800 	.word	0x40014800
 8005cd8:	fffffcff 	.word	0xfffffcff

08005cdc <HAL_TIM_Base_Init>:
{
 8005cdc:	b570      	push	{r4, r5, r6, lr}
 8005cde:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8005ce0:	d026      	beq.n	8005d30 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005ce2:	233d      	movs	r3, #61	@ 0x3d
 8005ce4:	5cc3      	ldrb	r3, [r0, r3]
 8005ce6:	b2da      	uxtb	r2, r3
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d01c      	beq.n	8005d26 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8005cec:	2302      	movs	r3, #2
 8005cee:	253d      	movs	r5, #61	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cf0:	0021      	movs	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8005cf2:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cf4:	c901      	ldmia	r1!, {r0}
 8005cf6:	f7ff ffa9 	bl	8005c4c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	2246      	movs	r2, #70	@ 0x46
  return HAL_OK;
 8005cfe:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d00:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d02:	3a08      	subs	r2, #8
 8005d04:	54a3      	strb	r3, [r4, r2]
 8005d06:	3201      	adds	r2, #1
 8005d08:	54a3      	strb	r3, [r4, r2]
 8005d0a:	3201      	adds	r2, #1
 8005d0c:	54a3      	strb	r3, [r4, r2]
 8005d0e:	3201      	adds	r2, #1
 8005d10:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d12:	3201      	adds	r2, #1
 8005d14:	54a3      	strb	r3, [r4, r2]
 8005d16:	3201      	adds	r2, #1
 8005d18:	54a3      	strb	r3, [r4, r2]
 8005d1a:	3201      	adds	r2, #1
 8005d1c:	54a3      	strb	r3, [r4, r2]
 8005d1e:	3201      	adds	r2, #1
 8005d20:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8005d22:	5563      	strb	r3, [r4, r5]
}
 8005d24:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8005d26:	333c      	adds	r3, #60	@ 0x3c
 8005d28:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8005d2a:	f7fe fa43 	bl	80041b4 <HAL_TIM_Base_MspInit>
 8005d2e:	e7dd      	b.n	8005cec <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8005d30:	2001      	movs	r0, #1
 8005d32:	e7f7      	b.n	8005d24 <HAL_TIM_Base_Init+0x48>

08005d34 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d34:	233c      	movs	r3, #60	@ 0x3c
{
 8005d36:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8005d38:	5cc3      	ldrb	r3, [r0, r3]
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d021      	beq.n	8005d82 <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d3e:	233d      	movs	r3, #61	@ 0x3d
 8005d40:	2202      	movs	r2, #2

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d42:	2570      	movs	r5, #112	@ 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8005d44:	54c2      	strb	r2, [r0, r3]
  tmpcr2 = htim->Instance->CR2;
 8005d46:	6803      	ldr	r3, [r0, #0]
 8005d48:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8005d4a:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d4c:	43aa      	bics	r2, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d4e:	680d      	ldr	r5, [r1, #0]
 8005d50:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d52:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d54:	4a0c      	ldr	r2, [pc, #48]	@ (8005d88 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d006      	beq.n	8005d68 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 8005d5a:	2280      	movs	r2, #128	@ 0x80
 8005d5c:	05d2      	lsls	r2, r2, #23
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d002      	beq.n	8005d68 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 8005d62:	4a0a      	ldr	r2, [pc, #40]	@ (8005d8c <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d104      	bne.n	8005d72 <HAL_TIMEx_MasterConfigSynchronization+0x3e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d68:	2280      	movs	r2, #128	@ 0x80
 8005d6a:	4394      	bics	r4, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d6c:	684a      	ldr	r2, [r1, #4]
 8005d6e:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d70:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d72:	233d      	movs	r3, #61	@ 0x3d
 8005d74:	2201      	movs	r2, #1
 8005d76:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 8005d78:	2200      	movs	r2, #0
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8005d7e:	2000      	movs	r0, #0
}
 8005d80:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8005d82:	2002      	movs	r0, #2
 8005d84:	e7fc      	b.n	8005d80 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005d86:	46c0      	nop			@ (mov r8, r8)
 8005d88:	40012c00 	.word	0x40012c00
 8005d8c:	40000400 	.word	0x40000400

08005d90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d90:	b510      	push	{r4, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d92:	f3ef 8c10 	mrs	ip, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d96:	2201      	movs	r2, #1
 8005d98:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d9c:	6801      	ldr	r1, [r0, #0]
 8005d9e:	4c13      	ldr	r4, [pc, #76]	@ (8005dec <UART_EndRxTransfer+0x5c>)
 8005da0:	680b      	ldr	r3, [r1, #0]
 8005da2:	4023      	ands	r3, r4
 8005da4:	600b      	str	r3, [r1, #0]
 8005da6:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005daa:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dae:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005db2:	6801      	ldr	r1, [r0, #0]
 8005db4:	688b      	ldr	r3, [r1, #8]
 8005db6:	4393      	bics	r3, r2
 8005db8:	608b      	str	r3, [r1, #8]
 8005dba:	f38c 8810 	msr	PRIMASK, ip

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dbe:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d10b      	bne.n	8005ddc <UART_EndRxTransfer+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dc4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dc8:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dcc:	6802      	ldr	r2, [r0, #0]
 8005dce:	3432      	adds	r4, #50	@ 0x32
 8005dd0:	6813      	ldr	r3, [r2, #0]
 8005dd2:	34ff      	adds	r4, #255	@ 0xff
 8005dd4:	43a3      	bics	r3, r4
 8005dd6:	6013      	str	r3, [r2, #0]
 8005dd8:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ddc:	2380      	movs	r3, #128	@ 0x80
 8005dde:	2220      	movs	r2, #32
 8005de0:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005de2:	2300      	movs	r3, #0
 8005de4:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005de6:	6683      	str	r3, [r0, #104]	@ 0x68
}
 8005de8:	bd10      	pop	{r4, pc}
 8005dea:	46c0      	nop			@ (mov r8, r8)
 8005dec:	fffffedf 	.word	0xfffffedf

08005df0 <UART_SetConfig>:
{
 8005df0:	b570      	push	{r4, r5, r6, lr}
 8005df2:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005df4:	6925      	ldr	r5, [r4, #16]
 8005df6:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005df8:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005dfa:	432b      	orrs	r3, r5
 8005dfc:	6965      	ldr	r5, [r4, #20]
 8005dfe:	69c1      	ldr	r1, [r0, #28]
 8005e00:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e02:	6810      	ldr	r0, [r2, #0]
 8005e04:	4d3c      	ldr	r5, [pc, #240]	@ (8005ef8 <UART_SetConfig+0x108>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e06:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e08:	4028      	ands	r0, r5
 8005e0a:	4303      	orrs	r3, r0
 8005e0c:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e0e:	6853      	ldr	r3, [r2, #4]
 8005e10:	483a      	ldr	r0, [pc, #232]	@ (8005efc <UART_SetConfig+0x10c>)
  tmpreg |= huart->Init.OneBitSampling;
 8005e12:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e14:	4003      	ands	r3, r0
 8005e16:	68e0      	ldr	r0, [r4, #12]
 8005e18:	4303      	orrs	r3, r0
 8005e1a:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e1c:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e1e:	6890      	ldr	r0, [r2, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8005e20:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e22:	4d37      	ldr	r5, [pc, #220]	@ (8005f00 <UART_SetConfig+0x110>)
 8005e24:	4028      	ands	r0, r5
 8005e26:	4303      	orrs	r3, r0
 8005e28:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e2a:	4b36      	ldr	r3, [pc, #216]	@ (8005f04 <UART_SetConfig+0x114>)
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d004      	beq.n	8005e3a <UART_SetConfig+0x4a>
 8005e30:	4b35      	ldr	r3, [pc, #212]	@ (8005f08 <UART_SetConfig+0x118>)
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d008      	beq.n	8005e48 <UART_SetConfig+0x58>
        pclk = (uint32_t) HSI_VALUE;
 8005e36:	2001      	movs	r0, #1
 8005e38:	e00f      	b.n	8005e5a <UART_SetConfig+0x6a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e3a:	4b34      	ldr	r3, [pc, #208]	@ (8005f0c <UART_SetConfig+0x11c>)
 8005e3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e3e:	2303      	movs	r3, #3
 8005e40:	4013      	ands	r3, r2
 8005e42:	3b01      	subs	r3, #1
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d90c      	bls.n	8005e62 <UART_SetConfig+0x72>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e48:	2380      	movs	r3, #128	@ 0x80
 8005e4a:	021b      	lsls	r3, r3, #8
 8005e4c:	4299      	cmp	r1, r3
 8005e4e:	d02e      	beq.n	8005eae <UART_SetConfig+0xbe>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e50:	f7ff fb72 	bl	8005538 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005e54:	2800      	cmp	r0, #0
 8005e56:	d112      	bne.n	8005e7e <UART_SetConfig+0x8e>
        pclk = (uint32_t) HSI_VALUE;
 8005e58:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8005e5e:	66e3      	str	r3, [r4, #108]	@ 0x6c
}
 8005e60:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e62:	2080      	movs	r0, #128	@ 0x80
 8005e64:	4a2a      	ldr	r2, [pc, #168]	@ (8005f10 <UART_SetConfig+0x120>)
 8005e66:	0200      	lsls	r0, r0, #8
 8005e68:	5cd2      	ldrb	r2, [r2, r3]
 8005e6a:	4281      	cmp	r1, r0
 8005e6c:	d01a      	beq.n	8005ea4 <UART_SetConfig+0xb4>
    switch (clocksource)
 8005e6e:	2a04      	cmp	r2, #4
 8005e70:	d012      	beq.n	8005e98 <UART_SetConfig+0xa8>
 8005e72:	d814      	bhi.n	8005e9e <UART_SetConfig+0xae>
 8005e74:	2a00      	cmp	r2, #0
 8005e76:	d0eb      	beq.n	8005e50 <UART_SetConfig+0x60>
 8005e78:	2a02      	cmp	r2, #2
 8005e7a:	d1dc      	bne.n	8005e36 <UART_SetConfig+0x46>
        pclk = (uint32_t) HSI_VALUE;
 8005e7c:	4825      	ldr	r0, [pc, #148]	@ (8005f14 <UART_SetConfig+0x124>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005e7e:	6861      	ldr	r1, [r4, #4]
 8005e80:	084b      	lsrs	r3, r1, #1
 8005e82:	1818      	adds	r0, r3, r0
 8005e84:	f7fa f952 	bl	800012c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e88:	0002      	movs	r2, r0
 8005e8a:	4b23      	ldr	r3, [pc, #140]	@ (8005f18 <UART_SetConfig+0x128>)
 8005e8c:	3a10      	subs	r2, #16
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d8d1      	bhi.n	8005e36 <UART_SetConfig+0x46>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e92:	6823      	ldr	r3, [r4, #0]
 8005e94:	60d8      	str	r0, [r3, #12]
 8005e96:	e7df      	b.n	8005e58 <UART_SetConfig+0x68>
        pclk = HAL_RCC_GetSysClockFreq();
 8005e98:	f7ff fa80 	bl	800539c <HAL_RCC_GetSysClockFreq>
        break;
 8005e9c:	e7da      	b.n	8005e54 <UART_SetConfig+0x64>
    switch (clocksource)
 8005e9e:	2a08      	cmp	r2, #8
 8005ea0:	d0ed      	beq.n	8005e7e <UART_SetConfig+0x8e>
 8005ea2:	e7c8      	b.n	8005e36 <UART_SetConfig+0x46>
    switch (clocksource)
 8005ea4:	2a04      	cmp	r2, #4
 8005ea6:	d023      	beq.n	8005ef0 <UART_SetConfig+0x100>
 8005ea8:	d81c      	bhi.n	8005ee4 <UART_SetConfig+0xf4>
 8005eaa:	2a00      	cmp	r2, #0
 8005eac:	d116      	bne.n	8005edc <UART_SetConfig+0xec>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005eae:	f7ff fb43 	bl	8005538 <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005eb2:	0043      	lsls	r3, r0, #1
    if (pclk != 0U)
 8005eb4:	2800      	cmp	r0, #0
 8005eb6:	d0cf      	beq.n	8005e58 <UART_SetConfig+0x68>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005eb8:	6861      	ldr	r1, [r4, #4]
 8005eba:	0848      	lsrs	r0, r1, #1
 8005ebc:	18c0      	adds	r0, r0, r3
 8005ebe:	f7fa f935 	bl	800012c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ec2:	0002      	movs	r2, r0
 8005ec4:	4b14      	ldr	r3, [pc, #80]	@ (8005f18 <UART_SetConfig+0x128>)
 8005ec6:	3a10      	subs	r2, #16
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d8b4      	bhi.n	8005e36 <UART_SetConfig+0x46>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ecc:	4b13      	ldr	r3, [pc, #76]	@ (8005f1c <UART_SetConfig+0x12c>)
        huart->Instance->BRR = brrtemp;
 8005ece:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ed0:	4003      	ands	r3, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ed2:	0700      	lsls	r0, r0, #28
 8005ed4:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8005ed6:	4303      	orrs	r3, r0
 8005ed8:	60d3      	str	r3, [r2, #12]
 8005eda:	e7bd      	b.n	8005e58 <UART_SetConfig+0x68>
    switch (clocksource)
 8005edc:	2a02      	cmp	r2, #2
 8005ede:	d1aa      	bne.n	8005e36 <UART_SetConfig+0x46>
 8005ee0:	4b0f      	ldr	r3, [pc, #60]	@ (8005f20 <UART_SetConfig+0x130>)
 8005ee2:	e7e9      	b.n	8005eb8 <UART_SetConfig+0xc8>
 8005ee4:	2380      	movs	r3, #128	@ 0x80
 8005ee6:	025b      	lsls	r3, r3, #9
 8005ee8:	2a08      	cmp	r2, #8
 8005eea:	d0e5      	beq.n	8005eb8 <UART_SetConfig+0xc8>
        pclk = (uint32_t) HSI_VALUE;
 8005eec:	2001      	movs	r0, #1
 8005eee:	e7b4      	b.n	8005e5a <UART_SetConfig+0x6a>
        pclk = HAL_RCC_GetSysClockFreq();
 8005ef0:	f7ff fa54 	bl	800539c <HAL_RCC_GetSysClockFreq>
        break;
 8005ef4:	e7dd      	b.n	8005eb2 <UART_SetConfig+0xc2>
 8005ef6:	46c0      	nop			@ (mov r8, r8)
 8005ef8:	efff69f3 	.word	0xefff69f3
 8005efc:	ffffcfff 	.word	0xffffcfff
 8005f00:	fffff4ff 	.word	0xfffff4ff
 8005f04:	40013800 	.word	0x40013800
 8005f08:	40004400 	.word	0x40004400
 8005f0c:	40021000 	.word	0x40021000
 8005f10:	0800730c 	.word	0x0800730c
 8005f14:	007a1200 	.word	0x007a1200
 8005f18:	0000ffef 	.word	0x0000ffef
 8005f1c:	0000fff0 	.word	0x0000fff0
 8005f20:	00f42400 	.word	0x00f42400

08005f24 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f24:	6a43      	ldr	r3, [r0, #36]	@ 0x24
{
 8005f26:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f28:	07da      	lsls	r2, r3, #31
 8005f2a:	d506      	bpl.n	8005f3a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f2c:	6801      	ldr	r1, [r0, #0]
 8005f2e:	4c28      	ldr	r4, [pc, #160]	@ (8005fd0 <UART_AdvFeatureConfig+0xac>)
 8005f30:	684a      	ldr	r2, [r1, #4]
 8005f32:	4022      	ands	r2, r4
 8005f34:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8005f36:	4322      	orrs	r2, r4
 8005f38:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f3a:	079a      	lsls	r2, r3, #30
 8005f3c:	d506      	bpl.n	8005f4c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f3e:	6801      	ldr	r1, [r0, #0]
 8005f40:	4c24      	ldr	r4, [pc, #144]	@ (8005fd4 <UART_AdvFeatureConfig+0xb0>)
 8005f42:	684a      	ldr	r2, [r1, #4]
 8005f44:	4022      	ands	r2, r4
 8005f46:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8005f48:	4322      	orrs	r2, r4
 8005f4a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f4c:	075a      	lsls	r2, r3, #29
 8005f4e:	d506      	bpl.n	8005f5e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f50:	6801      	ldr	r1, [r0, #0]
 8005f52:	4c21      	ldr	r4, [pc, #132]	@ (8005fd8 <UART_AdvFeatureConfig+0xb4>)
 8005f54:	684a      	ldr	r2, [r1, #4]
 8005f56:	4022      	ands	r2, r4
 8005f58:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8005f5a:	4322      	orrs	r2, r4
 8005f5c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f5e:	071a      	lsls	r2, r3, #28
 8005f60:	d506      	bpl.n	8005f70 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f62:	6801      	ldr	r1, [r0, #0]
 8005f64:	4c1d      	ldr	r4, [pc, #116]	@ (8005fdc <UART_AdvFeatureConfig+0xb8>)
 8005f66:	684a      	ldr	r2, [r1, #4]
 8005f68:	4022      	ands	r2, r4
 8005f6a:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8005f6c:	4322      	orrs	r2, r4
 8005f6e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f70:	06da      	lsls	r2, r3, #27
 8005f72:	d506      	bpl.n	8005f82 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f74:	6801      	ldr	r1, [r0, #0]
 8005f76:	4c1a      	ldr	r4, [pc, #104]	@ (8005fe0 <UART_AdvFeatureConfig+0xbc>)
 8005f78:	688a      	ldr	r2, [r1, #8]
 8005f7a:	4022      	ands	r2, r4
 8005f7c:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8005f7e:	4322      	orrs	r2, r4
 8005f80:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f82:	069a      	lsls	r2, r3, #26
 8005f84:	d506      	bpl.n	8005f94 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f86:	6801      	ldr	r1, [r0, #0]
 8005f88:	4c16      	ldr	r4, [pc, #88]	@ (8005fe4 <UART_AdvFeatureConfig+0xc0>)
 8005f8a:	688a      	ldr	r2, [r1, #8]
 8005f8c:	4022      	ands	r2, r4
 8005f8e:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8005f90:	4322      	orrs	r2, r4
 8005f92:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f94:	065a      	lsls	r2, r3, #25
 8005f96:	d50a      	bpl.n	8005fae <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f98:	6801      	ldr	r1, [r0, #0]
 8005f9a:	4d13      	ldr	r5, [pc, #76]	@ (8005fe8 <UART_AdvFeatureConfig+0xc4>)
 8005f9c:	684a      	ldr	r2, [r1, #4]
 8005f9e:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8005fa0:	402a      	ands	r2, r5
 8005fa2:	4322      	orrs	r2, r4
 8005fa4:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005fa6:	2280      	movs	r2, #128	@ 0x80
 8005fa8:	0352      	lsls	r2, r2, #13
 8005faa:	4294      	cmp	r4, r2
 8005fac:	d009      	beq.n	8005fc2 <UART_AdvFeatureConfig+0x9e>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005fae:	061b      	lsls	r3, r3, #24
 8005fb0:	d506      	bpl.n	8005fc0 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005fb2:	6802      	ldr	r2, [r0, #0]
 8005fb4:	490d      	ldr	r1, [pc, #52]	@ (8005fec <UART_AdvFeatureConfig+0xc8>)
 8005fb6:	6853      	ldr	r3, [r2, #4]
 8005fb8:	400b      	ands	r3, r1
 8005fba:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8005fbc:	430b      	orrs	r3, r1
 8005fbe:	6053      	str	r3, [r2, #4]
}
 8005fc0:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005fc2:	684a      	ldr	r2, [r1, #4]
 8005fc4:	4c0a      	ldr	r4, [pc, #40]	@ (8005ff0 <UART_AdvFeatureConfig+0xcc>)
 8005fc6:	4022      	ands	r2, r4
 8005fc8:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8005fca:	4322      	orrs	r2, r4
 8005fcc:	604a      	str	r2, [r1, #4]
 8005fce:	e7ee      	b.n	8005fae <UART_AdvFeatureConfig+0x8a>
 8005fd0:	fffdffff 	.word	0xfffdffff
 8005fd4:	fffeffff 	.word	0xfffeffff
 8005fd8:	fffbffff 	.word	0xfffbffff
 8005fdc:	ffff7fff 	.word	0xffff7fff
 8005fe0:	ffffefff 	.word	0xffffefff
 8005fe4:	ffffdfff 	.word	0xffffdfff
 8005fe8:	ffefffff 	.word	0xffefffff
 8005fec:	fff7ffff 	.word	0xfff7ffff
 8005ff0:	ff9fffff 	.word	0xff9fffff

08005ff4 <UART_WaitOnFlagUntilTimeout>:
{
 8005ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ff6:	464f      	mov	r7, r9
 8005ff8:	4646      	mov	r6, r8
 8005ffa:	46d6      	mov	lr, sl
 8005ffc:	b5c0      	push	{r6, r7, lr}
 8005ffe:	4699      	mov	r9, r3
 8006000:	4680      	mov	r8, r0
 8006002:	000d      	movs	r5, r1
 8006004:	0016      	movs	r6, r2
 8006006:	9f08      	ldr	r7, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006008:	6803      	ldr	r3, [r0, #0]
 800600a:	e001      	b.n	8006010 <UART_WaitOnFlagUntilTimeout+0x1c>
    if (Timeout != HAL_MAX_DELAY)
 800600c:	1c7a      	adds	r2, r7, #1
 800600e:	d10c      	bne.n	800602a <UART_WaitOnFlagUntilTimeout+0x36>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006010:	69dc      	ldr	r4, [r3, #28]
 8006012:	402c      	ands	r4, r5
 8006014:	1b64      	subs	r4, r4, r5
 8006016:	4262      	negs	r2, r4
 8006018:	4154      	adcs	r4, r2
 800601a:	42b4      	cmp	r4, r6
 800601c:	d0f6      	beq.n	800600c <UART_WaitOnFlagUntilTimeout+0x18>
  return HAL_OK;
 800601e:	2000      	movs	r0, #0
}
 8006020:	bce0      	pop	{r5, r6, r7}
 8006022:	46ba      	mov	sl, r7
 8006024:	46b1      	mov	r9, r6
 8006026:	46a8      	mov	r8, r5
 8006028:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800602a:	f7fe f9c1 	bl	80043b0 <HAL_GetTick>
 800602e:	464b      	mov	r3, r9
 8006030:	1ac0      	subs	r0, r0, r3
 8006032:	42b8      	cmp	r0, r7
 8006034:	d81e      	bhi.n	8006074 <UART_WaitOnFlagUntilTimeout+0x80>
 8006036:	2f00      	cmp	r7, #0
 8006038:	d01c      	beq.n	8006074 <UART_WaitOnFlagUntilTimeout+0x80>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800603a:	4643      	mov	r3, r8
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	0752      	lsls	r2, r2, #29
 8006042:	d5e5      	bpl.n	8006010 <UART_WaitOnFlagUntilTimeout+0x1c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006044:	2408      	movs	r4, #8
 8006046:	0021      	movs	r1, r4
 8006048:	69da      	ldr	r2, [r3, #28]
 800604a:	4011      	ands	r1, r2
 800604c:	468a      	mov	sl, r1
 800604e:	4214      	tst	r4, r2
 8006050:	d112      	bne.n	8006078 <UART_WaitOnFlagUntilTimeout+0x84>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006052:	2280      	movs	r2, #128	@ 0x80
 8006054:	69d9      	ldr	r1, [r3, #28]
 8006056:	0112      	lsls	r2, r2, #4
 8006058:	4211      	tst	r1, r2
 800605a:	d0d9      	beq.n	8006010 <UART_WaitOnFlagUntilTimeout+0x1c>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800605c:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 800605e:	4640      	mov	r0, r8
 8006060:	f7ff fe96 	bl	8005d90 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006064:	2384      	movs	r3, #132	@ 0x84
 8006066:	2220      	movs	r2, #32
 8006068:	4641      	mov	r1, r8
 800606a:	50ca      	str	r2, [r1, r3]
          __HAL_UNLOCK(huart);
 800606c:	4642      	mov	r2, r8
 800606e:	4651      	mov	r1, sl
 8006070:	3b0c      	subs	r3, #12
 8006072:	54d1      	strb	r1, [r2, r3]
        return HAL_TIMEOUT;
 8006074:	2003      	movs	r0, #3
 8006076:	e7d3      	b.n	8006020 <UART_WaitOnFlagUntilTimeout+0x2c>
           UART_EndRxTransfer(huart);
 8006078:	4640      	mov	r0, r8
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800607a:	621c      	str	r4, [r3, #32]
           UART_EndRxTransfer(huart);
 800607c:	f7ff fe88 	bl	8005d90 <UART_EndRxTransfer>
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006080:	2384      	movs	r3, #132	@ 0x84
 8006082:	4642      	mov	r2, r8
           __HAL_UNLOCK(huart);
 8006084:	4641      	mov	r1, r8
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006086:	50d4      	str	r4, [r2, r3]
           __HAL_UNLOCK(huart);
 8006088:	2200      	movs	r2, #0
 800608a:	3b0c      	subs	r3, #12
           return HAL_ERROR;
 800608c:	2001      	movs	r0, #1
           __HAL_UNLOCK(huart);
 800608e:	54ca      	strb	r2, [r1, r3]
           return HAL_ERROR;
 8006090:	e7c6      	b.n	8006020 <UART_WaitOnFlagUntilTimeout+0x2c>
 8006092:	46c0      	nop			@ (mov r8, r8)

08006094 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006094:	2200      	movs	r2, #0
 8006096:	2384      	movs	r3, #132	@ 0x84
{
 8006098:	b530      	push	{r4, r5, lr}
 800609a:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800609c:	50c2      	str	r2, [r0, r3]
{
 800609e:	b083      	sub	sp, #12
  tickstart = HAL_GetTick();
 80060a0:	f7fe f986 	bl	80043b0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060a4:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 80060a6:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060a8:	6811      	ldr	r1, [r2, #0]
 80060aa:	0709      	lsls	r1, r1, #28
 80060ac:	d40f      	bmi.n	80060ce <UART_CheckIdleState+0x3a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060ae:	6812      	ldr	r2, [r2, #0]
 80060b0:	0752      	lsls	r2, r2, #29
 80060b2:	d41b      	bmi.n	80060ec <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 80060b4:	2320      	movs	r3, #32
  huart->RxState = HAL_UART_STATE_READY;
 80060b6:	2280      	movs	r2, #128	@ 0x80
  huart->gState = HAL_UART_STATE_READY;
 80060b8:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80060ba:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060bc:	2300      	movs	r3, #0
  return HAL_OK;
 80060be:	2000      	movs	r0, #0
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060c0:	6623      	str	r3, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060c2:	6663      	str	r3, [r4, #100]	@ 0x64
      __HAL_UNLOCK(huart);
 80060c4:	2378      	movs	r3, #120	@ 0x78
 80060c6:	2200      	movs	r2, #0
 80060c8:	54e2      	strb	r2, [r4, r3]
}
 80060ca:	b003      	add	sp, #12
 80060cc:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060ce:	2180      	movs	r1, #128	@ 0x80
 80060d0:	4b21      	ldr	r3, [pc, #132]	@ (8006158 <UART_CheckIdleState+0xc4>)
 80060d2:	2200      	movs	r2, #0
 80060d4:	9300      	str	r3, [sp, #0]
 80060d6:	0389      	lsls	r1, r1, #14
 80060d8:	0003      	movs	r3, r0
 80060da:	0020      	movs	r0, r4
 80060dc:	f7ff ff8a 	bl	8005ff4 <UART_WaitOnFlagUntilTimeout>
 80060e0:	2800      	cmp	r0, #0
 80060e2:	d129      	bne.n	8006138 <UART_CheckIdleState+0xa4>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060e4:	6822      	ldr	r2, [r4, #0]
 80060e6:	6812      	ldr	r2, [r2, #0]
 80060e8:	0752      	lsls	r2, r2, #29
 80060ea:	d5e3      	bpl.n	80060b4 <UART_CheckIdleState+0x20>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060ec:	2180      	movs	r1, #128	@ 0x80
 80060ee:	4b1a      	ldr	r3, [pc, #104]	@ (8006158 <UART_CheckIdleState+0xc4>)
 80060f0:	2200      	movs	r2, #0
 80060f2:	9300      	str	r3, [sp, #0]
 80060f4:	0020      	movs	r0, r4
 80060f6:	002b      	movs	r3, r5
 80060f8:	03c9      	lsls	r1, r1, #15
 80060fa:	f7ff ff7b 	bl	8005ff4 <UART_WaitOnFlagUntilTimeout>
 80060fe:	2800      	cmp	r0, #0
 8006100:	d0d8      	beq.n	80060b4 <UART_CheckIdleState+0x20>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006102:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006106:	2201      	movs	r2, #1
 8006108:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800610c:	6821      	ldr	r1, [r4, #0]
 800610e:	4d13      	ldr	r5, [pc, #76]	@ (800615c <UART_CheckIdleState+0xc8>)
 8006110:	680b      	ldr	r3, [r1, #0]
 8006112:	402b      	ands	r3, r5
 8006114:	600b      	str	r3, [r1, #0]
 8006116:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800611a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800611e:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006122:	6821      	ldr	r1, [r4, #0]
 8006124:	688b      	ldr	r3, [r1, #8]
 8006126:	4393      	bics	r3, r2
 8006128:	608b      	str	r3, [r1, #8]
 800612a:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 800612e:	2380      	movs	r3, #128	@ 0x80
 8006130:	321f      	adds	r2, #31
      return HAL_TIMEOUT;
 8006132:	2003      	movs	r0, #3
      huart->RxState = HAL_UART_STATE_READY;
 8006134:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 8006136:	e7c5      	b.n	80060c4 <UART_CheckIdleState+0x30>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006138:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800613c:	2301      	movs	r3, #1
 800613e:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006142:	2080      	movs	r0, #128	@ 0x80
 8006144:	6822      	ldr	r2, [r4, #0]
 8006146:	6813      	ldr	r3, [r2, #0]
 8006148:	4383      	bics	r3, r0
 800614a:	6013      	str	r3, [r2, #0]
 800614c:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8006150:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 8006152:	2003      	movs	r0, #3
      huart->gState = HAL_UART_STATE_READY;
 8006154:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 8006156:	e7b5      	b.n	80060c4 <UART_CheckIdleState+0x30>
 8006158:	01ffffff 	.word	0x01ffffff
 800615c:	fffffedf 	.word	0xfffffedf

08006160 <HAL_UART_Init>:
{
 8006160:	b510      	push	{r4, lr}
 8006162:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8006164:	d026      	beq.n	80061b4 <HAL_UART_Init+0x54>
  if (huart->gState == HAL_UART_STATE_RESET)
 8006166:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8006168:	2b00      	cmp	r3, #0
 800616a:	d025      	beq.n	80061b8 <HAL_UART_Init+0x58>
  huart->gState = HAL_UART_STATE_BUSY;
 800616c:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 800616e:	2101      	movs	r1, #1
 8006170:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006172:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8006174:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006176:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8006178:	438b      	bics	r3, r1
 800617a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800617c:	f7ff fe38 	bl	8005df0 <UART_SetConfig>
 8006180:	2801      	cmp	r0, #1
 8006182:	d017      	beq.n	80061b4 <HAL_UART_Init+0x54>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006184:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006186:	2b00      	cmp	r3, #0
 8006188:	d110      	bne.n	80061ac <HAL_UART_Init+0x4c>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800618a:	6823      	ldr	r3, [r4, #0]
 800618c:	490d      	ldr	r1, [pc, #52]	@ (80061c4 <HAL_UART_Init+0x64>)
 800618e:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8006190:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006192:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006194:	212a      	movs	r1, #42	@ 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006196:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006198:	689a      	ldr	r2, [r3, #8]
 800619a:	438a      	bics	r2, r1
 800619c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	3929      	subs	r1, #41	@ 0x29
 80061a2:	430a      	orrs	r2, r1
 80061a4:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80061a6:	f7ff ff75 	bl	8006094 <UART_CheckIdleState>
}
 80061aa:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 80061ac:	0020      	movs	r0, r4
 80061ae:	f7ff feb9 	bl	8005f24 <UART_AdvFeatureConfig>
 80061b2:	e7ea      	b.n	800618a <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 80061b4:	2001      	movs	r0, #1
 80061b6:	e7f8      	b.n	80061aa <HAL_UART_Init+0x4a>
    huart->Lock = HAL_UNLOCKED;
 80061b8:	2278      	movs	r2, #120	@ 0x78
 80061ba:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 80061bc:	f7fe f810 	bl	80041e0 <HAL_UART_MspInit>
 80061c0:	e7d4      	b.n	800616c <HAL_UART_Init+0xc>
 80061c2:	46c0      	nop			@ (mov r8, r8)
 80061c4:	ffffb7ff 	.word	0xffffb7ff

080061c8 <siprintf>:
 80061c8:	b40e      	push	{r1, r2, r3}
 80061ca:	b500      	push	{lr}
 80061cc:	490b      	ldr	r1, [pc, #44]	@ (80061fc <siprintf+0x34>)
 80061ce:	b09c      	sub	sp, #112	@ 0x70
 80061d0:	ab1d      	add	r3, sp, #116	@ 0x74
 80061d2:	9002      	str	r0, [sp, #8]
 80061d4:	9006      	str	r0, [sp, #24]
 80061d6:	9107      	str	r1, [sp, #28]
 80061d8:	9104      	str	r1, [sp, #16]
 80061da:	4809      	ldr	r0, [pc, #36]	@ (8006200 <siprintf+0x38>)
 80061dc:	4909      	ldr	r1, [pc, #36]	@ (8006204 <siprintf+0x3c>)
 80061de:	cb04      	ldmia	r3!, {r2}
 80061e0:	9105      	str	r1, [sp, #20]
 80061e2:	6800      	ldr	r0, [r0, #0]
 80061e4:	a902      	add	r1, sp, #8
 80061e6:	9301      	str	r3, [sp, #4]
 80061e8:	f000 f9c0 	bl	800656c <_svfiprintf_r>
 80061ec:	2200      	movs	r2, #0
 80061ee:	9b02      	ldr	r3, [sp, #8]
 80061f0:	701a      	strb	r2, [r3, #0]
 80061f2:	b01c      	add	sp, #112	@ 0x70
 80061f4:	bc08      	pop	{r3}
 80061f6:	b003      	add	sp, #12
 80061f8:	4718      	bx	r3
 80061fa:	46c0      	nop			@ (mov r8, r8)
 80061fc:	7fffffff 	.word	0x7fffffff
 8006200:	2000005c 	.word	0x2000005c
 8006204:	ffff0208 	.word	0xffff0208

08006208 <_vsiprintf_r>:
 8006208:	b500      	push	{lr}
 800620a:	b09b      	sub	sp, #108	@ 0x6c
 800620c:	9100      	str	r1, [sp, #0]
 800620e:	9104      	str	r1, [sp, #16]
 8006210:	4906      	ldr	r1, [pc, #24]	@ (800622c <_vsiprintf_r+0x24>)
 8006212:	9105      	str	r1, [sp, #20]
 8006214:	9102      	str	r1, [sp, #8]
 8006216:	4906      	ldr	r1, [pc, #24]	@ (8006230 <_vsiprintf_r+0x28>)
 8006218:	9103      	str	r1, [sp, #12]
 800621a:	4669      	mov	r1, sp
 800621c:	f000 f9a6 	bl	800656c <_svfiprintf_r>
 8006220:	2200      	movs	r2, #0
 8006222:	9b00      	ldr	r3, [sp, #0]
 8006224:	701a      	strb	r2, [r3, #0]
 8006226:	b01b      	add	sp, #108	@ 0x6c
 8006228:	bd00      	pop	{pc}
 800622a:	46c0      	nop			@ (mov r8, r8)
 800622c:	7fffffff 	.word	0x7fffffff
 8006230:	ffff0208 	.word	0xffff0208

08006234 <vsiprintf>:
 8006234:	b510      	push	{r4, lr}
 8006236:	4c04      	ldr	r4, [pc, #16]	@ (8006248 <vsiprintf+0x14>)
 8006238:	0013      	movs	r3, r2
 800623a:	000a      	movs	r2, r1
 800623c:	0001      	movs	r1, r0
 800623e:	6820      	ldr	r0, [r4, #0]
 8006240:	f7ff ffe2 	bl	8006208 <_vsiprintf_r>
 8006244:	bd10      	pop	{r4, pc}
 8006246:	46c0      	nop			@ (mov r8, r8)
 8006248:	2000005c 	.word	0x2000005c

0800624c <memset>:
 800624c:	0003      	movs	r3, r0
 800624e:	1882      	adds	r2, r0, r2
 8006250:	4293      	cmp	r3, r2
 8006252:	d100      	bne.n	8006256 <memset+0xa>
 8006254:	4770      	bx	lr
 8006256:	7019      	strb	r1, [r3, #0]
 8006258:	3301      	adds	r3, #1
 800625a:	e7f9      	b.n	8006250 <memset+0x4>

0800625c <__errno>:
 800625c:	4b01      	ldr	r3, [pc, #4]	@ (8006264 <__errno+0x8>)
 800625e:	6818      	ldr	r0, [r3, #0]
 8006260:	4770      	bx	lr
 8006262:	46c0      	nop			@ (mov r8, r8)
 8006264:	2000005c 	.word	0x2000005c

08006268 <__libc_init_array>:
 8006268:	b570      	push	{r4, r5, r6, lr}
 800626a:	2600      	movs	r6, #0
 800626c:	4c0c      	ldr	r4, [pc, #48]	@ (80062a0 <__libc_init_array+0x38>)
 800626e:	4d0d      	ldr	r5, [pc, #52]	@ (80062a4 <__libc_init_array+0x3c>)
 8006270:	1b64      	subs	r4, r4, r5
 8006272:	10a4      	asrs	r4, r4, #2
 8006274:	42a6      	cmp	r6, r4
 8006276:	d109      	bne.n	800628c <__libc_init_array+0x24>
 8006278:	2600      	movs	r6, #0
 800627a:	f000 fecd 	bl	8007018 <_init>
 800627e:	4c0a      	ldr	r4, [pc, #40]	@ (80062a8 <__libc_init_array+0x40>)
 8006280:	4d0a      	ldr	r5, [pc, #40]	@ (80062ac <__libc_init_array+0x44>)
 8006282:	1b64      	subs	r4, r4, r5
 8006284:	10a4      	asrs	r4, r4, #2
 8006286:	42a6      	cmp	r6, r4
 8006288:	d105      	bne.n	8006296 <__libc_init_array+0x2e>
 800628a:	bd70      	pop	{r4, r5, r6, pc}
 800628c:	00b3      	lsls	r3, r6, #2
 800628e:	58eb      	ldr	r3, [r5, r3]
 8006290:	4798      	blx	r3
 8006292:	3601      	adds	r6, #1
 8006294:	e7ee      	b.n	8006274 <__libc_init_array+0xc>
 8006296:	00b3      	lsls	r3, r6, #2
 8006298:	58eb      	ldr	r3, [r5, r3]
 800629a:	4798      	blx	r3
 800629c:	3601      	adds	r6, #1
 800629e:	e7f2      	b.n	8006286 <__libc_init_array+0x1e>
 80062a0:	08007344 	.word	0x08007344
 80062a4:	08007344 	.word	0x08007344
 80062a8:	08007348 	.word	0x08007348
 80062ac:	08007344 	.word	0x08007344

080062b0 <__retarget_lock_acquire_recursive>:
 80062b0:	4770      	bx	lr

080062b2 <__retarget_lock_release_recursive>:
 80062b2:	4770      	bx	lr

080062b4 <_free_r>:
 80062b4:	b570      	push	{r4, r5, r6, lr}
 80062b6:	0005      	movs	r5, r0
 80062b8:	1e0c      	subs	r4, r1, #0
 80062ba:	d010      	beq.n	80062de <_free_r+0x2a>
 80062bc:	3c04      	subs	r4, #4
 80062be:	6823      	ldr	r3, [r4, #0]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	da00      	bge.n	80062c6 <_free_r+0x12>
 80062c4:	18e4      	adds	r4, r4, r3
 80062c6:	0028      	movs	r0, r5
 80062c8:	f000 f8e0 	bl	800648c <__malloc_lock>
 80062cc:	4a1d      	ldr	r2, [pc, #116]	@ (8006344 <_free_r+0x90>)
 80062ce:	6813      	ldr	r3, [r2, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d105      	bne.n	80062e0 <_free_r+0x2c>
 80062d4:	6063      	str	r3, [r4, #4]
 80062d6:	6014      	str	r4, [r2, #0]
 80062d8:	0028      	movs	r0, r5
 80062da:	f000 f8df 	bl	800649c <__malloc_unlock>
 80062de:	bd70      	pop	{r4, r5, r6, pc}
 80062e0:	42a3      	cmp	r3, r4
 80062e2:	d908      	bls.n	80062f6 <_free_r+0x42>
 80062e4:	6820      	ldr	r0, [r4, #0]
 80062e6:	1821      	adds	r1, r4, r0
 80062e8:	428b      	cmp	r3, r1
 80062ea:	d1f3      	bne.n	80062d4 <_free_r+0x20>
 80062ec:	6819      	ldr	r1, [r3, #0]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	1809      	adds	r1, r1, r0
 80062f2:	6021      	str	r1, [r4, #0]
 80062f4:	e7ee      	b.n	80062d4 <_free_r+0x20>
 80062f6:	001a      	movs	r2, r3
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d001      	beq.n	8006302 <_free_r+0x4e>
 80062fe:	42a3      	cmp	r3, r4
 8006300:	d9f9      	bls.n	80062f6 <_free_r+0x42>
 8006302:	6811      	ldr	r1, [r2, #0]
 8006304:	1850      	adds	r0, r2, r1
 8006306:	42a0      	cmp	r0, r4
 8006308:	d10b      	bne.n	8006322 <_free_r+0x6e>
 800630a:	6820      	ldr	r0, [r4, #0]
 800630c:	1809      	adds	r1, r1, r0
 800630e:	1850      	adds	r0, r2, r1
 8006310:	6011      	str	r1, [r2, #0]
 8006312:	4283      	cmp	r3, r0
 8006314:	d1e0      	bne.n	80062d8 <_free_r+0x24>
 8006316:	6818      	ldr	r0, [r3, #0]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	1841      	adds	r1, r0, r1
 800631c:	6011      	str	r1, [r2, #0]
 800631e:	6053      	str	r3, [r2, #4]
 8006320:	e7da      	b.n	80062d8 <_free_r+0x24>
 8006322:	42a0      	cmp	r0, r4
 8006324:	d902      	bls.n	800632c <_free_r+0x78>
 8006326:	230c      	movs	r3, #12
 8006328:	602b      	str	r3, [r5, #0]
 800632a:	e7d5      	b.n	80062d8 <_free_r+0x24>
 800632c:	6820      	ldr	r0, [r4, #0]
 800632e:	1821      	adds	r1, r4, r0
 8006330:	428b      	cmp	r3, r1
 8006332:	d103      	bne.n	800633c <_free_r+0x88>
 8006334:	6819      	ldr	r1, [r3, #0]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	1809      	adds	r1, r1, r0
 800633a:	6021      	str	r1, [r4, #0]
 800633c:	6063      	str	r3, [r4, #4]
 800633e:	6054      	str	r4, [r2, #4]
 8006340:	e7ca      	b.n	80062d8 <_free_r+0x24>
 8006342:	46c0      	nop			@ (mov r8, r8)
 8006344:	20000490 	.word	0x20000490

08006348 <sbrk_aligned>:
 8006348:	b570      	push	{r4, r5, r6, lr}
 800634a:	4e0f      	ldr	r6, [pc, #60]	@ (8006388 <sbrk_aligned+0x40>)
 800634c:	000d      	movs	r5, r1
 800634e:	6831      	ldr	r1, [r6, #0]
 8006350:	0004      	movs	r4, r0
 8006352:	2900      	cmp	r1, #0
 8006354:	d102      	bne.n	800635c <sbrk_aligned+0x14>
 8006356:	f000 fb99 	bl	8006a8c <_sbrk_r>
 800635a:	6030      	str	r0, [r6, #0]
 800635c:	0029      	movs	r1, r5
 800635e:	0020      	movs	r0, r4
 8006360:	f000 fb94 	bl	8006a8c <_sbrk_r>
 8006364:	1c43      	adds	r3, r0, #1
 8006366:	d103      	bne.n	8006370 <sbrk_aligned+0x28>
 8006368:	2501      	movs	r5, #1
 800636a:	426d      	negs	r5, r5
 800636c:	0028      	movs	r0, r5
 800636e:	bd70      	pop	{r4, r5, r6, pc}
 8006370:	2303      	movs	r3, #3
 8006372:	1cc5      	adds	r5, r0, #3
 8006374:	439d      	bics	r5, r3
 8006376:	42a8      	cmp	r0, r5
 8006378:	d0f8      	beq.n	800636c <sbrk_aligned+0x24>
 800637a:	1a29      	subs	r1, r5, r0
 800637c:	0020      	movs	r0, r4
 800637e:	f000 fb85 	bl	8006a8c <_sbrk_r>
 8006382:	3001      	adds	r0, #1
 8006384:	d1f2      	bne.n	800636c <sbrk_aligned+0x24>
 8006386:	e7ef      	b.n	8006368 <sbrk_aligned+0x20>
 8006388:	2000048c 	.word	0x2000048c

0800638c <_malloc_r>:
 800638c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800638e:	2203      	movs	r2, #3
 8006390:	1ccb      	adds	r3, r1, #3
 8006392:	4393      	bics	r3, r2
 8006394:	3308      	adds	r3, #8
 8006396:	0005      	movs	r5, r0
 8006398:	001f      	movs	r7, r3
 800639a:	2b0c      	cmp	r3, #12
 800639c:	d234      	bcs.n	8006408 <_malloc_r+0x7c>
 800639e:	270c      	movs	r7, #12
 80063a0:	42b9      	cmp	r1, r7
 80063a2:	d833      	bhi.n	800640c <_malloc_r+0x80>
 80063a4:	0028      	movs	r0, r5
 80063a6:	f000 f871 	bl	800648c <__malloc_lock>
 80063aa:	4e37      	ldr	r6, [pc, #220]	@ (8006488 <_malloc_r+0xfc>)
 80063ac:	6833      	ldr	r3, [r6, #0]
 80063ae:	001c      	movs	r4, r3
 80063b0:	2c00      	cmp	r4, #0
 80063b2:	d12f      	bne.n	8006414 <_malloc_r+0x88>
 80063b4:	0039      	movs	r1, r7
 80063b6:	0028      	movs	r0, r5
 80063b8:	f7ff ffc6 	bl	8006348 <sbrk_aligned>
 80063bc:	0004      	movs	r4, r0
 80063be:	1c43      	adds	r3, r0, #1
 80063c0:	d15f      	bne.n	8006482 <_malloc_r+0xf6>
 80063c2:	6834      	ldr	r4, [r6, #0]
 80063c4:	9400      	str	r4, [sp, #0]
 80063c6:	9b00      	ldr	r3, [sp, #0]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d14a      	bne.n	8006462 <_malloc_r+0xd6>
 80063cc:	2c00      	cmp	r4, #0
 80063ce:	d052      	beq.n	8006476 <_malloc_r+0xea>
 80063d0:	6823      	ldr	r3, [r4, #0]
 80063d2:	0028      	movs	r0, r5
 80063d4:	18e3      	adds	r3, r4, r3
 80063d6:	9900      	ldr	r1, [sp, #0]
 80063d8:	9301      	str	r3, [sp, #4]
 80063da:	f000 fb57 	bl	8006a8c <_sbrk_r>
 80063de:	9b01      	ldr	r3, [sp, #4]
 80063e0:	4283      	cmp	r3, r0
 80063e2:	d148      	bne.n	8006476 <_malloc_r+0xea>
 80063e4:	6823      	ldr	r3, [r4, #0]
 80063e6:	0028      	movs	r0, r5
 80063e8:	1aff      	subs	r7, r7, r3
 80063ea:	0039      	movs	r1, r7
 80063ec:	f7ff ffac 	bl	8006348 <sbrk_aligned>
 80063f0:	3001      	adds	r0, #1
 80063f2:	d040      	beq.n	8006476 <_malloc_r+0xea>
 80063f4:	6823      	ldr	r3, [r4, #0]
 80063f6:	19db      	adds	r3, r3, r7
 80063f8:	6023      	str	r3, [r4, #0]
 80063fa:	6833      	ldr	r3, [r6, #0]
 80063fc:	685a      	ldr	r2, [r3, #4]
 80063fe:	2a00      	cmp	r2, #0
 8006400:	d133      	bne.n	800646a <_malloc_r+0xde>
 8006402:	9b00      	ldr	r3, [sp, #0]
 8006404:	6033      	str	r3, [r6, #0]
 8006406:	e019      	b.n	800643c <_malloc_r+0xb0>
 8006408:	2b00      	cmp	r3, #0
 800640a:	dac9      	bge.n	80063a0 <_malloc_r+0x14>
 800640c:	230c      	movs	r3, #12
 800640e:	602b      	str	r3, [r5, #0]
 8006410:	2000      	movs	r0, #0
 8006412:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006414:	6821      	ldr	r1, [r4, #0]
 8006416:	1bc9      	subs	r1, r1, r7
 8006418:	d420      	bmi.n	800645c <_malloc_r+0xd0>
 800641a:	290b      	cmp	r1, #11
 800641c:	d90a      	bls.n	8006434 <_malloc_r+0xa8>
 800641e:	19e2      	adds	r2, r4, r7
 8006420:	6027      	str	r7, [r4, #0]
 8006422:	42a3      	cmp	r3, r4
 8006424:	d104      	bne.n	8006430 <_malloc_r+0xa4>
 8006426:	6032      	str	r2, [r6, #0]
 8006428:	6863      	ldr	r3, [r4, #4]
 800642a:	6011      	str	r1, [r2, #0]
 800642c:	6053      	str	r3, [r2, #4]
 800642e:	e005      	b.n	800643c <_malloc_r+0xb0>
 8006430:	605a      	str	r2, [r3, #4]
 8006432:	e7f9      	b.n	8006428 <_malloc_r+0x9c>
 8006434:	6862      	ldr	r2, [r4, #4]
 8006436:	42a3      	cmp	r3, r4
 8006438:	d10e      	bne.n	8006458 <_malloc_r+0xcc>
 800643a:	6032      	str	r2, [r6, #0]
 800643c:	0028      	movs	r0, r5
 800643e:	f000 f82d 	bl	800649c <__malloc_unlock>
 8006442:	0020      	movs	r0, r4
 8006444:	2207      	movs	r2, #7
 8006446:	300b      	adds	r0, #11
 8006448:	1d23      	adds	r3, r4, #4
 800644a:	4390      	bics	r0, r2
 800644c:	1ac2      	subs	r2, r0, r3
 800644e:	4298      	cmp	r0, r3
 8006450:	d0df      	beq.n	8006412 <_malloc_r+0x86>
 8006452:	1a1b      	subs	r3, r3, r0
 8006454:	50a3      	str	r3, [r4, r2]
 8006456:	e7dc      	b.n	8006412 <_malloc_r+0x86>
 8006458:	605a      	str	r2, [r3, #4]
 800645a:	e7ef      	b.n	800643c <_malloc_r+0xb0>
 800645c:	0023      	movs	r3, r4
 800645e:	6864      	ldr	r4, [r4, #4]
 8006460:	e7a6      	b.n	80063b0 <_malloc_r+0x24>
 8006462:	9c00      	ldr	r4, [sp, #0]
 8006464:	6863      	ldr	r3, [r4, #4]
 8006466:	9300      	str	r3, [sp, #0]
 8006468:	e7ad      	b.n	80063c6 <_malloc_r+0x3a>
 800646a:	001a      	movs	r2, r3
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	42a3      	cmp	r3, r4
 8006470:	d1fb      	bne.n	800646a <_malloc_r+0xde>
 8006472:	2300      	movs	r3, #0
 8006474:	e7da      	b.n	800642c <_malloc_r+0xa0>
 8006476:	230c      	movs	r3, #12
 8006478:	0028      	movs	r0, r5
 800647a:	602b      	str	r3, [r5, #0]
 800647c:	f000 f80e 	bl	800649c <__malloc_unlock>
 8006480:	e7c6      	b.n	8006410 <_malloc_r+0x84>
 8006482:	6007      	str	r7, [r0, #0]
 8006484:	e7da      	b.n	800643c <_malloc_r+0xb0>
 8006486:	46c0      	nop			@ (mov r8, r8)
 8006488:	20000490 	.word	0x20000490

0800648c <__malloc_lock>:
 800648c:	b510      	push	{r4, lr}
 800648e:	4802      	ldr	r0, [pc, #8]	@ (8006498 <__malloc_lock+0xc>)
 8006490:	f7ff ff0e 	bl	80062b0 <__retarget_lock_acquire_recursive>
 8006494:	bd10      	pop	{r4, pc}
 8006496:	46c0      	nop			@ (mov r8, r8)
 8006498:	20000488 	.word	0x20000488

0800649c <__malloc_unlock>:
 800649c:	b510      	push	{r4, lr}
 800649e:	4802      	ldr	r0, [pc, #8]	@ (80064a8 <__malloc_unlock+0xc>)
 80064a0:	f7ff ff07 	bl	80062b2 <__retarget_lock_release_recursive>
 80064a4:	bd10      	pop	{r4, pc}
 80064a6:	46c0      	nop			@ (mov r8, r8)
 80064a8:	20000488 	.word	0x20000488

080064ac <__ssputs_r>:
 80064ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064ae:	688e      	ldr	r6, [r1, #8]
 80064b0:	b085      	sub	sp, #20
 80064b2:	001f      	movs	r7, r3
 80064b4:	000c      	movs	r4, r1
 80064b6:	680b      	ldr	r3, [r1, #0]
 80064b8:	9002      	str	r0, [sp, #8]
 80064ba:	9203      	str	r2, [sp, #12]
 80064bc:	42be      	cmp	r6, r7
 80064be:	d830      	bhi.n	8006522 <__ssputs_r+0x76>
 80064c0:	210c      	movs	r1, #12
 80064c2:	5e62      	ldrsh	r2, [r4, r1]
 80064c4:	2190      	movs	r1, #144	@ 0x90
 80064c6:	00c9      	lsls	r1, r1, #3
 80064c8:	420a      	tst	r2, r1
 80064ca:	d028      	beq.n	800651e <__ssputs_r+0x72>
 80064cc:	2003      	movs	r0, #3
 80064ce:	6921      	ldr	r1, [r4, #16]
 80064d0:	1a5b      	subs	r3, r3, r1
 80064d2:	9301      	str	r3, [sp, #4]
 80064d4:	6963      	ldr	r3, [r4, #20]
 80064d6:	4343      	muls	r3, r0
 80064d8:	9801      	ldr	r0, [sp, #4]
 80064da:	0fdd      	lsrs	r5, r3, #31
 80064dc:	18ed      	adds	r5, r5, r3
 80064de:	1c7b      	adds	r3, r7, #1
 80064e0:	181b      	adds	r3, r3, r0
 80064e2:	106d      	asrs	r5, r5, #1
 80064e4:	42ab      	cmp	r3, r5
 80064e6:	d900      	bls.n	80064ea <__ssputs_r+0x3e>
 80064e8:	001d      	movs	r5, r3
 80064ea:	0552      	lsls	r2, r2, #21
 80064ec:	d528      	bpl.n	8006540 <__ssputs_r+0x94>
 80064ee:	0029      	movs	r1, r5
 80064f0:	9802      	ldr	r0, [sp, #8]
 80064f2:	f7ff ff4b 	bl	800638c <_malloc_r>
 80064f6:	1e06      	subs	r6, r0, #0
 80064f8:	d02c      	beq.n	8006554 <__ssputs_r+0xa8>
 80064fa:	9a01      	ldr	r2, [sp, #4]
 80064fc:	6921      	ldr	r1, [r4, #16]
 80064fe:	f000 fae2 	bl	8006ac6 <memcpy>
 8006502:	89a2      	ldrh	r2, [r4, #12]
 8006504:	4b18      	ldr	r3, [pc, #96]	@ (8006568 <__ssputs_r+0xbc>)
 8006506:	401a      	ands	r2, r3
 8006508:	2380      	movs	r3, #128	@ 0x80
 800650a:	4313      	orrs	r3, r2
 800650c:	81a3      	strh	r3, [r4, #12]
 800650e:	9b01      	ldr	r3, [sp, #4]
 8006510:	6126      	str	r6, [r4, #16]
 8006512:	18f6      	adds	r6, r6, r3
 8006514:	6026      	str	r6, [r4, #0]
 8006516:	003e      	movs	r6, r7
 8006518:	6165      	str	r5, [r4, #20]
 800651a:	1aed      	subs	r5, r5, r3
 800651c:	60a5      	str	r5, [r4, #8]
 800651e:	42be      	cmp	r6, r7
 8006520:	d900      	bls.n	8006524 <__ssputs_r+0x78>
 8006522:	003e      	movs	r6, r7
 8006524:	0032      	movs	r2, r6
 8006526:	9903      	ldr	r1, [sp, #12]
 8006528:	6820      	ldr	r0, [r4, #0]
 800652a:	f000 fa9b 	bl	8006a64 <memmove>
 800652e:	2000      	movs	r0, #0
 8006530:	68a3      	ldr	r3, [r4, #8]
 8006532:	1b9b      	subs	r3, r3, r6
 8006534:	60a3      	str	r3, [r4, #8]
 8006536:	6823      	ldr	r3, [r4, #0]
 8006538:	199b      	adds	r3, r3, r6
 800653a:	6023      	str	r3, [r4, #0]
 800653c:	b005      	add	sp, #20
 800653e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006540:	002a      	movs	r2, r5
 8006542:	9802      	ldr	r0, [sp, #8]
 8006544:	f000 fac8 	bl	8006ad8 <_realloc_r>
 8006548:	1e06      	subs	r6, r0, #0
 800654a:	d1e0      	bne.n	800650e <__ssputs_r+0x62>
 800654c:	6921      	ldr	r1, [r4, #16]
 800654e:	9802      	ldr	r0, [sp, #8]
 8006550:	f7ff feb0 	bl	80062b4 <_free_r>
 8006554:	230c      	movs	r3, #12
 8006556:	2001      	movs	r0, #1
 8006558:	9a02      	ldr	r2, [sp, #8]
 800655a:	4240      	negs	r0, r0
 800655c:	6013      	str	r3, [r2, #0]
 800655e:	89a2      	ldrh	r2, [r4, #12]
 8006560:	3334      	adds	r3, #52	@ 0x34
 8006562:	4313      	orrs	r3, r2
 8006564:	81a3      	strh	r3, [r4, #12]
 8006566:	e7e9      	b.n	800653c <__ssputs_r+0x90>
 8006568:	fffffb7f 	.word	0xfffffb7f

0800656c <_svfiprintf_r>:
 800656c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800656e:	b0a1      	sub	sp, #132	@ 0x84
 8006570:	9003      	str	r0, [sp, #12]
 8006572:	001d      	movs	r5, r3
 8006574:	898b      	ldrh	r3, [r1, #12]
 8006576:	000f      	movs	r7, r1
 8006578:	0016      	movs	r6, r2
 800657a:	061b      	lsls	r3, r3, #24
 800657c:	d511      	bpl.n	80065a2 <_svfiprintf_r+0x36>
 800657e:	690b      	ldr	r3, [r1, #16]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d10e      	bne.n	80065a2 <_svfiprintf_r+0x36>
 8006584:	2140      	movs	r1, #64	@ 0x40
 8006586:	f7ff ff01 	bl	800638c <_malloc_r>
 800658a:	6038      	str	r0, [r7, #0]
 800658c:	6138      	str	r0, [r7, #16]
 800658e:	2800      	cmp	r0, #0
 8006590:	d105      	bne.n	800659e <_svfiprintf_r+0x32>
 8006592:	230c      	movs	r3, #12
 8006594:	9a03      	ldr	r2, [sp, #12]
 8006596:	6013      	str	r3, [r2, #0]
 8006598:	2001      	movs	r0, #1
 800659a:	4240      	negs	r0, r0
 800659c:	e0cf      	b.n	800673e <_svfiprintf_r+0x1d2>
 800659e:	2340      	movs	r3, #64	@ 0x40
 80065a0:	617b      	str	r3, [r7, #20]
 80065a2:	2300      	movs	r3, #0
 80065a4:	ac08      	add	r4, sp, #32
 80065a6:	6163      	str	r3, [r4, #20]
 80065a8:	3320      	adds	r3, #32
 80065aa:	7663      	strb	r3, [r4, #25]
 80065ac:	3310      	adds	r3, #16
 80065ae:	76a3      	strb	r3, [r4, #26]
 80065b0:	9507      	str	r5, [sp, #28]
 80065b2:	0035      	movs	r5, r6
 80065b4:	782b      	ldrb	r3, [r5, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d001      	beq.n	80065be <_svfiprintf_r+0x52>
 80065ba:	2b25      	cmp	r3, #37	@ 0x25
 80065bc:	d148      	bne.n	8006650 <_svfiprintf_r+0xe4>
 80065be:	1bab      	subs	r3, r5, r6
 80065c0:	9305      	str	r3, [sp, #20]
 80065c2:	42b5      	cmp	r5, r6
 80065c4:	d00b      	beq.n	80065de <_svfiprintf_r+0x72>
 80065c6:	0032      	movs	r2, r6
 80065c8:	0039      	movs	r1, r7
 80065ca:	9803      	ldr	r0, [sp, #12]
 80065cc:	f7ff ff6e 	bl	80064ac <__ssputs_r>
 80065d0:	3001      	adds	r0, #1
 80065d2:	d100      	bne.n	80065d6 <_svfiprintf_r+0x6a>
 80065d4:	e0ae      	b.n	8006734 <_svfiprintf_r+0x1c8>
 80065d6:	6963      	ldr	r3, [r4, #20]
 80065d8:	9a05      	ldr	r2, [sp, #20]
 80065da:	189b      	adds	r3, r3, r2
 80065dc:	6163      	str	r3, [r4, #20]
 80065de:	782b      	ldrb	r3, [r5, #0]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d100      	bne.n	80065e6 <_svfiprintf_r+0x7a>
 80065e4:	e0a6      	b.n	8006734 <_svfiprintf_r+0x1c8>
 80065e6:	2201      	movs	r2, #1
 80065e8:	2300      	movs	r3, #0
 80065ea:	4252      	negs	r2, r2
 80065ec:	6062      	str	r2, [r4, #4]
 80065ee:	a904      	add	r1, sp, #16
 80065f0:	3254      	adds	r2, #84	@ 0x54
 80065f2:	1852      	adds	r2, r2, r1
 80065f4:	1c6e      	adds	r6, r5, #1
 80065f6:	6023      	str	r3, [r4, #0]
 80065f8:	60e3      	str	r3, [r4, #12]
 80065fa:	60a3      	str	r3, [r4, #8]
 80065fc:	7013      	strb	r3, [r2, #0]
 80065fe:	65a3      	str	r3, [r4, #88]	@ 0x58
 8006600:	4b54      	ldr	r3, [pc, #336]	@ (8006754 <_svfiprintf_r+0x1e8>)
 8006602:	2205      	movs	r2, #5
 8006604:	0018      	movs	r0, r3
 8006606:	7831      	ldrb	r1, [r6, #0]
 8006608:	9305      	str	r3, [sp, #20]
 800660a:	f000 fa51 	bl	8006ab0 <memchr>
 800660e:	1c75      	adds	r5, r6, #1
 8006610:	2800      	cmp	r0, #0
 8006612:	d11f      	bne.n	8006654 <_svfiprintf_r+0xe8>
 8006614:	6822      	ldr	r2, [r4, #0]
 8006616:	06d3      	lsls	r3, r2, #27
 8006618:	d504      	bpl.n	8006624 <_svfiprintf_r+0xb8>
 800661a:	2353      	movs	r3, #83	@ 0x53
 800661c:	a904      	add	r1, sp, #16
 800661e:	185b      	adds	r3, r3, r1
 8006620:	2120      	movs	r1, #32
 8006622:	7019      	strb	r1, [r3, #0]
 8006624:	0713      	lsls	r3, r2, #28
 8006626:	d504      	bpl.n	8006632 <_svfiprintf_r+0xc6>
 8006628:	2353      	movs	r3, #83	@ 0x53
 800662a:	a904      	add	r1, sp, #16
 800662c:	185b      	adds	r3, r3, r1
 800662e:	212b      	movs	r1, #43	@ 0x2b
 8006630:	7019      	strb	r1, [r3, #0]
 8006632:	7833      	ldrb	r3, [r6, #0]
 8006634:	2b2a      	cmp	r3, #42	@ 0x2a
 8006636:	d016      	beq.n	8006666 <_svfiprintf_r+0xfa>
 8006638:	0035      	movs	r5, r6
 800663a:	2100      	movs	r1, #0
 800663c:	200a      	movs	r0, #10
 800663e:	68e3      	ldr	r3, [r4, #12]
 8006640:	782a      	ldrb	r2, [r5, #0]
 8006642:	1c6e      	adds	r6, r5, #1
 8006644:	3a30      	subs	r2, #48	@ 0x30
 8006646:	2a09      	cmp	r2, #9
 8006648:	d950      	bls.n	80066ec <_svfiprintf_r+0x180>
 800664a:	2900      	cmp	r1, #0
 800664c:	d111      	bne.n	8006672 <_svfiprintf_r+0x106>
 800664e:	e017      	b.n	8006680 <_svfiprintf_r+0x114>
 8006650:	3501      	adds	r5, #1
 8006652:	e7af      	b.n	80065b4 <_svfiprintf_r+0x48>
 8006654:	9b05      	ldr	r3, [sp, #20]
 8006656:	6822      	ldr	r2, [r4, #0]
 8006658:	1ac0      	subs	r0, r0, r3
 800665a:	2301      	movs	r3, #1
 800665c:	4083      	lsls	r3, r0
 800665e:	4313      	orrs	r3, r2
 8006660:	002e      	movs	r6, r5
 8006662:	6023      	str	r3, [r4, #0]
 8006664:	e7cc      	b.n	8006600 <_svfiprintf_r+0x94>
 8006666:	9b07      	ldr	r3, [sp, #28]
 8006668:	1d19      	adds	r1, r3, #4
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	9107      	str	r1, [sp, #28]
 800666e:	2b00      	cmp	r3, #0
 8006670:	db01      	blt.n	8006676 <_svfiprintf_r+0x10a>
 8006672:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006674:	e004      	b.n	8006680 <_svfiprintf_r+0x114>
 8006676:	425b      	negs	r3, r3
 8006678:	60e3      	str	r3, [r4, #12]
 800667a:	2302      	movs	r3, #2
 800667c:	4313      	orrs	r3, r2
 800667e:	6023      	str	r3, [r4, #0]
 8006680:	782b      	ldrb	r3, [r5, #0]
 8006682:	2b2e      	cmp	r3, #46	@ 0x2e
 8006684:	d10c      	bne.n	80066a0 <_svfiprintf_r+0x134>
 8006686:	786b      	ldrb	r3, [r5, #1]
 8006688:	2b2a      	cmp	r3, #42	@ 0x2a
 800668a:	d134      	bne.n	80066f6 <_svfiprintf_r+0x18a>
 800668c:	9b07      	ldr	r3, [sp, #28]
 800668e:	3502      	adds	r5, #2
 8006690:	1d1a      	adds	r2, r3, #4
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	9207      	str	r2, [sp, #28]
 8006696:	2b00      	cmp	r3, #0
 8006698:	da01      	bge.n	800669e <_svfiprintf_r+0x132>
 800669a:	2301      	movs	r3, #1
 800669c:	425b      	negs	r3, r3
 800669e:	9309      	str	r3, [sp, #36]	@ 0x24
 80066a0:	4e2d      	ldr	r6, [pc, #180]	@ (8006758 <_svfiprintf_r+0x1ec>)
 80066a2:	2203      	movs	r2, #3
 80066a4:	0030      	movs	r0, r6
 80066a6:	7829      	ldrb	r1, [r5, #0]
 80066a8:	f000 fa02 	bl	8006ab0 <memchr>
 80066ac:	2800      	cmp	r0, #0
 80066ae:	d006      	beq.n	80066be <_svfiprintf_r+0x152>
 80066b0:	2340      	movs	r3, #64	@ 0x40
 80066b2:	1b80      	subs	r0, r0, r6
 80066b4:	4083      	lsls	r3, r0
 80066b6:	6822      	ldr	r2, [r4, #0]
 80066b8:	3501      	adds	r5, #1
 80066ba:	4313      	orrs	r3, r2
 80066bc:	6023      	str	r3, [r4, #0]
 80066be:	7829      	ldrb	r1, [r5, #0]
 80066c0:	2206      	movs	r2, #6
 80066c2:	4826      	ldr	r0, [pc, #152]	@ (800675c <_svfiprintf_r+0x1f0>)
 80066c4:	1c6e      	adds	r6, r5, #1
 80066c6:	7621      	strb	r1, [r4, #24]
 80066c8:	f000 f9f2 	bl	8006ab0 <memchr>
 80066cc:	2800      	cmp	r0, #0
 80066ce:	d038      	beq.n	8006742 <_svfiprintf_r+0x1d6>
 80066d0:	4b23      	ldr	r3, [pc, #140]	@ (8006760 <_svfiprintf_r+0x1f4>)
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d122      	bne.n	800671c <_svfiprintf_r+0x1b0>
 80066d6:	2207      	movs	r2, #7
 80066d8:	9b07      	ldr	r3, [sp, #28]
 80066da:	3307      	adds	r3, #7
 80066dc:	4393      	bics	r3, r2
 80066de:	3308      	adds	r3, #8
 80066e0:	9307      	str	r3, [sp, #28]
 80066e2:	6963      	ldr	r3, [r4, #20]
 80066e4:	9a04      	ldr	r2, [sp, #16]
 80066e6:	189b      	adds	r3, r3, r2
 80066e8:	6163      	str	r3, [r4, #20]
 80066ea:	e762      	b.n	80065b2 <_svfiprintf_r+0x46>
 80066ec:	4343      	muls	r3, r0
 80066ee:	0035      	movs	r5, r6
 80066f0:	2101      	movs	r1, #1
 80066f2:	189b      	adds	r3, r3, r2
 80066f4:	e7a4      	b.n	8006640 <_svfiprintf_r+0xd4>
 80066f6:	2300      	movs	r3, #0
 80066f8:	200a      	movs	r0, #10
 80066fa:	0019      	movs	r1, r3
 80066fc:	3501      	adds	r5, #1
 80066fe:	6063      	str	r3, [r4, #4]
 8006700:	782a      	ldrb	r2, [r5, #0]
 8006702:	1c6e      	adds	r6, r5, #1
 8006704:	3a30      	subs	r2, #48	@ 0x30
 8006706:	2a09      	cmp	r2, #9
 8006708:	d903      	bls.n	8006712 <_svfiprintf_r+0x1a6>
 800670a:	2b00      	cmp	r3, #0
 800670c:	d0c8      	beq.n	80066a0 <_svfiprintf_r+0x134>
 800670e:	9109      	str	r1, [sp, #36]	@ 0x24
 8006710:	e7c6      	b.n	80066a0 <_svfiprintf_r+0x134>
 8006712:	4341      	muls	r1, r0
 8006714:	0035      	movs	r5, r6
 8006716:	2301      	movs	r3, #1
 8006718:	1889      	adds	r1, r1, r2
 800671a:	e7f1      	b.n	8006700 <_svfiprintf_r+0x194>
 800671c:	aa07      	add	r2, sp, #28
 800671e:	9200      	str	r2, [sp, #0]
 8006720:	0021      	movs	r1, r4
 8006722:	003a      	movs	r2, r7
 8006724:	4b0f      	ldr	r3, [pc, #60]	@ (8006764 <_svfiprintf_r+0x1f8>)
 8006726:	9803      	ldr	r0, [sp, #12]
 8006728:	e000      	b.n	800672c <_svfiprintf_r+0x1c0>
 800672a:	bf00      	nop
 800672c:	9004      	str	r0, [sp, #16]
 800672e:	9b04      	ldr	r3, [sp, #16]
 8006730:	3301      	adds	r3, #1
 8006732:	d1d6      	bne.n	80066e2 <_svfiprintf_r+0x176>
 8006734:	89bb      	ldrh	r3, [r7, #12]
 8006736:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8006738:	065b      	lsls	r3, r3, #25
 800673a:	d500      	bpl.n	800673e <_svfiprintf_r+0x1d2>
 800673c:	e72c      	b.n	8006598 <_svfiprintf_r+0x2c>
 800673e:	b021      	add	sp, #132	@ 0x84
 8006740:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006742:	aa07      	add	r2, sp, #28
 8006744:	9200      	str	r2, [sp, #0]
 8006746:	0021      	movs	r1, r4
 8006748:	003a      	movs	r2, r7
 800674a:	4b06      	ldr	r3, [pc, #24]	@ (8006764 <_svfiprintf_r+0x1f8>)
 800674c:	9803      	ldr	r0, [sp, #12]
 800674e:	f000 f87b 	bl	8006848 <_printf_i>
 8006752:	e7eb      	b.n	800672c <_svfiprintf_r+0x1c0>
 8006754:	0800730f 	.word	0x0800730f
 8006758:	08007315 	.word	0x08007315
 800675c:	08007319 	.word	0x08007319
 8006760:	00000000 	.word	0x00000000
 8006764:	080064ad 	.word	0x080064ad

08006768 <_printf_common>:
 8006768:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800676a:	0016      	movs	r6, r2
 800676c:	9301      	str	r3, [sp, #4]
 800676e:	688a      	ldr	r2, [r1, #8]
 8006770:	690b      	ldr	r3, [r1, #16]
 8006772:	000c      	movs	r4, r1
 8006774:	9000      	str	r0, [sp, #0]
 8006776:	4293      	cmp	r3, r2
 8006778:	da00      	bge.n	800677c <_printf_common+0x14>
 800677a:	0013      	movs	r3, r2
 800677c:	0022      	movs	r2, r4
 800677e:	6033      	str	r3, [r6, #0]
 8006780:	3243      	adds	r2, #67	@ 0x43
 8006782:	7812      	ldrb	r2, [r2, #0]
 8006784:	2a00      	cmp	r2, #0
 8006786:	d001      	beq.n	800678c <_printf_common+0x24>
 8006788:	3301      	adds	r3, #1
 800678a:	6033      	str	r3, [r6, #0]
 800678c:	6823      	ldr	r3, [r4, #0]
 800678e:	069b      	lsls	r3, r3, #26
 8006790:	d502      	bpl.n	8006798 <_printf_common+0x30>
 8006792:	6833      	ldr	r3, [r6, #0]
 8006794:	3302      	adds	r3, #2
 8006796:	6033      	str	r3, [r6, #0]
 8006798:	6822      	ldr	r2, [r4, #0]
 800679a:	2306      	movs	r3, #6
 800679c:	0015      	movs	r5, r2
 800679e:	401d      	ands	r5, r3
 80067a0:	421a      	tst	r2, r3
 80067a2:	d027      	beq.n	80067f4 <_printf_common+0x8c>
 80067a4:	0023      	movs	r3, r4
 80067a6:	3343      	adds	r3, #67	@ 0x43
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	1e5a      	subs	r2, r3, #1
 80067ac:	4193      	sbcs	r3, r2
 80067ae:	6822      	ldr	r2, [r4, #0]
 80067b0:	0692      	lsls	r2, r2, #26
 80067b2:	d430      	bmi.n	8006816 <_printf_common+0xae>
 80067b4:	0022      	movs	r2, r4
 80067b6:	9901      	ldr	r1, [sp, #4]
 80067b8:	9800      	ldr	r0, [sp, #0]
 80067ba:	9d08      	ldr	r5, [sp, #32]
 80067bc:	3243      	adds	r2, #67	@ 0x43
 80067be:	47a8      	blx	r5
 80067c0:	3001      	adds	r0, #1
 80067c2:	d025      	beq.n	8006810 <_printf_common+0xa8>
 80067c4:	2206      	movs	r2, #6
 80067c6:	6823      	ldr	r3, [r4, #0]
 80067c8:	2500      	movs	r5, #0
 80067ca:	4013      	ands	r3, r2
 80067cc:	2b04      	cmp	r3, #4
 80067ce:	d105      	bne.n	80067dc <_printf_common+0x74>
 80067d0:	6833      	ldr	r3, [r6, #0]
 80067d2:	68e5      	ldr	r5, [r4, #12]
 80067d4:	1aed      	subs	r5, r5, r3
 80067d6:	43eb      	mvns	r3, r5
 80067d8:	17db      	asrs	r3, r3, #31
 80067da:	401d      	ands	r5, r3
 80067dc:	68a3      	ldr	r3, [r4, #8]
 80067de:	6922      	ldr	r2, [r4, #16]
 80067e0:	4293      	cmp	r3, r2
 80067e2:	dd01      	ble.n	80067e8 <_printf_common+0x80>
 80067e4:	1a9b      	subs	r3, r3, r2
 80067e6:	18ed      	adds	r5, r5, r3
 80067e8:	2600      	movs	r6, #0
 80067ea:	42b5      	cmp	r5, r6
 80067ec:	d120      	bne.n	8006830 <_printf_common+0xc8>
 80067ee:	2000      	movs	r0, #0
 80067f0:	e010      	b.n	8006814 <_printf_common+0xac>
 80067f2:	3501      	adds	r5, #1
 80067f4:	68e3      	ldr	r3, [r4, #12]
 80067f6:	6832      	ldr	r2, [r6, #0]
 80067f8:	1a9b      	subs	r3, r3, r2
 80067fa:	42ab      	cmp	r3, r5
 80067fc:	ddd2      	ble.n	80067a4 <_printf_common+0x3c>
 80067fe:	0022      	movs	r2, r4
 8006800:	2301      	movs	r3, #1
 8006802:	9901      	ldr	r1, [sp, #4]
 8006804:	9800      	ldr	r0, [sp, #0]
 8006806:	9f08      	ldr	r7, [sp, #32]
 8006808:	3219      	adds	r2, #25
 800680a:	47b8      	blx	r7
 800680c:	3001      	adds	r0, #1
 800680e:	d1f0      	bne.n	80067f2 <_printf_common+0x8a>
 8006810:	2001      	movs	r0, #1
 8006812:	4240      	negs	r0, r0
 8006814:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006816:	2030      	movs	r0, #48	@ 0x30
 8006818:	18e1      	adds	r1, r4, r3
 800681a:	3143      	adds	r1, #67	@ 0x43
 800681c:	7008      	strb	r0, [r1, #0]
 800681e:	0021      	movs	r1, r4
 8006820:	1c5a      	adds	r2, r3, #1
 8006822:	3145      	adds	r1, #69	@ 0x45
 8006824:	7809      	ldrb	r1, [r1, #0]
 8006826:	18a2      	adds	r2, r4, r2
 8006828:	3243      	adds	r2, #67	@ 0x43
 800682a:	3302      	adds	r3, #2
 800682c:	7011      	strb	r1, [r2, #0]
 800682e:	e7c1      	b.n	80067b4 <_printf_common+0x4c>
 8006830:	0022      	movs	r2, r4
 8006832:	2301      	movs	r3, #1
 8006834:	9901      	ldr	r1, [sp, #4]
 8006836:	9800      	ldr	r0, [sp, #0]
 8006838:	9f08      	ldr	r7, [sp, #32]
 800683a:	321a      	adds	r2, #26
 800683c:	47b8      	blx	r7
 800683e:	3001      	adds	r0, #1
 8006840:	d0e6      	beq.n	8006810 <_printf_common+0xa8>
 8006842:	3601      	adds	r6, #1
 8006844:	e7d1      	b.n	80067ea <_printf_common+0x82>
	...

08006848 <_printf_i>:
 8006848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800684a:	b08b      	sub	sp, #44	@ 0x2c
 800684c:	9206      	str	r2, [sp, #24]
 800684e:	000a      	movs	r2, r1
 8006850:	3243      	adds	r2, #67	@ 0x43
 8006852:	9307      	str	r3, [sp, #28]
 8006854:	9005      	str	r0, [sp, #20]
 8006856:	9203      	str	r2, [sp, #12]
 8006858:	7e0a      	ldrb	r2, [r1, #24]
 800685a:	000c      	movs	r4, r1
 800685c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800685e:	2a78      	cmp	r2, #120	@ 0x78
 8006860:	d809      	bhi.n	8006876 <_printf_i+0x2e>
 8006862:	2a62      	cmp	r2, #98	@ 0x62
 8006864:	d80b      	bhi.n	800687e <_printf_i+0x36>
 8006866:	2a00      	cmp	r2, #0
 8006868:	d100      	bne.n	800686c <_printf_i+0x24>
 800686a:	e0bc      	b.n	80069e6 <_printf_i+0x19e>
 800686c:	497b      	ldr	r1, [pc, #492]	@ (8006a5c <_printf_i+0x214>)
 800686e:	9104      	str	r1, [sp, #16]
 8006870:	2a58      	cmp	r2, #88	@ 0x58
 8006872:	d100      	bne.n	8006876 <_printf_i+0x2e>
 8006874:	e090      	b.n	8006998 <_printf_i+0x150>
 8006876:	0025      	movs	r5, r4
 8006878:	3542      	adds	r5, #66	@ 0x42
 800687a:	702a      	strb	r2, [r5, #0]
 800687c:	e022      	b.n	80068c4 <_printf_i+0x7c>
 800687e:	0010      	movs	r0, r2
 8006880:	3863      	subs	r0, #99	@ 0x63
 8006882:	2815      	cmp	r0, #21
 8006884:	d8f7      	bhi.n	8006876 <_printf_i+0x2e>
 8006886:	f7f9 fc47 	bl	8000118 <__gnu_thumb1_case_shi>
 800688a:	0016      	.short	0x0016
 800688c:	fff6001f 	.word	0xfff6001f
 8006890:	fff6fff6 	.word	0xfff6fff6
 8006894:	001ffff6 	.word	0x001ffff6
 8006898:	fff6fff6 	.word	0xfff6fff6
 800689c:	fff6fff6 	.word	0xfff6fff6
 80068a0:	003600a1 	.word	0x003600a1
 80068a4:	fff60080 	.word	0xfff60080
 80068a8:	00b2fff6 	.word	0x00b2fff6
 80068ac:	0036fff6 	.word	0x0036fff6
 80068b0:	fff6fff6 	.word	0xfff6fff6
 80068b4:	0084      	.short	0x0084
 80068b6:	0025      	movs	r5, r4
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	3542      	adds	r5, #66	@ 0x42
 80068bc:	1d11      	adds	r1, r2, #4
 80068be:	6019      	str	r1, [r3, #0]
 80068c0:	6813      	ldr	r3, [r2, #0]
 80068c2:	702b      	strb	r3, [r5, #0]
 80068c4:	2301      	movs	r3, #1
 80068c6:	e0a0      	b.n	8006a0a <_printf_i+0x1c2>
 80068c8:	6818      	ldr	r0, [r3, #0]
 80068ca:	6809      	ldr	r1, [r1, #0]
 80068cc:	1d02      	adds	r2, r0, #4
 80068ce:	060d      	lsls	r5, r1, #24
 80068d0:	d50b      	bpl.n	80068ea <_printf_i+0xa2>
 80068d2:	6806      	ldr	r6, [r0, #0]
 80068d4:	601a      	str	r2, [r3, #0]
 80068d6:	2e00      	cmp	r6, #0
 80068d8:	da03      	bge.n	80068e2 <_printf_i+0x9a>
 80068da:	232d      	movs	r3, #45	@ 0x2d
 80068dc:	9a03      	ldr	r2, [sp, #12]
 80068de:	4276      	negs	r6, r6
 80068e0:	7013      	strb	r3, [r2, #0]
 80068e2:	4b5e      	ldr	r3, [pc, #376]	@ (8006a5c <_printf_i+0x214>)
 80068e4:	270a      	movs	r7, #10
 80068e6:	9304      	str	r3, [sp, #16]
 80068e8:	e018      	b.n	800691c <_printf_i+0xd4>
 80068ea:	6806      	ldr	r6, [r0, #0]
 80068ec:	601a      	str	r2, [r3, #0]
 80068ee:	0649      	lsls	r1, r1, #25
 80068f0:	d5f1      	bpl.n	80068d6 <_printf_i+0x8e>
 80068f2:	b236      	sxth	r6, r6
 80068f4:	e7ef      	b.n	80068d6 <_printf_i+0x8e>
 80068f6:	6808      	ldr	r0, [r1, #0]
 80068f8:	6819      	ldr	r1, [r3, #0]
 80068fa:	c940      	ldmia	r1!, {r6}
 80068fc:	0605      	lsls	r5, r0, #24
 80068fe:	d402      	bmi.n	8006906 <_printf_i+0xbe>
 8006900:	0640      	lsls	r0, r0, #25
 8006902:	d500      	bpl.n	8006906 <_printf_i+0xbe>
 8006904:	b2b6      	uxth	r6, r6
 8006906:	6019      	str	r1, [r3, #0]
 8006908:	4b54      	ldr	r3, [pc, #336]	@ (8006a5c <_printf_i+0x214>)
 800690a:	270a      	movs	r7, #10
 800690c:	9304      	str	r3, [sp, #16]
 800690e:	2a6f      	cmp	r2, #111	@ 0x6f
 8006910:	d100      	bne.n	8006914 <_printf_i+0xcc>
 8006912:	3f02      	subs	r7, #2
 8006914:	0023      	movs	r3, r4
 8006916:	2200      	movs	r2, #0
 8006918:	3343      	adds	r3, #67	@ 0x43
 800691a:	701a      	strb	r2, [r3, #0]
 800691c:	6863      	ldr	r3, [r4, #4]
 800691e:	60a3      	str	r3, [r4, #8]
 8006920:	2b00      	cmp	r3, #0
 8006922:	db03      	blt.n	800692c <_printf_i+0xe4>
 8006924:	2104      	movs	r1, #4
 8006926:	6822      	ldr	r2, [r4, #0]
 8006928:	438a      	bics	r2, r1
 800692a:	6022      	str	r2, [r4, #0]
 800692c:	2e00      	cmp	r6, #0
 800692e:	d102      	bne.n	8006936 <_printf_i+0xee>
 8006930:	9d03      	ldr	r5, [sp, #12]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00c      	beq.n	8006950 <_printf_i+0x108>
 8006936:	9d03      	ldr	r5, [sp, #12]
 8006938:	0030      	movs	r0, r6
 800693a:	0039      	movs	r1, r7
 800693c:	f7f9 fc7c 	bl	8000238 <__aeabi_uidivmod>
 8006940:	9b04      	ldr	r3, [sp, #16]
 8006942:	3d01      	subs	r5, #1
 8006944:	5c5b      	ldrb	r3, [r3, r1]
 8006946:	702b      	strb	r3, [r5, #0]
 8006948:	0033      	movs	r3, r6
 800694a:	0006      	movs	r6, r0
 800694c:	429f      	cmp	r7, r3
 800694e:	d9f3      	bls.n	8006938 <_printf_i+0xf0>
 8006950:	2f08      	cmp	r7, #8
 8006952:	d109      	bne.n	8006968 <_printf_i+0x120>
 8006954:	6823      	ldr	r3, [r4, #0]
 8006956:	07db      	lsls	r3, r3, #31
 8006958:	d506      	bpl.n	8006968 <_printf_i+0x120>
 800695a:	6862      	ldr	r2, [r4, #4]
 800695c:	6923      	ldr	r3, [r4, #16]
 800695e:	429a      	cmp	r2, r3
 8006960:	dc02      	bgt.n	8006968 <_printf_i+0x120>
 8006962:	2330      	movs	r3, #48	@ 0x30
 8006964:	3d01      	subs	r5, #1
 8006966:	702b      	strb	r3, [r5, #0]
 8006968:	9b03      	ldr	r3, [sp, #12]
 800696a:	1b5b      	subs	r3, r3, r5
 800696c:	6123      	str	r3, [r4, #16]
 800696e:	9b07      	ldr	r3, [sp, #28]
 8006970:	0021      	movs	r1, r4
 8006972:	9300      	str	r3, [sp, #0]
 8006974:	9805      	ldr	r0, [sp, #20]
 8006976:	9b06      	ldr	r3, [sp, #24]
 8006978:	aa09      	add	r2, sp, #36	@ 0x24
 800697a:	f7ff fef5 	bl	8006768 <_printf_common>
 800697e:	3001      	adds	r0, #1
 8006980:	d148      	bne.n	8006a14 <_printf_i+0x1cc>
 8006982:	2001      	movs	r0, #1
 8006984:	4240      	negs	r0, r0
 8006986:	b00b      	add	sp, #44	@ 0x2c
 8006988:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800698a:	2220      	movs	r2, #32
 800698c:	6809      	ldr	r1, [r1, #0]
 800698e:	430a      	orrs	r2, r1
 8006990:	6022      	str	r2, [r4, #0]
 8006992:	2278      	movs	r2, #120	@ 0x78
 8006994:	4932      	ldr	r1, [pc, #200]	@ (8006a60 <_printf_i+0x218>)
 8006996:	9104      	str	r1, [sp, #16]
 8006998:	0021      	movs	r1, r4
 800699a:	3145      	adds	r1, #69	@ 0x45
 800699c:	700a      	strb	r2, [r1, #0]
 800699e:	6819      	ldr	r1, [r3, #0]
 80069a0:	6822      	ldr	r2, [r4, #0]
 80069a2:	c940      	ldmia	r1!, {r6}
 80069a4:	0610      	lsls	r0, r2, #24
 80069a6:	d402      	bmi.n	80069ae <_printf_i+0x166>
 80069a8:	0650      	lsls	r0, r2, #25
 80069aa:	d500      	bpl.n	80069ae <_printf_i+0x166>
 80069ac:	b2b6      	uxth	r6, r6
 80069ae:	6019      	str	r1, [r3, #0]
 80069b0:	07d3      	lsls	r3, r2, #31
 80069b2:	d502      	bpl.n	80069ba <_printf_i+0x172>
 80069b4:	2320      	movs	r3, #32
 80069b6:	4313      	orrs	r3, r2
 80069b8:	6023      	str	r3, [r4, #0]
 80069ba:	2e00      	cmp	r6, #0
 80069bc:	d001      	beq.n	80069c2 <_printf_i+0x17a>
 80069be:	2710      	movs	r7, #16
 80069c0:	e7a8      	b.n	8006914 <_printf_i+0xcc>
 80069c2:	2220      	movs	r2, #32
 80069c4:	6823      	ldr	r3, [r4, #0]
 80069c6:	4393      	bics	r3, r2
 80069c8:	6023      	str	r3, [r4, #0]
 80069ca:	e7f8      	b.n	80069be <_printf_i+0x176>
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	680d      	ldr	r5, [r1, #0]
 80069d0:	1d10      	adds	r0, r2, #4
 80069d2:	6949      	ldr	r1, [r1, #20]
 80069d4:	6018      	str	r0, [r3, #0]
 80069d6:	6813      	ldr	r3, [r2, #0]
 80069d8:	062e      	lsls	r6, r5, #24
 80069da:	d501      	bpl.n	80069e0 <_printf_i+0x198>
 80069dc:	6019      	str	r1, [r3, #0]
 80069de:	e002      	b.n	80069e6 <_printf_i+0x19e>
 80069e0:	066d      	lsls	r5, r5, #25
 80069e2:	d5fb      	bpl.n	80069dc <_printf_i+0x194>
 80069e4:	8019      	strh	r1, [r3, #0]
 80069e6:	2300      	movs	r3, #0
 80069e8:	9d03      	ldr	r5, [sp, #12]
 80069ea:	6123      	str	r3, [r4, #16]
 80069ec:	e7bf      	b.n	800696e <_printf_i+0x126>
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	1d11      	adds	r1, r2, #4
 80069f2:	6019      	str	r1, [r3, #0]
 80069f4:	6815      	ldr	r5, [r2, #0]
 80069f6:	2100      	movs	r1, #0
 80069f8:	0028      	movs	r0, r5
 80069fa:	6862      	ldr	r2, [r4, #4]
 80069fc:	f000 f858 	bl	8006ab0 <memchr>
 8006a00:	2800      	cmp	r0, #0
 8006a02:	d001      	beq.n	8006a08 <_printf_i+0x1c0>
 8006a04:	1b40      	subs	r0, r0, r5
 8006a06:	6060      	str	r0, [r4, #4]
 8006a08:	6863      	ldr	r3, [r4, #4]
 8006a0a:	6123      	str	r3, [r4, #16]
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	9a03      	ldr	r2, [sp, #12]
 8006a10:	7013      	strb	r3, [r2, #0]
 8006a12:	e7ac      	b.n	800696e <_printf_i+0x126>
 8006a14:	002a      	movs	r2, r5
 8006a16:	6923      	ldr	r3, [r4, #16]
 8006a18:	9906      	ldr	r1, [sp, #24]
 8006a1a:	9805      	ldr	r0, [sp, #20]
 8006a1c:	9d07      	ldr	r5, [sp, #28]
 8006a1e:	47a8      	blx	r5
 8006a20:	3001      	adds	r0, #1
 8006a22:	d0ae      	beq.n	8006982 <_printf_i+0x13a>
 8006a24:	6823      	ldr	r3, [r4, #0]
 8006a26:	079b      	lsls	r3, r3, #30
 8006a28:	d415      	bmi.n	8006a56 <_printf_i+0x20e>
 8006a2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a2c:	68e0      	ldr	r0, [r4, #12]
 8006a2e:	4298      	cmp	r0, r3
 8006a30:	daa9      	bge.n	8006986 <_printf_i+0x13e>
 8006a32:	0018      	movs	r0, r3
 8006a34:	e7a7      	b.n	8006986 <_printf_i+0x13e>
 8006a36:	0022      	movs	r2, r4
 8006a38:	2301      	movs	r3, #1
 8006a3a:	9906      	ldr	r1, [sp, #24]
 8006a3c:	9805      	ldr	r0, [sp, #20]
 8006a3e:	9e07      	ldr	r6, [sp, #28]
 8006a40:	3219      	adds	r2, #25
 8006a42:	47b0      	blx	r6
 8006a44:	3001      	adds	r0, #1
 8006a46:	d09c      	beq.n	8006982 <_printf_i+0x13a>
 8006a48:	3501      	adds	r5, #1
 8006a4a:	68e3      	ldr	r3, [r4, #12]
 8006a4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a4e:	1a9b      	subs	r3, r3, r2
 8006a50:	42ab      	cmp	r3, r5
 8006a52:	dcf0      	bgt.n	8006a36 <_printf_i+0x1ee>
 8006a54:	e7e9      	b.n	8006a2a <_printf_i+0x1e2>
 8006a56:	2500      	movs	r5, #0
 8006a58:	e7f7      	b.n	8006a4a <_printf_i+0x202>
 8006a5a:	46c0      	nop			@ (mov r8, r8)
 8006a5c:	08007320 	.word	0x08007320
 8006a60:	08007331 	.word	0x08007331

08006a64 <memmove>:
 8006a64:	b510      	push	{r4, lr}
 8006a66:	4288      	cmp	r0, r1
 8006a68:	d806      	bhi.n	8006a78 <memmove+0x14>
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d008      	beq.n	8006a82 <memmove+0x1e>
 8006a70:	5ccc      	ldrb	r4, [r1, r3]
 8006a72:	54c4      	strb	r4, [r0, r3]
 8006a74:	3301      	adds	r3, #1
 8006a76:	e7f9      	b.n	8006a6c <memmove+0x8>
 8006a78:	188b      	adds	r3, r1, r2
 8006a7a:	4298      	cmp	r0, r3
 8006a7c:	d2f5      	bcs.n	8006a6a <memmove+0x6>
 8006a7e:	3a01      	subs	r2, #1
 8006a80:	d200      	bcs.n	8006a84 <memmove+0x20>
 8006a82:	bd10      	pop	{r4, pc}
 8006a84:	5c8b      	ldrb	r3, [r1, r2]
 8006a86:	5483      	strb	r3, [r0, r2]
 8006a88:	e7f9      	b.n	8006a7e <memmove+0x1a>
	...

08006a8c <_sbrk_r>:
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	b570      	push	{r4, r5, r6, lr}
 8006a90:	4d06      	ldr	r5, [pc, #24]	@ (8006aac <_sbrk_r+0x20>)
 8006a92:	0004      	movs	r4, r0
 8006a94:	0008      	movs	r0, r1
 8006a96:	602b      	str	r3, [r5, #0]
 8006a98:	f7fd fbe2 	bl	8004260 <_sbrk>
 8006a9c:	1c43      	adds	r3, r0, #1
 8006a9e:	d103      	bne.n	8006aa8 <_sbrk_r+0x1c>
 8006aa0:	682b      	ldr	r3, [r5, #0]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d000      	beq.n	8006aa8 <_sbrk_r+0x1c>
 8006aa6:	6023      	str	r3, [r4, #0]
 8006aa8:	bd70      	pop	{r4, r5, r6, pc}
 8006aaa:	46c0      	nop			@ (mov r8, r8)
 8006aac:	20000484 	.word	0x20000484

08006ab0 <memchr>:
 8006ab0:	b2c9      	uxtb	r1, r1
 8006ab2:	1882      	adds	r2, r0, r2
 8006ab4:	4290      	cmp	r0, r2
 8006ab6:	d101      	bne.n	8006abc <memchr+0xc>
 8006ab8:	2000      	movs	r0, #0
 8006aba:	4770      	bx	lr
 8006abc:	7803      	ldrb	r3, [r0, #0]
 8006abe:	428b      	cmp	r3, r1
 8006ac0:	d0fb      	beq.n	8006aba <memchr+0xa>
 8006ac2:	3001      	adds	r0, #1
 8006ac4:	e7f6      	b.n	8006ab4 <memchr+0x4>

08006ac6 <memcpy>:
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	b510      	push	{r4, lr}
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d100      	bne.n	8006ad0 <memcpy+0xa>
 8006ace:	bd10      	pop	{r4, pc}
 8006ad0:	5ccc      	ldrb	r4, [r1, r3]
 8006ad2:	54c4      	strb	r4, [r0, r3]
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	e7f8      	b.n	8006aca <memcpy+0x4>

08006ad8 <_realloc_r>:
 8006ad8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ada:	0006      	movs	r6, r0
 8006adc:	000c      	movs	r4, r1
 8006ade:	0015      	movs	r5, r2
 8006ae0:	2900      	cmp	r1, #0
 8006ae2:	d105      	bne.n	8006af0 <_realloc_r+0x18>
 8006ae4:	0011      	movs	r1, r2
 8006ae6:	f7ff fc51 	bl	800638c <_malloc_r>
 8006aea:	0004      	movs	r4, r0
 8006aec:	0020      	movs	r0, r4
 8006aee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006af0:	2a00      	cmp	r2, #0
 8006af2:	d103      	bne.n	8006afc <_realloc_r+0x24>
 8006af4:	f7ff fbde 	bl	80062b4 <_free_r>
 8006af8:	2400      	movs	r4, #0
 8006afa:	e7f7      	b.n	8006aec <_realloc_r+0x14>
 8006afc:	f000 f81b 	bl	8006b36 <_malloc_usable_size_r>
 8006b00:	0007      	movs	r7, r0
 8006b02:	4285      	cmp	r5, r0
 8006b04:	d802      	bhi.n	8006b0c <_realloc_r+0x34>
 8006b06:	0843      	lsrs	r3, r0, #1
 8006b08:	42ab      	cmp	r3, r5
 8006b0a:	d3ef      	bcc.n	8006aec <_realloc_r+0x14>
 8006b0c:	0029      	movs	r1, r5
 8006b0e:	0030      	movs	r0, r6
 8006b10:	f7ff fc3c 	bl	800638c <_malloc_r>
 8006b14:	9001      	str	r0, [sp, #4]
 8006b16:	2800      	cmp	r0, #0
 8006b18:	d0ee      	beq.n	8006af8 <_realloc_r+0x20>
 8006b1a:	002a      	movs	r2, r5
 8006b1c:	42bd      	cmp	r5, r7
 8006b1e:	d900      	bls.n	8006b22 <_realloc_r+0x4a>
 8006b20:	003a      	movs	r2, r7
 8006b22:	0021      	movs	r1, r4
 8006b24:	9801      	ldr	r0, [sp, #4]
 8006b26:	f7ff ffce 	bl	8006ac6 <memcpy>
 8006b2a:	0021      	movs	r1, r4
 8006b2c:	0030      	movs	r0, r6
 8006b2e:	f7ff fbc1 	bl	80062b4 <_free_r>
 8006b32:	9c01      	ldr	r4, [sp, #4]
 8006b34:	e7da      	b.n	8006aec <_realloc_r+0x14>

08006b36 <_malloc_usable_size_r>:
 8006b36:	1f0b      	subs	r3, r1, #4
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	1f18      	subs	r0, r3, #4
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	da01      	bge.n	8006b44 <_malloc_usable_size_r+0xe>
 8006b40:	580b      	ldr	r3, [r1, r0]
 8006b42:	18c0      	adds	r0, r0, r3
 8006b44:	4770      	bx	lr
	...

08006b48 <log10>:
 8006b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b4a:	0004      	movs	r4, r0
 8006b4c:	000d      	movs	r5, r1
 8006b4e:	f000 f837 	bl	8006bc0 <__ieee754_log10>
 8006b52:	0022      	movs	r2, r4
 8006b54:	0006      	movs	r6, r0
 8006b56:	000f      	movs	r7, r1
 8006b58:	002b      	movs	r3, r5
 8006b5a:	0020      	movs	r0, r4
 8006b5c:	0029      	movs	r1, r5
 8006b5e:	f7fb fac5 	bl	80020ec <__aeabi_dcmpun>
 8006b62:	2800      	cmp	r0, #0
 8006b64:	d115      	bne.n	8006b92 <log10+0x4a>
 8006b66:	2200      	movs	r2, #0
 8006b68:	2300      	movs	r3, #0
 8006b6a:	0020      	movs	r0, r4
 8006b6c:	0029      	movs	r1, r5
 8006b6e:	f7f9 fc73 	bl	8000458 <__aeabi_dcmple>
 8006b72:	2800      	cmp	r0, #0
 8006b74:	d00d      	beq.n	8006b92 <log10+0x4a>
 8006b76:	2200      	movs	r2, #0
 8006b78:	2300      	movs	r3, #0
 8006b7a:	0020      	movs	r0, r4
 8006b7c:	0029      	movs	r1, r5
 8006b7e:	f7f9 fc5b 	bl	8000438 <__aeabi_dcmpeq>
 8006b82:	2800      	cmp	r0, #0
 8006b84:	d008      	beq.n	8006b98 <log10+0x50>
 8006b86:	f7ff fb69 	bl	800625c <__errno>
 8006b8a:	2322      	movs	r3, #34	@ 0x22
 8006b8c:	2600      	movs	r6, #0
 8006b8e:	4f07      	ldr	r7, [pc, #28]	@ (8006bac <log10+0x64>)
 8006b90:	6003      	str	r3, [r0, #0]
 8006b92:	0030      	movs	r0, r6
 8006b94:	0039      	movs	r1, r7
 8006b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b98:	f7ff fb60 	bl	800625c <__errno>
 8006b9c:	2321      	movs	r3, #33	@ 0x21
 8006b9e:	6003      	str	r3, [r0, #0]
 8006ba0:	4803      	ldr	r0, [pc, #12]	@ (8006bb0 <log10+0x68>)
 8006ba2:	f000 f807 	bl	8006bb4 <nan>
 8006ba6:	0006      	movs	r6, r0
 8006ba8:	000f      	movs	r7, r1
 8006baa:	e7f2      	b.n	8006b92 <log10+0x4a>
 8006bac:	fff00000 	.word	0xfff00000
 8006bb0:	08007314 	.word	0x08007314

08006bb4 <nan>:
 8006bb4:	2000      	movs	r0, #0
 8006bb6:	4901      	ldr	r1, [pc, #4]	@ (8006bbc <nan+0x8>)
 8006bb8:	4770      	bx	lr
 8006bba:	46c0      	nop			@ (mov r8, r8)
 8006bbc:	7ff80000 	.word	0x7ff80000

08006bc0 <__ieee754_log10>:
 8006bc0:	2280      	movs	r2, #128	@ 0x80
 8006bc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bc4:	000b      	movs	r3, r1
 8006bc6:	0004      	movs	r4, r0
 8006bc8:	000d      	movs	r5, r1
 8006bca:	b085      	sub	sp, #20
 8006bcc:	0352      	lsls	r2, r2, #13
 8006bce:	4291      	cmp	r1, r2
 8006bd0:	da26      	bge.n	8006c20 <__ieee754_log10+0x60>
 8006bd2:	004a      	lsls	r2, r1, #1
 8006bd4:	0852      	lsrs	r2, r2, #1
 8006bd6:	4302      	orrs	r2, r0
 8006bd8:	d107      	bne.n	8006bea <__ieee754_log10+0x2a>
 8006bda:	2200      	movs	r2, #0
 8006bdc:	2300      	movs	r3, #0
 8006bde:	2000      	movs	r0, #0
 8006be0:	4929      	ldr	r1, [pc, #164]	@ (8006c88 <__ieee754_log10+0xc8>)
 8006be2:	f7f9 ffdb 	bl	8000b9c <__aeabi_ddiv>
 8006be6:	b005      	add	sp, #20
 8006be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bea:	2900      	cmp	r1, #0
 8006bec:	da05      	bge.n	8006bfa <__ieee754_log10+0x3a>
 8006bee:	0002      	movs	r2, r0
 8006bf0:	f7fa fee0 	bl	80019b4 <__aeabi_dsub>
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	e7f3      	b.n	8006be2 <__ieee754_log10+0x22>
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	4b23      	ldr	r3, [pc, #140]	@ (8006c8c <__ieee754_log10+0xcc>)
 8006bfe:	f7fa fc11 	bl	8001424 <__aeabi_dmul>
 8006c02:	2236      	movs	r2, #54	@ 0x36
 8006c04:	0004      	movs	r4, r0
 8006c06:	000d      	movs	r5, r1
 8006c08:	000b      	movs	r3, r1
 8006c0a:	4252      	negs	r2, r2
 8006c0c:	4920      	ldr	r1, [pc, #128]	@ (8006c90 <__ieee754_log10+0xd0>)
 8006c0e:	428b      	cmp	r3, r1
 8006c10:	dd08      	ble.n	8006c24 <__ieee754_log10+0x64>
 8006c12:	0022      	movs	r2, r4
 8006c14:	002b      	movs	r3, r5
 8006c16:	0020      	movs	r0, r4
 8006c18:	0029      	movs	r1, r5
 8006c1a:	f7f9 fc5b 	bl	80004d4 <__aeabi_dadd>
 8006c1e:	e7e2      	b.n	8006be6 <__ieee754_log10+0x26>
 8006c20:	2200      	movs	r2, #0
 8006c22:	e7f3      	b.n	8006c0c <__ieee754_log10+0x4c>
 8006c24:	491b      	ldr	r1, [pc, #108]	@ (8006c94 <__ieee754_log10+0xd4>)
 8006c26:	1518      	asrs	r0, r3, #20
 8006c28:	1840      	adds	r0, r0, r1
 8006c2a:	1880      	adds	r0, r0, r2
 8006c2c:	0fc2      	lsrs	r2, r0, #31
 8006c2e:	031b      	lsls	r3, r3, #12
 8006c30:	0b1b      	lsrs	r3, r3, #12
 8006c32:	1880      	adds	r0, r0, r2
 8006c34:	9203      	str	r2, [sp, #12]
 8006c36:	9300      	str	r3, [sp, #0]
 8006c38:	f7fb fab6 	bl	80021a8 <__aeabi_i2d>
 8006c3c:	9a03      	ldr	r2, [sp, #12]
 8006c3e:	4b16      	ldr	r3, [pc, #88]	@ (8006c98 <__ieee754_log10+0xd8>)
 8006c40:	0006      	movs	r6, r0
 8006c42:	1a9b      	subs	r3, r3, r2
 8006c44:	9a00      	ldr	r2, [sp, #0]
 8006c46:	051b      	lsls	r3, r3, #20
 8006c48:	431a      	orrs	r2, r3
 8006c4a:	0015      	movs	r5, r2
 8006c4c:	4b13      	ldr	r3, [pc, #76]	@ (8006c9c <__ieee754_log10+0xdc>)
 8006c4e:	4a14      	ldr	r2, [pc, #80]	@ (8006ca0 <__ieee754_log10+0xe0>)
 8006c50:	000f      	movs	r7, r1
 8006c52:	f7fa fbe7 	bl	8001424 <__aeabi_dmul>
 8006c56:	9000      	str	r0, [sp, #0]
 8006c58:	9101      	str	r1, [sp, #4]
 8006c5a:	0020      	movs	r0, r4
 8006c5c:	0029      	movs	r1, r5
 8006c5e:	f000 f829 	bl	8006cb4 <__ieee754_log>
 8006c62:	4a10      	ldr	r2, [pc, #64]	@ (8006ca4 <__ieee754_log10+0xe4>)
 8006c64:	4b10      	ldr	r3, [pc, #64]	@ (8006ca8 <__ieee754_log10+0xe8>)
 8006c66:	f7fa fbdd 	bl	8001424 <__aeabi_dmul>
 8006c6a:	9a00      	ldr	r2, [sp, #0]
 8006c6c:	9b01      	ldr	r3, [sp, #4]
 8006c6e:	f7f9 fc31 	bl	80004d4 <__aeabi_dadd>
 8006c72:	4a0e      	ldr	r2, [pc, #56]	@ (8006cac <__ieee754_log10+0xec>)
 8006c74:	4b0e      	ldr	r3, [pc, #56]	@ (8006cb0 <__ieee754_log10+0xf0>)
 8006c76:	0004      	movs	r4, r0
 8006c78:	000d      	movs	r5, r1
 8006c7a:	0030      	movs	r0, r6
 8006c7c:	0039      	movs	r1, r7
 8006c7e:	f7fa fbd1 	bl	8001424 <__aeabi_dmul>
 8006c82:	0002      	movs	r2, r0
 8006c84:	000b      	movs	r3, r1
 8006c86:	e7c6      	b.n	8006c16 <__ieee754_log10+0x56>
 8006c88:	c3500000 	.word	0xc3500000
 8006c8c:	43500000 	.word	0x43500000
 8006c90:	7fefffff 	.word	0x7fefffff
 8006c94:	fffffc01 	.word	0xfffffc01
 8006c98:	000003ff 	.word	0x000003ff
 8006c9c:	3d59fef3 	.word	0x3d59fef3
 8006ca0:	11f12b36 	.word	0x11f12b36
 8006ca4:	1526e50e 	.word	0x1526e50e
 8006ca8:	3fdbcb7b 	.word	0x3fdbcb7b
 8006cac:	509f6000 	.word	0x509f6000
 8006cb0:	3fd34413 	.word	0x3fd34413

08006cb4 <__ieee754_log>:
 8006cb4:	2380      	movs	r3, #128	@ 0x80
 8006cb6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cb8:	035b      	lsls	r3, r3, #13
 8006cba:	000e      	movs	r6, r1
 8006cbc:	b08d      	sub	sp, #52	@ 0x34
 8006cbe:	4299      	cmp	r1, r3
 8006cc0:	da23      	bge.n	8006d0a <__ieee754_log+0x56>
 8006cc2:	004b      	lsls	r3, r1, #1
 8006cc4:	085b      	lsrs	r3, r3, #1
 8006cc6:	4303      	orrs	r3, r0
 8006cc8:	d107      	bne.n	8006cda <__ieee754_log+0x26>
 8006cca:	2200      	movs	r2, #0
 8006ccc:	2300      	movs	r3, #0
 8006cce:	2000      	movs	r0, #0
 8006cd0:	49b4      	ldr	r1, [pc, #720]	@ (8006fa4 <__ieee754_log+0x2f0>)
 8006cd2:	f7f9 ff63 	bl	8000b9c <__aeabi_ddiv>
 8006cd6:	b00d      	add	sp, #52	@ 0x34
 8006cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cda:	2900      	cmp	r1, #0
 8006cdc:	da06      	bge.n	8006cec <__ieee754_log+0x38>
 8006cde:	0002      	movs	r2, r0
 8006ce0:	000b      	movs	r3, r1
 8006ce2:	f7fa fe67 	bl	80019b4 <__aeabi_dsub>
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	2300      	movs	r3, #0
 8006cea:	e7f2      	b.n	8006cd2 <__ieee754_log+0x1e>
 8006cec:	4bae      	ldr	r3, [pc, #696]	@ (8006fa8 <__ieee754_log+0x2f4>)
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f7fa fb98 	bl	8001424 <__aeabi_dmul>
 8006cf4:	2336      	movs	r3, #54	@ 0x36
 8006cf6:	000e      	movs	r6, r1
 8006cf8:	425b      	negs	r3, r3
 8006cfa:	4aac      	ldr	r2, [pc, #688]	@ (8006fac <__ieee754_log+0x2f8>)
 8006cfc:	4296      	cmp	r6, r2
 8006cfe:	dd06      	ble.n	8006d0e <__ieee754_log+0x5a>
 8006d00:	0002      	movs	r2, r0
 8006d02:	000b      	movs	r3, r1
 8006d04:	f7f9 fbe6 	bl	80004d4 <__aeabi_dadd>
 8006d08:	e7e5      	b.n	8006cd6 <__ieee754_log+0x22>
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	e7f5      	b.n	8006cfa <__ieee754_log+0x46>
 8006d0e:	4ca8      	ldr	r4, [pc, #672]	@ (8006fb0 <__ieee754_log+0x2fc>)
 8006d10:	1532      	asrs	r2, r6, #20
 8006d12:	1912      	adds	r2, r2, r4
 8006d14:	0336      	lsls	r6, r6, #12
 8006d16:	4ca7      	ldr	r4, [pc, #668]	@ (8006fb4 <__ieee754_log+0x300>)
 8006d18:	18d2      	adds	r2, r2, r3
 8006d1a:	0b33      	lsrs	r3, r6, #12
 8006d1c:	9302      	str	r3, [sp, #8]
 8006d1e:	191b      	adds	r3, r3, r4
 8006d20:	2480      	movs	r4, #128	@ 0x80
 8006d22:	0364      	lsls	r4, r4, #13
 8006d24:	4023      	ands	r3, r4
 8006d26:	4ca4      	ldr	r4, [pc, #656]	@ (8006fb8 <__ieee754_log+0x304>)
 8006d28:	9d02      	ldr	r5, [sp, #8]
 8006d2a:	405c      	eors	r4, r3
 8006d2c:	151b      	asrs	r3, r3, #20
 8006d2e:	189b      	adds	r3, r3, r2
 8006d30:	4325      	orrs	r5, r4
 8006d32:	2200      	movs	r2, #0
 8006d34:	9300      	str	r3, [sp, #0]
 8006d36:	0029      	movs	r1, r5
 8006d38:	4b9f      	ldr	r3, [pc, #636]	@ (8006fb8 <__ieee754_log+0x304>)
 8006d3a:	f7fa fe3b 	bl	80019b4 <__aeabi_dsub>
 8006d3e:	9b02      	ldr	r3, [sp, #8]
 8006d40:	0006      	movs	r6, r0
 8006d42:	3302      	adds	r3, #2
 8006d44:	031b      	lsls	r3, r3, #12
 8006d46:	000f      	movs	r7, r1
 8006d48:	2200      	movs	r2, #0
 8006d4a:	0b1b      	lsrs	r3, r3, #12
 8006d4c:	2b02      	cmp	r3, #2
 8006d4e:	dc64      	bgt.n	8006e1a <__ieee754_log+0x166>
 8006d50:	2300      	movs	r3, #0
 8006d52:	f7f9 fb71 	bl	8000438 <__aeabi_dcmpeq>
 8006d56:	2800      	cmp	r0, #0
 8006d58:	d019      	beq.n	8006d8e <__ieee754_log+0xda>
 8006d5a:	9b00      	ldr	r3, [sp, #0]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d100      	bne.n	8006d62 <__ieee754_log+0xae>
 8006d60:	e11c      	b.n	8006f9c <__ieee754_log+0x2e8>
 8006d62:	0018      	movs	r0, r3
 8006d64:	f7fb fa20 	bl	80021a8 <__aeabi_i2d>
 8006d68:	4a94      	ldr	r2, [pc, #592]	@ (8006fbc <__ieee754_log+0x308>)
 8006d6a:	4b95      	ldr	r3, [pc, #596]	@ (8006fc0 <__ieee754_log+0x30c>)
 8006d6c:	0004      	movs	r4, r0
 8006d6e:	000d      	movs	r5, r1
 8006d70:	f7fa fb58 	bl	8001424 <__aeabi_dmul>
 8006d74:	4a93      	ldr	r2, [pc, #588]	@ (8006fc4 <__ieee754_log+0x310>)
 8006d76:	0006      	movs	r6, r0
 8006d78:	000f      	movs	r7, r1
 8006d7a:	4b93      	ldr	r3, [pc, #588]	@ (8006fc8 <__ieee754_log+0x314>)
 8006d7c:	0020      	movs	r0, r4
 8006d7e:	0029      	movs	r1, r5
 8006d80:	f7fa fb50 	bl	8001424 <__aeabi_dmul>
 8006d84:	0002      	movs	r2, r0
 8006d86:	000b      	movs	r3, r1
 8006d88:	0030      	movs	r0, r6
 8006d8a:	0039      	movs	r1, r7
 8006d8c:	e7ba      	b.n	8006d04 <__ieee754_log+0x50>
 8006d8e:	4a8f      	ldr	r2, [pc, #572]	@ (8006fcc <__ieee754_log+0x318>)
 8006d90:	4b8f      	ldr	r3, [pc, #572]	@ (8006fd0 <__ieee754_log+0x31c>)
 8006d92:	0030      	movs	r0, r6
 8006d94:	0039      	movs	r1, r7
 8006d96:	f7fa fb45 	bl	8001424 <__aeabi_dmul>
 8006d9a:	0002      	movs	r2, r0
 8006d9c:	000b      	movs	r3, r1
 8006d9e:	2000      	movs	r0, #0
 8006da0:	498c      	ldr	r1, [pc, #560]	@ (8006fd4 <__ieee754_log+0x320>)
 8006da2:	f7fa fe07 	bl	80019b4 <__aeabi_dsub>
 8006da6:	0032      	movs	r2, r6
 8006da8:	0004      	movs	r4, r0
 8006daa:	000d      	movs	r5, r1
 8006dac:	003b      	movs	r3, r7
 8006dae:	0030      	movs	r0, r6
 8006db0:	0039      	movs	r1, r7
 8006db2:	f7fa fb37 	bl	8001424 <__aeabi_dmul>
 8006db6:	000b      	movs	r3, r1
 8006db8:	0002      	movs	r2, r0
 8006dba:	0029      	movs	r1, r5
 8006dbc:	0020      	movs	r0, r4
 8006dbe:	f7fa fb31 	bl	8001424 <__aeabi_dmul>
 8006dc2:	9b00      	ldr	r3, [sp, #0]
 8006dc4:	9002      	str	r0, [sp, #8]
 8006dc6:	9103      	str	r1, [sp, #12]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d106      	bne.n	8006dda <__ieee754_log+0x126>
 8006dcc:	0002      	movs	r2, r0
 8006dce:	000b      	movs	r3, r1
 8006dd0:	0030      	movs	r0, r6
 8006dd2:	0039      	movs	r1, r7
 8006dd4:	f7fa fdee 	bl	80019b4 <__aeabi_dsub>
 8006dd8:	e77d      	b.n	8006cd6 <__ieee754_log+0x22>
 8006dda:	9800      	ldr	r0, [sp, #0]
 8006ddc:	f7fb f9e4 	bl	80021a8 <__aeabi_i2d>
 8006de0:	4a76      	ldr	r2, [pc, #472]	@ (8006fbc <__ieee754_log+0x308>)
 8006de2:	4b77      	ldr	r3, [pc, #476]	@ (8006fc0 <__ieee754_log+0x30c>)
 8006de4:	0004      	movs	r4, r0
 8006de6:	000d      	movs	r5, r1
 8006de8:	f7fa fb1c 	bl	8001424 <__aeabi_dmul>
 8006dec:	4a75      	ldr	r2, [pc, #468]	@ (8006fc4 <__ieee754_log+0x310>)
 8006dee:	9000      	str	r0, [sp, #0]
 8006df0:	9101      	str	r1, [sp, #4]
 8006df2:	4b75      	ldr	r3, [pc, #468]	@ (8006fc8 <__ieee754_log+0x314>)
 8006df4:	0020      	movs	r0, r4
 8006df6:	0029      	movs	r1, r5
 8006df8:	f7fa fb14 	bl	8001424 <__aeabi_dmul>
 8006dfc:	0002      	movs	r2, r0
 8006dfe:	000b      	movs	r3, r1
 8006e00:	9802      	ldr	r0, [sp, #8]
 8006e02:	9903      	ldr	r1, [sp, #12]
 8006e04:	f7fa fdd6 	bl	80019b4 <__aeabi_dsub>
 8006e08:	0032      	movs	r2, r6
 8006e0a:	003b      	movs	r3, r7
 8006e0c:	f7fa fdd2 	bl	80019b4 <__aeabi_dsub>
 8006e10:	0002      	movs	r2, r0
 8006e12:	000b      	movs	r3, r1
 8006e14:	9800      	ldr	r0, [sp, #0]
 8006e16:	9901      	ldr	r1, [sp, #4]
 8006e18:	e7dc      	b.n	8006dd4 <__ieee754_log+0x120>
 8006e1a:	2380      	movs	r3, #128	@ 0x80
 8006e1c:	05db      	lsls	r3, r3, #23
 8006e1e:	f7f9 fb59 	bl	80004d4 <__aeabi_dadd>
 8006e22:	0002      	movs	r2, r0
 8006e24:	000b      	movs	r3, r1
 8006e26:	0030      	movs	r0, r6
 8006e28:	0039      	movs	r1, r7
 8006e2a:	f7f9 feb7 	bl	8000b9c <__aeabi_ddiv>
 8006e2e:	9004      	str	r0, [sp, #16]
 8006e30:	9105      	str	r1, [sp, #20]
 8006e32:	9800      	ldr	r0, [sp, #0]
 8006e34:	f7fb f9b8 	bl	80021a8 <__aeabi_i2d>
 8006e38:	9a04      	ldr	r2, [sp, #16]
 8006e3a:	9b05      	ldr	r3, [sp, #20]
 8006e3c:	9006      	str	r0, [sp, #24]
 8006e3e:	9107      	str	r1, [sp, #28]
 8006e40:	0010      	movs	r0, r2
 8006e42:	0019      	movs	r1, r3
 8006e44:	f7fa faee 	bl	8001424 <__aeabi_dmul>
 8006e48:	4a63      	ldr	r2, [pc, #396]	@ (8006fd8 <__ieee754_log+0x324>)
 8006e4a:	9b02      	ldr	r3, [sp, #8]
 8006e4c:	4694      	mov	ip, r2
 8006e4e:	4463      	add	r3, ip
 8006e50:	0002      	movs	r2, r0
 8006e52:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e54:	000b      	movs	r3, r1
 8006e56:	9008      	str	r0, [sp, #32]
 8006e58:	9109      	str	r1, [sp, #36]	@ 0x24
 8006e5a:	f7fa fae3 	bl	8001424 <__aeabi_dmul>
 8006e5e:	0004      	movs	r4, r0
 8006e60:	000d      	movs	r5, r1
 8006e62:	4a5e      	ldr	r2, [pc, #376]	@ (8006fdc <__ieee754_log+0x328>)
 8006e64:	4b5e      	ldr	r3, [pc, #376]	@ (8006fe0 <__ieee754_log+0x32c>)
 8006e66:	f7fa fadd 	bl	8001424 <__aeabi_dmul>
 8006e6a:	4a5e      	ldr	r2, [pc, #376]	@ (8006fe4 <__ieee754_log+0x330>)
 8006e6c:	4b5e      	ldr	r3, [pc, #376]	@ (8006fe8 <__ieee754_log+0x334>)
 8006e6e:	f7f9 fb31 	bl	80004d4 <__aeabi_dadd>
 8006e72:	0022      	movs	r2, r4
 8006e74:	002b      	movs	r3, r5
 8006e76:	f7fa fad5 	bl	8001424 <__aeabi_dmul>
 8006e7a:	4a5c      	ldr	r2, [pc, #368]	@ (8006fec <__ieee754_log+0x338>)
 8006e7c:	4b5c      	ldr	r3, [pc, #368]	@ (8006ff0 <__ieee754_log+0x33c>)
 8006e7e:	f7f9 fb29 	bl	80004d4 <__aeabi_dadd>
 8006e82:	0022      	movs	r2, r4
 8006e84:	002b      	movs	r3, r5
 8006e86:	f7fa facd 	bl	8001424 <__aeabi_dmul>
 8006e8a:	4a5a      	ldr	r2, [pc, #360]	@ (8006ff4 <__ieee754_log+0x340>)
 8006e8c:	4b5a      	ldr	r3, [pc, #360]	@ (8006ff8 <__ieee754_log+0x344>)
 8006e8e:	f7f9 fb21 	bl	80004d4 <__aeabi_dadd>
 8006e92:	9a08      	ldr	r2, [sp, #32]
 8006e94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e96:	f7fa fac5 	bl	8001424 <__aeabi_dmul>
 8006e9a:	4a58      	ldr	r2, [pc, #352]	@ (8006ffc <__ieee754_log+0x348>)
 8006e9c:	9008      	str	r0, [sp, #32]
 8006e9e:	9109      	str	r1, [sp, #36]	@ 0x24
 8006ea0:	4b57      	ldr	r3, [pc, #348]	@ (8007000 <__ieee754_log+0x34c>)
 8006ea2:	0020      	movs	r0, r4
 8006ea4:	0029      	movs	r1, r5
 8006ea6:	f7fa fabd 	bl	8001424 <__aeabi_dmul>
 8006eaa:	4a56      	ldr	r2, [pc, #344]	@ (8007004 <__ieee754_log+0x350>)
 8006eac:	4b56      	ldr	r3, [pc, #344]	@ (8007008 <__ieee754_log+0x354>)
 8006eae:	f7f9 fb11 	bl	80004d4 <__aeabi_dadd>
 8006eb2:	0022      	movs	r2, r4
 8006eb4:	002b      	movs	r3, r5
 8006eb6:	f7fa fab5 	bl	8001424 <__aeabi_dmul>
 8006eba:	4a54      	ldr	r2, [pc, #336]	@ (800700c <__ieee754_log+0x358>)
 8006ebc:	4b54      	ldr	r3, [pc, #336]	@ (8007010 <__ieee754_log+0x35c>)
 8006ebe:	f7f9 fb09 	bl	80004d4 <__aeabi_dadd>
 8006ec2:	0022      	movs	r2, r4
 8006ec4:	002b      	movs	r3, r5
 8006ec6:	f7fa faad 	bl	8001424 <__aeabi_dmul>
 8006eca:	0002      	movs	r2, r0
 8006ecc:	000b      	movs	r3, r1
 8006ece:	9808      	ldr	r0, [sp, #32]
 8006ed0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006ed2:	f7f9 faff 	bl	80004d4 <__aeabi_dadd>
 8006ed6:	9a02      	ldr	r2, [sp, #8]
 8006ed8:	4b4e      	ldr	r3, [pc, #312]	@ (8007014 <__ieee754_log+0x360>)
 8006eda:	0004      	movs	r4, r0
 8006edc:	1a9b      	subs	r3, r3, r2
 8006ede:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006ee0:	000d      	movs	r5, r1
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	dd34      	ble.n	8006f52 <__ieee754_log+0x29e>
 8006ee8:	2200      	movs	r2, #0
 8006eea:	4b3a      	ldr	r3, [pc, #232]	@ (8006fd4 <__ieee754_log+0x320>)
 8006eec:	0030      	movs	r0, r6
 8006eee:	0039      	movs	r1, r7
 8006ef0:	f7fa fa98 	bl	8001424 <__aeabi_dmul>
 8006ef4:	0032      	movs	r2, r6
 8006ef6:	003b      	movs	r3, r7
 8006ef8:	f7fa fa94 	bl	8001424 <__aeabi_dmul>
 8006efc:	0002      	movs	r2, r0
 8006efe:	000b      	movs	r3, r1
 8006f00:	9002      	str	r0, [sp, #8]
 8006f02:	9103      	str	r1, [sp, #12]
 8006f04:	0020      	movs	r0, r4
 8006f06:	0029      	movs	r1, r5
 8006f08:	f7f9 fae4 	bl	80004d4 <__aeabi_dadd>
 8006f0c:	9a04      	ldr	r2, [sp, #16]
 8006f0e:	9b05      	ldr	r3, [sp, #20]
 8006f10:	f7fa fa88 	bl	8001424 <__aeabi_dmul>
 8006f14:	9b00      	ldr	r3, [sp, #0]
 8006f16:	0004      	movs	r4, r0
 8006f18:	000d      	movs	r5, r1
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d106      	bne.n	8006f2c <__ieee754_log+0x278>
 8006f1e:	0002      	movs	r2, r0
 8006f20:	000b      	movs	r3, r1
 8006f22:	9802      	ldr	r0, [sp, #8]
 8006f24:	9903      	ldr	r1, [sp, #12]
 8006f26:	f7fa fd45 	bl	80019b4 <__aeabi_dsub>
 8006f2a:	e74f      	b.n	8006dcc <__ieee754_log+0x118>
 8006f2c:	4a23      	ldr	r2, [pc, #140]	@ (8006fbc <__ieee754_log+0x308>)
 8006f2e:	4b24      	ldr	r3, [pc, #144]	@ (8006fc0 <__ieee754_log+0x30c>)
 8006f30:	9806      	ldr	r0, [sp, #24]
 8006f32:	9907      	ldr	r1, [sp, #28]
 8006f34:	f7fa fa76 	bl	8001424 <__aeabi_dmul>
 8006f38:	4a22      	ldr	r2, [pc, #136]	@ (8006fc4 <__ieee754_log+0x310>)
 8006f3a:	9000      	str	r0, [sp, #0]
 8006f3c:	9101      	str	r1, [sp, #4]
 8006f3e:	9806      	ldr	r0, [sp, #24]
 8006f40:	9907      	ldr	r1, [sp, #28]
 8006f42:	4b21      	ldr	r3, [pc, #132]	@ (8006fc8 <__ieee754_log+0x314>)
 8006f44:	f7fa fa6e 	bl	8001424 <__aeabi_dmul>
 8006f48:	0022      	movs	r2, r4
 8006f4a:	002b      	movs	r3, r5
 8006f4c:	f7f9 fac2 	bl	80004d4 <__aeabi_dadd>
 8006f50:	e754      	b.n	8006dfc <__ieee754_log+0x148>
 8006f52:	0002      	movs	r2, r0
 8006f54:	000b      	movs	r3, r1
 8006f56:	0030      	movs	r0, r6
 8006f58:	0039      	movs	r1, r7
 8006f5a:	f7fa fd2b 	bl	80019b4 <__aeabi_dsub>
 8006f5e:	9a04      	ldr	r2, [sp, #16]
 8006f60:	9b05      	ldr	r3, [sp, #20]
 8006f62:	f7fa fa5f 	bl	8001424 <__aeabi_dmul>
 8006f66:	9b00      	ldr	r3, [sp, #0]
 8006f68:	0004      	movs	r4, r0
 8006f6a:	000d      	movs	r5, r1
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d102      	bne.n	8006f76 <__ieee754_log+0x2c2>
 8006f70:	0002      	movs	r2, r0
 8006f72:	000b      	movs	r3, r1
 8006f74:	e72c      	b.n	8006dd0 <__ieee754_log+0x11c>
 8006f76:	4a11      	ldr	r2, [pc, #68]	@ (8006fbc <__ieee754_log+0x308>)
 8006f78:	4b11      	ldr	r3, [pc, #68]	@ (8006fc0 <__ieee754_log+0x30c>)
 8006f7a:	9806      	ldr	r0, [sp, #24]
 8006f7c:	9907      	ldr	r1, [sp, #28]
 8006f7e:	f7fa fa51 	bl	8001424 <__aeabi_dmul>
 8006f82:	4a10      	ldr	r2, [pc, #64]	@ (8006fc4 <__ieee754_log+0x310>)
 8006f84:	9000      	str	r0, [sp, #0]
 8006f86:	9101      	str	r1, [sp, #4]
 8006f88:	9806      	ldr	r0, [sp, #24]
 8006f8a:	9907      	ldr	r1, [sp, #28]
 8006f8c:	4b0e      	ldr	r3, [pc, #56]	@ (8006fc8 <__ieee754_log+0x314>)
 8006f8e:	f7fa fa49 	bl	8001424 <__aeabi_dmul>
 8006f92:	0002      	movs	r2, r0
 8006f94:	000b      	movs	r3, r1
 8006f96:	0020      	movs	r0, r4
 8006f98:	0029      	movs	r1, r5
 8006f9a:	e733      	b.n	8006e04 <__ieee754_log+0x150>
 8006f9c:	2000      	movs	r0, #0
 8006f9e:	2100      	movs	r1, #0
 8006fa0:	e699      	b.n	8006cd6 <__ieee754_log+0x22>
 8006fa2:	46c0      	nop			@ (mov r8, r8)
 8006fa4:	c3500000 	.word	0xc3500000
 8006fa8:	43500000 	.word	0x43500000
 8006fac:	7fefffff 	.word	0x7fefffff
 8006fb0:	fffffc01 	.word	0xfffffc01
 8006fb4:	00095f64 	.word	0x00095f64
 8006fb8:	3ff00000 	.word	0x3ff00000
 8006fbc:	fee00000 	.word	0xfee00000
 8006fc0:	3fe62e42 	.word	0x3fe62e42
 8006fc4:	35793c76 	.word	0x35793c76
 8006fc8:	3dea39ef 	.word	0x3dea39ef
 8006fcc:	55555555 	.word	0x55555555
 8006fd0:	3fd55555 	.word	0x3fd55555
 8006fd4:	3fe00000 	.word	0x3fe00000
 8006fd8:	fff9eb86 	.word	0xfff9eb86
 8006fdc:	df3e5244 	.word	0xdf3e5244
 8006fe0:	3fc2f112 	.word	0x3fc2f112
 8006fe4:	96cb03de 	.word	0x96cb03de
 8006fe8:	3fc74664 	.word	0x3fc74664
 8006fec:	94229359 	.word	0x94229359
 8006ff0:	3fd24924 	.word	0x3fd24924
 8006ff4:	55555593 	.word	0x55555593
 8006ff8:	3fe55555 	.word	0x3fe55555
 8006ffc:	d078c69f 	.word	0xd078c69f
 8007000:	3fc39a09 	.word	0x3fc39a09
 8007004:	1d8e78af 	.word	0x1d8e78af
 8007008:	3fcc71c5 	.word	0x3fcc71c5
 800700c:	9997fa04 	.word	0x9997fa04
 8007010:	3fd99999 	.word	0x3fd99999
 8007014:	0006b851 	.word	0x0006b851

08007018 <_init>:
 8007018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800701a:	46c0      	nop			@ (mov r8, r8)
 800701c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800701e:	bc08      	pop	{r3}
 8007020:	469e      	mov	lr, r3
 8007022:	4770      	bx	lr

08007024 <_fini>:
 8007024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007026:	46c0      	nop			@ (mov r8, r8)
 8007028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800702a:	bc08      	pop	{r3}
 800702c:	469e      	mov	lr, r3
 800702e:	4770      	bx	lr
