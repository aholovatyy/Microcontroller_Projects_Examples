
AVRASM ver. 2.1.30  D:\LPNU\Дипломники\CodeVisionMicroclimate\microclimate_control_system\List\microclimate_control_system.asm Wed May 31 10:58:38 2017

D:\LPNU\Дипломники\CodeVisionMicroclimate\microclimate_control_system\List\microclimate_control_system.asm(1051): warning: Register r5 already defined by the .DEF directive
D:\LPNU\Дипломники\CodeVisionMicroclimate\microclimate_control_system\List\microclimate_control_system.asm(1052): warning: Register r4 already defined by the .DEF directive
D:\LPNU\Дипломники\CodeVisionMicroclimate\microclimate_control_system\List\microclimate_control_system.asm(1053): warning: Register r7 already defined by the .DEF directive
D:\LPNU\Дипломники\CodeVisionMicroclimate\microclimate_control_system\List\microclimate_control_system.asm(1054): warning: Register r6 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.04.4a Advanced
                 ;(C) Copyright 1998-2009 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega32
                 ;Program type             : Application
                 ;Clock frequency          : 8,000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : float, width, precision
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 512 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _PREV_BTN_PIN=R5
                 	.DEF __lcd_x=R4
                 	.DEF __lcd_y=R7
                 	.DEF __lcd_maxx=R6
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;INTERRUPT VECTORS
000000 940c 01ed 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x3:
00002a 0017
D:\LPNU\Дипломники\CodeVisionMicroclimate\microclimate_control_system\List\microclimate_control_system.asm(1083): warning: .cseg .db misalignment - padding zero byte
00002b 001b      	.DB  0x17,0x0,0x1B
                 _0x4:
00002c 0032
D:\LPNU\Дипломники\CodeVisionMicroclimate\microclimate_control_system\List\microclimate_control_system.asm(1085): warning: .cseg .db misalignment - padding zero byte
00002d 003c      	.DB  0x32,0x0,0x3C
                 _0x5:
00002e e300
00002f 00e3
000030 f5f5
000031 f100      	.DB  0x0,0xE3,0xE3,0x0,0xF5,0xF5,0x0,0xF1
000032 00f1
000033 5e5e
D:\LPNU\Дипломники\CodeVisionMicroclimate\microclimate_control_system\List\microclimate_control_system.asm(1088): warning: .cseg .db misalignment - padding zero byte
000034 0000      	.DB  0xF1,0x0,0x5E,0x5E,0x0
                 _0x2B:
000035 e4e4
000036 ec00
000037 00ec
000038 f0f0      	.DB  0xE4,0xE4,0x0,0xEC,0xEC,0x0,0xF0,0xF0
000039 5e00
00003a 005e      	.DB  0x0,0x5E,0x5E,0x0
                 _0x55:
00003b 0000
00003c 0063
00003d 000a
00003e 0064      	.DB  0x0,0x0,0x63,0x0,0xA,0x0,0x64,0x0
00003f 0000
000040 0064
000041 012c
000042 03e8      	.DB  0x0,0x0,0x64,0x0,0x2C,0x1,0xE8,0x3
000043 0100
000044 0e01
000045 0d0e
000046 3d3c      	.DB  0x0,0x1,0x1,0xE,0xE,0xD,0x3C,0x3D
000047 0000
000048 3d3c
000049 0000
00004a 4b4f      	.DB  0x0,0x0,0x3C,0x3D,0x0,0x0,0x4F,0x4B
00004b 0021      	.DB  0x21,0x0
                 _0x79:
00004c 026f
00004d 0273
00004e 6000
00004f 6302      	.DB  LOW(_0x78+15),HIGH(_0x78+15),LOW(_0x78+19),HIGH(_0x78+19),0x0,LOW(_0x78),HIGH(_0x78),LOW(_0x78+3)
000050 6602
000051 6902
000052 6c02
D:\LPNU\Дипломники\CodeVisionMicroclimate\microclimate_control_system\List\microclimate_control_system.asm(1100): warning: .cseg .db misalignment - padding zero byte
000053 0002      	.DB  HIGH(_0x78+3),LOW(_0x78+6),HIGH(_0x78+6),LOW(_0x78+9),HIGH(_0x78+9),LOW(_0x78+12),HIGH(_0x78+12)
                 _0xA8:
000054 2a2a
000055 4d20
000056 6961
000057 206e      	.DB  0x2A,0x2A,0x20,0x4D,0x61,0x69,0x6E,0x20
000058 654d
000059 756e
00005a 2a20
00005b 002a      	.DB  0x4D,0x65,0x6E,0x75,0x20,0x2A,0x2A,0x0
00005c 0006
00005d 0006
00005e 0004
00005f 0002      	.DB  0x6,0x0,0x6,0x0,0x4,0x0,0x2,0x0
000060 0004
000061 0002
000062 0000
000063 0006      	.DB  0x4,0x0,0x2,0x0,0x0,0x0,0x6,0x0
000064 0277
000065 027c
000066 0281
000067 028a      	.DB  LOW(_0xA7),HIGH(_0xA7),LOW(_0xA7+5),HIGH(_0xA7+5),LOW(_0xA7+10),HIGH(_0xA7+10),LOW(_0xA7+19),HIGH(_0xA7+19)
000068 0296
000069 029f
00006a 02ad
00006b 02bd      	.DB  LOW(_0xA7+31),HIGH(_0xA7+31),LOW(_0xA7+40),HIGH(_0xA7+40),LOW(_0xA7+54),HIGH(_0xA7+54),LOW(_0xA7+70),HIGH(_0xA7+70)
                 _0xC5:
00006c 02c2
00006d 02c6
00006e 02ca
00006f 02ce      	.DB  LOW(_0xC4),HIGH(_0xC4),LOW(_0xC4+4),HIGH(_0xC4+4),LOW(_0xC4+8),HIGH(_0xC4+8),LOW(_0xC4+12),HIGH(_0xC4+12)
000070 02d2
000071 02d6
000072 02da
000073 0000      	.DB  LOW(_0xC4+16),HIGH(_0xC4+16),LOW(_0xC4+20),HIGH(_0xC4+20),LOW(_0xC4+24),HIGH(_0xC4+24),0x0,0x0
000074 0000
000075 0000
000076 0000
000077 0001      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0
000078 0000
000079 0000
00007a 0000
00007b 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00007c 0000
00007d 0000
00007e 0000
D:\LPNU\Дипломники\CodeVisionMicroclimate\microclimate_control_system\List\microclimate_control_system.asm(1113): warning: .cseg .db misalignment - padding zero byte
00007f 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _0xD7:
D:\LPNU\Дипломники\CodeVisionMicroclimate\microclimate_control_system\List\microclimate_control_system.asm(1115): warning: .cseg .db misalignment - padding zero byte
000080 00ff      	.DB  0xFF
                 _0x0:
000081 7525
000082 7525
000083 253a
000084 2575      	.DB  0x25,0x75,0x25,0x75,0x3A,0x25,0x75,0x25
000085 3a75
000086 7525
000087 7525
000088 4f20      	.DB  0x75,0x3A,0x25,0x75,0x25,0x75,0x20,0x4F
000089 214b
00008a 2000
00008b 0020
00008c 7525      	.DB  0x4B,0x21,0x0,0x20,0x20,0x0,0x25,0x75
00008d 7525
00008e 252f
00008f 2575
000090 2f75      	.DB  0x25,0x75,0x2F,0x25,0x75,0x25,0x75,0x2F
000091 7525
000092 7525
000093 4f20
000094 214b      	.DB  0x25,0x75,0x25,0x75,0x20,0x4F,0x4B,0x21
000095 5400
000096 696d
000097 3a6e
000098 2520      	.DB  0x0,0x54,0x6D,0x69,0x6E,0x3A,0x20,0x25
000099 2575
00009a 4363
00009b 0a20
00009c 6d54      	.DB  0x75,0x25,0x63,0x43,0x20,0xA,0x54,0x6D
00009d 7861
00009e 203a
00009f 7525
0000a0 6325      	.DB  0x61,0x78,0x3A,0x20,0x25,0x75,0x25,0x63
0000a1 2043
0000a2 4800
0000a3 696d
0000a4 3a6e      	.DB  0x43,0x20,0x0,0x48,0x6D,0x69,0x6E,0x3A
0000a5 2520
0000a6 2575
0000a7 2025
0000a8 480a      	.DB  0x20,0x25,0x75,0x25,0x25,0x20,0xA,0x48
0000a9 616d
0000aa 3a78
0000ab 2520
0000ac 2575      	.DB  0x6D,0x61,0x78,0x3A,0x20,0x25,0x75,0x25
0000ad 2025
0000ae 5300
0000af 696d
0000b0 3a6e      	.DB  0x25,0x20,0x0,0x53,0x6D,0x69,0x6E,0x3A
0000b1 2520
0000b2 2575
0000b3 2025
0000b4 530a      	.DB  0x20,0x25,0x75,0x25,0x25,0x20,0xA,0x53
0000b5 616d
0000b6 3a78
0000b7 2520
0000b8 2575      	.DB  0x6D,0x61,0x78,0x3A,0x20,0x25,0x75,0x25
0000b9 2025
0000ba 4900
0000bb 696d
0000bc 3a6e      	.DB  0x25,0x20,0x0,0x49,0x6D,0x69,0x6E,0x3A
0000bd 2520
0000be 2075
0000bf 786c
0000c0 0a20      	.DB  0x20,0x25,0x75,0x20,0x6C,0x78,0x20,0xA
0000c1 6d49
0000c2 7861
0000c3 203a
0000c4 7525      	.DB  0x49,0x6D,0x61,0x78,0x3A,0x20,0x25,0x75
0000c5 6c20
0000c6 2078
0000c7 ef00
0000c8 00f0      	.DB  0x20,0x6C,0x78,0x20,0x0,0xEF,0xF0,0x0
0000c9 e3e3
0000ca f500
0000cb 00f5
0000cc 5e5e      	.DB  0xE3,0xE3,0x0,0xF5,0xF5,0x0,0x5E,0x5E
0000cd 4f00
0000ce 4646
0000cf 4f00
0000d0 204e      	.DB  0x0,0x4F,0x46,0x46,0x0,0x4F,0x4E,0x20
0000d1 2300
0000d2 7525
0000d3 2520
0000d4 2575      	.DB  0x0,0x23,0x25,0x75,0x20,0x25,0x75,0x25
0000d5 3a75
0000d6 7525
0000d7 7525
0000d8 2520      	.DB  0x75,0x3A,0x25,0x75,0x25,0x75,0x20,0x25
0000d9 2073
0000da 4b4f
0000db 0021
0000dc 4144      	.DB  0x73,0x20,0x4F,0x4B,0x21,0x0,0x44,0x41
0000dd 4554
0000de 5400
0000df 4d49
0000e0 0045      	.DB  0x54,0x45,0x0,0x54,0x49,0x4D,0x45,0x0
0000e1 4157
0000e2 4554
0000e3 4952
0000e4 474e      	.DB  0x57,0x41,0x54,0x45,0x52,0x49,0x4E,0x47
0000e5 5400
0000e6 4d45
0000e7 4550
0000e8 4152      	.DB  0x0,0x54,0x45,0x4D,0x50,0x45,0x52,0x41
0000e9 5554
0000ea 4552
0000eb 4800
0000ec 4d55      	.DB  0x54,0x55,0x52,0x45,0x0,0x48,0x55,0x4D
0000ed 4449
0000ee 5449
0000ef 0059
0000f0 4f53      	.DB  0x49,0x44,0x49,0x54,0x59,0x0,0x53,0x4F
0000f1 4c49
0000f2 4d20
0000f3 494f
0000f4 5453      	.DB  0x49,0x4C,0x20,0x4D,0x4F,0x49,0x53,0x54
0000f5 5255
0000f6 0045
0000f7 494c
0000f8 4847      	.DB  0x55,0x52,0x45,0x0,0x4C,0x49,0x47,0x48
0000f9 2054
0000fa 4e49
0000fb 4554
0000fc 534e      	.DB  0x54,0x20,0x49,0x4E,0x54,0x45,0x4E,0x53
0000fd 5449
0000fe 0059
0000ff 5845
000100 5449      	.DB  0x49,0x54,0x59,0x0,0x45,0x58,0x49,0x54
000101 5300
000102 6e75
000103 4d00
000104 6e6f      	.DB  0x0,0x53,0x75,0x6E,0x0,0x4D,0x6F,0x6E
000105 5400
000106 6575
000107 5700
000108 6465      	.DB  0x0,0x54,0x75,0x65,0x0,0x57,0x65,0x64
000109 5400
00010a 7268
00010b 4600
00010c 6972      	.DB  0x0,0x54,0x68,0x72,0x0,0x46,0x72,0x69
00010d 5300
00010e 7461
00010f d100
000110 d1c8      	.DB  0x0,0x53,0x61,0x74,0x0,0xD1,0xC8,0xD1
000111 c5d2
000112 c0cc
000113 d300
000114 d0cf      	.DB  0xD2,0xC5,0xCC,0xC0,0x0,0xD3,0xCF,0xD0
000115 c2c0
000116 49cb
000117 cdcd
000118 00df      	.DB  0xC0,0xC2,0xCB,0x49,0xCD,0xCD,0xDF,0x0
000119 49cc
00011a d0ca
00011b cace
00011c 49cb      	.DB  0xCC,0x49,0xCA,0xD0,0xCE,0xCA,0xCB,0x49
00011d c0cc
00011e ced2
00011f 00cc
000120 20c2      	.DB  0xCC,0xC0,0xD2,0xCE,0xCC,0x0,0xC2,0x20
000121 c5d2
000122 cbcf
000123 d6c8
000124 0049      	.DB  0xD2,0xC5,0xCF,0xCB,0xC8,0xD6,0x49,0x0
000125 6e41
000126 7264
000127 7969
000128 4820      	.DB  0x41,0x6E,0x64,0x72,0x69,0x79,0x20,0x48
000129 6c61
00012a 6b61
00012b 0068
00012c 4328      	.DB  0x61,0x6C,0x61,0x6B,0x68,0x0,0x28,0x43
00012d 2029
00012e 3032
00012f 3731
000130 2500      	.DB  0x29,0x20,0x32,0x30,0x31,0x37,0x0,0x25
000131 332b
000132 312e
000133 2566
000134 4363      	.DB  0x2B,0x33,0x2E,0x31,0x66,0x25,0x63,0x43
000135 2520
000136 2e33
000137 6631
000138 2525      	.DB  0x20,0x25,0x33,0x2E,0x31,0x66,0x25,0x25
000139 5220
00013a 2048
00013b 2500
00013c 642b      	.DB  0x20,0x52,0x48,0x20,0x0,0x25,0x2B,0x64
00013d 6325
00013e 2043
00013f 2500
000140 2575      	.DB  0x25,0x63,0x43,0x20,0x0,0x25,0x75,0x25
000141 3a75
000142 7525
000143 7525
000144 2520      	.DB  0x75,0x3A,0x25,0x75,0x25,0x75,0x20,0x25
000145 0073      	.DB  0x73,0x0
                 _0x40003:
000146 fec5
000147 c002      	.DB  0xC5,0xFE,0x2,0xC0
                 _0x40004:
000148 52bd
000149 3f16      	.DB  0xBD,0x52,0x16,0x3F
                 _0x40005:
00014a 253b
00014b b9d6      	.DB  0x3B,0x25,0xD6,0xB9
                 _0x40006:
00014c d70a
00014d 3c23      	.DB  0xA,0xD7,0x23,0x3C
                 _0x40007:
00014e c5ac
00014f 3aa7      	.DB  0xAC,0xC5,0xA7,0x3A
                 _0x2000000:
000150 4e2d
000151 4e41
D:\LPNU\Дипломники\CodeVisionMicroclimate\microclimate_control_system\List\microclimate_control_system.asm(1178): warning: .cseg .db misalignment - padding zero byte
000152 0000      	.DB  0x2D,0x4E,0x41,0x4E,0x0
                 _0x202005F:
D:\LPNU\Дипломники\CodeVisionMicroclimate\microclimate_control_system\List\microclimate_control_system.asm(1180): warning: .cseg .db misalignment - padding zero byte
000153 0001      	.DB  0x1
                 _0x2020000:
000154 4e2d
000155 4e41
D:\LPNU\Дипломники\CodeVisionMicroclimate\microclimate_control_system\List\microclimate_control_system.asm(1182): warning: .cseg .db misalignment - padding zero byte
000156 0000      	.DB  0x2D,0x4E,0x41,0x4E,0x0
                 _0x2040003:
000157 c080      	.DB  0x80,0xC0
                 _0x2040004:
000158 c1c0
000159 c3c2
00015a c5c4
00015b c6aa      	.DB  0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xAA,0xC6
00015c c8c7
00015d cac9
00015e cccb
00015f cecd      	.DB  0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE
000160 d0cf
000161 d2d1
000162 d4d3
000163 d6d5      	.DB  0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6
000164 d8d7
000165 dcd9
000166 dadb
000167 dedd      	.DB  0xD7,0xD8,0xD9,0xDC,0xDB,0xDA,0xDD,0xDE
000168 e0df
000169 e2e1
00016a e4e3
00016b e5e5      	.DB  0xDF,0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE5
00016c e7e6
00016d e9e8
00016e ebea
00016f edec      	.DB  0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED
000170 efee
000171 f1f0
000172 f3f2
000173 f5f4      	.DB  0xEE,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5
000174 f7f6
000175 f9f8
000176 fbfc
000177 fdfa      	.DB  0xF6,0xF7,0xF8,0xF9,0xFC,0xFB,0xFA,0xFD
000178 fffe      	.DB  0xFE,0xFF
                 _0x2040005:
000179 a041
00017a a142
00017b 45e0
00017c a3a2      	.DB  0x41,0xA0,0x42,0xA1,0xE0,0x45,0xA2,0xA3
00017d a5a4
00017e 4ba6
00017f 4da7
000180 4f48      	.DB  0xA4,0xA5,0xA6,0x4B,0xA7,0x4D,0x48,0x4F
000181 50a8
000182 5443
000183 aaa9
000184 e158      	.DB  0xA8,0x50,0x43,0x54,0xA9,0xAA,0x58,0xE1
000185 acab
000186 62e2
000187 adae
000188 b0af      	.DB  0xAB,0xAC,0xE2,0x62,0xAE,0xAD,0xAF,0xB0
000189 61b1
00018a b3b2
00018b e3b4
00018c b565      	.DB  0xB1,0x61,0xB2,0xB3,0xB4,0xE3,0x65,0xB5
00018d b7b6
00018e b9b8
00018f bbba
000190 bdbc      	.DB  0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD
000191 be6f
000192 6370
000193 c5bf
000194 c7c6      	.DB  0x6F,0xBE,0x70,0x63,0xBF,0xC5,0xC6,0xC7
                 
                 __GLOBAL_INI_TBL:
000195 0003      	.DW  0x03
000196 02de      	.DW  _temp
000197 0054      	.DW  _0x3*2
                 
000198 0003      	.DW  0x03
000199 02e2      	.DW  _hum
00019a 0058      	.DW  _0x4*2
                 
00019b 0003      	.DW  0x03
00019c 0260      	.DW  _0x78
00019d 018f      	.DW  _0x0*2+141
                 
00019e 0003      	.DW  0x03
00019f 0263      	.DW  _0x78+3
0001a0 0192      	.DW  _0x0*2+144
                 
0001a1 0003      	.DW  0x03
0001a2 0266      	.DW  _0x78+6
0001a3 0195      	.DW  _0x0*2+147
                 
0001a4 0003      	.DW  0x03
0001a5 0269      	.DW  _0x78+9
0001a6 0198      	.DW  _0x0*2+150
                 
0001a7 0003      	.DW  0x03
0001a8 026c      	.DW  _0x78+12
0001a9 0198      	.DW  _0x0*2+150
                 
0001aa 0004      	.DW  0x04
0001ab 026f      	.DW  _0x78+15
0001ac 019b      	.DW  _0x0*2+153
                 
0001ad 0004      	.DW  0x04
0001ae 0273      	.DW  _0x78+19
0001af 019f      	.DW  _0x0*2+157
                 
0001b0 0005      	.DW  0x05
0001b1 0277      	.DW  _0xA7
0001b2 01b8      	.DW  _0x0*2+182
                 
0001b3 0005      	.DW  0x05
0001b4 027c      	.DW  _0xA7+5
0001b5 01bd      	.DW  _0x0*2+187
                 
0001b6 0009      	.DW  0x09
0001b7 0281      	.DW  _0xA7+10
0001b8 01c2      	.DW  _0x0*2+192
                 
0001b9 000c      	.DW  0x0C
0001ba 028a      	.DW  _0xA7+19
0001bb 01cb      	.DW  _0x0*2+201
                 
0001bc 0009      	.DW  0x09
0001bd 0296      	.DW  _0xA7+31
0001be 01d7      	.DW  _0x0*2+213
                 
0001bf 000e      	.DW  0x0E
0001c0 029f      	.DW  _0xA7+40
0001c1 01e0      	.DW  _0x0*2+222
                 
0001c2 0010      	.DW  0x10
0001c3 02ad      	.DW  _0xA7+54
0001c4 01ee      	.DW  _0x0*2+236
                 
0001c5 0005      	.DW  0x05
0001c6 02bd      	.DW  _0xA7+70
0001c7 01fe      	.DW  _0x0*2+252
                 
0001c8 0004      	.DW  0x04
0001c9 02c2      	.DW  _0xC4
0001ca 0203      	.DW  _0x0*2+257
                 
0001cb 0004      	.DW  0x04
0001cc 02c6      	.DW  _0xC4+4
0001cd 0207      	.DW  _0x0*2+261
                 
0001ce 0004      	.DW  0x04
0001cf 02ca      	.DW  _0xC4+8
0001d0 020b      	.DW  _0x0*2+265
                 
0001d1 0004      	.DW  0x04
0001d2 02ce      	.DW  _0xC4+12
0001d3 020f      	.DW  _0x0*2+269
                 
0001d4 0004      	.DW  0x04
0001d5 02d2      	.DW  _0xC4+16
0001d6 0213      	.DW  _0x0*2+273
                 
0001d7 0004      	.DW  0x04
0001d8 02d6      	.DW  _0xC4+20
0001d9 0217      	.DW  _0x0*2+277
                 
0001da 0004      	.DW  0x04
0001db 02da      	.DW  _0xC4+24
0001dc 021b      	.DW  _0x0*2+281
                 
0001dd 0001      	.DW  0x01
0001de 0005      	.DW  0x05
0001df 0100      	.DW  _0xD7*2
                 
0001e0 0001      	.DW  0x01
0001e1 0330      	.DW  __seed_G101
0001e2 02a6      	.DW  _0x202005F*2
                 
0001e3 0002      	.DW  0x02
0001e4 0334      	.DW  __base_y_G102
0001e5 02ae      	.DW  _0x2040003*2
                 
0001e6 0042      	.DW  0x42
0001e7 0338      	.DW  _code_rus
0001e8 02b0      	.DW  _0x2040004*2
                 
0001e9 0038      	.DW  0x38
0001ea 037a      	.DW  _code_byte_lcd
0001eb 02f2      	.DW  _0x2040005*2
                 
                 _0xFFFFFFFF:
0001ec 0000      	.DW  0
                 
                 __RESET:
0001ed 94f8      	CLI
0001ee 27ee      	CLR  R30
0001ef bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0001f0 e0f1      	LDI  R31,1
0001f1 bffb      	OUT  GICR,R31
0001f2 bfeb      	OUT  GICR,R30
0001f3 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
0001f4 e1f8      	LDI  R31,0x18
0001f5 bdf1      	OUT  WDTCR,R31
0001f6 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
0001f7 e08d      	LDI  R24,(14-2)+1
0001f8 e0a2      	LDI  R26,2
0001f9 27bb      	CLR  R27
                 __CLEAR_REG:
0001fa 93ed      	ST   X+,R30
0001fb 958a      	DEC  R24
0001fc f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0001fd e080      	LDI  R24,LOW(0x800)
0001fe e098      	LDI  R25,HIGH(0x800)
0001ff e6a0      	LDI  R26,0x60
                 __CLEAR_SRAM:
000200 93ed      	ST   X+,R30
000201 9701      	SBIW R24,1
000202 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000203 e2ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000204 e0f3      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000205 9185      	LPM  R24,Z+
000206 9195      	LPM  R25,Z+
000207 9700      	SBIW R24,0
000208 f061      	BREQ __GLOBAL_INI_END
000209 91a5      	LPM  R26,Z+
00020a 91b5      	LPM  R27,Z+
00020b 9005      	LPM  R0,Z+
00020c 9015      	LPM  R1,Z+
00020d 01bf      	MOVW R22,R30
00020e 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00020f 9005      	LPM  R0,Z+
000210 920d      	ST   X+,R0
000211 9701      	SBIW R24,1
000212 f7e1      	BRNE __GLOBAL_INI_LOOP
000213 01fb      	MOVW R30,R22
000214 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;STACK POINTER INITIALIZATION
000215 e5ef      	LDI  R30,LOW(0x85F)
000216 bfed      	OUT  SPL,R30
000217 e0e8      	LDI  R30,HIGH(0x85F)
000218 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000219 e6c0      	LDI  R28,LOW(0x260)
00021a e0d2      	LDI  R29,HIGH(0x260)
                 
00021b 940c 05f8 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;/*****************************************************
                 ;This program was produced by the
                 ;CodeWizardAVR V2.04.4a Advanced
                 ;Automatic Program Generator
                 ;© Copyright 1998-2009 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project : Автматизована система моніторингу та управління мікрокліматом
                 ;		  в тепличних господарствах на мікроконтролері AVR ATmega32
                 ;Version : Дипломна робота
                 ;Date    : 2017
                 ;Author  : (C) студент Галах Андрій
                 ;
                 ;Chip type               : ATmega32
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 8,000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 512
                 ;*****************************************************/
                 ;
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;#include <delay.h>
                 ;#include <lcd.h> // функції LCD
                 ;#include <i2c.h>           // інтерфейс i2c - Bus functions
                 ;#include <ds1307.h>       // DS1307 Real Time Clock functions
                 ;#include "therm_ds18b20.h"
                 ;#include "shtxx.h"
                 ;
                 ;#asm
                     .equ __lcd_port=0x12 // порт піключення LCD, PORTD
                 ; 0000 0022 #endasm
                 ;
                 ;#asm
                    .equ __i2c_port=0x15 ;PORTC   // DS1317 на порті С
                    .equ __sda_bit=1              // SDA - на pin.1
                    .equ __scl_bit=0              // SCL - на pin.0
                 ; 0000 0028 #endasm
                 ;
                 ;#pragma rl+
                 ;
                 ;//buttons MENU/ENTER, SELECT+, SELECT-
                 ;#define BTN_PORT PORTB
                 ;#define BTN_PIN PINB
                 ;#define BTN_DDR DDRB
                 ;#define MENU_ENTER_BTN 0
                 ;#define SELECT_PLUS_BTN 1
                 ;#define SELECT_MINUS_BTN 2
                 ;#define EXIT_BTN 3
                 ;
                 ;//air-conditioner
                 ;#define REL1_PORT PORTC
                 ;#define REL1_DDR DDRC
                 ;#define REL1 5
                 ;
                 ;//water pump
                 ;#define REL2_PORT PORTC
                 ;#define REL2_DDR DDRC
                 ;#define REL2 6
                 ;
                 ;//artificial light source
                 ;#define REL3_PORT PORTC
                 ;#define REL3_DDR DDRC
                 ;#define REL3 7
                 ;
                 ;#define WATERING_TIME_NUMBER 8
                 ;
                 ;typedef struct {
                 ;   unsigned int min, max;
                 ;} values_range;
                 ;
                 ;typedef struct {
                 ;  unsigned char hour, min, mode_on_off;
                 ;} watering_time;
                 ;
                 ;values_range temp = {23, 27}, hum = {50, 60}, soil = {0, 0}, light = {0, 0};
                 
                 	.DSEG
                 ;watering_time w_time[WATERING_TIME_NUMBER] = {{0,0,0}, {0,0,0}, {0,0,0}, {0,0,0},
                 ;            {0,0,0}, {0,0,0}, {0,0,0}, {0,0,0}};
                 ;unsigned char PREV_BTN_PIN = 0xff;
                 ;char lcd_buffer[33];
                 ;
                 ;unsigned char get_key_status(unsigned char BTN_ID)
                 ; 0000 0055 {
                 
                 	.CSEG
                 _get_key_status:
                 ; 0000 0056     return (!(BTN_PIN&(1<<BTN_ID)));
                 ;	BTN_ID -> Y+0
00021d b216      	IN   R1,22
00021e 81e8      	LD   R30,Y
00021f e0a1      	LDI  R26,LOW(1)
000220 940e 15fe 	CALL __LSLB12
000222 21e1      	AND  R30,R1
000223 c005      	RJMP _0x2100017
                 ; 0000 0057 }
                 ;
                 ;unsigned char get_prev_key_status(unsigned char BTN_ID)
                 ; 0000 005A {
                 _get_prev_key_status:
                 ; 0000 005B     return (!(PREV_BTN_PIN&(1<<BTN_ID)));
                 ;	BTN_ID -> Y+0
000224 81e8      	LD   R30,Y
000225 e0a1      	LDI  R26,LOW(1)
000226 940e 15fe 	CALL __LSLB12
000228 21e5      	AND  R30,R5
                 _0x2100017:
000229 940e 162d 	CALL __LNEGB1
00022b 9621      	ADIW R28,1
00022c 9508      	RET
                 ; 0000 005C }
                 ;
                 ;void set_time()
                 ; 0000 005F {
                 _set_time:
                 ; 0000 0060     unsigned char i = 0, x = 3, ok = 0;
                 ; 0000 0061     //char *str[] = {"hh","mm","ss","^^"};
                 ; 0000 0062     char str[4][3] = {"гг","хх","сс","^^"};
                 ; 0000 0063     unsigned char hour = 0, min = 0, sec = 0, wd = 0;
                 ; 0000 0064     rtc_get_time(&hour,&min,&sec);//,&wd);
00022d 972d      	SBIW R28,13
00022e e08d      	LDI  R24,13
00022f e0a0      	LDI  R26,LOW(0)
000230 e0b0      	LDI  R27,HIGH(0)
000231 e5ec      	LDI  R30,LOW(_0x5*2)
000232 e0f0      	LDI  R31,HIGH(_0x5*2)
000233 940e 1711 	CALL __INITLOCB
000235 940e 1703 	CALL __SAVELOCR6
                 ;	i -> R17
                 ;	x -> R16
                 ;	ok -> R19
                 ;	str -> Y+7
                 ;	hour -> R18
                 ;	min -> R21
                 ;	sec -> R20
                 ;	wd -> Y+6
000237 e010      	LDI  R17,0
000238 e003      	LDI  R16,3
000239 e030      	LDI  R19,0
00023a e020      	LDI  R18,0
00023b e050      	LDI  R21,0
00023c e040      	LDI  R20,0
00023d b7ed      	IN   R30,SPL
00023e b7fe      	IN   R31,SPH
00023f 93fa      	ST   -Y,R31
000240 93ea      	ST   -Y,R30
000241 932f      	PUSH R18
000242 b7ed      	IN   R30,SPL
000243 b7fe      	IN   R31,SPH
000244 93fa      	ST   -Y,R31
000245 93ea      	ST   -Y,R30
000246 935f      	PUSH R21
000247 b7ed      	IN   R30,SPL
000248 b7fe      	IN   R31,SPH
000249 93fa      	ST   -Y,R31
00024a 93ea      	ST   -Y,R30
00024b 934f      	PUSH R20
00024c 940e 0fb2 	CALL _rtc_get_time
00024e 914f      	POP  R20
00024f 915f      	POP  R21
000250 912f      	POP  R18
                 ; 0000 0065     while(!ok)
                 _0x6:
000251 3030      	CPI  R19,0
000252 f011      	BREQ PC+3
000253 940c 02ce 	JMP _0x8
                 ; 0000 0066     {
                 ; 0000 0067         PREV_BTN_PIN = BTN_PIN;
000255 940e 110c 	CALL SUBOPT_0x0
                 ; 0000 0068         sprintf(lcd_buffer,"%u%u:%u%u:%u%u OK!", hour/10,hour%10, min/10,min%10, sec/10,sec%10);
                +
000257 e0e2     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
000258 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
000259 940e 1112 	CALL SUBOPT_0x1
                 ; 0000 0069         lcd_gotoxy(3,0);
                 ; 0000 006A         lcd_puts(lcd_buffer);
                 ; 0000 006B         lcd_gotoxy(x,1);
00025b 930a      	ST   -Y,R16
00025c 940e 1160 	CALL SUBOPT_0x2
                 ; 0000 006C         lcd_puts(str[i]);
00025e e0a3      	LDI  R26,LOW(3)
00025f 9f1a      	MUL  R17,R26
000260 01f0      	MOVW R30,R0
000261 01de      	MOVW R26,R28
000262 9617      	ADIW R26,7
000263 940e 1164 	CALL SUBOPT_0x3
                 ; 0000 006D         if(get_key_status(SELECT_PLUS_BTN))
000265 f121      	BREQ _0x9
                 ; 0000 006E         {
                 ; 0000 006F             //if (!get_prev_key_status(SELECT_PLUS_BTN))
                 ; 0000 0070             //{
                 ; 0000 0071             switch(i)
000266 940e 1170 	CALL SUBOPT_0x4
                 ; 0000 0072             {
                 ; 0000 0073                 case 0:
000268 f431      	BRNE _0xD
                 ; 0000 0074                   if (hour == 23) hour = 0;
000269 3127      	CPI  R18,23
00026a f411      	BRNE _0xE
00026b e020      	LDI  R18,LOW(0)
                 ; 0000 0075                   else hour++;
00026c c001      	RJMP _0xF
                 _0xE:
00026d 5f2f      	SUBI R18,-1
                 ; 0000 0076                 break;
                 _0xF:
00026e c019      	RJMP _0xC
                 ; 0000 0077                 case 1:
                 _0xD:
00026f 30e1      	CPI  R30,LOW(0x1)
000270 e0a0      	LDI  R26,HIGH(0x1)
000271 07fa      	CPC  R31,R26
000272 f431      	BRNE _0x10
                 ; 0000 0078                   if (min == 59) min = 0;
000273 335b      	CPI  R21,59
000274 f411      	BRNE _0x11
000275 e050      	LDI  R21,LOW(0)
                 ; 0000 0079                   else min++;
000276 c001      	RJMP _0x12
                 _0x11:
000277 5f5f      	SUBI R21,-1
                 ; 0000 007A                 break;
                 _0x12:
000278 c00f      	RJMP _0xC
                 ; 0000 007B                 case 2:
                 _0x10:
000279 30e2      	CPI  R30,LOW(0x2)
00027a e0a0      	LDI  R26,HIGH(0x2)
00027b 07fa      	CPC  R31,R26
00027c f431      	BRNE _0x13
                 ; 0000 007C                   if (sec == 59) sec = 0;
00027d 334b      	CPI  R20,59
00027e f411      	BRNE _0x14
00027f e040      	LDI  R20,LOW(0)
                 ; 0000 007D                   else sec++;
000280 c001      	RJMP _0x15
                 _0x14:
000281 5f4f      	SUBI R20,-1
                 ; 0000 007E                 break;
                 _0x15:
000282 c005      	RJMP _0xC
                 ; 0000 007F                 case 3:
                 _0x13:
000283 30e3      	CPI  R30,LOW(0x3)
000284 e0a0      	LDI  R26,HIGH(0x3)
000285 07fa      	CPC  R31,R26
000286 f409      	BRNE _0xC
                 ; 0000 0080                   ok = 1;
000287 e031      	LDI  R19,LOW(1)
                 ; 0000 0081                 break;
                 ; 0000 0082             }
                 _0xC:
                 ; 0000 0083             //}
                 ; 0000 0084             delay_ms(300);
000288 940e 1174 	CALL SUBOPT_0x5
                 ; 0000 0085         }
                 ; 0000 0086         if (get_key_status(SELECT_MINUS_BTN))
                 _0x9:
00028a 940e 117a 	CALL SUBOPT_0x6
00028c f121      	BREQ _0x17
                 ; 0000 0087         {
                 ; 0000 0088             //if (!get_prev_key_status(SELECT_MINUS_BTN))
                 ; 0000 0089             //{
                 ; 0000 008A             switch (i)
00028d 940e 1170 	CALL SUBOPT_0x4
                 ; 0000 008B             {
                 ; 0000 008C                 case 0:
00028f f431      	BRNE _0x1B
                 ; 0000 008D                   if (hour == 0) hour = 23;
000290 3020      	CPI  R18,0
000291 f411      	BRNE _0x1C
000292 e127      	LDI  R18,LOW(23)
                 ; 0000 008E                   else hour--;
000293 c001      	RJMP _0x1D
                 _0x1C:
000294 5021      	SUBI R18,1
                 ; 0000 008F                 break;
                 _0x1D:
000295 c019      	RJMP _0x1A
                 ; 0000 0090                 case 1:
                 _0x1B:
000296 30e1      	CPI  R30,LOW(0x1)
000297 e0a0      	LDI  R26,HIGH(0x1)
000298 07fa      	CPC  R31,R26
000299 f431      	BRNE _0x1E
                 ; 0000 0091                   if (min == 0) min = 59;
00029a 3050      	CPI  R21,0
00029b f411      	BRNE _0x1F
00029c e35b      	LDI  R21,LOW(59)
                 ; 0000 0092                   else min--;
00029d c001      	RJMP _0x20
                 _0x1F:
00029e 5051      	SUBI R21,1
                 ; 0000 0093                 break;
                 _0x20:
00029f c00f      	RJMP _0x1A
                 ; 0000 0094                 case 2:
                 _0x1E:
0002a0 30e2      	CPI  R30,LOW(0x2)
0002a1 e0a0      	LDI  R26,HIGH(0x2)
0002a2 07fa      	CPC  R31,R26
0002a3 f431      	BRNE _0x21
                 ; 0000 0095                   if (sec == 0) sec = 59;
0002a4 3040      	CPI  R20,0
0002a5 f411      	BRNE _0x22
0002a6 e34b      	LDI  R20,LOW(59)
                 ; 0000 0096                   else sec--;
0002a7 c001      	RJMP _0x23
                 _0x22:
0002a8 5041      	SUBI R20,1
                 ; 0000 0097                 break;
                 _0x23:
0002a9 c005      	RJMP _0x1A
                 ; 0000 0098                 case 3:
                 _0x21:
0002aa 30e3      	CPI  R30,LOW(0x3)
0002ab e0a0      	LDI  R26,HIGH(0x3)
0002ac 07fa      	CPC  R31,R26
0002ad f409      	BRNE _0x1A
                 ; 0000 0099                   ok = 1;
0002ae e031      	LDI  R19,LOW(1)
                 ; 0000 009A                 break;
                 ; 0000 009B             }
                 _0x1A:
                 ; 0000 009C             // }
                 ; 0000 009D            delay_ms(300);
0002af 940e 1174 	CALL SUBOPT_0x5
                 ; 0000 009E         }
                 ; 0000 009F         if(get_key_status(MENU_ENTER_BTN))
                 _0x17:
0002b1 940e 1180 	CALL SUBOPT_0x7
0002b3 f079      	BREQ _0x25
                 ; 0000 00A0         {
                 ; 0000 00A1             if(!get_prev_key_status(MENU_ENTER_BTN))
0002b4 940e 1186 	CALL SUBOPT_0x8
0002b6 f461      	BRNE _0x26
                 ; 0000 00A2             {
                 ; 0000 00A3                 lcd_gotoxy(x,1);
0002b7 930a      	ST   -Y,R16
0002b8 940e 1160 	CALL SUBOPT_0x2
                 ; 0000 00A4                 lcd_putsf("  ");
0002ba 940e 118c 	CALL SUBOPT_0x9
                 ; 0000 00A5                 if (i == 3)
0002bc 3013      	CPI  R17,3
0002bd f419      	BRNE _0x27
                 ; 0000 00A6                 {
                 ; 0000 00A7                     i = 0;
0002be e010      	LDI  R17,LOW(0)
                 ; 0000 00A8                     x = 3;
0002bf e003      	LDI  R16,LOW(3)
                 ; 0000 00A9                 }
                 ; 0000 00AA                 else
0002c0 c002      	RJMP _0x28
                 _0x27:
                 ; 0000 00AB                 {
                 ; 0000 00AC                   x += 3;
0002c1 5f0d      	SUBI R16,-LOW(3)
                 ; 0000 00AD                   i++;
0002c2 5f1f      	SUBI R17,-1
                 ; 0000 00AE                 }
                 _0x28:
                 ; 0000 00AF            }
                 ; 0000 00B0        }
                 _0x26:
                 ; 0000 00B1        if(get_key_status(EXIT_BTN))
                 _0x25:
0002c3 940e 1192 	CALL SUBOPT_0xA
0002c5 f039      	BREQ _0x29
                 ; 0000 00B2          if(!get_prev_key_status(EXIT_BTN))
0002c6 940e 1198 	CALL SUBOPT_0xB
0002c8 f421      	BRNE _0x2A
                 ; 0000 00B3          {
                 ; 0000 00B4             delay_ms(300);
0002c9 940e 1174 	CALL SUBOPT_0x5
                 ; 0000 00B5             PREV_BTN_PIN = BTN_PIN;
0002cb b256      	IN   R5,22
                 ; 0000 00B6             return;
0002cc c006      	RJMP _0x2100016
                 ; 0000 00B7          }
                 ; 0000 00B8     }
                 _0x2A:
                 _0x29:
0002cd cf83      	RJMP _0x6
                 _0x8:
                 ; 0000 00B9   rtc_set_time(hour, min, sec);//, wd);
0002ce 932a      	ST   -Y,R18
0002cf 935a      	ST   -Y,R21
0002d0 934a      	ST   -Y,R20
0002d1 940e 0fbe 	CALL _rtc_set_time
                 ; 0000 00BA }
                 _0x2100016:
0002d3 940e 170a 	CALL __LOADLOCR6
0002d5 9663      	ADIW R28,19
0002d6 9508      	RET
                 ;
                 ;void set_date(void)
                 ; 0000 00BD {
                 _set_date:
                 ; 0000 00BE     unsigned char ok = 0;
                 ; 0000 00BF     //char str[4][3]={"dd", "mm", "yy", "^^"};
                 ; 0000 00C0     char str[4][3]={"дд", "мм", "рр", "^^"};
                 ; 0000 00C1     unsigned char i = 0, x = 3;
                 ; 0000 00C2     unsigned char date, month, year;
                 ; 0000 00C3     rtc_get_date(&date,&month,&year);
0002d7 972c      	SBIW R28,12
0002d8 e08c      	LDI  R24,12
0002d9 e0a0      	LDI  R26,LOW(0)
0002da e0b0      	LDI  R27,HIGH(0)
0002db e6ea      	LDI  R30,LOW(_0x2B*2)
0002dc e0f0      	LDI  R31,HIGH(_0x2B*2)
0002dd 940e 1711 	CALL __INITLOCB
0002df 940e 1703 	CALL __SAVELOCR6
                 ;	ok -> R17
                 ;	str -> Y+6
                 ;	i -> R16
                 ;	x -> R19
                 ;	date -> R18
                 ;	month -> R21
                 ;	year -> R20
0002e1 e010      	LDI  R17,0
0002e2 e000      	LDI  R16,0
0002e3 e033      	LDI  R19,3
0002e4 b7ed      	IN   R30,SPL
0002e5 b7fe      	IN   R31,SPH
0002e6 93fa      	ST   -Y,R31
0002e7 93ea      	ST   -Y,R30
0002e8 932f      	PUSH R18
0002e9 b7ed      	IN   R30,SPL
0002ea b7fe      	IN   R31,SPH
0002eb 93fa      	ST   -Y,R31
0002ec 93ea      	ST   -Y,R30
0002ed 935f      	PUSH R21
0002ee b7ed      	IN   R30,SPL
0002ef b7fe      	IN   R31,SPH
0002f0 93fa      	ST   -Y,R31
0002f1 93ea      	ST   -Y,R30
0002f2 934f      	PUSH R20
0002f3 940e 0fca 	CALL _rtc_get_date
0002f5 914f      	POP  R20
0002f6 915f      	POP  R21
0002f7 912f      	POP  R18
                 ; 0000 00C4     lcd_clear();
0002f8 940e 0edf 	CALL _lcd_clear
                 ; 0000 00C5     while(!ok)
                 _0x2C:
0002fa 3010      	CPI  R17,0
0002fb f011      	BREQ PC+3
0002fc 940c 0383 	JMP _0x2E
                 ; 0000 00C6     {
                 ; 0000 00C7         PREV_BTN_PIN = BTN_PIN;
0002fe 940e 110c 	CALL SUBOPT_0x0
                 ; 0000 00C8         sprintf(lcd_buffer, "%u%u/%u%u/%u%u OK!", date/10,date%10, month/10,month%10, year/10,year%10);
                +
000300 e1e8     +LDI R30 , LOW ( 2 * _0x0 + ( 22 ) )
000301 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 22 ) )
                 	__POINTW1FN _0x0,22
000302 940e 1112 	CALL SUBOPT_0x1
                 ; 0000 00C9         lcd_gotoxy(3, 0);
                 ; 0000 00CA         lcd_puts(lcd_buffer);
                 ; 0000 00CB         lcd_gotoxy(x, 1);
000304 933a      	ST   -Y,R19
000305 940e 1160 	CALL SUBOPT_0x2
                 ; 0000 00CC         lcd_puts(str[i]);
000307 e0a3      	LDI  R26,LOW(3)
000308 9f0a      	MUL  R16,R26
000309 01f0      	MOVW R30,R0
00030a 01de      	MOVW R26,R28
00030b 9616      	ADIW R26,6
00030c 940e 1164 	CALL SUBOPT_0x3
                 ; 0000 00CD         if (get_key_status(SELECT_PLUS_BTN))
00030e f151      	BREQ _0x2F
                 ; 0000 00CE         {
                 ; 0000 00CF            if (get_key_status(SELECT_PLUS_BTN))
00030f 940e 119e 	CALL SUBOPT_0xC
000311 f139      	BREQ _0x30
                 ; 0000 00D0               if (!get_prev_key_status(SELECT_PLUS_BTN))
000312 e0e1      	LDI  R30,LOW(1)
000313 940e 11a4 	CALL SUBOPT_0xD
000315 f519      	BRNE _0x31
                 ; 0000 00D1               {
                 ; 0000 00D2                  switch (i)
000316 2fe0      	MOV  R30,R16
000317 940e 11a9 	CALL SUBOPT_0xE
                 ; 0000 00D3                  {
                 ; 0000 00D4                     case 0:
000319 f431      	BRNE _0x35
                 ; 0000 00D5                       if (date == 31) date = 0;
00031a 312f      	CPI  R18,31
00031b f411      	BRNE _0x36
00031c e020      	LDI  R18,LOW(0)
                 ; 0000 00D6                       else date++;
00031d c001      	RJMP _0x37
                 _0x36:
00031e 5f2f      	SUBI R18,-1
                 ; 0000 00D7                     break;
                 _0x37:
00031f c019      	RJMP _0x34
                 ; 0000 00D8                     case 1:
                 _0x35:
000320 30e1      	CPI  R30,LOW(0x1)
000321 e0a0      	LDI  R26,HIGH(0x1)
000322 07fa      	CPC  R31,R26
000323 f431      	BRNE _0x38
                 ; 0000 00D9                       if (month == 12) month = 0;
000324 305c      	CPI  R21,12
000325 f411      	BRNE _0x39
000326 e050      	LDI  R21,LOW(0)
                 ; 0000 00DA                       else month++;
000327 c001      	RJMP _0x3A
                 _0x39:
000328 5f5f      	SUBI R21,-1
                 ; 0000 00DB                     break;
                 _0x3A:
000329 c00f      	RJMP _0x34
                 ; 0000 00DC                     case 2:
                 _0x38:
00032a 30e2      	CPI  R30,LOW(0x2)
00032b e0a0      	LDI  R26,HIGH(0x2)
00032c 07fa      	CPC  R31,R26
00032d f431      	BRNE _0x3B
                 ; 0000 00DD                        if (year == 99) year = 0;
00032e 3643      	CPI  R20,99
00032f f411      	BRNE _0x3C
000330 e040      	LDI  R20,LOW(0)
                 ; 0000 00DE                        else year++;
000331 c001      	RJMP _0x3D
                 _0x3C:
000332 5f4f      	SUBI R20,-1
                 ; 0000 00DF                     break;
                 _0x3D:
000333 c005      	RJMP _0x34
                 ; 0000 00E0                     case 3:
                 _0x3B:
000334 30e3      	CPI  R30,LOW(0x3)
000335 e0a0      	LDI  R26,HIGH(0x3)
000336 07fa      	CPC  R31,R26
000337 f409      	BRNE _0x34
                 ; 0000 00E1                       ok = 1;
000338 e011      	LDI  R17,LOW(1)
                 ; 0000 00E2                     break;
                 ; 0000 00E3                   }
                 _0x34:
                 ; 0000 00E4                }
                 ; 0000 00E5         }
                 _0x31:
                 _0x30:
                 ; 0000 00E6         if (get_key_status(SELECT_MINUS_BTN))
                 _0x2F:
000339 940e 117a 	CALL SUBOPT_0x6
00033b f151      	BREQ _0x3F
                 ; 0000 00E7         {
                 ; 0000 00E8             if (get_key_status(SELECT_MINUS_BTN))
00033c 940e 117a 	CALL SUBOPT_0x6
00033e f139      	BREQ _0x40
                 ; 0000 00E9               if (!get_prev_key_status(SELECT_MINUS_BTN))
00033f e0e2      	LDI  R30,LOW(2)
000340 940e 11a4 	CALL SUBOPT_0xD
000342 f519      	BRNE _0x41
                 ; 0000 00EA               {
                 ; 0000 00EB                 switch (i)
000343 2fe0      	MOV  R30,R16
000344 940e 11a9 	CALL SUBOPT_0xE
                 ; 0000 00EC                 {
                 ; 0000 00ED                     case 0:
000346 f431      	BRNE _0x45
                 ; 0000 00EE                       if (date == 0) date = 31;
000347 3020      	CPI  R18,0
000348 f411      	BRNE _0x46
000349 e12f      	LDI  R18,LOW(31)
                 ; 0000 00EF                       else date--;
00034a c001      	RJMP _0x47
                 _0x46:
00034b 5021      	SUBI R18,1
                 ; 0000 00F0                     break;
                 _0x47:
00034c c019      	RJMP _0x44
                 ; 0000 00F1                     case 1:
                 _0x45:
00034d 30e1      	CPI  R30,LOW(0x1)
00034e e0a0      	LDI  R26,HIGH(0x1)
00034f 07fa      	CPC  R31,R26
000350 f431      	BRNE _0x48
                 ; 0000 00F2                        if (month == 0) month = 12;
000351 3050      	CPI  R21,0
000352 f411      	BRNE _0x49
000353 e05c      	LDI  R21,LOW(12)
                 ; 0000 00F3                        else month--;
000354 c001      	RJMP _0x4A
                 _0x49:
000355 5051      	SUBI R21,1
                 ; 0000 00F4                     break;
                 _0x4A:
000356 c00f      	RJMP _0x44
                 ; 0000 00F5                     case 2:
                 _0x48:
000357 30e2      	CPI  R30,LOW(0x2)
000358 e0a0      	LDI  R26,HIGH(0x2)
000359 07fa      	CPC  R31,R26
00035a f431      	BRNE _0x4B
                 ; 0000 00F6                        if (year == 0) year = 99;
00035b 3040      	CPI  R20,0
00035c f411      	BRNE _0x4C
00035d e643      	LDI  R20,LOW(99)
                 ; 0000 00F7                        else year--;
00035e c001      	RJMP _0x4D
                 _0x4C:
00035f 5041      	SUBI R20,1
                 ; 0000 00F8                     break;
                 _0x4D:
000360 c005      	RJMP _0x44
                 ; 0000 00F9                     case 3:
                 _0x4B:
000361 30e3      	CPI  R30,LOW(0x3)
000362 e0a0      	LDI  R26,HIGH(0x3)
000363 07fa      	CPC  R31,R26
000364 f409      	BRNE _0x44
                 ; 0000 00FA                       ok = 1;
000365 e011      	LDI  R17,LOW(1)
                 ; 0000 00FB                     break;
                 ; 0000 00FC                 }
                 _0x44:
                 ; 0000 00FD             }
                 ; 0000 00FE         }
                 _0x41:
                 _0x40:
                 ; 0000 00FF         if (get_key_status(MENU_ENTER_BTN))
                 _0x3F:
000366 940e 1180 	CALL SUBOPT_0x7
000368 f079      	BREQ _0x4F
                 ; 0000 0100         {
                 ; 0000 0101             if (!get_prev_key_status(MENU_ENTER_BTN))
000369 940e 1186 	CALL SUBOPT_0x8
00036b f461      	BRNE _0x50
                 ; 0000 0102             {
                 ; 0000 0103                 lcd_gotoxy(x, 1);
00036c 933a      	ST   -Y,R19
00036d 940e 1160 	CALL SUBOPT_0x2
                 ; 0000 0104                 lcd_putsf("  ");
00036f 940e 118c 	CALL SUBOPT_0x9
                 ; 0000 0105                 if (i == 3)
000371 3003      	CPI  R16,3
000372 f419      	BRNE _0x51
                 ; 0000 0106                 {
                 ; 0000 0107                     i = 0;
000373 e000      	LDI  R16,LOW(0)
                 ; 0000 0108                     x = 3;
000374 e033      	LDI  R19,LOW(3)
                 ; 0000 0109                 }
                 ; 0000 010A                 else
000375 c002      	RJMP _0x52
                 _0x51:
                 ; 0000 010B                 {
                 ; 0000 010C                     i++;
000376 5f0f      	SUBI R16,-1
                 ; 0000 010D                     x += 3;
000377 5f3d      	SUBI R19,-LOW(3)
                 ; 0000 010E                 }
                 _0x52:
                 ; 0000 010F             }
                 ; 0000 0110        }
                 _0x50:
                 ; 0000 0111        if (get_key_status(EXIT_BTN))
                 _0x4F:
000378 940e 1192 	CALL SUBOPT_0xA
00037a f039      	BREQ _0x53
                 ; 0000 0112          if (!get_prev_key_status(EXIT_BTN))
00037b 940e 1198 	CALL SUBOPT_0xB
00037d f421      	BRNE _0x54
                 ; 0000 0113             {
                 ; 0000 0114                delay_ms(300);
00037e 940e 1174 	CALL SUBOPT_0x5
                 ; 0000 0115                PREV_BTN_PIN = BTN_PIN;
000380 b256      	IN   R5,22
                 ; 0000 0116                return;
000381 c006      	RJMP _0x2100015
                 ; 0000 0117             }
                 ; 0000 0118  }
                 _0x54:
                 _0x53:
000382 cf77      	RJMP _0x2C
                 _0x2E:
                 ; 0000 0119  rtc_set_date(date, month, year);
000383 932a      	ST   -Y,R18
000384 935a      	ST   -Y,R21
000385 934a      	ST   -Y,R20
000386 940e 0fda 	CALL _rtc_set_date
                 ; 0000 011A }
                 _0x2100015:
000388 940e 170a 	CALL __LOADLOCR6
00038a 9662      	ADIW R28,18
00038b 9508      	RET
                 ;
                 ;void set_values(unsigned char j, values_range *p)
                 ; 0000 011D {
                 _set_values:
                 ; 0000 011E     char str[3][4]={"<=","<=","OK!"};
                 ; 0000 011F     unsigned char i = 0, xpos[] = {14, 14, 13}, ypos[] = {0,1,1};
                 ; 0000 0120     unsigned char ok = 0;
                 ; 0000 0121     values_range v[4] = {{0,99},{10,100},{0,100},{300,1000}};
                 ; 0000 0122     values_range tmp;
                 ; 0000 0123     tmp = *p;
00038c 97a6      	SBIW R28,38
00038d e282      	LDI  R24,34
00038e e0a4      	LDI  R26,LOW(4)
00038f e0b0      	LDI  R27,HIGH(4)
000390 e7e6      	LDI  R30,LOW(_0x55*2)
000391 e0f0      	LDI  R31,HIGH(_0x55*2)
000392 940e 1711 	CALL __INITLOCB
000394 931a      	ST   -Y,R17
000395 930a      	ST   -Y,R16
                 ;	j -> Y+42
                 ;	*p -> Y+40
                 ;	str -> Y+28
                 ;	i -> R17
                 ;	xpos -> Y+25
                 ;	ypos -> Y+22
                 ;	ok -> R16
                 ;	v -> Y+6
                 ;	tmp -> Y+2
000396 e010      	LDI  R17,0
000397 e000      	LDI  R16,0
000398 a5e8      	LDD  R30,Y+40
000399 a5f9      	LDD  R31,Y+40+1
00039a 01de      	MOVW R26,R28
00039b 9612      	ADIW R26,2
00039c e084      	LDI  R24,4
00039d 940e 16ef 	CALL __COPYMML
                 ; 0000 0124 
                 ; 0000 0125     lcd_clear();
00039f 940e 0edf 	CALL _lcd_clear
                 ; 0000 0126 
                 ; 0000 0127     while(!ok)
                 _0x56:
0003a1 3000      	CPI  R16,0
0003a2 f011      	BREQ PC+3
0003a3 940c 046e 	JMP _0x58
                 ; 0000 0128     {
                 ; 0000 0129         PREV_BTN_PIN = BTN_PIN;
0003a5 b256      	IN   R5,22
                 ; 0000 012A         switch (j)
0003a6 a5ea      	LDD  R30,Y+42
0003a7 940e 11a9 	CALL SUBOPT_0xE
                 ; 0000 012B         {
                 ; 0000 012C             case 0:
0003a9 f4a9      	BRNE _0x5C
                 ; 0000 012D               sprintf(lcd_buffer,"Tmin: %u%cC \nTmax: %u%cC ", tmp.min, 0xdf, tmp.max, 0xdf);
0003aa 940e 11ac 	CALL SUBOPT_0xF
                +
0003ac e2eb     +LDI R30 , LOW ( 2 * _0x0 + ( 41 ) )
0003ad e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 41 ) )
                 	__POINTW1FN _0x0,41
0003ae 93fa      	ST   -Y,R31
0003af 93ea      	ST   -Y,R30
0003b0 940e 11b1 	CALL SUBOPT_0x10
0003b2 940e 11b8 	CALL SUBOPT_0x11
0003b4 89e8      	LDD  R30,Y+16
0003b5 89f9      	LDD  R31,Y+16+1
0003b6 940e 11bf 	CALL SUBOPT_0x12
0003b8 940e 11b8 	CALL SUBOPT_0x11
0003ba e180      	LDI  R24,16
0003bb 940e 0d97 	CALL _sprintf
0003bd 9664      	ADIW R28,20
                 ; 0000 012E             break;
0003be c026      	RJMP _0x5B
                 ; 0000 012F             case 1:
                 _0x5C:
0003bf 30e1      	CPI  R30,LOW(0x1)
0003c0 e0a0      	LDI  R26,HIGH(0x1)
0003c1 07fa      	CPC  R31,R26
0003c2 f429      	BRNE _0x5D
                 ; 0000 0130               sprintf(lcd_buffer,"Hmin: %u%% \nHmax: %u%% ", tmp.min, tmp.max);
0003c3 940e 11ac 	CALL SUBOPT_0xF
                +
0003c5 e4e5     +LDI R30 , LOW ( 2 * _0x0 + ( 67 ) )
0003c6 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 67 ) )
                 	__POINTW1FN _0x0,67
0003c7 c011      	RJMP _0xD4
                 ; 0000 0131             break;
                 ; 0000 0132             case 2:
                 _0x5D:
0003c8 30e2      	CPI  R30,LOW(0x2)
0003c9 e0a0      	LDI  R26,HIGH(0x2)
0003ca 07fa      	CPC  R31,R26
0003cb f429      	BRNE _0x5E
                 ; 0000 0133               sprintf(lcd_buffer,"Smin: %u%% \nSmax: %u%% ", tmp.min, tmp.max);
0003cc 940e 11ac 	CALL SUBOPT_0xF
                +
0003ce e5ed     +LDI R30 , LOW ( 2 * _0x0 + ( 91 ) )
0003cf e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 91 ) )
                 	__POINTW1FN _0x0,91
0003d0 c008      	RJMP _0xD4
                 ; 0000 0134             break;
                 ; 0000 0135             case 3:
                 _0x5E:
0003d1 30e3      	CPI  R30,LOW(0x3)
0003d2 e0a0      	LDI  R26,HIGH(0x3)
0003d3 07fa      	CPC  R31,R26
0003d4 f481      	BRNE _0x5B
                 ; 0000 0136               sprintf(lcd_buffer,"Imin: %u lx \nImax: %u lx ", tmp.min, tmp.max);
0003d5 940e 11ac 	CALL SUBOPT_0xF
                +
0003d7 e7e5     +LDI R30 , LOW ( 2 * _0x0 + ( 115 ) )
0003d8 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 115 ) )
                 	__POINTW1FN _0x0,115
                 _0xD4:
0003d9 93fa      	ST   -Y,R31
0003da 93ea      	ST   -Y,R30
0003db 940e 11b1 	CALL SUBOPT_0x10
0003dd 85ec      	LDD  R30,Y+12
0003de 85fd      	LDD  R31,Y+12+1
0003df 940e 11bf 	CALL SUBOPT_0x12
0003e1 e088      	LDI  R24,8
0003e2 940e 0d97 	CALL _sprintf
0003e4 962c      	ADIW R28,12
                 ; 0000 0137             break;
                 ; 0000 0138         }
                 _0x5B:
                 ; 0000 0139         lcd_gotoxy(0,0);
0003e5 940e 11c4 	CALL SUBOPT_0x13
                 ; 0000 013A         lcd_puts(lcd_buffer);
0003e7 940e 11ca 	CALL SUBOPT_0x14
                 ; 0000 013B         lcd_gotoxy(xpos[i],ypos[i]);
0003e9 940e 11cf 	CALL SUBOPT_0x15
                 ; 0000 013C         lcd_puts(str[i]);
0003eb 940e 11df 	CALL SUBOPT_0x16
0003ed 01de      	MOVW R26,R28
0003ee 965c      	ADIW R26,28
0003ef 940e 160f 	CALL __LSLW2
0003f1 940e 1164 	CALL SUBOPT_0x3
                 ; 0000 013D 
                 ; 0000 013E         if(get_key_status(SELECT_PLUS_BTN))
0003f3 f169      	BREQ _0x60
                 ; 0000 013F         {
                 ; 0000 0140             //if (!get_prev_key_status(SELECT_PLUS_BTN))
                 ; 0000 0141             {
                 ; 0000 0142                 switch(i)
0003f4 940e 1170 	CALL SUBOPT_0x4
                 ; 0000 0143                 {
                 ; 0000 0144                     case 0:
0003f6 f469      	BRNE _0x64
                 ; 0000 0145                       if (tmp.min < tmp.max) tmp.min++;
0003f7 81ec      	LDD  R30,Y+4
0003f8 81fd      	LDD  R31,Y+4+1
0003f9 81aa      	LDD  R26,Y+2
0003fa 81bb      	LDD  R27,Y+2+1
0003fb 17ae      	CP   R26,R30
0003fc 07bf      	CPC  R27,R31
0003fd f428      	BRSH _0x65
0003fe 81ea      	LDD  R30,Y+2
0003ff 81fb      	LDD  R31,Y+2+1
000400 9631      	ADIW R30,1
000401 83ea      	STD  Y+2,R30
000402 83fb      	STD  Y+2+1,R31
                 ; 0000 0146                     break;
                 _0x65:
000403 c01b      	RJMP _0x63
                 ; 0000 0147                     case 1:
                 _0x64:
000404 30e1      	CPI  R30,LOW(0x1)
000405 e0a0      	LDI  R26,HIGH(0x1)
000406 07fa      	CPC  R31,R26
000407 f491      	BRNE _0x66
                 ; 0000 0148                       if (tmp.max < v[j].max) tmp.max++;
000408 940e 11e2 	CALL SUBOPT_0x17
00040a 0fae      	ADD  R26,R30
00040b 1fbf      	ADC  R27,R31
00040c 9612      	ADIW R26,2
00040d 940e 16ba 	CALL __GETW1P
00040f 81ac      	LDD  R26,Y+4
000410 81bd      	LDD  R27,Y+4+1
000411 17ae      	CP   R26,R30
000412 07bf      	CPC  R27,R31
000413 f428      	BRSH _0x67
000414 81ec      	LDD  R30,Y+4
000415 81fd      	LDD  R31,Y+4+1
000416 9631      	ADIW R30,1
000417 83ec      	STD  Y+4,R30
000418 83fd      	STD  Y+4+1,R31
                 ; 0000 0149                     break;
                 _0x67:
000419 c005      	RJMP _0x63
                 ; 0000 014A                     case 2:
                 _0x66:
00041a 30e2      	CPI  R30,LOW(0x2)
00041b e0a0      	LDI  R26,HIGH(0x2)
00041c 07fa      	CPC  R31,R26
00041d f409      	BRNE _0x63
                 ; 0000 014B                       ok = 1;
00041e e001      	LDI  R16,LOW(1)
                 ; 0000 014C                     break;
                 ; 0000 014D                 }
                 _0x63:
                 ; 0000 014E             }
                 ; 0000 014F             delay_ms(300);
00041f 940e 1174 	CALL SUBOPT_0x5
                 ; 0000 0150         }
                 ; 0000 0151         if (get_key_status(SELECT_MINUS_BTN))
                 _0x60:
000421 940e 117a 	CALL SUBOPT_0x6
000423 f151      	BREQ _0x69
                 ; 0000 0152         {
                 ; 0000 0153             //if (!get_prev_key_status(SELECT_MINUS_BTN))
                 ; 0000 0154             {
                 ; 0000 0155                 switch (i) {
000424 940e 1170 	CALL SUBOPT_0x4
                 ; 0000 0156                    case 0:
000426 f479      	BRNE _0x6D
                 ; 0000 0157                      if (tmp.min > v[j].min) tmp.min--;
000427 940e 11e2 	CALL SUBOPT_0x17
000429 940e 11e9 	CALL SUBOPT_0x18
00042b 81aa      	LDD  R26,Y+2
00042c 81bb      	LDD  R27,Y+2+1
00042d 17ea      	CP   R30,R26
00042e 07fb      	CPC  R31,R27
00042f f428      	BRSH _0x6E
000430 81ea      	LDD  R30,Y+2
000431 81fb      	LDD  R31,Y+2+1
000432 9731      	SBIW R30,1
000433 83ea      	STD  Y+2,R30
000434 83fb      	STD  Y+2+1,R31
                 ; 0000 0158                      break;
                 _0x6E:
000435 c016      	RJMP _0x6C
                 ; 0000 0159                    case 1:
                 _0x6D:
000436 30e1      	CPI  R30,LOW(0x1)
000437 e0a0      	LDI  R26,HIGH(0x1)
000438 07fa      	CPC  R31,R26
000439 f469      	BRNE _0x6F
                 ; 0000 015A                      if (tmp.max > tmp.min) tmp.max--;
00043a 81ea      	LDD  R30,Y+2
00043b 81fb      	LDD  R31,Y+2+1
00043c 81ac      	LDD  R26,Y+4
00043d 81bd      	LDD  R27,Y+4+1
00043e 17ea      	CP   R30,R26
00043f 07fb      	CPC  R31,R27
000440 f428      	BRSH _0x70
000441 81ec      	LDD  R30,Y+4
000442 81fd      	LDD  R31,Y+4+1
000443 9731      	SBIW R30,1
000444 83ec      	STD  Y+4,R30
000445 83fd      	STD  Y+4+1,R31
                 ; 0000 015B                    break;
                 _0x70:
000446 c005      	RJMP _0x6C
                 ; 0000 015C                    case 2:
                 _0x6F:
000447 30e2      	CPI  R30,LOW(0x2)
000448 e0a0      	LDI  R26,HIGH(0x2)
000449 07fa      	CPC  R31,R26
00044a f409      	BRNE _0x6C
                 ; 0000 015D                      ok = 1;
00044b e001      	LDI  R16,LOW(1)
                 ; 0000 015E                    break;
                 ; 0000 015F                 }
                 _0x6C:
                 ; 0000 0160 
                 ; 0000 0161          }
                 ; 0000 0162          delay_ms(300);
00044c 940e 1174 	CALL SUBOPT_0x5
                 ; 0000 0163      }
                 ; 0000 0164      if(get_key_status(MENU_ENTER_BTN))
                 _0x69:
00044e 940e 1180 	CALL SUBOPT_0x7
000450 f091      	BREQ _0x72
                 ; 0000 0165      {
                 ; 0000 0166        if(!get_prev_key_status(MENU_ENTER_BTN))
000451 940e 1186 	CALL SUBOPT_0x8
000453 f479      	BRNE _0x73
                 ; 0000 0167        {
                 ; 0000 0168           lcd_gotoxy(xpos[i],ypos[i]);
000454 940e 11df 	CALL SUBOPT_0x16
000456 940e 11cf 	CALL SUBOPT_0x15
                 ; 0000 0169           lcd_putsf("  ");
000458 940e 118c 	CALL SUBOPT_0x9
                 ; 0000 016A           if (i==2)
00045a 3012      	CPI  R17,2
00045b f431      	BRNE _0x74
                 ; 0000 016B           {
                 ; 0000 016C              i=0;
00045c e010      	LDI  R17,LOW(0)
                 ; 0000 016D              lcd_putsf(" ");
                +
00045d e1e6     +LDI R30 , LOW ( 2 * _0x0 + ( 20 ) )
00045e e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 20 ) )
                 	__POINTW1FN _0x0,20
00045f 940e 11ee 	CALL SUBOPT_0x19
                 ; 0000 016E           }
                 ; 0000 016F           else
000461 c001      	RJMP _0x75
                 _0x74:
                 ; 0000 0170             i++;
000462 5f1f      	SUBI R17,-1
                 ; 0000 0171          }
                 _0x75:
                 ; 0000 0172        }
                 _0x73:
                 ; 0000 0173        if(get_key_status(EXIT_BTN))
                 _0x72:
000463 940e 1192 	CALL SUBOPT_0xA
000465 f039      	BREQ _0x76
                 ; 0000 0174          if(!get_prev_key_status(EXIT_BTN))
000466 940e 1198 	CALL SUBOPT_0xB
000468 f421      	BRNE _0x77
                 ; 0000 0175          {
                 ; 0000 0176             delay_ms(300);
000469 940e 1174 	CALL SUBOPT_0x5
                 ; 0000 0177             PREV_BTN_PIN = BTN_PIN;
00046b b256      	IN   R5,22
                 ; 0000 0178             return;
00046c c008      	RJMP _0x2100014
                 ; 0000 0179          }
                 ; 0000 017A     }
                 _0x77:
                 _0x76:
00046d cf33      	RJMP _0x56
                 _0x58:
                 ; 0000 017B     *p = tmp;
00046e 01fe      	MOVW R30,R28
00046f 9632      	ADIW R30,2
000470 a5a8      	LDD  R26,Y+40
000471 a5b9      	LDD  R27,Y+40+1
000472 e084      	LDI  R24,4
000473 940e 16ef 	CALL __COPYMML
                 ; 0000 017C }
                 _0x2100014:
000475 8119      	LDD  R17,Y+1
000476 8108      	LDD  R16,Y+0
000477 96ab      	ADIW R28,43
000478 9508      	RET
                 ;
                 ;void set_watering()
                 ; 0000 017F {
                 _set_watering:
                 ; 0000 0180     unsigned char i = 0, j = 0, x = 0, ok = 0;
                 ; 0000 0181     //char *str[] = {"pr", "hh","mm","^^", "^^"};
                 ; 0000 0182     char *str[5] = {"пр", "гг","хх","^^", "^^"};
                 ; 0000 0183     unsigned char hour, min, mode_on_off;
                 ; 0000 0184     char *s_mode[] = {"OFF", "ON "};
                 ; 0000 0185 
                 ; 0000 0186     hour = w_time[j].hour;
000479 972f      	SBIW R28,15
00047a e08f      	LDI  R24,15
00047b e0a0      	LDI  R26,LOW(0)
00047c e0b0      	LDI  R27,HIGH(0)
00047d e9e8      	LDI  R30,LOW(_0x79*2)
00047e e0f0      	LDI  R31,HIGH(_0x79*2)
00047f 940e 1711 	CALL __INITLOCB
000481 940e 1703 	CALL __SAVELOCR6
                 ;	i -> R17
                 ;	j -> R16
                 ;	x -> R19
                 ;	ok -> R18
                 ;	str -> Y+11
                 ;	hour -> R21
                 ;	min -> R20
                 ;	mode_on_off -> Y+10
                 ;	s_mode -> Y+6
000483 e010      	LDI  R17,0
000484 e000      	LDI  R16,0
000485 e030      	LDI  R19,0
000486 e020      	LDI  R18,0
000487 940e 11f2 	CALL SUBOPT_0x1A
                 ; 0000 0187     min = w_time[j].min;
                 ; 0000 0188     mode_on_off = w_time[j].mode_on_off;
                 ; 0000 0189 
                 ; 0000 018A     while(!ok)
                 _0x7A:
000489 3020      	CPI  R18,0
00048a f011      	BREQ PC+3
00048b 940c 054a 	JMP _0x7C
                 ; 0000 018B     {
                 ; 0000 018C         PREV_BTN_PIN = BTN_PIN;
00048d 940e 110c 	CALL SUBOPT_0x0
                 ; 0000 018D         sprintf(lcd_buffer,"#%u %u%u:%u%u %s OK!", j+1, hour/10,hour%10, min/10,min%10, s_mode[mode_on_off]);
                +
00048f eae3     +LDI R30 , LOW ( 2 * _0x0 + ( 161 ) )
000490 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 161 ) )
                 	__POINTW1FN _0x0,161
000491 93fa      	ST   -Y,R31
000492 93ea      	ST   -Y,R30
000493 940e 1204 	CALL SUBOPT_0x1B
000495 9631      	ADIW R30,1
000496 940e 1623 	CALL __CWD1
000498 940e 16d8 	CALL __PUTPARD1
00049a 2fa5      	MOV  R26,R21
00049b 940e 1207 	CALL SUBOPT_0x1C
00049d 2fa5      	MOV  R26,R21
00049e 940e 1211 	CALL SUBOPT_0x1D
0004a0 2fa4      	MOV  R26,R20
0004a1 940e 1207 	CALL SUBOPT_0x1C
0004a3 2fa4      	MOV  R26,R20
0004a4 940e 1211 	CALL SUBOPT_0x1D
0004a6 a1ea      	LDD  R30,Y+34
0004a7 e0f0      	LDI  R31,0
0004a8 01de      	MOVW R26,R28
0004a9 965e      	ADIW R26,30
0004aa 940e 121b 	CALL SUBOPT_0x1E
0004ac 940e 11bf 	CALL SUBOPT_0x12
0004ae e188      	LDI  R24,24
0004af 940e 0d97 	CALL _sprintf
0004b1 966c      	ADIW R28,28
                 ; 0000 018E         lcd_gotoxy(0,0);
0004b2 940e 11c4 	CALL SUBOPT_0x13
                 ; 0000 018F         lcd_puts(lcd_buffer);
0004b4 940e 0f39 	CALL _lcd_puts
                 ; 0000 0190         lcd_gotoxy(x,1);
0004b6 933a      	ST   -Y,R19
0004b7 940e 1160 	CALL SUBOPT_0x2
                 ; 0000 0191         lcd_puts(str[i]);
0004b9 940e 11df 	CALL SUBOPT_0x16
0004bb 01de      	MOVW R26,R28
0004bc 961b      	ADIW R26,11
0004bd 940e 121b 	CALL SUBOPT_0x1E
0004bf 940e 121e 	CALL SUBOPT_0x1F
                 ; 0000 0192         if(get_key_status(SELECT_PLUS_BTN))
0004c1 f191      	BREQ _0x7D
                 ; 0000 0193         {
                 ; 0000 0194             //if (!get_prev_key_status(SELECT_PLUS_BTN))
                 ; 0000 0195             //{
                 ; 0000 0196             switch(i)
0004c2 940e 1170 	CALL SUBOPT_0x4
                 ; 0000 0197             {
                 ; 0000 0198                 case 0:
0004c4 f441      	BRNE _0x81
                 ; 0000 0199                   if (j < WATERING_TIME_NUMBER - 1) j++;
0004c5 3007      	CPI  R16,7
0004c6 f410      	BRSH _0x82
0004c7 5f0f      	SUBI R16,-1
                 ; 0000 019A                   else j = 0;
0004c8 c001      	RJMP _0x83
                 _0x82:
0004c9 e000      	LDI  R16,LOW(0)
                 ; 0000 019B                   hour = w_time[j].hour;
                 _0x83:
0004ca 940e 11f2 	CALL SUBOPT_0x1A
                 ; 0000 019C                   min = w_time[j].min;
                 ; 0000 019D                   mode_on_off = w_time[j].mode_on_off;
                 ; 0000 019E                   break;
0004cc c025      	RJMP _0x80
                 ; 0000 019F                 case 1:
                 _0x81:
0004cd 30e1      	CPI  R30,LOW(0x1)
0004ce e0a0      	LDI  R26,HIGH(0x1)
0004cf 07fa      	CPC  R31,R26
0004d0 f431      	BRNE _0x84
                 ; 0000 01A0                   if (hour == 23) hour = 0;
0004d1 3157      	CPI  R21,23
0004d2 f411      	BRNE _0x85
0004d3 e050      	LDI  R21,LOW(0)
                 ; 0000 01A1                   else hour++;
0004d4 c001      	RJMP _0x86
                 _0x85:
0004d5 5f5f      	SUBI R21,-1
                 ; 0000 01A2                 break;
                 _0x86:
0004d6 c01b      	RJMP _0x80
                 ; 0000 01A3                 case 2:
                 _0x84:
0004d7 30e2      	CPI  R30,LOW(0x2)
0004d8 e0a0      	LDI  R26,HIGH(0x2)
0004d9 07fa      	CPC  R31,R26
0004da f431      	BRNE _0x87
                 ; 0000 01A4                   if (min == 59) min = 0;
0004db 334b      	CPI  R20,59
0004dc f411      	BRNE _0x88
0004dd e040      	LDI  R20,LOW(0)
                 ; 0000 01A5                   else min++;
0004de c001      	RJMP _0x89
                 _0x88:
0004df 5f4f      	SUBI R20,-1
                 ; 0000 01A6                 break;
                 _0x89:
0004e0 c011      	RJMP _0x80
                 ; 0000 01A7                 case 3:
                 _0x87:
0004e1 30e3      	CPI  R30,LOW(0x3)
0004e2 e0a0      	LDI  R26,HIGH(0x3)
0004e3 07fa      	CPC  R31,R26
0004e4 f441      	BRNE _0x8A
                 ; 0000 01A8                   if (mode_on_off) mode_on_off = 0;
0004e5 85ea      	LDD  R30,Y+10
0004e6 30e0      	CPI  R30,0
0004e7 f011      	BREQ _0x8B
0004e8 e0e0      	LDI  R30,LOW(0)
0004e9 c001      	RJMP _0xD5
                 ; 0000 01A9                   else mode_on_off = 1;
                 _0x8B:
0004ea e0e1      	LDI  R30,LOW(1)
                 _0xD5:
0004eb 87ea      	STD  Y+10,R30
                 ; 0000 01AA                 break;
0004ec c005      	RJMP _0x80
                 ; 0000 01AB                 case 4:
                 _0x8A:
0004ed 30e4      	CPI  R30,LOW(0x4)
0004ee e0a0      	LDI  R26,HIGH(0x4)
0004ef 07fa      	CPC  R31,R26
0004f0 f409      	BRNE _0x80
                 ; 0000 01AC                   ok = 1;
0004f1 e021      	LDI  R18,LOW(1)
                 ; 0000 01AD                 break;
                 ; 0000 01AE             }
                 _0x80:
                 ; 0000 01AF             //}
                 ; 0000 01B0             delay_ms(300);
0004f2 940e 1174 	CALL SUBOPT_0x5
                 ; 0000 01B1         }
                 ; 0000 01B2         if (get_key_status(SELECT_MINUS_BTN))
                 _0x7D:
0004f4 940e 117a 	CALL SUBOPT_0x6
0004f6 f191      	BREQ _0x8E
                 ; 0000 01B3         {
                 ; 0000 01B4             //if (!get_prev_key_status(SELECT_MINUS_BTN))
                 ; 0000 01B5             //{
                 ; 0000 01B6             switch (i)
0004f7 940e 1170 	CALL SUBOPT_0x4
                 ; 0000 01B7             {
                 ; 0000 01B8                 case 0:
0004f9 f441      	BRNE _0x92
                 ; 0000 01B9                   if (j > 0) j--;
0004fa 3001      	CPI  R16,1
0004fb f010      	BRLO _0x93
0004fc 5001      	SUBI R16,1
                 ; 0000 01BA                   else j = WATERING_TIME_NUMBER;
0004fd c001      	RJMP _0x94
                 _0x93:
0004fe e008      	LDI  R16,LOW(8)
                 ; 0000 01BB                   hour = w_time[j].hour;
                 _0x94:
0004ff 940e 11f2 	CALL SUBOPT_0x1A
                 ; 0000 01BC                   min = w_time[j].min;
                 ; 0000 01BD                   mode_on_off = w_time[j].mode_on_off;
                 ; 0000 01BE                   break;
000501 c025      	RJMP _0x91
                 ; 0000 01BF                 case 1:
                 _0x92:
000502 30e1      	CPI  R30,LOW(0x1)
000503 e0a0      	LDI  R26,HIGH(0x1)
000504 07fa      	CPC  R31,R26
000505 f431      	BRNE _0x95
                 ; 0000 01C0                   if (hour == 0) hour = 23;
000506 3050      	CPI  R21,0
000507 f411      	BRNE _0x96
000508 e157      	LDI  R21,LOW(23)
                 ; 0000 01C1                   else hour--;
000509 c001      	RJMP _0x97
                 _0x96:
00050a 5051      	SUBI R21,1
                 ; 0000 01C2                 break;
                 _0x97:
00050b c01b      	RJMP _0x91
                 ; 0000 01C3                 case 2:
                 _0x95:
00050c 30e2      	CPI  R30,LOW(0x2)
00050d e0a0      	LDI  R26,HIGH(0x2)
00050e 07fa      	CPC  R31,R26
00050f f431      	BRNE _0x98
                 ; 0000 01C4                   if (min == 0) min = 59;
000510 3040      	CPI  R20,0
000511 f411      	BRNE _0x99
000512 e34b      	LDI  R20,LOW(59)
                 ; 0000 01C5                   else min--;
000513 c001      	RJMP _0x9A
                 _0x99:
000514 5041      	SUBI R20,1
                 ; 0000 01C6                 break;
                 _0x9A:
000515 c011      	RJMP _0x91
                 ; 0000 01C7                 case 3:
                 _0x98:
000516 30e3      	CPI  R30,LOW(0x3)
000517 e0a0      	LDI  R26,HIGH(0x3)
000518 07fa      	CPC  R31,R26
000519 f441      	BRNE _0x9B
                 ; 0000 01C8                   if (!mode_on_off) mode_on_off = 1;
00051a 85ea      	LDD  R30,Y+10
00051b 30e0      	CPI  R30,0
00051c f411      	BRNE _0x9C
00051d e0e1      	LDI  R30,LOW(1)
00051e c001      	RJMP _0xD6
                 ; 0000 01C9                   else mode_on_off = 0;
                 _0x9C:
00051f e0e0      	LDI  R30,LOW(0)
                 _0xD6:
000520 87ea      	STD  Y+10,R30
                 ; 0000 01CA                 break;
000521 c005      	RJMP _0x91
                 ; 0000 01CB                 case 4:
                 _0x9B:
000522 30e4      	CPI  R30,LOW(0x4)
000523 e0a0      	LDI  R26,HIGH(0x4)
000524 07fa      	CPC  R31,R26
000525 f409      	BRNE _0x91
                 ; 0000 01CC                   ok = 1;
000526 e021      	LDI  R18,LOW(1)
                 ; 0000 01CD                 break;
                 ; 0000 01CE             }
                 _0x91:
                 ; 0000 01CF             // }
                 ; 0000 01D0            delay_ms(300);
000527 940e 1174 	CALL SUBOPT_0x5
                 ; 0000 01D1         }
                 ; 0000 01D2         if(get_key_status(MENU_ENTER_BTN))
                 _0x8E:
000529 940e 1180 	CALL SUBOPT_0x7
00052b f099      	BREQ _0x9F
                 ; 0000 01D3         {
                 ; 0000 01D4             if(!get_prev_key_status(MENU_ENTER_BTN))
00052c 940e 1186 	CALL SUBOPT_0x8
00052e f481      	BRNE _0xA0
                 ; 0000 01D5             {
                 ; 0000 01D6                 lcd_gotoxy(x,1);
00052f 933a      	ST   -Y,R19
000530 940e 1160 	CALL SUBOPT_0x2
                 ; 0000 01D7                 lcd_putsf("  ");
000532 940e 118c 	CALL SUBOPT_0x9
                 ; 0000 01D8                 if (i == 4)
000534 3014      	CPI  R17,4
000535 f419      	BRNE _0xA1
                 ; 0000 01D9                 {
                 ; 0000 01DA                     i = 0;
000536 e010      	LDI  R17,LOW(0)
                 ; 0000 01DB                     x = 0;
000537 e030      	LDI  R19,LOW(0)
                 ; 0000 01DC                 }
                 ; 0000 01DD                 else
000538 c006      	RJMP _0xA2
                 _0xA1:
                 ; 0000 01DE                 {
                 ; 0000 01DF                   if (x == 9)
000539 3039      	CPI  R19,9
00053a f411      	BRNE _0xA3
                 ; 0000 01E0                     x += 4;
00053b 5f3c      	SUBI R19,-LOW(4)
                 ; 0000 01E1                   else x += 3;
00053c c001      	RJMP _0xA4
                 _0xA3:
00053d 5f3d      	SUBI R19,-LOW(3)
                 ; 0000 01E2                   i++;
                 _0xA4:
00053e 5f1f      	SUBI R17,-1
                 ; 0000 01E3                 }
                 _0xA2:
                 ; 0000 01E4            }
                 ; 0000 01E5        }
                 _0xA0:
                 ; 0000 01E6        if(get_key_status(EXIT_BTN))
                 _0x9F:
00053f 940e 1192 	CALL SUBOPT_0xA
000541 f039      	BREQ _0xA5
                 ; 0000 01E7          if(!get_prev_key_status(EXIT_BTN))
000542 940e 1198 	CALL SUBOPT_0xB
000544 f421      	BRNE _0xA6
                 ; 0000 01E8          {
                 ; 0000 01E9             delay_ms(300);
000545 940e 1174 	CALL SUBOPT_0x5
                 ; 0000 01EA             PREV_BTN_PIN = BTN_PIN;
000547 b256      	IN   R5,22
                 ; 0000 01EB             return;
000548 c012      	RJMP _0x2100013
                 ; 0000 01EC          }
                 ; 0000 01ED     }
                 _0xA6:
                 _0xA5:
000549 cf3f      	RJMP _0x7A
                 _0x7C:
                 ; 0000 01EE     w_time[j].hour = hour;
00054a e0a3      	LDI  R26,LOW(3)
00054b 9f0a      	MUL  R16,R26
00054c 01f0      	MOVW R30,R0
00054d 51e2      	SUBI R30,LOW(-_w_time)
00054e 4ffd      	SBCI R31,HIGH(-_w_time)
00054f 8350      	ST   Z,R21
                 ; 0000 01EF     w_time[j].min = min;
000550 9f0a      	MUL  R16,R26
000551 01f0      	MOVW R30,R0
                +
000552 51e1     +SUBI R30 , LOW ( - _w_time - ( 1 ) )
000553 4ffd     +SBCI R31 , HIGH ( - _w_time - ( 1 ) )
                 	__ADDW1MN _w_time,1
000554 8340      	ST   Z,R20
                 ; 0000 01F0     w_time[j].mode_on_off = mode_on_off;
000555 9f0a      	MUL  R16,R26
000556 01f0      	MOVW R30,R0
                +
000557 51e0     +SUBI R30 , LOW ( - _w_time - ( 2 ) )
000558 4ffd     +SBCI R31 , HIGH ( - _w_time - ( 2 ) )
                 	__ADDW1MN _w_time,2
000559 85aa      	LDD  R26,Y+10
00055a 83a0      	STD  Z+0,R26
                 ; 0000 01F1 }
                 _0x2100013:
00055b 940e 170a 	CALL __LOADLOCR6
00055d 9665      	ADIW R28,21
00055e 9508      	RET
                 
                 	.DSEG
                 _0x78:
000260           	.BYTE 0x17
                 ;
                 ;
                 ;void main_menu(void)
                 ; 0000 01F5 {
                 
                 	.CSEG
                 _main_menu:
                 ; 0000 01F6     char *menu_items[8]={"DATE", "TIME", "WATERING", "TEMPERATURE",
                 ; 0000 01F7         "HUMIDITY", "SOIL MOISTURE", "LIGHT INTENSITY","EXIT"};
                 ; 0000 01F8     int pos[] = {6, 6, 4, 2, 4, 2, 0, 6};
                 ; 0000 01F9    /* char *menu_items[8]={"ДАТА", "ЧАС", "ПОЛИВ", "ТЕМПЕРАТУРА",
                 ; 0000 01FA         "ВОЛОГIСТЬ", "ВОЛОГIСТЬ ГРУНТУ", "ОСВIТЛЕННЯ","ВИХIД"};
                 ; 0000 01FB     int pos[] = {6, 6, 5, 2, 4, 0, 3, 5};*/
                 ; 0000 01FC     char title[] = "** Main Menu **";
                 ; 0000 01FD     //char title[] = "* Головне Меню *";
                 ; 0000 01FE     unsigned char i = 0;
                 ; 0000 01FF 
                 ; 0000 0200     while(1)
00055f 97e0      	SBIW R28,48
000560 e380      	LDI  R24,48
000561 e0a0      	LDI  R26,LOW(0)
000562 e0b0      	LDI  R27,HIGH(0)
000563 eae8      	LDI  R30,LOW(_0xA8*2)
000564 e0f0      	LDI  R31,HIGH(_0xA8*2)
000565 940e 1711 	CALL __INITLOCB
000567 931a      	ST   -Y,R17
                 ;	menu_items -> Y+33
                 ;	pos -> Y+17
                 ;	title -> Y+1
                 ;	i -> R17
000568 e010      	LDI  R17,0
                 _0xA9:
                 ; 0000 0201     {
                 ; 0000 0202         PREV_BTN_PIN = BTN_PIN;
000569 b256      	IN   R5,22
                 ; 0000 0203         lcd_gotoxy(0,0);
00056a e0e0      	LDI  R30,LOW(0)
00056b 940e 1223 	CALL SUBOPT_0x20
                 ; 0000 0204         lcd_puts(title);
00056d 01fe      	MOVW R30,R28
00056e 9631      	ADIW R30,1
00056f 93fa      	ST   -Y,R31
000570 93ea      	ST   -Y,R30
000571 940e 11ca 	CALL SUBOPT_0x14
                 ; 0000 0205         lcd_gotoxy(pos[i],1);
000573 01de      	MOVW R26,R28
000574 9651      	ADIW R26,17
000575 0fee      	LSL  R30
000576 1fff      	ROL  R31
000577 0fae      	ADD  R26,R30
000578 1fbf      	ADC  R27,R31
000579 91ec      	LD   R30,X
00057a 93ea      	ST   -Y,R30
00057b 940e 1160 	CALL SUBOPT_0x2
                 ; 0000 0206         lcd_puts(menu_items[i]);
00057d 940e 11df 	CALL SUBOPT_0x16
00057f 01de      	MOVW R26,R28
000580 9691      	ADIW R26,33
000581 940e 121b 	CALL SUBOPT_0x1E
000583 940e 121e 	CALL SUBOPT_0x1F
                 ; 0000 0207         if(get_key_status(SELECT_PLUS_BTN))
000585 f059      	BREQ _0xAC
                 ; 0000 0208         {
                 ; 0000 0209             if(!get_prev_key_status(SELECT_PLUS_BTN))
000586 e0e1      	LDI  R30,LOW(1)
000587 940e 11a4 	CALL SUBOPT_0xD
000589 f439      	BRNE _0xAD
                 ; 0000 020A             {
                 ; 0000 020B                 if(i == 7) i = 0;
00058a 3017      	CPI  R17,7
00058b f411      	BRNE _0xAE
00058c e010      	LDI  R17,LOW(0)
                 ; 0000 020C                 else i++;
00058d c001      	RJMP _0xAF
                 _0xAE:
00058e 5f1f      	SUBI R17,-1
                 ; 0000 020D                 lcd_clear();
                 _0xAF:
00058f 940e 0edf 	CALL _lcd_clear
                 ; 0000 020E             }
                 ; 0000 020F         }
                 _0xAD:
                 ; 0000 0210         if(get_key_status(SELECT_MINUS_BTN))
                 _0xAC:
000591 940e 117a 	CALL SUBOPT_0x6
000593 f059      	BREQ _0xB0
                 ; 0000 0211         {
                 ; 0000 0212             if (!get_prev_key_status(SELECT_MINUS_BTN))
000594 e0e2      	LDI  R30,LOW(2)
000595 940e 11a4 	CALL SUBOPT_0xD
000597 f439      	BRNE _0xB1
                 ; 0000 0213             {
                 ; 0000 0214                 if (i == 0) i = 7;
000598 3010      	CPI  R17,0
000599 f411      	BRNE _0xB2
00059a e017      	LDI  R17,LOW(7)
                 ; 0000 0215                 else i--;
00059b c001      	RJMP _0xB3
                 _0xB2:
00059c 5011      	SUBI R17,1
                 ; 0000 0216                 lcd_clear();
                 _0xB3:
00059d 940e 0edf 	CALL _lcd_clear
                 ; 0000 0217             }
                 ; 0000 0218         }
                 _0xB1:
                 ; 0000 0219         if(get_key_status(MENU_ENTER_BTN))
                 _0xB0:
00059f 940e 1180 	CALL SUBOPT_0x7
0005a1 f411      	BRNE PC+3
0005a2 940c 05ee 	JMP _0xB4
                 ; 0000 021A             if(!get_prev_key_status(MENU_ENTER_BTN))
0005a4 940e 1186 	CALL SUBOPT_0x8
0005a6 f011      	BREQ PC+3
0005a7 940c 05ee 	JMP _0xB5
                 ; 0000 021B             {
                 ; 0000 021C                 lcd_clear();
0005a9 940e 0edf 	CALL _lcd_clear
                 ; 0000 021D                 switch(i)
0005ab 940e 1170 	CALL SUBOPT_0x4
                 ; 0000 021E                 {
                 ; 0000 021F                     case 0: set_date(); break; // date
0005ad f411      	BRNE _0xB9
0005ae dd28      	RCALL _set_date
0005af c03c      	RJMP _0xB8
                 ; 0000 0220                     case 1: set_time(); break; // time
                 _0xB9:
0005b0 30e1      	CPI  R30,LOW(0x1)
0005b1 e0a0      	LDI  R26,HIGH(0x1)
0005b2 07fa      	CPC  R31,R26
0005b3 f411      	BRNE _0xBA
0005b4 dc78      	RCALL _set_time
0005b5 c036      	RJMP _0xB8
                 ; 0000 0221                     case 2: set_watering(); break; // watering
                 _0xBA:
0005b6 30e2      	CPI  R30,LOW(0x2)
0005b7 e0a0      	LDI  R26,HIGH(0x2)
0005b8 07fa      	CPC  R31,R26
0005b9 f411      	BRNE _0xBB
0005ba debe      	RCALL _set_watering
0005bb c030      	RJMP _0xB8
                 ; 0000 0222                     case 3: set_values(0, &temp); break; // temperature
                 _0xBB:
0005bc 30e3      	CPI  R30,LOW(0x3)
0005bd e0a0      	LDI  R26,HIGH(0x3)
0005be 07fa      	CPC  R31,R26
0005bf f439      	BRNE _0xBC
0005c0 e0e0      	LDI  R30,LOW(0)
0005c1 93ea      	ST   -Y,R30
0005c2 edee      	LDI  R30,LOW(_temp)
0005c3 e0f2      	LDI  R31,HIGH(_temp)
0005c4 940e 1228 	CALL SUBOPT_0x21
0005c6 c025      	RJMP _0xB8
                 ; 0000 0223                     case 4: set_values(1, &hum); break; // humidity
                 _0xBC:
0005c7 30e4      	CPI  R30,LOW(0x4)
0005c8 e0a0      	LDI  R26,HIGH(0x4)
0005c9 07fa      	CPC  R31,R26
0005ca f439      	BRNE _0xBD
0005cb e0e1      	LDI  R30,LOW(1)
0005cc 93ea      	ST   -Y,R30
0005cd eee2      	LDI  R30,LOW(_hum)
0005ce e0f2      	LDI  R31,HIGH(_hum)
0005cf 940e 1228 	CALL SUBOPT_0x21
0005d1 c01a      	RJMP _0xB8
                 ; 0000 0224                     case 5: set_values(2,&soil); break; // soil moisture
                 _0xBD:
0005d2 30e5      	CPI  R30,LOW(0x5)
0005d3 e0a0      	LDI  R26,HIGH(0x5)
0005d4 07fa      	CPC  R31,R26
0005d5 f439      	BRNE _0xBE
0005d6 e0e2      	LDI  R30,LOW(2)
0005d7 93ea      	ST   -Y,R30
0005d8 eee6      	LDI  R30,LOW(_soil)
0005d9 e0f2      	LDI  R31,HIGH(_soil)
0005da 940e 1228 	CALL SUBOPT_0x21
0005dc c00f      	RJMP _0xB8
                 ; 0000 0225                     case 6: set_values(3, &light); break;
                 _0xBE:
0005dd 30e6      	CPI  R30,LOW(0x6)
0005de e0a0      	LDI  R26,HIGH(0x6)
0005df 07fa      	CPC  R31,R26
0005e0 f439      	BRNE _0xBF
0005e1 e0e3      	LDI  R30,LOW(3)
0005e2 93ea      	ST   -Y,R30
0005e3 eeea      	LDI  R30,LOW(_light)
0005e4 e0f2      	LDI  R31,HIGH(_light)
0005e5 940e 1228 	CALL SUBOPT_0x21
0005e7 c004      	RJMP _0xB8
                 ; 0000 0226                     case 7: return;
                 _0xBF:
0005e8 30e7      	CPI  R30,LOW(0x7)
0005e9 e0a0      	LDI  R26,HIGH(0x7)
0005ea 07fa      	CPC  R31,R26
0005eb f049      	BREQ _0x2100012
                 ; 0000 0227                     default: break;
                 ; 0000 0228             }
                 _0xB8:
                 ; 0000 0229             lcd_clear();
0005ec 940e 0edf 	CALL _lcd_clear
                 ; 0000 022A       }
                 ; 0000 022B       if (get_key_status(EXIT_BTN))
                 _0xB5:
                 _0xB4:
0005ee 940e 1192 	CALL SUBOPT_0xA
0005f0 f019      	BREQ _0xC2
                 ; 0000 022C         if (!get_prev_key_status(EXIT_BTN))
0005f1 940e 1198 	CALL SUBOPT_0xB
0005f3 f009      	BREQ _0x2100012
                 ; 0000 022D         {
                 ; 0000 022E            return;
                 ; 0000 022F         }
                 ; 0000 0230 
                 ; 0000 0231     }
                 _0xC2:
0005f4 cf74      	RJMP _0xA9
                 ; 0000 0232 }
                 _0x2100012:
0005f5 8118      	LDD  R17,Y+0
0005f6 96e1      	ADIW R28,49
0005f7 9508      	RET
                 
                 	.DSEG
                 _0xA7:
000277           	.BYTE 0x4B
                 ;
                 ;void main(void)
                 ; 0000 0235 {
                 
                 	.CSEG
                 _main:
                 ; 0000 0236   /* program that shows how to use SHTXX, DS18B20 functions and to display information on LCD */
                 ; 0000 0237 
                 ; 0000 0238   value humi_val = {0}, temp_val = {0};
                 ; 0000 0239   float temp_ds = 0, dew_point = 0;
                 ; 0000 023A   unsigned int soil_val = 0, light_val = 0;
                 ; 0000 023B   unsigned char error, checksum, value = 1;
                 ; 0000 023C   unsigned int vin, start;
                 ; 0000 023D   unsigned char hour, min, sec, wd;
                 ; 0000 023E   //unsigned char date, month, year;
                 ; 0000 023F   char *weekdays[7]={"Sun","Mon","Tue","Wed","Thr","Fri","Sat"};
                 ; 0000 0240   //char *weekdays[7]={"Нд.","Пн.","Вт.","Ср.","Чт.","Пт.","Сб."};
                 ; 0000 0241   //char *monthes[]={"Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"};
                 ; 0000 0242   //char *monthes[]={"Сiч.","Лют.","Бер.","Квiт.","Трав.","Черв.","Лип.","Серп.","Вер.","Жовт.","Лист.","Груд."};
                 ; 0000 0243 
                 ; 0000 0244   //initADC();
                 ; 0000 0245   sht_init();
0005f8 97a7      	SBIW R28,39
0005f9 e287      	LDI  R24,39
0005fa e0a0      	LDI  R26,LOW(0)
0005fb e0b0      	LDI  R27,HIGH(0)
0005fc ede8      	LDI  R30,LOW(_0xC5*2)
0005fd e0f0      	LDI  R31,HIGH(_0xC5*2)
0005fe 940e 1711 	CALL __INITLOCB
                 ;	humi_val -> Y+35
                 ;	temp_val -> Y+31
                 ;	temp_ds -> Y+27
                 ;	dew_point -> Y+23
                 ;	soil_val -> R16,R17
                 ;	light_val -> R18,R19
                 ;	error -> R21
                 ;	checksum -> R20
                 ;	value -> Y+22
                 ;	vin -> Y+20
                 ;	start -> Y+18
                 ;	hour -> Y+17
                 ;	min -> Y+16
                 ;	sec -> Y+15
                 ;	wd -> Y+14
                 ;	weekdays -> Y+0
                +
000600 e000     +LDI R16 , LOW ( 0 )
000601 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
000602 e020     +LDI R18 , LOW ( 0 )
000603 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
000604 940e 08b5 	CALL _sht_init
                 ; 0000 0246   s_connectionreset();
000606 940e 091b 	CALL _s_connectionreset
                 ; 0000 0247   therm_init(-55, 125, THERM_9BIT_RES);
000608 ece9      	LDI  R30,LOW(201)
000609 93ea      	ST   -Y,R30
00060a e7ed      	LDI  R30,LOW(125)
00060b 93ea      	ST   -Y,R30
00060c e0e0      	LDI  R30,LOW(0)
00060d 93ea      	ST   -Y,R30
00060e d1d7      	RCALL _therm_init
                 ; 0000 0248   i2c_init();  // I2C Bus initialization
00060f 940e 13d4 	CALL _i2c_init
                 ; 0000 0249   // DS1307 Real Time Clock initialization
                 ; 0000 024A   rtc_init(0,1,0);  // Square wave output on pin SQW/OUT: Off // SQW/OUT pin state: 0
000611 e0e0      	LDI  R30,LOW(0)
000612 93ea      	ST   -Y,R30
000613 e0e1      	LDI  R30,LOW(1)
000614 93ea      	ST   -Y,R30
000615 e0e0      	LDI  R30,LOW(0)
000616 93ea      	ST   -Y,R30
000617 940e 0f9d 	CALL _rtc_init
                 ; 0000 024B  // start = rtc_read(0)&0x80;
                 ; 0000 024C  // if (start)
                 ; 0000 024D   //  rtc_write(0,0x00);  //start clock
                 ; 0000 024E 
                 ; 0000 024F   //LCD initialization
                 ; 0000 0250   lcd_init(16);
000619 e1e0      	LDI  R30,LOW(16)
00061a 93ea      	ST   -Y,R30
00061b 940e 0f69 	CALL _lcd_init
                 ; 0000 0251   lcd_clear();
00061d 940e 0edf 	CALL _lcd_clear
                 ; 0000 0252   //lcd_gotoxy(2,0);
                 ; 0000 0253   //lcd_putsf("Microclimate");
                 ; 0000 0254   //lcd_gotoxy(1,1);
                 ; 0000 0255   //lcd_putsf("Control System");
                 ; 0000 0256   lcd_gotoxy(4,0);
00061f e0e4      	LDI  R30,LOW(4)
000620 940e 1223 	CALL SUBOPT_0x20
                 ; 0000 0257   lcd_putsf("СИСТЕМА");
                +
000622 e1ef     +LDI R30 , LOW ( 2 * _0x0 + ( 285 ) )
000623 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 285 ) )
                 	__POINTW1FN _0x0,285
000624 940e 11ee 	CALL SUBOPT_0x19
                 ; 0000 0258   lcd_gotoxy(3,1);
000626 e0e3      	LDI  R30,LOW(3)
000627 93ea      	ST   -Y,R30
000628 940e 1160 	CALL SUBOPT_0x2
                 ; 0000 0259   lcd_putsf("УПРАВЛIННЯ");
                +
00062a e2e7     +LDI R30 , LOW ( 2 * _0x0 + ( 293 ) )
00062b e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 293 ) )
                 	__POINTW1FN _0x0,293
00062c 940e 11ee 	CALL SUBOPT_0x19
                 ; 0000 025A   delay_ms(2000);
00062e 940e 122c 	CALL SUBOPT_0x22
                 ; 0000 025B   lcd_clear();
                 ; 0000 025C   lcd_gotoxy(1,0);
000630 e0e1      	LDI  R30,LOW(1)
000631 940e 1223 	CALL SUBOPT_0x20
                 ; 0000 025D   lcd_putsf("МIКРОКЛIМАТОМ");
                +
000633 e3e2     +LDI R30 , LOW ( 2 * _0x0 + ( 304 ) )
000634 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 304 ) )
                 	__POINTW1FN _0x0,304
000635 940e 11ee 	CALL SUBOPT_0x19
                 ; 0000 025E   lcd_gotoxy(3,1);
000637 e0e3      	LDI  R30,LOW(3)
000638 93ea      	ST   -Y,R30
000639 940e 1160 	CALL SUBOPT_0x2
                 ; 0000 025F   lcd_putsf("В ТЕПЛИЦI");
                +
00063b e4e0     +LDI R30 , LOW ( 2 * _0x0 + ( 318 ) )
00063c e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 318 ) )
                 	__POINTW1FN _0x0,318
00063d 940e 11ee 	CALL SUBOPT_0x19
                 ; 0000 0260   delay_ms(2000);
00063f 940e 122c 	CALL SUBOPT_0x22
                 ; 0000 0261   lcd_clear();
                 ; 0000 0262   lcd_gotoxy(2,0);
000641 e0e2      	LDI  R30,LOW(2)
000642 940e 1223 	CALL SUBOPT_0x20
                 ; 0000 0263   lcd_putsf("Andriy Halakh");
                +
000644 e4ea     +LDI R30 , LOW ( 2 * _0x0 + ( 328 ) )
000645 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 328 ) )
                 	__POINTW1FN _0x0,328
000646 940e 11ee 	CALL SUBOPT_0x19
                 ; 0000 0264   //lcd_putsf("А. Галах");
                 ; 0000 0265   lcd_gotoxy(4,1);
000648 e0e4      	LDI  R30,LOW(4)
000649 93ea      	ST   -Y,R30
00064a 940e 1160 	CALL SUBOPT_0x2
                 ; 0000 0266   lcd_putsf("(C) 2017");
                +
00064c e5e8     +LDI R30 , LOW ( 2 * _0x0 + ( 342 ) )
00064d e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 342 ) )
                 	__POINTW1FN _0x0,342
00064e 940e 11ee 	CALL SUBOPT_0x19
                 ; 0000 0267   delay_ms(2000);
000650 940e 122c 	CALL SUBOPT_0x22
                 ; 0000 0268   lcd_clear();
                 ; 0000 0269  //set SHTXX sensor resolution for temperature 12 bit and for humidity 8 bit
                 ; 0000 026A   s_write_statusreg(&value);
000652 01fe      	MOVW R30,R28
000653 9676      	ADIW R30,22
000654 93fa      	ST   -Y,R31
000655 93ea      	ST   -Y,R30
000656 940e 0941 	CALL _s_write_statusreg
                 ; 0000 026B   s_read_statusreg(&value, &checksum);
000658 01fe      	MOVW R30,R28
000659 9676      	ADIW R30,22
00065a 93fa      	ST   -Y,R31
00065b 93ea      	ST   -Y,R30
00065c b7ed      	IN   R30,SPL
00065d b7fe      	IN   R31,SPH
00065e 93fa      	ST   -Y,R31
00065f 93ea      	ST   -Y,R30
000660 934f      	PUSH R20
000661 940e 092c 	CALL _s_read_statusreg
000663 914f      	POP  R20
                 ; 0000 026C 
                 ; 0000 026D   REL1_DDR|=(1<<REL1);  // REL1 0x20
000664 9aa5      	SBI  0x14,5
                 ; 0000 026E   REL1_PORT&=~(1<<REL1); // REL1 - off 0xdf
000665 98ad      	CBI  0x15,5
                 ; 0000 026F   REL2_DDR|=(1<<REL2);  // REL2 0x40
000666 9aa6      	SBI  0x14,6
                 ; 0000 0270   REL2_PORT|=(1<<REL2); // REL2 - off 0xbf
000667 9aae      	SBI  0x15,6
                 ; 0000 0271   REL3_DDR|=(1<<REL3);  // REL3 0x80
000668 9aa7      	SBI  0x14,7
                 ; 0000 0272   REL3_PORT&=~(1<<REL3); // REL3 - off 0x7f
000669 98af      	CBI  0x15,7
                 ; 0000 0273 
                 ; 0000 0274   while(1)
                 _0xC6:
                 ; 0000 0275   {
                 ; 0000 0276     therm_read_temperature(&temp_ds); //measures temperature from DS18B20
00066a 01fe      	MOVW R30,R28
00066b 967b      	ADIW R30,27
00066c 93fa      	ST   -Y,R31
00066d 93ea      	ST   -Y,R30
00066e d1c1      	RCALL _therm_read_temperature
                 ; 0000 0277     error = 0;
00066f e050      	LDI  R21,LOW(0)
                 ; 0000 0278     error += s_measure((unsigned char*) &humi_val.i, &checksum,HUMI);  //measure humidity
000670 01fe      	MOVW R30,R28
000671 96b3      	ADIW R30,35
000672 93fa      	ST   -Y,R31
000673 93ea      	ST   -Y,R30
000674 b7ed      	IN   R30,SPL
000675 b7fe      	IN   R31,SPH
000676 93fa      	ST   -Y,R31
000677 93ea      	ST   -Y,R30
000678 934f      	PUSH R20
000679 e0e1      	LDI  R30,LOW(1)
00067a 93ea      	ST   -Y,R30
00067b 940e 0952 	CALL _s_measure
00067d 914f      	POP  R20
00067e 0f5e      	ADD  R21,R30
                 ; 0000 0279     error += s_measure((unsigned char*) &temp_val.i, &checksum,TEMP);  //measure temperature
00067f 01fe      	MOVW R30,R28
000680 967f      	ADIW R30,31
000681 93fa      	ST   -Y,R31
000682 93ea      	ST   -Y,R30
000683 b7ed      	IN   R30,SPL
000684 b7fe      	IN   R31,SPH
000685 93fa      	ST   -Y,R31
000686 93ea      	ST   -Y,R30
000687 934f      	PUSH R20
000688 e0e0      	LDI  R30,LOW(0)
000689 93ea      	ST   -Y,R30
00068a 940e 0952 	CALL _s_measure
00068c 914f      	POP  R20
00068d 0f5e      	ADD  R21,R30
                 ; 0000 027A     if (error!=0)
00068e 3050      	CPI  R21,0
00068f f019      	BREQ _0xC9
                 ; 0000 027B       s_connectionreset(); //in case of an error: connection reset
000690 940e 091b 	CALL _s_connectionreset
                 ; 0000 027C     else
000692 c05e      	RJMP _0xCA
                 _0xC9:
                 ; 0000 027D     {
                 ; 0000 027E       humi_val.f = (float)humi_val.i;  //converts integer to float
000693 a1eb      	LDD  R30,Y+35
000694 a1fc      	LDD  R31,Y+35+1
000695 940e 1234 	CALL SUBOPT_0x23
                +
000697 a3eb     +STD Y + 35 , R30
000698 a3fc     +STD Y + 35 + 1 , R31
000699 a36d     +STD Y + 35 + 2 , R22
00069a a37e     +STD Y + 35 + 3 , R23
                 	__PUTD1S 35
                 ; 0000 027F       temp_val.f = (float)temp_val.i;   //converts integer to float
00069b 8def      	LDD  R30,Y+31
00069c a1f8      	LDD  R31,Y+31+1
00069d 940e 1234 	CALL SUBOPT_0x23
                +
00069f 8fef     +STD Y + 31 , R30
0006a0 a3f8     +STD Y + 31 + 1 , R31
0006a1 a369     +STD Y + 31 + 2 , R22
0006a2 a37a     +STD Y + 31 + 3 , R23
                 	__PUTD1S 31
                 ; 0000 0280       calc_sth11(&humi_val.f, &temp_val.f); //calculate humidity, temperature
0006a3 01fe      	MOVW R30,R28
0006a4 96b3      	ADIW R30,35
0006a5 93fa      	ST   -Y,R31
0006a6 93ea      	ST   -Y,R30
0006a7 01fe      	MOVW R30,R28
0006a8 96b1      	ADIW R30,33
0006a9 93fa      	ST   -Y,R31
0006aa 93ea      	ST   -Y,R30
0006ab 940e 098f 	CALL _calc_sth11
                 ; 0000 0281       dew_point = calc_dewpoint(humi_val.f, temp_val.f); //calculate dew point
0006ad 940e 1239 	CALL SUBOPT_0x24
0006af 940e 1239 	CALL SUBOPT_0x24
0006b1 940e 0a21 	CALL _calc_dewpoint
                +
0006b3 8bef     +STD Y + 23 , R30
0006b4 8ff8     +STD Y + 23 + 1 , R31
0006b5 8f69     +STD Y + 23 + 2 , R22
0006b6 8f7a     +STD Y + 23 + 3 , R23
                 	__PUTD1S 23
                 ; 0000 0282 
                 ; 0000 0283       sprintf(lcd_buffer,"%+3.1f%cC %3.1f%% RH ", temp_ds,
                 ; 0000 0284       0xdf, humi_val.f);
0006b7 940e 11ac 	CALL SUBOPT_0xF
                +
0006b9 e6e1     +LDI R30 , LOW ( 2 * _0x0 + ( 351 ) )
0006ba e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 351 ) )
                 	__POINTW1FN _0x0,351
0006bb 93fa      	ST   -Y,R31
0006bc 93ea      	ST   -Y,R30
                +
0006bd 8def     +LDD R30 , Y + 31
0006be a1f8     +LDD R31 , Y + 31 + 1
0006bf a169     +LDD R22 , Y + 31 + 2
0006c0 a17a     +LDD R23 , Y + 31 + 3
                 	__GETD1S 31
0006c1 940e 16d8 	CALL __PUTPARD1
0006c3 940e 11b8 	CALL SUBOPT_0x11
                +
0006c5 a5ef     +LDD R30 , Y + 47
0006c6 a9f8     +LDD R31 , Y + 47 + 1
0006c7 a969     +LDD R22 , Y + 47 + 2
0006c8 a97a     +LDD R23 , Y + 47 + 3
                 	__GETD1S 47
0006c9 940e 16d8 	CALL __PUTPARD1
0006cb e08c      	LDI  R24,12
0006cc 940e 0d97 	CALL _sprintf
0006ce 9660      	ADIW R28,16
                 ; 0000 0285       lcd_gotoxy(0,0);
0006cf 940e 11c4 	CALL SUBOPT_0x13
                 ; 0000 0286       lcd_puts(lcd_buffer);
0006d1 940e 0f39 	CALL _lcd_puts
                 ; 0000 0287       sprintf(lcd_buffer,"%+d%cC ",(int)temp_val.f, 0xdf);
0006d3 940e 11ac 	CALL SUBOPT_0xF
                +
0006d5 e7e7     +LDI R30 , LOW ( 2 * _0x0 + ( 373 ) )
0006d6 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 373 ) )
                 	__POINTW1FN _0x0,373
0006d7 93fa      	ST   -Y,R31
0006d8 93ea      	ST   -Y,R30
                +
0006d9 a1eb     +LDD R30 , Y + 35
0006da a1fc     +LDD R31 , Y + 35 + 1
0006db a16d     +LDD R22 , Y + 35 + 2
0006dc a17e     +LDD R23 , Y + 35 + 3
                 	__GETD1S 35
0006dd 940e 147a 	CALL __CFD1
0006df 940e 1623 	CALL __CWD1
0006e1 940e 16d8 	CALL __PUTPARD1
0006e3 940e 11b8 	CALL SUBOPT_0x11
0006e5 e088      	LDI  R24,8
0006e6 940e 0d97 	CALL _sprintf
0006e8 962c      	ADIW R28,12
                 ; 0000 0288       lcd_gotoxy(0,1);
0006e9 e0e0      	LDI  R30,LOW(0)
0006ea 93ea      	ST   -Y,R30
0006eb 940e 1160 	CALL SUBOPT_0x2
                 ; 0000 0289       lcd_puts(lcd_buffer);
0006ed 940e 11ac 	CALL SUBOPT_0xF
0006ef 940e 0f39 	CALL _lcd_puts
                 ; 0000 028A     }
                 _0xCA:
                 ; 0000 028B     // check temperature value
                 ; 0000 028C     if (temp_ds > temp.max)
                +
0006f1 91e0 02e0+LDS R30 , _temp + ( 2 )
0006f3 91f0 02e1+LDS R31 , _temp + ( 2 ) + 1
                 	__GETW1MN _temp,2
                +
0006f5 8dab     +LDD R26 , Y + 27
0006f6 8dbc     +LDD R27 , Y + 27 + 1
0006f7 8d8d     +LDD R24 , Y + 27 + 2
0006f8 8d9e     +LDD R25 , Y + 27 + 3
                 	__GETD2S 27
0006f9 940e 1234 	CALL SUBOPT_0x23
0006fb 940e 15ce 	CALL __CMPF12
0006fd f009      	BREQ PC+2
0006fe f410      	BRCC PC+3
0006ff 940c 0702 	JMP  _0xCB
                 ; 0000 028D     {
                 ; 0000 028E        REL1_PORT|=0x20;
000701 9aad      	SBI  0x15,5
                 ; 0000 028F     }
                 ; 0000 0290     else //if (temp_ds < temp.min)
                 _0xCB:
                 ; 0000 0291     {
                 ; 0000 0292      // REL1_PORT&=0xdf;
                 ; 0000 0293     }
                 ; 0000 0294     // check humidity value
                 ; 0000 0295     if (humi_val.f < hum.min)
000702 91e0 02e2 	LDS  R30,_hum
000704 91f0 02e3 	LDS  R31,_hum+1
                +
000706 a1ab     +LDD R26 , Y + 35
000707 a1bc     +LDD R27 , Y + 35 + 1
000708 a18d     +LDD R24 , Y + 35 + 2
000709 a19e     +LDD R25 , Y + 35 + 3
                 	__GETD2S 35
00070a 940e 1234 	CALL SUBOPT_0x23
00070c 940e 15ce 	CALL __CMPF12
00070e f408      	BRSH _0xCD
                 ; 0000 0296     {
                 ; 0000 0297       REL2_PORT|=0x40;
00070f 9aae      	SBI  0x15,6
                 ; 0000 0298     }
                 ; 0000 0299     else //if (humi_val.f > hum.max)
                 _0xCD:
                 ; 0000 029A     {
                 ; 0000 029B       //REL2_PORT&=0xbf;
                 ; 0000 029C     }
                 ; 0000 029D     // check soil moisture value
                 ; 0000 029E     /*if (soil_val < soil.min)
                 ; 0000 029F     {
                 ; 0000 02A0         REL2_PORT|=0x40;
                 ; 0000 02A1     }
                 ; 0000 02A2     else //if (soil_val > soil.max)
                 ; 0000 02A3     {
                 ; 0000 02A4         REL2_PORT&=0xbf;
                 ; 0000 02A5     }*/
                 ; 0000 02A6     // check light intensity value
                 ; 0000 02A7     if (light_val < light.min)
000710 91e0 02ea 	LDS  R30,_light
000712 91f0 02eb 	LDS  R31,_light+1
000714 172e      	CP   R18,R30
000715 073f      	CPC  R19,R31
000716 f408      	BRSH _0xCF
                 ; 0000 02A8     {
                 ; 0000 02A9         REL3_PORT|=0x80;
000717 9aaf      	SBI  0x15,7
                 ; 0000 02AA     }
                 ; 0000 02AB     else //if (light_val > light.max)
                 _0xCF:
                 ; 0000 02AC     {
                 ; 0000 02AD 	   // REL3_PORT&=0x7f;
                 ; 0000 02AE     }
                 ; 0000 02AF     REL2_PORT|=0x40;
000718 9aae      	SBI  0x15,6
                 ; 0000 02B0     /*vin=readADC(5); //measure pressure ADC5 pin
                 ; 0000 02B1     pressure=press_m(vin); //calculate pressure
                 ; 0000 02B2     //print pressure from MPX4115
                 ; 0000 02B3     sprintf(lcd_buffer,"%uкПа %.1fатм ",pressure, (pressure/101.325));
                 ; 0000 02B4     lcd_goto_xy(2,3);
                 ; 0000 02B5     lcd_str(lcd_buffer);*/
                 ; 0000 02B6     rtc_get_time(&hour,&min,&sec);//, &wd);
000719 01fe      	MOVW R30,R28
00071a 9671      	ADIW R30,17
00071b 93fa      	ST   -Y,R31
00071c 93ea      	ST   -Y,R30
00071d 01fe      	MOVW R30,R28
00071e 9672      	ADIW R30,18
00071f 93fa      	ST   -Y,R31
000720 93ea      	ST   -Y,R30
000721 01fe      	MOVW R30,R28
000722 9673      	ADIW R30,19
000723 93fa      	ST   -Y,R31
000724 93ea      	ST   -Y,R30
000725 940e 0fb2 	CALL _rtc_get_time
                 ; 0000 02B7     //rtc_get_date(&date,&month,&year);
                 ; 0000 02B8     //print time
                 ; 0000 02B9     sprintf(lcd_buffer, "%u%u:%u%u %s", hour/10,hour%10, min/10,min%10, weekdays[0]);//[wd-1]);
000727 940e 11ac 	CALL SUBOPT_0xF
                +
000729 e7ef     +LDI R30 , LOW ( 2 * _0x0 + ( 381 ) )
00072a e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 381 ) )
                 	__POINTW1FN _0x0,381
00072b 93fa      	ST   -Y,R31
00072c 93ea      	ST   -Y,R30
00072d 89ad      	LDD  R26,Y+21
00072e 940e 1207 	CALL SUBOPT_0x1C
000730 8da9      	LDD  R26,Y+25
000731 940e 1211 	CALL SUBOPT_0x1D
000733 8dac      	LDD  R26,Y+28
000734 940e 1207 	CALL SUBOPT_0x1C
000736 a1a8      	LDD  R26,Y+32
000737 940e 1211 	CALL SUBOPT_0x1D
000739 89ec      	LDD  R30,Y+20
00073a 89fd      	LDD  R31,Y+20+1
00073b 940e 11bf 	CALL SUBOPT_0x12
00073d e184      	LDI  R24,20
00073e 940e 0d97 	CALL _sprintf
000740 9668      	ADIW R28,24
                 ; 0000 02BA     lcd_gotoxy(7,1);
000741 e0e7      	LDI  R30,LOW(7)
000742 93ea      	ST   -Y,R30
000743 940e 1160 	CALL SUBOPT_0x2
                 ; 0000 02BB     lcd_puts(lcd_buffer);
000745 940e 11ac 	CALL SUBOPT_0xF
000747 940e 0f39 	CALL _lcd_puts
                 ; 0000 02BC     //print date
                 ; 0000 02BD     /*sprintf(lcd_buffer, "%u%u %s 20%u%u", date/10,date%10, monthes[month-1], year/10,year%10);
                 ; 0000 02BE     lcd_goto_xy(2,6);
                 ; 0000 02BF     lcd_str(lcd_buffer);   */
                 ; 0000 02C0     if (get_key_status(MENU_ENTER_BTN)) //enter
000749 940e 1180 	CALL SUBOPT_0x7
00074b f041      	BREQ _0xD1
                 ; 0000 02C1     {
                 ; 0000 02C2       if (!get_prev_key_status(MENU_ENTER_BTN))
00074c 940e 1186 	CALL SUBOPT_0x8
00074e f429      	BRNE _0xD2
                 ; 0000 02C3       {
                 ; 0000 02C4 		lcd_clear();
00074f 940e 0edf 	CALL _lcd_clear
                 ; 0000 02C5         main_menu();
000751 de0d      	RCALL _main_menu
                 ; 0000 02C6     	lcd_clear();
000752 940e 0edf 	CALL _lcd_clear
                 ; 0000 02C7       }
                 ; 0000 02C8     }
                 _0xD2:
                 ; 0000 02C9     //delay_ms(200);
                 ; 0000 02CA     //----------wait approx. 0.8s to avoid heating up SHTxx------------------------------
                 ; 0000 02CB     //for (i=0;i<40000;i++);     //(be sure that the compiler doesn't eliminate this line!)
                 ; 0000 02CC     //-----------------------------------------------------------------------------------
                 ; 0000 02CD   }
                 _0xD1:
000754 cf15      	RJMP _0xC6
                 ; 0000 02CE }
                 _0xD3:
000755 cfff      	RJMP _0xD3
                 
                 	.DSEG
                 _0xC4:
0002c2           	.BYTE 0x1C
                 ;
                 ;#pragma rl-
                 ;
                 ;/*void main(void)
                 ;{
                 ;// Declare your local variables here
                 ;
                 ;// Input/Output Ports initialization
                 ;// Port A initialization
                 ;// Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ;// State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ;PORTA=0x00;
                 ;DDRA=0x00;
                 ;
                 ;// Port B initialization
                 ;// Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ;// State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ;PORTB=0x00;
                 ;DDRB=0x00;
                 ;
                 ;// Port C initialization
                 ;// Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ;// State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ;PORTC=0x00;
                 ;DDRC=0x00;
                 ;
                 ;// Port D initialization
                 ;// Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ;// State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ;PORTD=0x00;
                 ;DDRD=0x00;
                 ;
                 ;// Timer/Counter 0 initialization
                 ;// Clock source: System Clock
                 ;// Clock value: Timer 0 Stopped
                 ;// Mode: Normal top=FFh
                 ;// OC0 output: Disconnected
                 ;TCCR0=0x00;
                 ;TCNT0=0x00;
                 ;OCR0=0x00;
                 ;
                 ;// Timer/Counter 1 initialization
                 ;// Clock source: System Clock
                 ;// Clock value: Timer1 Stopped
                 ;// Mode: Normal top=FFFFh
                 ;// OC1A output: Discon.
                 ;// OC1B output: Discon.
                 ;// Noise Canceler: Off
                 ;// Input Capture on Falling Edge
                 ;// Timer1 Overflow Interrupt: Off
                 ;// Input Capture Interrupt: Off
                 ;// Compare A Match Interrupt: Off
                 ;// Compare B Match Interrupt: Off
                 ;TCCR1A=0x00;
                 ;TCCR1B=0x00;
                 ;TCNT1H=0x00;
                 ;TCNT1L=0x00;
                 ;ICR1H=0x00;
                 ;ICR1L=0x00;
                 ;OCR1AH=0x00;
                 ;OCR1AL=0x00;
                 ;OCR1BH=0x00;
                 ;OCR1BL=0x00;
                 ;
                 ;// Timer/Counter 2 initialization
                 ;// Clock source: System Clock
                 ;// Clock value: Timer2 Stopped
                 ;// Mode: Normal top=FFh
                 ;// OC2 output: Disconnected
                 ;ASSR=0x00;
                 ;TCCR2=0x00;
                 ;TCNT2=0x00;
                 ;OCR2=0x00;
                 ;
                 ;// External Interrupt(s) initialization
                 ;// INT0: Off
                 ;// INT1: Off
                 ;// INT2: Off
                 ;MCUCR=0x00;
                 ;MCUCSR=0x00;
                 ;
                 ;// Timer(s)/Counter(s) Interrupt(s) initialization
                 ;TIMSK=0x00;
                 ;
                 ;// Analog Comparator initialization
                 ;// Analog Comparator: Off
                 ;// Analog Comparator Input Capture by Timer/Counter 1: Off
                 ;ACSR=0x80;
                 ;SFIOR=0x00;
                 ;
                 ;while (1)
                 ;      {
                 ;      // Place your code here
                 ;
                 ;      };
                 ;} */
                 ;#include "therm_ds18b20.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;struct __ds18b20_scratch_pad_struct __ds18b20_scratch_pad;
                 ;//uint8_t therm_dq;
                 ;
                 ;/*void therm_input_mode(void)
                 ;{
                 ;	THERM_DDR&=~(1<<THERM_DQ);
                 ;}
                 ;void therm_output_mode(void)
                 ;{
                 ;	THERM_DDR|=(1<<THERM_DQ);
                 ;}
                 ;void therm_low(void)
                 ;{
                 ;	THERM_PORT&=~(1<<THERM_DQ);
                 ;}     */
                 ;/*void therm_high(void)
                 ;{
                 ;	THERM_PORT|=(1<<THERM_DQ);
                 ;}
                 ;void therm_delay(uint16_t delay)
                 ;{
                 ;	while (delay--) #asm("nop");
                 ;}*/
                 ;
                 ;uint8_t therm_reset()
                 ; 0001 001C {
                 
                 	.CSEG
                 _therm_reset:
                 ; 0001 001D 	uint8_t i;
                 ; 0001 001E 	//посилаємо імпульс скидання тривалістю 480 мкс
                 ; 0001 001F 	THERM_LOW();
000756 931a      	ST   -Y,R17
                 ;	i -> R17
000757 98ac      	CBI  0x15,4
                 ; 0001 0020 	THERM_OUTPUT_MODE();
000758 9aa4      	SBI  0x14,4
                 ; 0001 0021 	//therm_delay(us(480));
                 ; 0001 0022 	delay_us(480);
                +
000759 ec80     +LDI R24 , LOW ( 960 )
00075a e093     +LDI R25 , HIGH ( 960 )
                +__DELAY_USW_LOOP :
00075b 9701     +SBIW R24 , 1
00075c f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 960
                 ; 0001 0023 	//повертаємо шину і чекаємо 60 мкс на відповідь
                 ; 0001 0024 	THERM_INPUT_MODE();
00075d 98a4      	CBI  0x14,4
                 ; 0001 0025 	//therm_delay(us(60));
                 ; 0001 0026 	delay_us(60);
                +
00075e ea80     +LDI R24 , LOW ( 160 )
                +__DELAY_USB_LOOP :
00075f 958a     +DEC R24
000760 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 160
                 ; 0001 0027 	//зберігаємо значення на шині і чекаємо завершення 480 мкс періода
                 ; 0001 0028 	i=(THERM_PIN & (1<<THERM_DQ));
000761 b3e3      	IN   R30,0x13
000762 71e0      	ANDI R30,LOW(0x10)
000763 2f1e      	MOV  R17,R30
                 ; 0001 0029 	//therm_delay(us(420));
                 ; 0001 002A 	delay_us(420);
                +
000764 e488     +LDI R24 , LOW ( 840 )
000765 e093     +LDI R25 , HIGH ( 840 )
                +__DELAY_USW_LOOP :
000766 9701     +SBIW R24 , 1
000767 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 840
                 ; 0001 002B 	if ((THERM_PIN & (1<<THERM_DQ))==i) return 1;
000768 b3e3      	IN   R30,0x13
000769 71e0      	ANDI R30,LOW(0x10)
00076a 171e      	CP   R17,R30
00076b f411      	BRNE _0x20003
00076c e0e1      	LDI  R30,LOW(1)
00076d c1bc      	RJMP _0x2100010
                 ; 0001 002C 	//повертаємо результат виконання (presence pulse) (0=OK, 1=WRONG)
                 ; 0001 002D 	return 0;
                 _0x20003:
00076e e0e0      	LDI  R30,LOW(0)
00076f c1ba      	RJMP _0x2100010
                 ; 0001 002E }
                 ;
                 ;void therm_write_bit(uint8_t _bit)
                 ; 0001 0031 {
                 _therm_write_bit:
                 ; 0001 0032 	//переводимо шину в стан лог. 0 на 1 мкс
                 ; 0001 0033 	THERM_LOW();
                 ;	_bit -> Y+0
000770 98ac      	CBI  0x15,4
                 ; 0001 0034 	THERM_OUTPUT_MODE();
000771 9aa4      	SBI  0x14,4
                 ; 0001 0035 	//therm_delay(us(1));
                 ; 0001 0036 	delay_us(1);
                +
000772 e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
000773 958a     +DEC R24
000774 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
                 ; 0001 0037 	//якщо пишемо 1, відпускаємо шину (якщо 0 тримаємо в стані лог. 0)
                 ; 0001 0038 	if (_bit) THERM_INPUT_MODE();
000775 81e8      	LD   R30,Y
000776 30e0      	CPI  R30,0
000777 f009      	BREQ _0x20004
000778 98a4      	CBI  0x14,4
                 ; 0001 0039 	//чекаємо 60мкм і відпускаємо шину
                 ; 0001 003A 	//therm_delay(us(60));
                 ; 0001 003B 	delay_us(60);
                 _0x20004:
                +
000779 ea80     +LDI R24 , LOW ( 160 )
                +__DELAY_USB_LOOP :
00077a 958a     +DEC R24
00077b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 160
                 ; 0001 003C 	THERM_INPUT_MODE();
00077c 98a4      	CBI  0x14,4
                 ; 0001 003D }
00077d 9621      	ADIW R28,1
00077e 9508      	RET
                 ;
                 ;uint8_t therm_read_bit(void)
                 ; 0001 0040 {
                 _therm_read_bit:
                 ; 0001 0041 	uint8_t _bit=0;
                 ; 0001 0042 	//переводимо шину в лог. 0 на 1 мкс
                 ; 0001 0043 	THERM_LOW();
00077f 931a      	ST   -Y,R17
                 ;	_bit -> R17
000780 e010      	LDI  R17,0
000781 98ac      	CBI  0x15,4
                 ; 0001 0044 	THERM_OUTPUT_MODE();
000782 9aa4      	SBI  0x14,4
                 ; 0001 0045 	//therm_delay(us(1));
                 ; 0001 0046 	delay_us(1);
                +
000783 e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
000784 958a     +DEC R24
000785 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
                 ; 0001 0047 	//відпускаємо шину і чекаємо 14 мкс
                 ; 0001 0048 	THERM_INPUT_MODE();
000786 98a4      	CBI  0x14,4
                 ; 0001 0049 	//therm_delay(us(14));
                 ; 0001 004A 	delay_us(14);
                +
000787 e285     +LDI R24 , LOW ( 37 )
                +__DELAY_USB_LOOP :
000788 958a     +DEC R24
000789 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 37
                 ; 0001 004B 	//читаємо біт з шини
                 ; 0001 004C 	if (THERM_PIN&(1<<THERM_DQ)) _bit=1;
00078a 999c      	SBIC 0x13,4
00078b e011      	LDI  R17,LOW(1)
                 ; 0001 004D 	//чекаємо 45 мкс до закінчення і вертаємо прочитане значення
                 ; 0001 004E 	//therm_delay(us(45));
                 ; 0001 004F 	delay_us(45);
                +
00078c e788     +LDI R24 , LOW ( 120 )
                +__DELAY_USB_LOOP :
00078d 958a     +DEC R24
00078e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 120
                 ; 0001 0050 	return _bit;
00078f 2fe1      	MOV  R30,R17
000790 c199      	RJMP _0x2100010
                 ; 0001 0051 }
                 ;
                 ;uint8_t therm_read_byte(void)
                 ; 0001 0054 {
                 _therm_read_byte:
                 ; 0001 0055 	uint8_t i=8, n=0;
                 ; 0001 0056 	while (i--)
000791 931a      	ST   -Y,R17
000792 930a      	ST   -Y,R16
                 ;	i -> R17
                 ;	n -> R16
000793 e018      	LDI  R17,8
000794 e000      	LDI  R16,0
                 _0x20006:
000795 2fe1      	MOV  R30,R17
000796 5011      	SUBI R17,1
000797 30e0      	CPI  R30,0
000798 f059      	BREQ _0x20008
                 ; 0001 0057 	{
                 ; 0001 0058 		//зсуваємо на 1 розряд вправо і зберігаємо прочитане значення
                 ; 0001 0059 		n>>=1;
000799 940e 1204 	CALL SUBOPT_0x1B
00079b 95f5      	ASR  R31
00079c 95e7      	ROR  R30
00079d 2f0e      	MOV  R16,R30
                 ; 0001 005A 		n|=(therm_read_bit()<<7);
00079e dfe0      	RCALL _therm_read_bit
00079f 95e7      	ROR  R30
0007a0 e0e0      	LDI  R30,0
0007a1 95e7      	ROR  R30
0007a2 2b0e      	OR   R16,R30
                 ; 0001 005B 	}
0007a3 cff1      	RJMP _0x20006
                 _0x20008:
                 ; 0001 005C 	return n;
0007a4 2fe0      	MOV  R30,R16
0007a5 9109      	LD   R16,Y+
0007a6 9119      	LD   R17,Y+
0007a7 9508      	RET
                 ; 0001 005D }
                 ;
                 ;void therm_write_byte(uint8_t byte)
                 ; 0001 0060 {
                 _therm_write_byte:
                 ; 0001 0061 	uint8_t i=8;
                 ; 0001 0062 	while (i--)
0007a8 931a      	ST   -Y,R17
                 ;	byte -> Y+1
                 ;	i -> R17
0007a9 e018      	LDI  R17,8
                 _0x20009:
0007aa 2fe1      	MOV  R30,R17
0007ab 5011      	SUBI R17,1
0007ac 30e0      	CPI  R30,0
0007ad f049      	BREQ _0x2000B
                 ; 0001 0063 	{
                 ; 0001 0064 		//пишемо молодший біт і зсуваємо на 1 розряд вправо для виводу наступного біта
                 ; 0001 0065 		therm_write_bit(byte&1);
0007ae 81e9      	LDD  R30,Y+1
0007af 70e1      	ANDI R30,LOW(0x1)
0007b0 93ea      	ST   -Y,R30
0007b1 dfbe      	RCALL _therm_write_bit
                 ; 0001 0066 		byte>>=1;
0007b2 81e9      	LDD  R30,Y+1
0007b3 940e 1240 	CALL SUBOPT_0x25
0007b5 83e9      	STD  Y+1,R30
                 ; 0001 0067 	}
0007b6 cff3      	RJMP _0x20009
                 _0x2000B:
                 ; 0001 0068 }
0007b7 8118      	LDD  R17,Y+0
0007b8 9622      	ADIW R28,2
0007b9 9508      	RET
                 ;
                 ;uint8_t therm_crc8(uint8_t *data, uint8_t num_bytes)
                 ; 0001 006B {
                 _therm_crc8:
                 ; 0001 006C 	uint8_t byte_ctr, cur_byte, bit_ctr, crc=0;
                 ; 0001 006D 
                 ; 0001 006E 	for (byte_ctr=0; byte_ctr<num_bytes; byte_ctr++)
0007ba 940e 1705 	CALL __SAVELOCR4
                 ;	*data -> Y+5
                 ;	num_bytes -> Y+4
                 ;	byte_ctr -> R17
                 ;	cur_byte -> R16
                 ;	bit_ctr -> R19
                 ;	crc -> R18
0007bc e020      	LDI  R18,0
0007bd e010      	LDI  R17,LOW(0)
                 _0x2000D:
0007be 81ec      	LDD  R30,Y+4
0007bf 171e      	CP   R17,R30
0007c0 f500      	BRSH _0x2000E
                 ; 0001 006F 	{
                 ; 0001 0070 		cur_byte=data[byte_ctr];
0007c1 81ad      	LDD  R26,Y+5
0007c2 81be      	LDD  R27,Y+5+1
0007c3 27ee      	CLR  R30
0007c4 0fa1      	ADD  R26,R17
0007c5 1fbe      	ADC  R27,R30
0007c6 910c      	LD   R16,X
                 ; 0001 0071 		for (bit_ctr=0; bit_ctr<8; cur_byte>>=1, bit_ctr++)
0007c7 e030      	LDI  R19,LOW(0)
                 _0x20010:
0007c8 3038      	CPI  R19,8
0007c9 f4a8      	BRSH _0x20011
                 ; 0001 0072 			if ((cur_byte ^ crc) & 1) crc = ((crc ^ 0x18) >> 1) | 0x80;
0007ca 2fe2      	MOV  R30,R18
0007cb 27e0      	EOR  R30,R16
0007cc 70e1      	ANDI R30,LOW(0x1)
0007cd f031      	BREQ _0x20012
0007ce e1e8      	LDI  R30,LOW(24)
0007cf 27e2      	EOR  R30,R18
0007d0 940e 1240 	CALL SUBOPT_0x25
0007d2 68e0      	ORI  R30,0x80
0007d3 c003      	RJMP _0x20021
                 ; 0001 0073 			else crc>>=1;
                 _0x20012:
0007d4 2fe2      	MOV  R30,R18
0007d5 940e 1240 	CALL SUBOPT_0x25
                 _0x20021:
0007d7 2f2e      	MOV  R18,R30
                 ; 0001 0074 	}
0007d8 940e 1204 	CALL SUBOPT_0x1B
0007da 95f5      	ASR  R31
0007db 95e7      	ROR  R30
0007dc 2f0e      	MOV  R16,R30
0007dd 5f3f      	SUBI R19,-1
0007de cfe9      	RJMP _0x20010
                 _0x20011:
0007df 5f1f      	SUBI R17,-1
0007e0 cfdd      	RJMP _0x2000D
                 _0x2000E:
                 ; 0001 0075 	return crc;
0007e1 2fe2      	MOV  R30,R18
0007e2 940e 170c 	CALL __LOADLOCR4
0007e4 9627      	ADIW R28,7
0007e5 9508      	RET
                 ; 0001 0076 }
                 ;
                 ;uint8_t therm_init(int8_t temp_low, int8_t temp_high, uint8_t resolution)
                 ; 0001 0079 {
                 _therm_init:
                 ; 0001 007A 	resolution=(resolution<<5)|0x1f;
                 ;	temp_low -> Y+2
                 ;	temp_high -> Y+1
                 ;	resolution -> Y+0
0007e6 81e8      	LD   R30,Y
0007e7 95e2      	SWAP R30
0007e8 7fe0      	ANDI R30,0xF0
0007e9 0fee      	LSL  R30
0007ea 61ef      	ORI  R30,LOW(0x1F)
0007eb 83e8      	ST   Y,R30
                 ; 0001 007B 	//ініціалізуємо давач
                 ; 0001 007C 	if (therm_reset()) return 1;
0007ec df69      	RCALL _therm_reset
0007ed 30e0      	CPI  R30,0
0007ee f011      	BREQ _0x20014
0007ef e0e1      	LDI  R30,LOW(1)
0007f0 c15f      	RJMP _0x210000F
                 ; 0001 007D 	therm_write_byte(THERM_CMD_SKIPROM);
                 _0x20014:
0007f1 940e 1244 	CALL SUBOPT_0x26
                 ; 0001 007E 	therm_write_byte(THERM_CMD_WSCRATCHPAD);
0007f3 e4ee      	LDI  R30,LOW(78)
0007f4 93ea      	ST   -Y,R30
0007f5 dfb2      	RCALL _therm_write_byte
                 ; 0001 007F 	therm_write_byte(temp_high);
0007f6 81e9      	LDD  R30,Y+1
0007f7 93ea      	ST   -Y,R30
0007f8 dfaf      	RCALL _therm_write_byte
                 ; 0001 0080 	therm_write_byte(temp_low);
0007f9 81ea      	LDD  R30,Y+2
0007fa 93ea      	ST   -Y,R30
0007fb dfac      	RCALL _therm_write_byte
                 ; 0001 0081 	therm_write_byte(resolution);
0007fc 81e8      	LD   R30,Y
0007fd 93ea      	ST   -Y,R30
0007fe dfa9      	RCALL _therm_write_byte
                 ; 0001 0082 	therm_reset();
0007ff df56      	RCALL _therm_reset
                 ; 0001 0083 	therm_write_byte(THERM_CMD_SKIPROM);
000800 940e 1244 	CALL SUBOPT_0x26
                 ; 0001 0084 	therm_write_byte(THERM_CMD_CPYSCRATCHPAD);
000802 e4e8      	LDI  R30,LOW(72)
000803 93ea      	ST   -Y,R30
000804 dfa3      	RCALL _therm_write_byte
                 ; 0001 0085 	delay_ms(15);
000805 e0ef      	LDI  R30,LOW(15)
000806 e0f0      	LDI  R31,HIGH(15)
000807 93fa      	ST   -Y,R31
000808 93ea      	ST   -Y,R30
000809 940e 1426 	CALL _delay_ms
                 ; 0001 0086 	return 0;
00080b e0e0      	LDI  R30,LOW(0)
00080c c143      	RJMP _0x210000F
                 ; 0001 0087 }
                 ;
                 ;uint8_t therm_read_spd(void)
                 ; 0001 008A {
                 _therm_read_spd:
                 ; 0001 008B 	uint8_t i=0, *p;
                 ; 0001 008C 
                 ; 0001 008D 	p = (uint8_t*) &__ds18b20_scratch_pad;
00080d 940e 1705 	CALL __SAVELOCR4
                 ;	i -> R17
                 ;	*p -> R18,R19
00080f e010      	LDI  R17,0
                +
000810 e227     +LDI R18 , LOW ( ___ds18b20_scratch_pad )
000811 e033     +LDI R19 , HIGH ( ___ds18b20_scratch_pad )
                 	__POINTWRM 18,19,___ds18b20_scratch_pad
                 ; 0001 008E 	do
                 _0x20016:
                 ; 0001 008F 		*(p++)=therm_read_byte();
000812 933f      	PUSH R19
000813 932f      	PUSH R18
                +
000814 5f2f     +SUBI R18 , LOW ( - 1 )
000815 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000816 df7a      	RCALL _therm_read_byte
000817 91af      	POP  R26
000818 91bf      	POP  R27
000819 93ec      	ST   X,R30
                 ; 0001 0090 	while(++i<9);
00081a 5f1f      	SUBI R17,-LOW(1)
00081b 3019      	CPI  R17,9
00081c f3a8      	BRLO _0x20016
                 ; 0001 0091 	if (therm_crc8((uint8_t*)&__ds18b20_scratch_pad,8)!=__ds18b20_scratch_pad.crc)
00081d e2e7      	LDI  R30,LOW(___ds18b20_scratch_pad)
00081e e0f3      	LDI  R31,HIGH(___ds18b20_scratch_pad)
00081f 93fa      	ST   -Y,R31
000820 93ea      	ST   -Y,R30
000821 e0e8      	LDI  R30,LOW(8)
000822 93ea      	ST   -Y,R30
000823 df96      	RCALL _therm_crc8
000824 2fae      	MOV  R26,R30
                +
000825 91e0 032f+LDS R30 , ___ds18b20_scratch_pad + ( 8 )
                 	__GETB1MN ___ds18b20_scratch_pad,8
000827 17ea      	CP   R30,R26
000828 f011      	BREQ _0x20018
                 ; 0001 0092 		return 1;
000829 e0e1      	LDI  R30,LOW(1)
00082a c001      	RJMP _0x2100011
                 ; 0001 0093 	return 0;
                 _0x20018:
00082b e0e0      	LDI  R30,LOW(0)
                 _0x2100011:
00082c 940e 170c 	CALL __LOADLOCR4
00082e 9624      	ADIW R28,4
00082f 9508      	RET
                 ; 0001 0094 }
                 ;
                 ;uint8_t therm_read_temperature(float *temp)
                 ; 0001 0097 {
                 _therm_read_temperature:
                 ; 0001 0098 	uint8_t digit, decimal, resolution, sign;
                 ; 0001 0099 	uint16_t meas, bit_mask[4]={0x0008, 0x000c, 0x000e, 0x000f};
                 ; 0001 009A 
                 ; 0001 009B 	//скинути, пропустити процедуру перевірки серійного номера ROM і почати вимірювання і перетворення температури
                 ; 0001 009C 	if (therm_reset()) return 1;
000830 9728      	SBIW R28,8
000831 e0e8      	LDI  R30,LOW(8)
000832 83e8      	ST   Y,R30
000833 e0e0      	LDI  R30,LOW(0)
000834 83e9      	STD  Y+1,R30
000835 e0ec      	LDI  R30,LOW(12)
000836 83ea      	STD  Y+2,R30
000837 e0e0      	LDI  R30,LOW(0)
000838 83eb      	STD  Y+3,R30
000839 e0ee      	LDI  R30,LOW(14)
00083a 83ec      	STD  Y+4,R30
00083b e0e0      	LDI  R30,LOW(0)
00083c 83ed      	STD  Y+5,R30
00083d e0ef      	LDI  R30,LOW(15)
00083e 83ee      	STD  Y+6,R30
00083f e0e0      	LDI  R30,LOW(0)
000840 83ef      	STD  Y+7,R30
000841 940e 1703 	CALL __SAVELOCR6
                 ;	*temp -> Y+14
                 ;	digit -> R17
                 ;	decimal -> R16
                 ;	resolution -> R19
                 ;	sign -> R18
                 ;	meas -> R20,R21
                 ;	bit_mask -> Y+6
000843 df12      	RCALL _therm_reset
000844 30e0      	CPI  R30,0
000845 f029      	BREQ _0x20019
000846 e0e1      	LDI  R30,LOW(1)
000847 940e 170a 	CALL __LOADLOCR6
000849 940c 0b7d 	JMP  _0x210000D
                 ; 0001 009D 	therm_write_byte(THERM_CMD_SKIPROM);
                 _0x20019:
00084b 940e 1244 	CALL SUBOPT_0x26
                 ; 0001 009E 	therm_write_byte(THERM_CMD_CONVERTTEMP);
00084d e4e4      	LDI  R30,LOW(68)
00084e 93ea      	ST   -Y,R30
00084f df58      	RCALL _therm_write_byte
                 ; 0001 009F 	//чекаємо до закінчення перетворення
                 ; 0001 00A0 	//if (!therm_read_bit()) return 1;
                 ; 0001 00A1 	while(!therm_read_bit());
                 _0x2001A:
000850 df2e      	RCALL _therm_read_bit
000851 30e0      	CPI  R30,0
000852 f3e9      	BREQ _0x2001A
                 ; 0001 00A2 	//скидаємо, пропускаємо ROM і посилаємо команду зчитування Scratchpad
                 ; 0001 00A3 	therm_reset();
000853 df02      	RCALL _therm_reset
                 ; 0001 00A4 	therm_write_byte(THERM_CMD_SKIPROM);
000854 940e 1244 	CALL SUBOPT_0x26
                 ; 0001 00A5 	therm_write_byte(THERM_CMD_RSCRATCHPAD);
000856 ebee      	LDI  R30,LOW(190)
000857 93ea      	ST   -Y,R30
000858 df4f      	RCALL _therm_write_byte
                 ; 0001 00A6 	if (therm_read_spd()) return 1;
000859 dfb3      	RCALL _therm_read_spd
00085a 30e0      	CPI  R30,0
00085b f029      	BREQ _0x2001D
00085c e0e1      	LDI  R30,LOW(1)
00085d 940e 170a 	CALL __LOADLOCR6
00085f 940c 0b7d 	JMP  _0x210000D
                 ; 0001 00A7 	therm_reset();
                 _0x2001D:
000861 def4      	RCALL _therm_reset
                 ; 0001 00A8 	resolution=(__ds18b20_scratch_pad.conf_register>>5) & 3;
                +
000862 91a0 032b+LDS R26 , ___ds18b20_scratch_pad + ( 4 )
                 	__GETB2MN ___ds18b20_scratch_pad,4
000864 e0b0      	LDI  R27,0
000865 e0e5      	LDI  R30,LOW(5)
000866 940e 1606 	CALL __ASRW12
000868 70e3      	ANDI R30,LOW(0x3)
000869 2f3e      	MOV  R19,R30
                 ; 0001 00A9     //отримуємо молодший і старший байти температури
                 ; 0001 00AA 	meas=__ds18b20_scratch_pad.temp_lsb;  // LSB
00086a 9140 0327 	LDS  R20,___ds18b20_scratch_pad
00086c 2755      	CLR  R21
                 ; 0001 00AB 	meas|=((uint16_t)__ds18b20_scratch_pad.temp_msb) << 8; // MSB
                +
00086d 91f0 0328+LDS R31 , ___ds18b20_scratch_pad + ( 1 )
                 	__GETB1HMN ___ds18b20_scratch_pad,1
00086f e0e0      	LDI  R30,LOW(0)
                +
000870 2b4e     +OR R20 , R30
000871 2b5f     +OR R21 , R31
                 	__ORWRR 20,21,30,31
                 ; 0001 00AC 	//перевіряємо на мінусову температуру
                 ; 0001 00AD 	if (meas & 0x8000)
000872 ff57      	SBRS R21,7
000873 c008      	RJMP _0x2001E
                 ; 0001 00AE 	{
                 ; 0001 00AF 		sign=1;  //відмічаємо мінусову температуру
000874 e021      	LDI  R18,LOW(1)
                 ; 0001 00B0 		meas^=0xffff;  //перетворюємо в плюсову
000875 efef      	LDI  R30,LOW(65535)
000876 efff      	LDI  R31,HIGH(65535)
                +
000877 274e     +EOR R20 , R30
000878 275f     +EOR R21 , R31
                 	__EORWRR 20,21,30,31
                 ; 0001 00B1 		meas++;
                +
000879 5f4f     +SUBI R20 , LOW ( - 1 )
00087a 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
                 ; 0001 00B2 	}
                 ; 0001 00B3 	else sign=0;
00087b c001      	RJMP _0x2001F
                 _0x2001E:
00087c e020      	LDI  R18,LOW(0)
                 ; 0001 00B4 	//зберігаємо цілу і дробову частини температури
                 ; 0001 00B5 	digit=(uint8_t)(meas >> 4); //зберігаємо цілу частину
                 _0x2001F:
00087d 01fa      	MOVW R30,R20
00087e 940e 1614 	CALL __LSRW4
000880 2f1e      	MOV  R17,R30
                 ; 0001 00B6 	decimal=(uint8_t)(meas & bit_mask[resolution]);	//отримуємо дробову частину
000881 2fe3      	MOV  R30,R19
000882 e0f0      	LDI  R31,0
000883 01de      	MOVW R26,R28
000884 9616      	ADIW R26,6
000885 0fee      	LSL  R30
000886 1fff      	ROL  R31
000887 0fae      	ADD  R26,R30
000888 1fbf      	ADC  R27,R31
000889 91ec      	LD   R30,X
00088a 23e4      	AND  R30,R20
00088b 2f0e      	MOV  R16,R30
                 ; 0001 00B7 	*temp=digit+decimal*0.0625;
00088c 940e 11df 	CALL SUBOPT_0x16
00088e 93ff      	PUSH R31
00088f 93ef      	PUSH R30
000890 940e 1204 	CALL SUBOPT_0x1B
000892 940e 1248 	CALL SUBOPT_0x27
                +
000894 e0a0     +LDI R26 , LOW ( 0x3D800000 )
000895 e0b0     +LDI R27 , HIGH ( 0x3D800000 )
000896 e880     +LDI R24 , BYTE3 ( 0x3D800000 )
000897 e39d     +LDI R25 , BYTE4 ( 0x3D800000 )
                 	__GETD2N 0x3D800000
000898 940e 153b 	CALL __MULF12
00089a 91af      	POP  R26
00089b 91bf      	POP  R27
00089c 940e 1628 	CALL __CWD2
00089e 940e 16df 	CALL __CDF2
0008a0 940e 14eb 	CALL __ADDF12
0008a2 85ae      	LDD  R26,Y+14
0008a3 85bf      	LDD  R27,Y+14+1
0008a4 940e 16c4 	CALL __PUTDP1
                 ; 0001 00B8 	if (sign) *temp=-(*temp); //ставемо знак мінус, якщо мінусова температура
0008a6 3020      	CPI  R18,0
0008a7 f041      	BREQ _0x20020
0008a8 85ae      	LDD  R26,Y+14
0008a9 85bf      	LDD  R27,Y+14+1
0008aa 940e 16be 	CALL __GETD1P
0008ac 940e 1445 	CALL __ANEGF1
0008ae 940e 16c4 	CALL __PUTDP1
                 ; 0001 00B9 	return 0;
                 _0x20020:
0008b0 e0e0      	LDI  R30,LOW(0)
0008b1 940e 170a 	CALL __LOADLOCR6
0008b3 940c 0b7d 	JMP  _0x210000D
                 ; 0001 00BA }
                 ;/***********************************************************************************
                 ;Project:          SHTxx library
                 ;Filename:         shtxx.c
                 ;Processor:        AVR family
                 ;Author:           (C) Andriy Holovatyy
                 ;***********************************************************************************/
                 ;
                 ;#include "shtxx.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <math.h>   //math library
                 ;
                 ;/* константи для обчислення температури і вологості */
                 ;//const float C1=-4.0;              // for 12 Bit
                 ;//const float C2=+0.0405;           // for 12 Bit
                 ;//const float C3=-0.0000028;        // for 12 Bit
                 ;
                 ;/*const float C1=-2.0468;           // for 12 Bit
                 ;const float C2=+0.0367;           // for 12 Bit
                 ;const float C3=-0.0000015955;     // for 12 Bit
                 ;
                 ;const float T1=+0.01;             // for 14 Bit @ 5V
                 ;const float T2=+0.00008;           // for 14 Bit @ 5V
                 ;
                 ;*/
                 ;
                 ;const float C1=-2.0468;           // for 8 Bit
                 
                 	.DSEG
                 ;const float C2=+0.5872;           // for 8 Bit
                 ;const float C3=-0.00040845;       // for 8 Bit
                 ;
                 ;const float T1=+0.01;             // for 12 Bit @ 5V
                 ;const float T2=+0.00128;          // for 12 Bit @ 5V
                 ;
                 ;void sht_init(void)
                 ; 0002 0021 {
                 
                 	.CSEG
                 _sht_init:
                 ; 0002 0022   SHT_PORT=0x00;
0008b5 e0e0      	LDI  R30,LOW(0)
0008b6 bbe5      	OUT  0x15,R30
                 ; 0002 0023   SHT_DDR=1<<SHT_SCK;
0008b7 e0e4      	LDI  R30,LOW(4)
0008b8 bbe4      	OUT  0x14,R30
                 ; 0002 0024 }
0008b9 9508      	RET
                 ;
                 ;//----------------------------------------------------------------------------------
                 ;char s_write_byte(unsigned char _value)
                 ; 0002 0028 //----------------------------------------------------------------------------------
                 ; 0002 0029 // writes a byte on the Sensibus and checks the acknowledge
                 ; 0002 002A {
                 _s_write_byte:
                 ; 0002 002B   unsigned char i,error=0;
                 ; 0002 002C   SHT_OUTPUT_MODE();
0008ba 931a      	ST   -Y,R17
0008bb 930a      	ST   -Y,R16
                 ;	_value -> Y+2
                 ;	i -> R17
                 ;	error -> R16
0008bc e000      	LDI  R16,0
0008bd 9aa3      	SBI  0x14,3
                 ; 0002 002D   for (i=0x80;i>0;i/=2)             //shift bit for masking
0008be e810      	LDI  R17,LOW(128)
                 _0x40009:
0008bf 3011      	CPI  R17,1
0008c0 f078      	BRLO _0x4000A
                 ; 0002 002E   {
                 ; 0002 002F     if (i & _value) SHT_DATA_HIGH(); //masking value with i , write to SENSI-BUS
0008c1 81ea      	LDD  R30,Y+2
0008c2 23e1      	AND  R30,R17
0008c3 f011      	BREQ _0x4000B
0008c4 9aab      	SBI  0x15,3
                 ; 0002 0030     else
0008c5 c001      	RJMP _0x4000C
                 _0x4000B:
                 ; 0002 0031      SHT_DATA_LOW();
0008c6 98ab      	CBI  0x15,3
                 ; 0002 0032     delay_us(1);
                 _0x4000C:
0008c7 940e 124d 	CALL SUBOPT_0x28
                 ; 0002 0033     SHT_SCK_HIGH(); //clk for SENSI-BUS
                 ; 0002 0034     delay_us(5);    //pulswith approx. 5 us
                +
0008c9 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0008ca 958a     +DEC R24
0008cb f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
                 ; 0002 0035     SHT_SCK_LOW();
0008cc 98aa      	CBI  0x15,2
                 ; 0002 0036   }
0008cd 940e 1252 	CALL SUBOPT_0x29
0008cf cfef      	RJMP _0x40009
                 _0x4000A:
                 ; 0002 0037   SHT_INPUT_MODE(); //release DATA-line
0008d0 98a3      	CBI  0x14,3
                 ; 0002 0038   delay_us(1);
0008d1 940e 124d 	CALL SUBOPT_0x28
                 ; 0002 0039   SHT_SCK_HIGH(); //clk #9 for ack
                 ; 0002 003A   delay_us(1);
                +
0008d3 e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
0008d4 958a     +DEC R24
0008d5 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
                 ; 0002 003B   error=(SHT_PIN&(1<<SHT_DATA));                       //check ack (DATA will be pulled down by SHT11)
0008d6 b3e3      	IN   R30,0x13
0008d7 70e8      	ANDI R30,LOW(0x8)
0008d8 2f0e      	MOV  R16,R30
                 ; 0002 003C   SHT_SCK_LOW();
0008d9 940e 125a 	CALL SUBOPT_0x2A
                 ; 0002 003D   delay_us(1);
                 ; 0002 003E   return error;                     //error=1 in case of no acknowledge
0008db 2fe0      	MOV  R30,R16
0008dc 8119      	LDD  R17,Y+1
0008dd 8108      	LDD  R16,Y+0
0008de c071      	RJMP _0x210000F
                 ; 0002 003F }
                 ;
                 ;//----------------------------------------------------------------------------------
                 ;char s_read_byte(unsigned char ack)
                 ; 0002 0043 //----------------------------------------------------------------------------------
                 ; 0002 0044 // reads a byte form the Sensibus and gives an acknowledge in case of "ack=1"
                 ; 0002 0045 {
                 _s_read_byte:
                 ; 0002 0046   unsigned char i,val=0;
                 ; 0002 0047   SHT_INPUT_MODE(); //release DATA-line
0008df 931a      	ST   -Y,R17
0008e0 930a      	ST   -Y,R16
                 ;	ack -> Y+2
                 ;	i -> R17
                 ;	val -> R16
0008e1 e000      	LDI  R16,0
0008e2 98a3      	CBI  0x14,3
                 ; 0002 0048   for (i=0x80;i>0;i/=2)  //shift bit for masking
0008e3 e810      	LDI  R17,LOW(128)
                 _0x4000E:
0008e4 3011      	CPI  R17,1
0008e5 f048      	BRLO _0x4000F
                 ; 0002 0049   {
                 ; 0002 004A     SHT_SCK_HIGH();    //clk for SENSI-BUS
0008e6 940e 125f 	CALL SUBOPT_0x2B
                 ; 0002 004B     delay_us(1);
                 ; 0002 004C     if ((SHT_PIN & (1<<SHT_DATA))) val=(val | i);        //read bit
0008e8 999b      	SBIC 0x13,3
0008e9 2b01      	OR   R16,R17
                 ; 0002 004D     SHT_SCK_LOW();
0008ea 940e 125a 	CALL SUBOPT_0x2A
                 ; 0002 004E     delay_us(1);
                 ; 0002 004F   }
0008ec 940e 1252 	CALL SUBOPT_0x29
0008ee cff5      	RJMP _0x4000E
                 _0x4000F:
                 ; 0002 0050   if (ack) //in case of "ack==1" pull down DATA-Line
0008ef 81ea      	LDD  R30,Y+2
0008f0 30e0      	CPI  R30,0
0008f1 f029      	BREQ _0x40011
                 ; 0002 0051   {
                 ; 0002 0052    SHT_OUTPUT_MODE();
0008f2 9aa3      	SBI  0x14,3
                 ; 0002 0053    SHT_DATA_LOW();
0008f3 98ab      	CBI  0x15,3
                 ; 0002 0054    delay_us(1);
                +
0008f4 e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
0008f5 958a     +DEC R24
0008f6 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
                 ; 0002 0055   }
                 ; 0002 0056   SHT_SCK_HIGH();        //clk #9 for ack
                 _0x40011:
0008f7 9aaa      	SBI  0x15,2
                 ; 0002 0057   delay_us(5);  //pulswith approx. 5 us
                +
0008f8 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0008f9 958a     +DEC R24
0008fa f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
                 ; 0002 0058   SHT_SCK_LOW();
0008fb 940e 125a 	CALL SUBOPT_0x2A
                 ; 0002 0059   delay_us(1);
                 ; 0002 005A   SHT_INPUT_MODE(); //release DATA-line
0008fd 98a3      	CBI  0x14,3
                 ; 0002 005B   return val;
0008fe 2fe0      	MOV  R30,R16
0008ff 8119      	LDD  R17,Y+1
000900 8108      	LDD  R16,Y+0
000901 c04e      	RJMP _0x210000F
                 ; 0002 005C }
                 ;
                 ;//----------------------------------------------------------------------------------
                 ;void s_transstart(void)
                 ; 0002 0060 //----------------------------------------------------------------------------------
                 ; 0002 0061 // generates a transmission start
                 ; 0002 0062 //       _____         ________
                 ; 0002 0063 // DATA:      |_______|
                 ; 0002 0064 //           ___     ___
                 ; 0002 0065 // SCK : ___|   |___|   |______
                 ; 0002 0066 {
                 _s_transstart:
                 ; 0002 0067   //Initial state
                 ; 0002 0068   SHT_OUTPUT_MODE();
000902 9aa3      	SBI  0x14,3
                 ; 0002 0069   SHT_DATA_HIGH();
000903 9aab      	SBI  0x15,3
                 ; 0002 006A   SHT_SCK_LOW();
000904 98aa      	CBI  0x15,2
                 ; 0002 006B   delay_us(1);
000905 940e 124d 	CALL SUBOPT_0x28
                 ; 0002 006C 
                 ; 0002 006D   SHT_SCK_HIGH();
                 ; 0002 006E   delay_us(1);
                +
000907 e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
000908 958a     +DEC R24
000909 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
                 ; 0002 006F 
                 ; 0002 0070   SHT_DATA_LOW();
00090a 98ab      	CBI  0x15,3
                 ; 0002 0071   delay_us(1);
                +
00090b e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
00090c 958a     +DEC R24
00090d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
                 ; 0002 0072 
                 ; 0002 0073   SHT_SCK_LOW();
00090e 98aa      	CBI  0x15,2
                 ; 0002 0074   delay_us(5);
                +
00090f e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000910 958a     +DEC R24
000911 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
                 ; 0002 0075 
                 ; 0002 0076   SHT_SCK_HIGH();
000912 940e 125f 	CALL SUBOPT_0x2B
                 ; 0002 0077   delay_us(1);
                 ; 0002 0078 
                 ; 0002 0079   SHT_DATA_HIGH();
000914 9aab      	SBI  0x15,3
                 ; 0002 007A   delay_us(1);
                +
000915 e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
000916 958a     +DEC R24
000917 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
                 ; 0002 007B   SHT_SCK_LOW();
000918 940e 125a 	CALL SUBOPT_0x2A
                 ; 0002 007C   delay_us(1);
                 ; 0002 007D }
00091a 9508      	RET
                 ;
                 ;//----------------------------------------------------------------------------------
                 ;void s_connectionreset(void)
                 ; 0002 0081 //----------------------------------------------------------------------------------
                 ; 0002 0082 // communication reset: DATA-line=1 and at least 9 SCK cycles followed by transstart
                 ; 0002 0083 //       _____________________________________________________         ________
                 ; 0002 0084 // DATA:                                                      |_______|
                 ; 0002 0085 //          _    _    _    _    _    _    _    _    _        ___     ___
                 ; 0002 0086 // SCK : __| |__| |__| |__| |__| |__| |__| |__| |__| |______|   |___|   |______
                 ; 0002 0087 {
                 _s_connectionreset:
                 ; 0002 0088   unsigned char i;
                 ; 0002 0089   //Initial state
                 ; 0002 008A   SHT_OUTPUT_MODE();
00091b 931a      	ST   -Y,R17
                 ;	i -> R17
00091c 9aa3      	SBI  0x14,3
                 ; 0002 008B   SHT_DATA_HIGH();
00091d 9aab      	SBI  0x15,3
                 ; 0002 008C   SHT_SCK_LOW();
00091e 940e 125a 	CALL SUBOPT_0x2A
                 ; 0002 008D   delay_us(1);
                 ; 0002 008E   for(i=0;i<9;i++)                  //9 SCK cycles
000920 e010      	LDI  R17,LOW(0)
                 _0x40013:
000921 3019      	CPI  R17,9
000922 f430      	BRSH _0x40014
                 ; 0002 008F   {
                 ; 0002 0090     SHT_SCK_HIGH();
000923 940e 125f 	CALL SUBOPT_0x2B
                 ; 0002 0091     delay_us(1);
                 ; 0002 0092     SHT_SCK_LOW();
000925 940e 125a 	CALL SUBOPT_0x2A
                 ; 0002 0093     delay_us(1);
                 ; 0002 0094   }
000927 5f1f      	SUBI R17,-1
000928 cff8      	RJMP _0x40013
                 _0x40014:
                 ; 0002 0095   s_transstart();                   //transmission start
000929 dfd8      	RCALL _s_transstart
                 ; 0002 0096 }
                 _0x2100010:
00092a 9119      	LD   R17,Y+
00092b 9508      	RET
                 ;
                 ;//----------------------------------------------------------------------------------
                 ;char s_softreset(void)
                 ; 0002 009A //----------------------------------------------------------------------------------
                 ; 0002 009B // resets the sensor by a softreset
                 ; 0002 009C {
                 ; 0002 009D   unsigned char error=0;
                 ; 0002 009E   s_connectionreset();              //reset communication
                 ;	error -> R17
                 ; 0002 009F   error+=s_write_byte(RESET);       //send RESET-command to sensor
                 ; 0002 00A0   return error;                     //error=1 in case of no response form the sensor
                 ; 0002 00A1 }
                 ;
                 ;//----------------------------------------------------------------------------------
                 ;char s_read_statusreg(unsigned char *p_value, unsigned char *p_checksum)
                 ; 0002 00A5 //----------------------------------------------------------------------------------
                 ; 0002 00A6 // reads the status register with checksum (8-bit)
                 ; 0002 00A7 {
                 _s_read_statusreg:
                 ; 0002 00A8   unsigned char error=0;
                 ; 0002 00A9   s_transstart();                   //transmission start
00092c 931a      	ST   -Y,R17
                 ;	*p_value -> Y+3
                 ;	*p_checksum -> Y+1
                 ;	error -> R17
00092d e010      	LDI  R17,0
00092e dfd3      	RCALL _s_transstart
                 ; 0002 00AA   error=s_write_byte(STATUS_REG_R); //send command to sensor
00092f e0e7      	LDI  R30,LOW(7)
000930 93ea      	ST   -Y,R30
000931 df88      	RCALL _s_write_byte
000932 2f1e      	MOV  R17,R30
                 ; 0002 00AB   *p_value=s_read_byte(ACK);        //read status register (8-bit)
000933 940e 1264 	CALL SUBOPT_0x2C
000935 81ab      	LDD  R26,Y+3
000936 81bc      	LDD  R27,Y+3+1
000937 93ec      	ST   X,R30
                 ; 0002 00AC   *p_checksum=s_read_byte(noACK);   //read checksum (8-bit)
000938 e0e0      	LDI  R30,LOW(0)
000939 93ea      	ST   -Y,R30
00093a dfa4      	RCALL _s_read_byte
00093b 81a9      	LDD  R26,Y+1
00093c 81ba      	LDD  R27,Y+1+1
00093d 93ec      	ST   X,R30
                 ; 0002 00AD   return error;                     //error=1 in case of no response form the sensor
00093e 2fe1      	MOV  R30,R17
00093f 8118      	LDD  R17,Y+0
000940 c178      	RJMP _0x210000E
                 ; 0002 00AE }
                 ;
                 ;//----------------------------------------------------------------------------------
                 ;char s_write_statusreg(unsigned char *p_value)
                 ; 0002 00B2 //----------------------------------------------------------------------------------
                 ; 0002 00B3 // writes the status register with checksum (8-bit)
                 ; 0002 00B4 {
                 _s_write_statusreg:
                 ; 0002 00B5   unsigned char error=0;
                 ; 0002 00B6   s_transstart();                   //transmission start
000941 931a      	ST   -Y,R17
                 ;	*p_value -> Y+1
                 ;	error -> R17
000942 e010      	LDI  R17,0
000943 dfbe      	RCALL _s_transstart
                 ; 0002 00B7   error+=s_write_byte(STATUS_REG_W);//send command to sensor
000944 e0e6      	LDI  R30,LOW(6)
000945 93ea      	ST   -Y,R30
000946 df73      	RCALL _s_write_byte
000947 0f1e      	ADD  R17,R30
                 ; 0002 00B8   error+=s_write_byte(*p_value);    //send value of status register
000948 81a9      	LDD  R26,Y+1
000949 81ba      	LDD  R27,Y+1+1
00094a 91ec      	LD   R30,X
00094b 93ea      	ST   -Y,R30
00094c df6d      	RCALL _s_write_byte
00094d 0f1e      	ADD  R17,R30
                 ; 0002 00B9   return error;                     //error>=1 in case of no response form the sensor
00094e 2fe1      	MOV  R30,R17
00094f 8118      	LDD  R17,Y+0
                 _0x210000F:
000950 9623      	ADIW R28,3
000951 9508      	RET
                 ; 0002 00BA }
                 ;
                 ;//----------------------------------------------------------------------------------
                 ;char s_measure(unsigned char *p_value, unsigned char *p_checksum, unsigned char mode)
                 ; 0002 00BE //----------------------------------------------------------------------------------
                 ; 0002 00BF // makes a measurement (humidity/temperature) with checksum
                 ; 0002 00C0 {
                 _s_measure:
                 ; 0002 00C1   unsigned error=0;
                 ; 0002 00C2   unsigned int i;
                 ; 0002 00C3 
                 ; 0002 00C4   s_transstart();                   //transmission start
000952 940e 1705 	CALL __SAVELOCR4
                 ;	*p_value -> Y+7
                 ;	*p_checksum -> Y+5
                 ;	mode -> Y+4
                 ;	error -> R16,R17
                 ;	i -> R18,R19
                +
000954 e000     +LDI R16 , LOW ( 0 )
000955 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000956 dfab      	RCALL _s_transstart
                 ; 0002 00C5   switch(mode){                     //send command to sensor
000957 81ec      	LDD  R30,Y+4
000958 940e 11a9 	CALL SUBOPT_0xE
                 ; 0002 00C6     case TEMP	: error+=s_write_byte(MEASURE_TEMP); break;
00095a f421      	BRNE _0x40018
00095b e0e3      	LDI  R30,LOW(3)
00095c 940e 1268 	CALL SUBOPT_0x2D
00095e c007      	RJMP _0x40017
                 ; 0002 00C7     case HUMI	: error+=s_write_byte(MEASURE_HUMI); break;
                 _0x40018:
00095f 30e1      	CPI  R30,LOW(0x1)
000960 e0a0      	LDI  R26,HIGH(0x1)
000961 07fa      	CPC  R31,R26
000962 f419      	BRNE _0x4001A
000963 e0e5      	LDI  R30,LOW(5)
000964 940e 1268 	CALL SUBOPT_0x2D
                 ; 0002 00C8     default     : break;
                 _0x4001A:
                 ; 0002 00C9   }
                 _0x40017:
                 ; 0002 00CA   SHT_INPUT_MODE();
000966 98a3      	CBI  0x14,3
                 ; 0002 00CB   for (i=0;i<65535;i++)
                +
000967 e020     +LDI R18 , LOW ( 0 )
000968 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x4001C:
                +
000969 3f2f     +CPI R18 , LOW ( - 1 )
00096a efef     +LDI R30 , HIGH ( - 1 )
00096b 073e     +CPC R19 , R30
                 	__CPWRN 18,19,-1
00096c f440      	BRSH _0x4001D
                 ; 0002 00CC   {
                 ; 0002 00CD    delay_us(1);
                +
00096d e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
00096e 958a     +DEC R24
00096f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
                 ; 0002 00CE    if((SHT_PIN & (1<<SHT_DATA))==0) break; //wait until sensor has finished the measurement
000970 9b9b      	SBIS 0x13,3
000971 c003      	RJMP _0x4001D
                 ; 0002 00CF   }
                +
000972 5f2f     +SUBI R18 , LOW ( - 1 )
000973 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000974 cff4      	RJMP _0x4001C
                 _0x4001D:
                 ; 0002 00D0   if(SHT_PIN & (1<<SHT_DATA)) error+=1;                // or timeout (~2 sec.) is reached
000975 9b9b      	SBIS 0x13,3
000976 c002      	RJMP _0x4001F
                +
000977 5f0f     +SUBI R16 , LOW ( - 1 )
000978 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ; 0002 00D1   *(p_value+1)=s_read_byte(ACK);    //read the first byte (MSB)
                 _0x4001F:
000979 940e 1264 	CALL SUBOPT_0x2C
                +
00097b 81af     +LDD R26 , Y + 7
00097c 85b8     +LDD R27 , Y + 7 + 1
00097d 9611     +ADIW R26 , 1
00097e 93ec     +ST X , R30
                 	__PUTB1SNS 7,1
                 ; 0002 00D2   *(p_value)=s_read_byte(ACK);    //read the second byte (LSB)
00097f 940e 1264 	CALL SUBOPT_0x2C
000981 81af      	LDD  R26,Y+7
000982 85b8      	LDD  R27,Y+7+1
000983 93ec      	ST   X,R30
                 ; 0002 00D3   *p_checksum =s_read_byte(noACK);  //read checksum
000984 e0e0      	LDI  R30,LOW(0)
000985 93ea      	ST   -Y,R30
000986 df58      	RCALL _s_read_byte
000987 81ad      	LDD  R26,Y+5
000988 81be      	LDD  R27,Y+5+1
000989 93ec      	ST   X,R30
                 ; 0002 00D4   return error;
00098a 2fe0      	MOV  R30,R16
00098b 940e 170c 	CALL __LOADLOCR4
00098d 9629      	ADIW R28,9
00098e 9508      	RET
                 ; 0002 00D5 }
                 ;
                 ;//----------------------------------------------------------------------------------------
                 ;void calc_sth11(float *p_humidity ,float *p_temperature)
                 ; 0002 00D9 //----------------------------------------------------------------------------------------
                 ; 0002 00DA // calculates temperature [°C] and humidity [%RH]
                 ; 0002 00DB // input :  humi [Ticks] (12 bit)
                 ; 0002 00DC //          temp [Ticks] (14 bit)
                 ; 0002 00DD // output:  humi [%RH]
                 ; 0002 00DE //          temp [°C]
                 ; 0002 00DF {
                 _calc_sth11:
                 ; 0002 00E0   float rh=*p_humidity;             // rh:      Humidity [Ticks] 12 Bit
                 ; 0002 00E1   float t=*p_temperature;           // t:       Temperature [Ticks] 14 Bit
                 ; 0002 00E2   float rh_lin;                     // rh_lin:  Humidity linear
                 ; 0002 00E3   float rh_true;                    // rh_true: Temperature compensated humidity
                 ; 0002 00E4   float t_C;                        // t_C   :  Temperature [°C]
                 ; 0002 00E5 
                 ; 0002 00E6   t_C=t*0.04 - 39.8;                  //calc. temperature from ticks to [°C]  first coeff. 0.01 for 14 bit and 0.04 for 12 bit
00098f 9764      	SBIW R28,20
                 ;	*p_humidity -> Y+22
                 ;	*p_temperature -> Y+20
                 ;	rh -> Y+16
                 ;	t -> Y+12
                 ;	rh_lin -> Y+8
                 ;	rh_true -> Y+4
                 ;	t_C -> Y+0
000990 89ae      	LDD  R26,Y+22
000991 89bf      	LDD  R27,Y+22+1
000992 940e 16be 	CALL __GETD1P
000994 940e 126f 	CALL SUBOPT_0x2E
000996 89ac      	LDD  R26,Y+20
000997 89bd      	LDD  R27,Y+20+1
000998 940e 16be 	CALL __GETD1P
00099a 940e 1274 	CALL SUBOPT_0x2F
00099c 940e 1279 	CALL SUBOPT_0x30
                +
00099e e0ea     +LDI R30 , LOW ( 0x3D23D70A )
00099f edf7     +LDI R31 , HIGH ( 0x3D23D70A )
0009a0 e263     +LDI R22 , BYTE3 ( 0x3D23D70A )
0009a1 e37d     +LDI R23 , BYTE4 ( 0x3D23D70A )
                 	__GETD1N 0x3D23D70A
0009a2 940e 153b 	CALL __MULF12
0009a4 01df      	MOVW R26,R30
0009a5 01cb      	MOVW R24,R22
                +
0009a6 e3e3     +LDI R30 , LOW ( 0x421F3333 )
0009a7 e3f3     +LDI R31 , HIGH ( 0x421F3333 )
0009a8 e16f     +LDI R22 , BYTE3 ( 0x421F3333 )
0009a9 e472     +LDI R23 , BYTE4 ( 0x421F3333 )
                 	__GETD1N 0x421F3333
0009aa 940e 127e 	CALL SUBOPT_0x31
0009ac 940e 1283 	CALL SUBOPT_0x32
                 ; 0002 00E7   rh_lin=C3*rh*rh + C2*rh + C1;     //calc. humidity from ticks to [%RH]
0009ae 940e 1286 	CALL SUBOPT_0x33
                +
0009b0 e3ab     +LDI R26 , LOW ( 0xB9D6253B )
0009b1 e2b5     +LDI R27 , HIGH ( 0xB9D6253B )
0009b2 ed86     +LDI R24 , BYTE3 ( 0xB9D6253B )
0009b3 eb99     +LDI R25 , BYTE4 ( 0xB9D6253B )
                 	__GETD2N 0xB9D6253B
0009b4 940e 153b 	CALL __MULF12
0009b6 940e 128b 	CALL SUBOPT_0x34
0009b8 940e 153b 	CALL __MULF12
0009ba 937f      	PUSH R23
0009bb 936f      	PUSH R22
0009bc 93ff      	PUSH R31
0009bd 93ef      	PUSH R30
0009be 940e 1286 	CALL SUBOPT_0x33
                +
0009c0 ebad     +LDI R26 , LOW ( 0x3F1652BD )
0009c1 e5b2     +LDI R27 , HIGH ( 0x3F1652BD )
0009c2 e186     +LDI R24 , BYTE3 ( 0x3F1652BD )
0009c3 e39f     +LDI R25 , BYTE4 ( 0x3F1652BD )
                 	__GETD2N 0x3F1652BD
0009c4 940e 153b 	CALL __MULF12
0009c6 91af      	POP  R26
0009c7 91bf      	POP  R27
0009c8 918f      	POP  R24
0009c9 919f      	POP  R25
0009ca 940e 14eb 	CALL __ADDF12
                +
0009cc eca5     +LDI R26 , LOW ( 0xC002FEC5 )
0009cd efbe     +LDI R27 , HIGH ( 0xC002FEC5 )
0009ce e082     +LDI R24 , BYTE3 ( 0xC002FEC5 )
0009cf ec90     +LDI R25 , BYTE4 ( 0xC002FEC5 )
                 	__GETD2N 0xC002FEC5
0009d0 940e 14eb 	CALL __ADDF12
                +
0009d2 87e8     +STD Y + 8 , R30
0009d3 87f9     +STD Y + 8 + 1 , R31
0009d4 876a     +STD Y + 8 + 2 , R22
0009d5 877b     +STD Y + 8 + 3 , R23
                 	__PUTD1S 8
                 ; 0002 00E8   rh_true=(t_C-25)*(T1+T2*rh)+rh_lin;   //calc. temperature compensated humidity [%RH]
0009d6 940e 1290 	CALL SUBOPT_0x35
                +
0009d8 e0a0     +LDI R26 , LOW ( 0x41C80000 )
0009d9 e0b0     +LDI R27 , HIGH ( 0x41C80000 )
0009da ec88     +LDI R24 , BYTE3 ( 0x41C80000 )
0009db e491     +LDI R25 , BYTE4 ( 0x41C80000 )
                 	__GETD2N 0x41C80000
0009dc 940e 14e4 	CALL __SUBF12
0009de 937f      	PUSH R23
0009df 936f      	PUSH R22
0009e0 93ff      	PUSH R31
0009e1 93ef      	PUSH R30
0009e2 940e 1286 	CALL SUBOPT_0x33
                +
0009e4 eaac     +LDI R26 , LOW ( 0x3AA7C5AC )
0009e5 ecb5     +LDI R27 , HIGH ( 0x3AA7C5AC )
0009e6 ea87     +LDI R24 , BYTE3 ( 0x3AA7C5AC )
0009e7 e39a     +LDI R25 , BYTE4 ( 0x3AA7C5AC )
                 	__GETD2N 0x3AA7C5AC
0009e8 940e 153b 	CALL __MULF12
                +
0009ea e0aa     +LDI R26 , LOW ( 0x3C23D70A )
0009eb edb7     +LDI R27 , HIGH ( 0x3C23D70A )
0009ec e283     +LDI R24 , BYTE3 ( 0x3C23D70A )
0009ed e39c     +LDI R25 , BYTE4 ( 0x3C23D70A )
                 	__GETD2N 0x3C23D70A
0009ee 940e 14eb 	CALL __ADDF12
0009f0 91af      	POP  R26
0009f1 91bf      	POP  R27
0009f2 918f      	POP  R24
0009f3 919f      	POP  R25
0009f4 940e 153b 	CALL __MULF12
                +
0009f6 85a8     +LDD R26 , Y + 8
0009f7 85b9     +LDD R27 , Y + 8 + 1
0009f8 858a     +LDD R24 , Y + 8 + 2
0009f9 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
0009fa 940e 1293 	CALL SUBOPT_0x36
                 ; 0002 00E9   if(rh_true>100)rh_true=100;       //cut if the value is outside of
0009fc 940e 129a 	CALL SUBOPT_0x37
                +
0009fe e0e0     +LDI R30 , LOW ( 0x42C80000 )
0009ff e0f0     +LDI R31 , HIGH ( 0x42C80000 )
000a00 ec68     +LDI R22 , BYTE3 ( 0x42C80000 )
000a01 e472     +LDI R23 , BYTE4 ( 0x42C80000 )
                 	__GETD1N 0x42C80000
000a02 940e 15ce 	CALL __CMPF12
000a04 f009      	BREQ PC+2
000a05 f410      	BRCC PC+3
000a06 940c 0a0a 	JMP  _0x40020
000a08 940e 129f 	CALL SUBOPT_0x38
                 ; 0002 00EA   if(rh_true<0.1)rh_true=0.1;       //the physical possible range
                 _0x40020:
000a0a 940e 12a4 	CALL SUBOPT_0x39
000a0c 940e 15ce 	CALL __CMPF12
000a0e f420      	BRSH _0x40021
000a0f 940e 12aa 	CALL SUBOPT_0x3A
000a11 940e 129f 	CALL SUBOPT_0x38
                 ; 0002 00EB 
                 ; 0002 00EC   *p_temperature=t_C;               //return temperature [°C]
                 _0x40021:
000a13 940e 1290 	CALL SUBOPT_0x35
000a15 89ac      	LDD  R26,Y+20
000a16 89bd      	LDD  R27,Y+20+1
000a17 940e 16c4 	CALL __PUTDP1
                 ; 0002 00ED   *p_humidity=rh_true;              //return humidity[%RH]
000a19 940e 12af 	CALL SUBOPT_0x3B
000a1b 89ae      	LDD  R26,Y+22
000a1c 89bf      	LDD  R27,Y+22+1
000a1d 940e 16c4 	CALL __PUTDP1
                 ; 0002 00EE }
000a1f 9668      	ADIW R28,24
000a20 9508      	RET
                 ;
                 ;//--------------------------------------------------------------------
                 ;float calc_dewpoint(float h,float t)
                 ; 0002 00F2 //--------------------------------------------------------------------
                 ; 0002 00F3 // calculates dew point
                 ; 0002 00F4 // input:   humidity [%RH], temperature [°C]
                 ; 0002 00F5 // output:  dew point [°C]
                 ; 0002 00F6 { float logEx,dew_point;
                 _calc_dewpoint:
                 ; 0002 00F7   logEx=0.66077+7.5*t/(237.3+t)+(log10(h)-2);
000a21 9728      	SBIW R28,8
                 ;	h -> Y+12
                 ;	t -> Y+8
                 ;	logEx -> Y+4
                 ;	dew_point -> Y+0
                +
000a22 85e8     +LDD R30 , Y + 8
000a23 85f9     +LDD R31 , Y + 8 + 1
000a24 856a     +LDD R22 , Y + 8 + 2
000a25 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
                +
000a26 e0a0     +LDI R26 , LOW ( 0x40F00000 )
000a27 e0b0     +LDI R27 , HIGH ( 0x40F00000 )
000a28 ef80     +LDI R24 , BYTE3 ( 0x40F00000 )
000a29 e490     +LDI R25 , BYTE4 ( 0x40F00000 )
                 	__GETD2N 0x40F00000
000a2a 940e 153b 	CALL __MULF12
000a2c 937f      	PUSH R23
000a2d 936f      	PUSH R22
000a2e 93ff      	PUSH R31
000a2f 93ef      	PUSH R30
                +
000a30 85e8     +LDD R30 , Y + 8
000a31 85f9     +LDD R31 , Y + 8 + 1
000a32 856a     +LDD R22 , Y + 8 + 2
000a33 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
                +
000a34 ecad     +LDI R26 , LOW ( 0x436D4CCD )
000a35 e4bc     +LDI R27 , HIGH ( 0x436D4CCD )
000a36 e68d     +LDI R24 , BYTE3 ( 0x436D4CCD )
000a37 e493     +LDI R25 , BYTE4 ( 0x436D4CCD )
                 	__GETD2N 0x436D4CCD
000a38 940e 14eb 	CALL __ADDF12
000a3a 91af      	POP  R26
000a3b 91bf      	POP  R27
000a3c 918f      	POP  R24
000a3d 919f      	POP  R25
000a3e 940e 1589 	CALL __DIVF21
                +
000a40 e3a9     +LDI R26 , LOW ( 0x3F292839 )
000a41 e2b8     +LDI R27 , HIGH ( 0x3F292839 )
000a42 e289     +LDI R24 , BYTE3 ( 0x3F292839 )
000a43 e39f     +LDI R25 , BYTE4 ( 0x3F292839 )
                 	__GETD2N 0x3F292839
000a44 940e 14eb 	CALL __ADDF12
000a46 937f      	PUSH R23
000a47 936f      	PUSH R22
000a48 93ff      	PUSH R31
000a49 93ef      	PUSH R30
000a4a 940e 12b4 	CALL SUBOPT_0x3C
000a4c 940e 16d8 	CALL __PUTPARD1
000a4e 940e 10c0 	CALL _log10
000a50 01df      	MOVW R26,R30
000a51 01cb      	MOVW R24,R22
                +
000a52 e0e0     +LDI R30 , LOW ( 0x40000000 )
000a53 e0f0     +LDI R31 , HIGH ( 0x40000000 )
000a54 e060     +LDI R22 , BYTE3 ( 0x40000000 )
000a55 e470     +LDI R23 , BYTE4 ( 0x40000000 )
                 	__GETD1N 0x40000000
000a56 940e 127e 	CALL SUBOPT_0x31
000a58 91af      	POP  R26
000a59 91bf      	POP  R27
000a5a 918f      	POP  R24
000a5b 919f      	POP  R25
000a5c 940e 1293 	CALL SUBOPT_0x36
                 ; 0002 00F8   dew_point = (logEx - 0.66077)*237.3/(0.66077+7.5-logEx);
000a5e 940e 12af 	CALL SUBOPT_0x3B
                +
000a60 e3a9     +LDI R26 , LOW ( 0x3F292839 )
000a61 e2b8     +LDI R27 , HIGH ( 0x3F292839 )
000a62 e289     +LDI R24 , BYTE3 ( 0x3F292839 )
000a63 e39f     +LDI R25 , BYTE4 ( 0x3F292839 )
                 	__GETD2N 0x3F292839
000a64 940e 14e4 	CALL __SUBF12
                +
000a66 ecad     +LDI R26 , LOW ( 0x436D4CCD )
000a67 e4bc     +LDI R27 , HIGH ( 0x436D4CCD )
000a68 e68d     +LDI R24 , BYTE3 ( 0x436D4CCD )
000a69 e493     +LDI R25 , BYTE4 ( 0x436D4CCD )
                 	__GETD2N 0x436D4CCD
000a6a 940e 153b 	CALL __MULF12
000a6c 937f      	PUSH R23
000a6d 936f      	PUSH R22
000a6e 93ff      	PUSH R31
000a6f 93ef      	PUSH R30
000a70 940e 129a 	CALL SUBOPT_0x37
                +
000a72 e8e4     +LDI R30 , LOW ( 0x41029284 )
000a73 e9f2     +LDI R31 , HIGH ( 0x41029284 )
000a74 e062     +LDI R22 , BYTE3 ( 0x41029284 )
000a75 e471     +LDI R23 , BYTE4 ( 0x41029284 )
                 	__GETD1N 0x41029284
000a76 940e 14e4 	CALL __SUBF12
000a78 91af      	POP  R26
000a79 91bf      	POP  R27
000a7a 918f      	POP  R24
000a7b 919f      	POP  R25
000a7c 940e 1589 	CALL __DIVF21
000a7e 940e 1283 	CALL SUBOPT_0x32
                 ; 0002 00F9   return dew_point;
000a80 940e 1290 	CALL SUBOPT_0x35
000a82 c0fa      	RJMP _0x210000D
                 ; 0002 00FA }
                 ;
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
000a83 931a      	ST   -Y,R17
000a84 930a      	ST   -Y,R16
000a85 81aa      	LDD  R26,Y+2
000a86 81bb      	LDD  R27,Y+2+1
000a87 9612      	ADIW R26,2
000a88 940e 16ba 	CALL __GETW1P
000a8a 9730      	SBIW R30,0
000a8b f129      	BREQ _0x2000010
000a8c 81aa      	LDD  R26,Y+2
000a8d 81bb      	LDD  R27,Y+2+1
000a8e 9614      	ADIW R26,4
000a8f 940e 16ba 	CALL __GETW1P
000a91 018f      	MOVW R16,R30
000a92 9730      	SBIW R30,0
000a93 f061      	BREQ _0x2000012
                +
000a94 3002     +CPI R16 , LOW ( 2 )
000a95 e0e0     +LDI R30 , HIGH ( 2 )
000a96 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000a97 f0c0      	BRLO _0x2000013
000a98 01f8      	MOVW R30,R16
000a99 9731      	SBIW R30,1
000a9a 018f      	MOVW R16,R30
                +
000a9b 81aa     +LDD R26 , Y + 2
000a9c 81bb     +LDD R27 , Y + 2 + 1
000a9d 9614     +ADIW R26 , 4
000a9e 93ed     +ST X + , R30
000a9f 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
000aa0 81aa      	LDD  R26,Y+2
000aa1 81bb      	LDD  R27,Y+2+1
000aa2 9612      	ADIW R26,2
000aa3 940e 12b9 	CALL SUBOPT_0x3D
000aa5 9731      	SBIW R30,1
000aa6 81ac      	LDD  R26,Y+4
000aa7 83a0      	STD  Z+0,R26
000aa8 81aa      	LDD  R26,Y+2
000aa9 81bb      	LDD  R27,Y+2+1
000aaa 940e 16ba 	CALL __GETW1P
000aac 23ff      	TST  R31
000aad f012      	BRMI _0x2000014
000aae 940e 12b9 	CALL SUBOPT_0x3D
                 _0x2000014:
                 _0x2000013:
000ab0 c006      	RJMP _0x2000015
                 _0x2000010:
000ab1 81aa      	LDD  R26,Y+2
000ab2 81bb      	LDD  R27,Y+2+1
000ab3 efef      	LDI  R30,LOW(65535)
000ab4 efff      	LDI  R31,HIGH(65535)
000ab5 93ed      	ST   X+,R30
000ab6 93fc      	ST   X,R31
                 _0x2000015:
000ab7 8119      	LDD  R17,Y+1
000ab8 8108      	LDD  R16,Y+0
                 _0x210000E:
000ab9 9625      	ADIW R28,5
000aba 9508      	RET
                 __ftoe_G100:
000abb 9724      	SBIW R28,4
000abc e0e0      	LDI  R30,LOW(0)
000abd 83e8      	ST   Y,R30
000abe 83e9      	STD  Y+1,R30
000abf e8e0      	LDI  R30,LOW(128)
000ac0 83ea      	STD  Y+2,R30
000ac1 e3ef      	LDI  R30,LOW(63)
000ac2 83eb      	STD  Y+3,R30
000ac3 940e 1705 	CALL __SAVELOCR4
000ac5 85ee      	LDD  R30,Y+14
000ac6 85ff      	LDD  R31,Y+14+1
000ac7 3fef      	CPI  R30,LOW(0xFFFF)
000ac8 efaf      	LDI  R26,HIGH(0xFFFF)
000ac9 07fa      	CPC  R31,R26
000aca f449      	BRNE _0x2000019
000acb 85e8      	LDD  R30,Y+8
000acc 85f9      	LDD  R31,Y+8+1
000acd 93fa      	ST   -Y,R31
000ace 93ea      	ST   -Y,R30
                +
000acf eae0     +LDI R30 , LOW ( 2 * _0x2000000 + ( 0 ) )
000ad0 e0f2     +LDI R31 , HIGH ( 2 * _0x2000000 + ( 0 ) )
                 	__POINTW1FN _0x2000000,0
000ad1 940e 12bf 	CALL SUBOPT_0x3E
000ad3 c0a7      	RJMP _0x210000C
                 _0x2000019:
000ad4 3fef      	CPI  R30,LOW(0x7FFF)
000ad5 e7af      	LDI  R26,HIGH(0x7FFF)
000ad6 07fa      	CPC  R31,R26
000ad7 f449      	BRNE _0x2000018
000ad8 85e8      	LDD  R30,Y+8
000ad9 85f9      	LDD  R31,Y+8+1
000ada 93fa      	ST   -Y,R31
000adb 93ea      	ST   -Y,R30
                +
000adc eae1     +LDI R30 , LOW ( 2 * _0x2000000 + ( 1 ) )
000add e0f2     +LDI R31 , HIGH ( 2 * _0x2000000 + ( 1 ) )
                 	__POINTW1FN _0x2000000,1
000ade 940e 12bf 	CALL SUBOPT_0x3E
000ae0 c09a      	RJMP _0x210000C
                 _0x2000018:
000ae1 85ab      	LDD  R26,Y+11
000ae2 30a7      	CPI  R26,LOW(0x7)
000ae3 f010      	BRLO _0x200001B
000ae4 e0e6      	LDI  R30,LOW(6)
000ae5 87eb      	STD  Y+11,R30
                 _0x200001B:
000ae6 851b      	LDD  R17,Y+11
                 _0x200001C:
000ae7 2fe1      	MOV  R30,R17
000ae8 5011      	SUBI R17,1
000ae9 30e0      	CPI  R30,0
000aea f019      	BREQ _0x200001E
000aeb 940e 12c3 	CALL SUBOPT_0x3F
000aed cff9      	RJMP _0x200001C
                 _0x200001E:
000aee 940e 12b4 	CALL SUBOPT_0x3C
000af0 940e 16f9 	CALL __CPD10
000af2 f421      	BRNE _0x200001F
000af3 e030      	LDI  R19,LOW(0)
000af4 940e 12c3 	CALL SUBOPT_0x3F
000af6 c028      	RJMP _0x2000020
                 _0x200001F:
000af7 853b      	LDD  R19,Y+11
000af8 940e 12cb 	CALL SUBOPT_0x40
000afa f009      	BREQ PC+2
000afb f410      	BRCC PC+3
000afc 940c 0b07 	JMP  _0x2000021
000afe 940e 12c3 	CALL SUBOPT_0x3F
                 _0x2000022:
000b00 940e 12cb 	CALL SUBOPT_0x40
000b02 f018      	BRLO _0x2000024
000b03 940e 12d0 	CALL SUBOPT_0x41
000b05 cffa      	RJMP _0x2000022
                 _0x2000024:
000b06 c00d      	RJMP _0x2000025
                 _0x2000021:
                 _0x2000026:
000b07 940e 12cb 	CALL SUBOPT_0x40
000b09 f440      	BRSH _0x2000028
000b0a 940e 1279 	CALL SUBOPT_0x30
000b0c 940e 12d7 	CALL SUBOPT_0x42
000b0e 940e 1274 	CALL SUBOPT_0x2F
000b10 5031      	SUBI R19,LOW(1)
000b11 cff5      	RJMP _0x2000026
                 _0x2000028:
000b12 940e 12c3 	CALL SUBOPT_0x3F
                 _0x2000025:
000b14 940e 12b4 	CALL SUBOPT_0x3C
000b16 940e 12de 	CALL SUBOPT_0x43
000b18 940e 1274 	CALL SUBOPT_0x2F
000b1a 940e 12cb 	CALL SUBOPT_0x40
000b1c f010      	BRLO _0x2000029
000b1d 940e 12d0 	CALL SUBOPT_0x41
                 _0x2000029:
                 _0x2000020:
000b1f e010      	LDI  R17,LOW(0)
                 _0x200002A:
000b20 85eb      	LDD  R30,Y+11
000b21 17e1      	CP   R30,R17
000b22 f198      	BRLO _0x200002C
000b23 940e 12a4 	CALL SUBOPT_0x39
000b25 940e 153b 	CALL __MULF12
000b27 940e 12de 	CALL SUBOPT_0x43
000b29 940e 16d8 	CALL __PUTPARD1
000b2b 940e 101e 	CALL _floor
000b2d 940e 129f 	CALL SUBOPT_0x38
000b2f 940e 12af 	CALL SUBOPT_0x3B
000b31 940e 1279 	CALL SUBOPT_0x30
000b33 940e 1589 	CALL __DIVF21
000b35 940e 1478 	CALL __CFD1U
000b37 2f0e      	MOV  R16,R30
000b38 940e 12e5 	CALL SUBOPT_0x44
000b3a 2fe0      	MOV  R30,R16
000b3b 5de0      	SUBI R30,-LOW(48)
000b3c 93ec      	ST   X,R30
000b3d 2fe0      	MOV  R30,R16
000b3e 27ff      	CLR  R31
000b3f 2766      	CLR  R22
000b40 2777      	CLR  R23
000b41 940e 14b1 	CALL __CDF1
000b43 940e 129a 	CALL SUBOPT_0x37
000b45 940e 153b 	CALL __MULF12
000b47 940e 1279 	CALL SUBOPT_0x30
000b49 940e 127e 	CALL SUBOPT_0x31
000b4b 940e 1274 	CALL SUBOPT_0x2F
000b4d 2fe1      	MOV  R30,R17
000b4e 5f1f      	SUBI R17,-1
000b4f 30e0      	CPI  R30,0
000b50 f679      	BRNE _0x200002A
000b51 940e 12e5 	CALL SUBOPT_0x44
000b53 e2ee      	LDI  R30,LOW(46)
000b54 93ec      	ST   X,R30
000b55 cfca      	RJMP _0x200002A
                 _0x200002C:
000b56 940e 12ec 	CALL SUBOPT_0x45
000b58 85aa      	LDD  R26,Y+10
000b59 83a0      	STD  Z+0,R26
000b5a 3030      	CPI  R19,0
000b5b f42c      	BRGE _0x200002E
000b5c 940e 12e5 	CALL SUBOPT_0x44
000b5e e2ed      	LDI  R30,LOW(45)
000b5f 93ec      	ST   X,R30
000b60 9531      	NEG  R19
                 _0x200002E:
000b61 303a      	CPI  R19,10
000b62 f054      	BRLT _0x200002F
000b63 940e 12ec 	CALL SUBOPT_0x45
000b65 01bf      	MOVW R22,R30
000b66 2fa3      	MOV  R26,R19
000b67 e0ea      	LDI  R30,LOW(10)
000b68 940e 1640 	CALL __DIVB21
000b6a 5de0      	SUBI R30,-LOW(48)
000b6b 01db      	MOVW R26,R22
000b6c 93ec      	ST   X,R30
                 _0x200002F:
000b6d 940e 12ec 	CALL SUBOPT_0x45
000b6f 01bf      	MOVW R22,R30
000b70 2fa3      	MOV  R26,R19
000b71 e0ea      	LDI  R30,LOW(10)
000b72 940e 1682 	CALL __MODB21
000b74 5de0      	SUBI R30,-LOW(48)
000b75 01db      	MOVW R26,R22
000b76 93ec      	ST   X,R30
000b77 85a8      	LDD  R26,Y+8
000b78 85b9      	LDD  R27,Y+8+1
000b79 e0e0      	LDI  R30,LOW(0)
000b7a 93ec      	ST   X,R30
                 _0x210000C:
000b7b 940e 170c 	CALL __LOADLOCR4
                 _0x210000D:
000b7d 9660      	ADIW R28,16
000b7e 9508      	RET
                 __print_G100:
000b7f 97ef      	SBIW R28,63
000b80 9761      	SBIW R28,17
000b81 940e 1703 	CALL __SAVELOCR6
000b83 e010      	LDI  R17,0
                +
000b84 01fe     +MOVW R30 , R28
000b85 5ae8     +SUBI R30 , LOW ( - 88 )
000b86 4fff     +SBCI R31 , HIGH ( - 88 )
000b87 9001     +LD R0 , Z +
000b88 81f0     +LD R31 , Z
000b89 2de0     +MOV R30 , R0
                 	__GETW1SX 88
000b8a 87e8      	STD  Y+8,R30
000b8b 87f9      	STD  Y+8+1,R31
                +
000b8c 01fe     +MOVW R30 , R28
000b8d 5aea     +SUBI R30 , LOW ( - 86 )
000b8e 4fff     +SBCI R31 , HIGH ( - 86 )
000b8f 9001     +LD R0 , Z +
000b90 81f0     +LD R31 , Z
000b91 2de0     +MOV R30 , R0
                 	__GETW1SX 86
000b92 83ee      	STD  Y+6,R30
000b93 83ff      	STD  Y+6+1,R31
000b94 81ae      	LDD  R26,Y+6
000b95 81bf      	LDD  R27,Y+6+1
000b96 e0e0      	LDI  R30,LOW(0)
000b97 e0f0      	LDI  R31,HIGH(0)
000b98 93ed      	ST   X+,R30
000b99 93fc      	ST   X,R31
                 _0x2000030:
000b9a 01de      	MOVW R26,R28
000b9b 5aa4      	SUBI R26,LOW(-(92))
000b9c 4fbf      	SBCI R27,HIGH(-(92))
000b9d 940e 12b9 	CALL SUBOPT_0x3D
000b9f 9731      	SBIW R30,1
000ba0 91e4      	LPM  R30,Z
000ba1 2f2e      	MOV  R18,R30
000ba2 30e0      	CPI  R30,0
000ba3 f411      	BRNE PC+3
000ba4 940c 0d8e 	JMP _0x2000032
000ba6 2fe1      	MOV  R30,R17
000ba7 30e0      	CPI  R30,0
000ba8 f439      	BRNE _0x2000036
000ba9 3225      	CPI  R18,37
000baa f411      	BRNE _0x2000037
000bab e011      	LDI  R17,LOW(1)
000bac c002      	RJMP _0x2000038
                 _0x2000037:
000bad 940e 12f3 	CALL SUBOPT_0x46
                 _0x2000038:
000baf c1dd      	RJMP _0x2000035
                 _0x2000036:
000bb0 30e1      	CPI  R30,LOW(0x1)
000bb1 f4c1      	BRNE _0x2000039
000bb2 3225      	CPI  R18,37
000bb3 f419      	BRNE _0x200003A
000bb4 940e 12f3 	CALL SUBOPT_0x46
000bb6 c1d5      	RJMP _0x200010E
                 _0x200003A:
000bb7 e012      	LDI  R17,LOW(2)
000bb8 e0e0      	LDI  R30,LOW(0)
000bb9 8bed      	STD  Y+21,R30
000bba e000      	LDI  R16,LOW(0)
000bbb 322d      	CPI  R18,45
000bbc f411      	BRNE _0x200003B
000bbd e001      	LDI  R16,LOW(1)
000bbe c1ce      	RJMP _0x2000035
                 _0x200003B:
000bbf 322b      	CPI  R18,43
000bc0 f419      	BRNE _0x200003C
000bc1 e2eb      	LDI  R30,LOW(43)
000bc2 8bed      	STD  Y+21,R30
000bc3 c1c9      	RJMP _0x2000035
                 _0x200003C:
000bc4 3220      	CPI  R18,32
000bc5 f419      	BRNE _0x200003D
000bc6 e2e0      	LDI  R30,LOW(32)
000bc7 8bed      	STD  Y+21,R30
000bc8 c1c4      	RJMP _0x2000035
                 _0x200003D:
000bc9 c002      	RJMP _0x200003E
                 _0x2000039:
000bca 30e2      	CPI  R30,LOW(0x2)
000bcb f439      	BRNE _0x200003F
                 _0x200003E:
000bcc e050      	LDI  R21,LOW(0)
000bcd e013      	LDI  R17,LOW(3)
000bce 3320      	CPI  R18,48
000bcf f411      	BRNE _0x2000040
000bd0 6800      	ORI  R16,LOW(128)
000bd1 c1bb      	RJMP _0x2000035
                 _0x2000040:
000bd2 c002      	RJMP _0x2000041
                 _0x200003F:
000bd3 30e3      	CPI  R30,LOW(0x3)
000bd4 f491      	BRNE _0x2000042
                 _0x2000041:
000bd5 3320      	CPI  R18,48
000bd6 f010      	BRLO _0x2000044
000bd7 332a      	CPI  R18,58
000bd8 f008      	BRLO _0x2000045
                 _0x2000044:
000bd9 c007      	RJMP _0x2000043
                 _0x2000045:
000bda e0aa      	LDI  R26,LOW(10)
000bdb 9f5a      	MUL  R21,R26
000bdc 2d50      	MOV  R21,R0
000bdd 2fe2      	MOV  R30,R18
000bde 53e0      	SUBI R30,LOW(48)
000bdf 0f5e      	ADD  R21,R30
000be0 c1ac      	RJMP _0x2000035
                 _0x2000043:
000be1 e040      	LDI  R20,LOW(0)
000be2 322e      	CPI  R18,46
000be3 f411      	BRNE _0x2000046
000be4 e014      	LDI  R17,LOW(4)
000be5 c1a7      	RJMP _0x2000035
                 _0x2000046:
000be6 c00f      	RJMP _0x2000047
                 _0x2000042:
000be7 30e4      	CPI  R30,LOW(0x4)
000be8 f499      	BRNE _0x2000049
000be9 3320      	CPI  R18,48
000bea f010      	BRLO _0x200004B
000beb 332a      	CPI  R18,58
000bec f008      	BRLO _0x200004C
                 _0x200004B:
000bed c008      	RJMP _0x200004A
                 _0x200004C:
000bee 6200      	ORI  R16,LOW(32)
000bef e0aa      	LDI  R26,LOW(10)
000bf0 9f4a      	MUL  R20,R26
000bf1 2d40      	MOV  R20,R0
000bf2 2fe2      	MOV  R30,R18
000bf3 53e0      	SUBI R30,LOW(48)
000bf4 0f4e      	ADD  R20,R30
000bf5 c197      	RJMP _0x2000035
                 _0x200004A:
                 _0x2000047:
000bf6 362c      	CPI  R18,108
000bf7 f419      	BRNE _0x200004D
000bf8 6002      	ORI  R16,LOW(2)
000bf9 e015      	LDI  R17,LOW(5)
000bfa c192      	RJMP _0x2000035
                 _0x200004D:
000bfb c004      	RJMP _0x200004E
                 _0x2000049:
000bfc 30e5      	CPI  R30,LOW(0x5)
000bfd f011      	BREQ PC+3
000bfe 940c 0d8d 	JMP _0x2000035
                 _0x200004E:
000c00 2fe2      	MOV  R30,R18
000c01 36e3      	CPI  R30,LOW(0x63)
000c02 f459      	BRNE _0x2000053
000c03 940e 12fc 	CALL SUBOPT_0x47
000c05 940e 1303 	CALL SUBOPT_0x48
000c07 940e 12fc 	CALL SUBOPT_0x47
000c09 81a4      	LDD  R26,Z+4
000c0a 93aa      	ST   -Y,R26
000c0b 940e 130a 	CALL SUBOPT_0x49
000c0d c17e      	RJMP _0x2000054
                 _0x2000053:
000c0e 34e5      	CPI  R30,LOW(0x45)
000c0f f011      	BREQ _0x2000057
000c10 36e5      	CPI  R30,LOW(0x65)
000c11 f409      	BRNE _0x2000058
                 _0x2000057:
000c12 c004      	RJMP _0x2000059
                 _0x2000058:
000c13 36e6      	CPI  R30,LOW(0x66)
000c14 f011      	BREQ PC+3
000c15 940c 0c61 	JMP _0x200005A
                 _0x2000059:
000c17 01fe      	MOVW R30,R28
000c18 9676      	ADIW R30,22
000c19 87ee      	STD  Y+14,R30
000c1a 87ff      	STD  Y+14+1,R31
000c1b 940e 1312 	CALL SUBOPT_0x4A
000c1d 940e 16be 	CALL __GETD1P
000c1f 940e 1319 	CALL SUBOPT_0x4B
000c21 940e 131e 	CALL SUBOPT_0x4C
000c23 85ad      	LDD  R26,Y+13
000c24 23aa      	TST  R26
000c25 f022      	BRMI _0x200005B
000c26 89ad      	LDD  R26,Y+21
000c27 32ab      	CPI  R26,LOW(0x2B)
000c28 f049      	BREQ _0x200005D
000c29 c017      	RJMP _0x200005E
                 _0x200005B:
000c2a 940e 1320 	CALL SUBOPT_0x4D
000c2c 940e 1445 	CALL __ANEGF1
000c2e 940e 1319 	CALL SUBOPT_0x4B
000c30 e2ed      	LDI  R30,LOW(45)
000c31 8bed      	STD  Y+21,R30
                 _0x200005D:
000c32 ff07      	SBRS R16,7
000c33 c005      	RJMP _0x200005F
000c34 89ed      	LDD  R30,Y+21
000c35 93ea      	ST   -Y,R30
000c36 940e 130a 	CALL SUBOPT_0x49
000c38 c008      	RJMP _0x2000060
                 _0x200005F:
000c39 85ee      	LDD  R30,Y+14
000c3a 85ff      	LDD  R31,Y+14+1
000c3b 9631      	ADIW R30,1
000c3c 87ee      	STD  Y+14,R30
000c3d 87ff      	STD  Y+14+1,R31
000c3e 9731      	SBIW R30,1
000c3f 89ad      	LDD  R26,Y+21
000c40 83a0      	STD  Z+0,R26
                 _0x2000060:
                 _0x200005E:
000c41 ff05      	SBRS R16,5
000c42 e046      	LDI  R20,LOW(6)
000c43 3626      	CPI  R18,102
000c44 f461      	BRNE _0x2000062
000c45 940e 1320 	CALL SUBOPT_0x4D
000c47 940e 16d8 	CALL __PUTPARD1
000c49 934a      	ST   -Y,R20
000c4a 89eb      	LDD  R30,Y+19
000c4b 89fc      	LDD  R31,Y+19+1
000c4c 93fa      	ST   -Y,R31
000c4d 93ea      	ST   -Y,R30
000c4e 940e 0dcd 	CALL _ftoa
000c50 c00b      	RJMP _0x2000063
                 _0x2000062:
000c51 940e 1320 	CALL SUBOPT_0x4D
000c53 940e 16d8 	CALL __PUTPARD1
000c55 934a      	ST   -Y,R20
000c56 932a      	ST   -Y,R18
000c57 89ec      	LDD  R30,Y+20
000c58 89fd      	LDD  R31,Y+20+1
000c59 93fa      	ST   -Y,R31
000c5a 93ea      	ST   -Y,R30
000c5b de5f      	RCALL __ftoe_G100
                 _0x2000063:
000c5c 01fe      	MOVW R30,R28
000c5d 9676      	ADIW R30,22
000c5e 940e 1325 	CALL SUBOPT_0x4E
000c60 c01e      	RJMP _0x2000064
                 _0x200005A:
000c61 37e3      	CPI  R30,LOW(0x73)
000c62 f439      	BRNE _0x2000066
000c63 940e 131e 	CALL SUBOPT_0x4C
000c65 940e 132d 	CALL SUBOPT_0x4F
000c67 940e 1325 	CALL SUBOPT_0x4E
000c69 c00e      	RJMP _0x2000067
                 _0x2000066:
000c6a 37e0      	CPI  R30,LOW(0x70)
000c6b f4c1      	BRNE _0x2000069
000c6c 940e 131e 	CALL SUBOPT_0x4C
000c6e 940e 132d 	CALL SUBOPT_0x4F
000c70 87ee      	STD  Y+14,R30
000c71 87ff      	STD  Y+14+1,R31
000c72 93fa      	ST   -Y,R31
000c73 93ea      	ST   -Y,R30
000c74 940e 10ec 	CALL _strlenf
000c76 2f1e      	MOV  R17,R30
000c77 6008      	ORI  R16,LOW(8)
                 _0x2000067:
000c78 770f      	ANDI R16,LOW(127)
000c79 3040      	CPI  R20,0
000c7a f011      	BREQ _0x200006B
000c7b 1741      	CP   R20,R17
000c7c f008      	BRLO _0x200006C
                 _0x200006B:
000c7d c001      	RJMP _0x200006A
                 _0x200006C:
000c7e 2f14      	MOV  R17,R20
                 _0x200006A:
                 _0x2000064:
000c7f e040      	LDI  R20,LOW(0)
000c80 e0e0      	LDI  R30,LOW(0)
000c81 8bec      	STD  Y+20,R30
000c82 e030      	LDI  R19,LOW(0)
000c83 c06e      	RJMP _0x200006D
                 _0x2000069:
000c84 36e4      	CPI  R30,LOW(0x64)
000c85 f011      	BREQ _0x2000070
000c86 36e9      	CPI  R30,LOW(0x69)
000c87 f411      	BRNE _0x2000071
                 _0x2000070:
000c88 6004      	ORI  R16,LOW(4)
000c89 c002      	RJMP _0x2000072
                 _0x2000071:
000c8a 37e5      	CPI  R30,LOW(0x75)
000c8b f4a1      	BRNE _0x2000073
                 _0x2000072:
000c8c e0ea      	LDI  R30,LOW(10)
000c8d 8bec      	STD  Y+20,R30
000c8e ff01      	SBRS R16,1
000c8f c008      	RJMP _0x2000074
                +
000c90 e0e0     +LDI R30 , LOW ( 0x3B9ACA00 )
000c91 ecfa     +LDI R31 , HIGH ( 0x3B9ACA00 )
000c92 e96a     +LDI R22 , BYTE3 ( 0x3B9ACA00 )
000c93 e37b     +LDI R23 , BYTE4 ( 0x3B9ACA00 )
                 	__GETD1N 0x3B9ACA00
000c94 940e 126f 	CALL SUBOPT_0x2E
000c96 e01a      	LDI  R17,LOW(10)
000c97 c023      	RJMP _0x2000075
                 _0x2000074:
                +
000c98 e1e0     +LDI R30 , LOW ( 0x2710 )
000c99 e2f7     +LDI R31 , HIGH ( 0x2710 )
000c9a e060     +LDI R22 , BYTE3 ( 0x2710 )
000c9b e070     +LDI R23 , BYTE4 ( 0x2710 )
                 	__GETD1N 0x2710
000c9c 940e 126f 	CALL SUBOPT_0x2E
000c9e e015      	LDI  R17,LOW(5)
000c9f c01b      	RJMP _0x2000075
                 _0x2000073:
000ca0 35e8      	CPI  R30,LOW(0x58)
000ca1 f411      	BRNE _0x2000077
000ca2 6008      	ORI  R16,LOW(8)
000ca3 c004      	RJMP _0x2000078
                 _0x2000077:
000ca4 37e8      	CPI  R30,LOW(0x78)
000ca5 f011      	BREQ PC+3
000ca6 940c 0d8c 	JMP _0x20000B6
                 _0x2000078:
000ca8 e1e0      	LDI  R30,LOW(16)
000ca9 8bec      	STD  Y+20,R30
000caa ff01      	SBRS R16,1
000cab c008      	RJMP _0x200007A
                +
000cac e0e0     +LDI R30 , LOW ( 0x10000000 )
000cad e0f0     +LDI R31 , HIGH ( 0x10000000 )
000cae e060     +LDI R22 , BYTE3 ( 0x10000000 )
000caf e170     +LDI R23 , BYTE4 ( 0x10000000 )
                 	__GETD1N 0x10000000
000cb0 940e 126f 	CALL SUBOPT_0x2E
000cb2 e018      	LDI  R17,LOW(8)
000cb3 c007      	RJMP _0x2000075
                 _0x200007A:
                +
000cb4 e0e0     +LDI R30 , LOW ( 0x1000 )
000cb5 e1f0     +LDI R31 , HIGH ( 0x1000 )
000cb6 e060     +LDI R22 , BYTE3 ( 0x1000 )
000cb7 e070     +LDI R23 , BYTE4 ( 0x1000 )
                 	__GETD1N 0x1000
000cb8 940e 126f 	CALL SUBOPT_0x2E
000cba e014      	LDI  R17,LOW(4)
                 _0x2000075:
000cbb 3040      	CPI  R20,0
000cbc f011      	BREQ _0x200007B
000cbd 770f      	ANDI R16,LOW(127)
000cbe c001      	RJMP _0x200007C
                 _0x200007B:
000cbf e041      	LDI  R20,LOW(1)
                 _0x200007C:
000cc0 ff01      	SBRS R16,1
000cc1 c008      	RJMP _0x200007D
000cc2 940e 131e 	CALL SUBOPT_0x4C
000cc4 940e 1312 	CALL SUBOPT_0x4A
000cc6 9614      	ADIW R26,4
000cc7 940e 16be 	CALL __GETD1P
000cc9 c00f      	RJMP _0x200010F
                 _0x200007D:
000cca ff02      	SBRS R16,2
000ccb c007      	RJMP _0x200007F
000ccc 940e 131e 	CALL SUBOPT_0x4C
000cce 940e 132d 	CALL SUBOPT_0x4F
000cd0 940e 1623 	CALL __CWD1
000cd2 c006      	RJMP _0x200010F
                 _0x200007F:
000cd3 940e 131e 	CALL SUBOPT_0x4C
000cd5 940e 132d 	CALL SUBOPT_0x4F
000cd7 2766      	CLR  R22
000cd8 2777      	CLR  R23
                 _0x200010F:
                +
000cd9 87ea     +STD Y + 10 , R30
000cda 87fb     +STD Y + 10 + 1 , R31
000cdb 876c     +STD Y + 10 + 2 , R22
000cdc 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
000cdd ff02      	SBRS R16,2
000cde c012      	RJMP _0x2000081
000cdf 85ad      	LDD  R26,Y+13
000ce0 23aa      	TST  R26
000ce1 f442      	BRPL _0x2000082
000ce2 940e 1320 	CALL SUBOPT_0x4D
000ce4 940e 15f6 	CALL __ANEGD1
000ce6 940e 1319 	CALL SUBOPT_0x4B
000ce8 e2ed      	LDI  R30,LOW(45)
000ce9 8bed      	STD  Y+21,R30
                 _0x2000082:
000cea 89ed      	LDD  R30,Y+21
000ceb 30e0      	CPI  R30,0
000cec f019      	BREQ _0x2000083
000ced 5f1f      	SUBI R17,-LOW(1)
000cee 5f4f      	SUBI R20,-LOW(1)
000cef c001      	RJMP _0x2000084
                 _0x2000083:
000cf0 7f0b      	ANDI R16,LOW(251)
                 _0x2000084:
                 _0x2000081:
000cf1 2f34      	MOV  R19,R20
                 _0x200006D:
000cf2 fd00      	SBRC R16,0
000cf3 c014      	RJMP _0x2000085
                 _0x2000086:
000cf4 1715      	CP   R17,R21
000cf5 f410      	BRSH _0x2000089
000cf6 1735      	CP   R19,R21
000cf7 f008      	BRLO _0x200008A
                 _0x2000089:
000cf8 c00f      	RJMP _0x2000088
                 _0x200008A:
000cf9 ff07      	SBRS R16,7
000cfa c008      	RJMP _0x200008B
000cfb ff02      	SBRS R16,2
000cfc c004      	RJMP _0x200008C
000cfd 7f0b      	ANDI R16,LOW(251)
000cfe 892d      	LDD  R18,Y+21
000cff 5011      	SUBI R17,LOW(1)
000d00 c001      	RJMP _0x200008D
                 _0x200008C:
000d01 e320      	LDI  R18,LOW(48)
                 _0x200008D:
000d02 c001      	RJMP _0x200008E
                 _0x200008B:
000d03 e220      	LDI  R18,LOW(32)
                 _0x200008E:
000d04 940e 12f3 	CALL SUBOPT_0x46
000d06 5051      	SUBI R21,LOW(1)
000d07 cfec      	RJMP _0x2000086
                 _0x2000088:
                 _0x2000085:
                 _0x200008F:
000d08 1714      	CP   R17,R20
000d09 f490      	BRSH _0x2000091
000d0a 6100      	ORI  R16,LOW(16)
000d0b ff02      	SBRS R16,2
000d0c c006      	RJMP _0x2000092
000d0d 940e 1332 	CALL SUBOPT_0x50
000d0f f009      	BREQ _0x2000093
000d10 5051      	SUBI R21,LOW(1)
                 _0x2000093:
000d11 5011      	SUBI R17,LOW(1)
000d12 5041      	SUBI R20,LOW(1)
                 _0x2000092:
000d13 e3e0      	LDI  R30,LOW(48)
000d14 93ea      	ST   -Y,R30
000d15 940e 130a 	CALL SUBOPT_0x49
000d17 3050      	CPI  R21,0
000d18 f009      	BREQ _0x2000094
000d19 5051      	SUBI R21,LOW(1)
                 _0x2000094:
000d1a 5041      	SUBI R20,LOW(1)
000d1b cfec      	RJMP _0x200008F
                 _0x2000091:
000d1c 2f31      	MOV  R19,R17
000d1d 89ec      	LDD  R30,Y+20
000d1e 30e0      	CPI  R30,0
000d1f f4b9      	BRNE _0x2000095
                 _0x2000096:
000d20 3030      	CPI  R19,0
000d21 f0a1      	BREQ _0x2000098
000d22 ff03      	SBRS R16,3
000d23 c006      	RJMP _0x2000099
000d24 85ee      	LDD  R30,Y+14
000d25 85ff      	LDD  R31,Y+14+1
000d26 9125      	LPM  R18,Z+
000d27 87ee      	STD  Y+14,R30
000d28 87ff      	STD  Y+14+1,R31
000d29 c005      	RJMP _0x200009A
                 _0x2000099:
000d2a 85ae      	LDD  R26,Y+14
000d2b 85bf      	LDD  R27,Y+14+1
000d2c 912d      	LD   R18,X+
000d2d 87ae      	STD  Y+14,R26
000d2e 87bf      	STD  Y+14+1,R27
                 _0x200009A:
000d2f 940e 12f3 	CALL SUBOPT_0x46
000d31 3050      	CPI  R21,0
000d32 f009      	BREQ _0x200009B
000d33 5051      	SUBI R21,LOW(1)
                 _0x200009B:
000d34 5031      	SUBI R19,LOW(1)
000d35 cfea      	RJMP _0x2000096
                 _0x2000098:
000d36 c04b      	RJMP _0x200009C
                 _0x2000095:
                 _0x200009E:
000d37 940e 1346 	CALL SUBOPT_0x51
000d39 940e 165d 	CALL __DIVD21U
000d3b 2f2e      	MOV  R18,R30
000d3c 302a      	CPI  R18,10
000d3d f030      	BRLO _0x20000A0
000d3e ff03      	SBRS R16,3
000d3f c002      	RJMP _0x20000A1
000d40 5c29      	SUBI R18,-LOW(55)
000d41 c001      	RJMP _0x20000A2
                 _0x20000A1:
000d42 5a29      	SUBI R18,-LOW(87)
                 _0x20000A2:
000d43 c001      	RJMP _0x20000A3
                 _0x20000A0:
000d44 5d20      	SUBI R18,-LOW(48)
                 _0x20000A3:
000d45 fd04      	SBRC R16,4
000d46 c01f      	RJMP _0x20000A5
000d47 3321      	CPI  R18,49
000d48 f450      	BRSH _0x20000A7
000d49 940e 128b 	CALL SUBOPT_0x34
                +
000d4b 30a1     +CPI R26 , LOW ( 0x1 )
000d4c e0e0     +LDI R30 , HIGH ( 0x1 )
000d4d 07be     +CPC R27 , R30
000d4e e0e0     +LDI R30 , BYTE3 ( 0x1 )
000d4f 078e     +CPC R24 , R30
000d50 e0e0     +LDI R30 , BYTE4 ( 0x1 )
000d51 079e     +CPC R25 , R30
                 	__CPD2N 0x1
000d52 f409      	BRNE _0x20000A6
                 _0x20000A7:
000d53 c00b      	RJMP _0x20000A9
                 _0x20000A6:
000d54 1743      	CP   R20,R19
000d55 f440      	BRSH _0x2000110
000d56 1753      	CP   R21,R19
000d57 f010      	BRLO _0x20000AC
000d58 ff00      	SBRS R16,0
000d59 c001      	RJMP _0x20000AD
                 _0x20000AC:
000d5a c010      	RJMP _0x20000AB
                 _0x20000AD:
000d5b e220      	LDI  R18,LOW(32)
000d5c ff07      	SBRS R16,7
000d5d c008      	RJMP _0x20000AE
                 _0x2000110:
000d5e e320      	LDI  R18,LOW(48)
                 _0x20000A9:
000d5f 6100      	ORI  R16,LOW(16)
000d60 ff02      	SBRS R16,2
000d61 c004      	RJMP _0x20000AF
000d62 940e 1332 	CALL SUBOPT_0x50
000d64 f009      	BREQ _0x20000B0
000d65 5051      	SUBI R21,LOW(1)
                 _0x20000B0:
                 _0x20000AF:
                 _0x20000AE:
                 _0x20000A5:
000d66 940e 12f3 	CALL SUBOPT_0x46
000d68 3050      	CPI  R21,0
000d69 f009      	BREQ _0x20000B1
000d6a 5051      	SUBI R21,LOW(1)
                 _0x20000B1:
                 _0x20000AB:
000d6b 5031      	SUBI R19,LOW(1)
000d6c 940e 1346 	CALL SUBOPT_0x51
000d6e 940e 169c 	CALL __MODD21U
000d70 940e 1319 	CALL SUBOPT_0x4B
000d72 89ec      	LDD  R30,Y+20
000d73 940e 128b 	CALL SUBOPT_0x34
000d75 27ff      	CLR  R31
000d76 2766      	CLR  R22
000d77 2777      	CLR  R23
000d78 940e 165d 	CALL __DIVD21U
000d7a 940e 126f 	CALL SUBOPT_0x2E
000d7c 940e 1286 	CALL SUBOPT_0x33
000d7e 940e 16f9 	CALL __CPD10
000d80 f009      	BREQ _0x200009F
000d81 cfb5      	RJMP _0x200009E
                 _0x200009F:
                 _0x200009C:
000d82 ff00      	SBRS R16,0
000d83 c008      	RJMP _0x20000B2
                 _0x20000B3:
000d84 3050      	CPI  R21,0
000d85 f031      	BREQ _0x20000B5
000d86 5051      	SUBI R21,LOW(1)
000d87 e2e0      	LDI  R30,LOW(32)
000d88 93ea      	ST   -Y,R30
000d89 940e 130a 	CALL SUBOPT_0x49
000d8b cff8      	RJMP _0x20000B3
                 _0x20000B5:
                 _0x20000B2:
                 _0x20000B6:
                 _0x2000054:
                 _0x200010E:
000d8c e010      	LDI  R17,LOW(0)
                 _0x2000035:
000d8d ce0c      	RJMP _0x2000030
                 _0x2000032:
000d8e 81ae      	LDD  R26,Y+6
000d8f 81bf      	LDD  R27,Y+6+1
000d90 940e 16ba 	CALL __GETW1P
000d92 940e 170a 	CALL __LOADLOCR6
000d94 96ef      	ADIW R28,63
000d95 966f      	ADIW R28,31
000d96 9508      	RET
                 _sprintf:
000d97 92ff      	PUSH R15
000d98 2ef8      	MOV  R15,R24
000d99 9726      	SBIW R28,6
000d9a 940e 1705 	CALL __SAVELOCR4
000d9c 940e 134c 	CALL SUBOPT_0x52
000d9e 9730      	SBIW R30,0
000d9f f419      	BRNE _0x20000B7
000da0 efef      	LDI  R30,LOW(65535)
000da1 efff      	LDI  R31,HIGH(65535)
000da2 c025      	RJMP _0x210000B
                 _0x20000B7:
000da3 01de      	MOVW R26,R28
000da4 9616      	ADIW R26,6
000da5 940e 15ee 	CALL __ADDW2R15
000da7 018d      	MOVW R16,R26
000da8 940e 134c 	CALL SUBOPT_0x52
000daa 83ee      	STD  Y+6,R30
000dab 83ff      	STD  Y+6+1,R31
000dac e0e0      	LDI  R30,LOW(0)
000dad 87e8      	STD  Y+8,R30
000dae 87e9      	STD  Y+8+1,R30
000daf 01de      	MOVW R26,R28
000db0 961a      	ADIW R26,10
000db1 940e 15ee 	CALL __ADDW2R15
000db3 940e 16ba 	CALL __GETW1P
000db5 93fa      	ST   -Y,R31
000db6 93ea      	ST   -Y,R30
000db7 931a      	ST   -Y,R17
000db8 930a      	ST   -Y,R16
000db9 e8e3      	LDI  R30,LOW(_put_buff_G100)
000dba e0fa      	LDI  R31,HIGH(_put_buff_G100)
000dbb 93fa      	ST   -Y,R31
000dbc 93ea      	ST   -Y,R30
000dbd 01fe      	MOVW R30,R28
000dbe 963a      	ADIW R30,10
000dbf 93fa      	ST   -Y,R31
000dc0 93ea      	ST   -Y,R30
000dc1 ddbd      	RCALL __print_G100
000dc2 019f      	MOVW R18,R30
000dc3 81ae      	LDD  R26,Y+6
000dc4 81bf      	LDD  R27,Y+6+1
000dc5 e0e0      	LDI  R30,LOW(0)
000dc6 93ec      	ST   X,R30
000dc7 01f9      	MOVW R30,R18
                 _0x210000B:
000dc8 940e 170c 	CALL __LOADLOCR4
000dca 962a      	ADIW R28,10
000dcb 90ff      	POP  R15
000dcc 9508      	RET
                 
                 	.CSEG
                 _ftoa:
000dcd 9724      	SBIW R28,4
000dce e0e0      	LDI  R30,LOW(0)
000dcf 83e8      	ST   Y,R30
000dd0 83e9      	STD  Y+1,R30
000dd1 83ea      	STD  Y+2,R30
000dd2 e3ef      	LDI  R30,LOW(63)
000dd3 83eb      	STD  Y+3,R30
000dd4 931a      	ST   -Y,R17
000dd5 930a      	ST   -Y,R16
000dd6 85eb      	LDD  R30,Y+11
000dd7 85fc      	LDD  R31,Y+11+1
000dd8 3fef      	CPI  R30,LOW(0xFFFF)
000dd9 efaf      	LDI  R26,HIGH(0xFFFF)
000dda 07fa      	CPC  R31,R26
000ddb f449      	BRNE _0x202000D
000ddc 81ee      	LDD  R30,Y+6
000ddd 81ff      	LDD  R31,Y+6+1
000dde 93fa      	ST   -Y,R31
000ddf 93ea      	ST   -Y,R30
                +
000de0 eae8     +LDI R30 , LOW ( 2 * _0x2020000 + ( 0 ) )
000de1 e0f2     +LDI R31 , HIGH ( 2 * _0x2020000 + ( 0 ) )
                 	__POINTW1FN _0x2020000,0
000de2 940e 12bf 	CALL SUBOPT_0x3E
000de4 c0a8      	RJMP _0x210000A
                 _0x202000D:
000de5 3fef      	CPI  R30,LOW(0x7FFF)
000de6 e7af      	LDI  R26,HIGH(0x7FFF)
000de7 07fa      	CPC  R31,R26
000de8 f449      	BRNE _0x202000C
000de9 81ee      	LDD  R30,Y+6
000dea 81ff      	LDD  R31,Y+6+1
000deb 93fa      	ST   -Y,R31
000dec 93ea      	ST   -Y,R30
                +
000ded eae9     +LDI R30 , LOW ( 2 * _0x2020000 + ( 1 ) )
000dee e0f2     +LDI R31 , HIGH ( 2 * _0x2020000 + ( 1 ) )
                 	__POINTW1FN _0x2020000,1
000def 940e 12bf 	CALL SUBOPT_0x3E
000df1 c09b      	RJMP _0x210000A
                 _0x202000C:
000df2 85ac      	LDD  R26,Y+12
000df3 23aa      	TST  R26
000df4 f462      	BRPL _0x202000F
                +
000df5 85e9     +LDD R30 , Y + 9
000df6 85fa     +LDD R31 , Y + 9 + 1
000df7 856b     +LDD R22 , Y + 9 + 2
000df8 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
000df9 940e 1445 	CALL __ANEGF1
000dfb 940e 1353 	CALL SUBOPT_0x53
000dfd 940e 1358 	CALL SUBOPT_0x54
000dff e2ed      	LDI  R30,LOW(45)
000e00 93ec      	ST   X,R30
                 _0x202000F:
000e01 85a8      	LDD  R26,Y+8
000e02 30a7      	CPI  R26,LOW(0x7)
000e03 f010      	BRLO _0x2020010
000e04 e0e6      	LDI  R30,LOW(6)
000e05 87e8      	STD  Y+8,R30
                 _0x2020010:
000e06 8518      	LDD  R17,Y+8
                 _0x2020011:
000e07 2fe1      	MOV  R30,R17
000e08 5011      	SUBI R17,1
000e09 30e0      	CPI  R30,0
000e0a f039      	BREQ _0x2020013
000e0b 940e 135f 	CALL SUBOPT_0x55
000e0d 940e 12aa 	CALL SUBOPT_0x3A
000e0f 940e 1364 	CALL SUBOPT_0x56
000e11 cff5      	RJMP _0x2020011
                 _0x2020013:
000e12 940e 136b 	CALL SUBOPT_0x57
000e14 940e 14eb 	CALL __ADDF12
000e16 940e 1353 	CALL SUBOPT_0x53
000e18 e010      	LDI  R17,LOW(0)
                +
000e19 e0e0     +LDI R30 , LOW ( 0x3F800000 )
000e1a e0f0     +LDI R31 , HIGH ( 0x3F800000 )
000e1b e860     +LDI R22 , BYTE3 ( 0x3F800000 )
000e1c e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
000e1d 940e 1374 	CALL SUBOPT_0x58
                 _0x2020014:
000e1f 940e 136b 	CALL SUBOPT_0x57
000e21 940e 15ce 	CALL __CMPF12
000e23 f040      	BRLO _0x2020016
000e24 940e 135f 	CALL SUBOPT_0x55
000e26 940e 12d7 	CALL SUBOPT_0x42
000e28 940e 1374 	CALL SUBOPT_0x58
000e2a 5f1f      	SUBI R17,-LOW(1)
000e2b cff3      	RJMP _0x2020014
                 _0x2020016:
000e2c 3010      	CPI  R17,0
000e2d f429      	BRNE _0x2020017
000e2e 940e 1358 	CALL SUBOPT_0x54
000e30 e3e0      	LDI  R30,LOW(48)
000e31 93ec      	ST   X,R30
000e32 c02d      	RJMP _0x2020018
                 _0x2020017:
                 _0x2020019:
000e33 2fe1      	MOV  R30,R17
000e34 5011      	SUBI R17,1
000e35 30e0      	CPI  R30,0
000e36 f149      	BREQ _0x202001B
000e37 940e 135f 	CALL SUBOPT_0x55
000e39 940e 12aa 	CALL SUBOPT_0x3A
000e3b 940e 153b 	CALL __MULF12
000e3d 940e 12de 	CALL SUBOPT_0x43
000e3f 940e 16d8 	CALL __PUTPARD1
000e41 940e 101e 	CALL _floor
000e43 940e 1374 	CALL SUBOPT_0x58
000e45 940e 136b 	CALL SUBOPT_0x57
000e47 940e 1589 	CALL __DIVF21
000e49 940e 1478 	CALL __CFD1U
000e4b 2f0e      	MOV  R16,R30
000e4c 940e 1358 	CALL SUBOPT_0x54
000e4e 2fe0      	MOV  R30,R16
000e4f 5de0      	SUBI R30,-LOW(48)
000e50 93ec      	ST   X,R30
000e51 940e 1204 	CALL SUBOPT_0x1B
000e53 940e 135f 	CALL SUBOPT_0x55
000e55 940e 1248 	CALL SUBOPT_0x27
000e57 940e 153b 	CALL __MULF12
000e59 940e 1379 	CALL SUBOPT_0x59
000e5b 940e 127e 	CALL SUBOPT_0x31
000e5d 940e 1353 	CALL SUBOPT_0x53
000e5f cfd3      	RJMP _0x2020019
                 _0x202001B:
                 _0x2020018:
000e60 85e8      	LDD  R30,Y+8
000e61 30e0      	CPI  R30,0
000e62 f131      	BREQ _0x2100009
000e63 940e 1358 	CALL SUBOPT_0x54
000e65 e2ee      	LDI  R30,LOW(46)
000e66 93ec      	ST   X,R30
                 _0x202001D:
000e67 85e8      	LDD  R30,Y+8
000e68 50e1      	SUBI R30,LOW(1)
000e69 87e8      	STD  Y+8,R30
000e6a 5fef      	SUBI R30,-LOW(1)
000e6b f0e9      	BREQ _0x202001F
000e6c 940e 1379 	CALL SUBOPT_0x59
000e6e 940e 12d7 	CALL SUBOPT_0x42
000e70 940e 1353 	CALL SUBOPT_0x53
                +
000e72 85e9     +LDD R30 , Y + 9
000e73 85fa     +LDD R31 , Y + 9 + 1
000e74 856b     +LDD R22 , Y + 9 + 2
000e75 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
000e76 940e 1478 	CALL __CFD1U
000e78 2f0e      	MOV  R16,R30
000e79 940e 1358 	CALL SUBOPT_0x54
000e7b 2fe0      	MOV  R30,R16
000e7c 5de0      	SUBI R30,-LOW(48)
000e7d 93ec      	ST   X,R30
000e7e 940e 1204 	CALL SUBOPT_0x1B
000e80 940e 1379 	CALL SUBOPT_0x59
000e82 940e 1248 	CALL SUBOPT_0x27
000e84 940e 127e 	CALL SUBOPT_0x31
000e86 940e 1353 	CALL SUBOPT_0x53
000e88 cfde      	RJMP _0x202001D
                 _0x202001F:
                 _0x2100009:
000e89 81ae      	LDD  R26,Y+6
000e8a 81bf      	LDD  R27,Y+6+1
000e8b e0e0      	LDI  R30,LOW(0)
000e8c 93ec      	ST   X,R30
                 _0x210000A:
000e8d 8119      	LDD  R17,Y+1
000e8e 8108      	LDD  R16,Y+0
000e8f 962d      	ADIW R28,13
000e90 9508      	RET
                 
                 	.DSEG
                 
                 	.CSEG
                     .equ __lcd_direction=__lcd_port-1
                     .equ __lcd_pin=__lcd_port-2
                     .equ __lcd_rs=0
                     .equ __lcd_rd=1
                     .equ __lcd_enable=2
                     .equ __lcd_busy_flag=7
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_delay_G102:
000e91 e0ff          ldi   r31,15
                 __lcd_delay0:
000e92 95fa          dec   r31
000e93 f7f1          brne  __lcd_delay0
000e94 9508      	RET
                 __lcd_ready:
000e95 b3a1          in    r26,__lcd_direction
000e96 70af          andi  r26,0xf                 ;set as input
000e97 bba1          out   __lcd_direction,r26
000e98 9a91          sbi   __lcd_port,__lcd_rd     ;RD=1
000e99 9890          cbi   __lcd_port,__lcd_rs     ;RS=0
                 __lcd_busy:
000e9a dff6      	RCALL __lcd_delay_G102
000e9b 9a92          sbi   __lcd_port,__lcd_enable ;EN=1
000e9c dff4      	RCALL __lcd_delay_G102
000e9d b3a0          in    r26,__lcd_pin
000e9e 9892          cbi   __lcd_port,__lcd_enable ;EN=0
000e9f dff1      	RCALL __lcd_delay_G102
000ea0 9a92          sbi   __lcd_port,__lcd_enable ;EN=1
000ea1 dfef      	RCALL __lcd_delay_G102
000ea2 9892          cbi   __lcd_port,__lcd_enable ;EN=0
000ea3 fda7          sbrc  r26,__lcd_busy_flag
000ea4 cff5          rjmp  __lcd_busy
000ea5 9508      	RET
                 __lcd_write_nibble_G102:
000ea6 7fa0          andi  r26,0xf0
000ea7 2bab          or    r26,r27
000ea8 bba2          out   __lcd_port,r26          ;write
000ea9 9a92          sbi   __lcd_port,__lcd_enable ;EN=1
000eaa 940e 0e91 	CALL __lcd_delay_G102
000eac 9892          cbi   __lcd_port,__lcd_enable ;EN=0
000ead 940e 0e91 	CALL __lcd_delay_G102
000eaf 9508      	RET
                 __lcd_write_data:
000eb0 9891          cbi  __lcd_port,__lcd_rd 	  ;RD=0
000eb1 b3a1          in    r26,__lcd_direction
000eb2 6fa7          ori   r26,0xf0 | (1<<__lcd_rs) | (1<<__lcd_rd) | (1<<__lcd_enable) ;set as output
000eb3 bba1          out   __lcd_direction,r26
000eb4 b3b2          in    r27,__lcd_port
000eb5 70bf          andi  r27,0xf
000eb6 81a8          ld    r26,y
000eb7 dfee      	RCALL __lcd_write_nibble_G102
000eb8 81a8          ld    r26,y
000eb9 95a2          swap  r26
000eba dfeb      	RCALL __lcd_write_nibble_G102
000ebb 9a91          sbi   __lcd_port,__lcd_rd     ;RD=1
000ebc 940c 0f9b 	JMP  _0x2100007
                 __lcd_read_nibble_G102:
000ebe 9a92          sbi   __lcd_port,__lcd_enable ;EN=1
000ebf 940e 0e91 	CALL __lcd_delay_G102
000ec1 b3e0          in    r30,__lcd_pin           ;read
000ec2 9892          cbi   __lcd_port,__lcd_enable ;EN=0
000ec3 940e 0e91 	CALL __lcd_delay_G102
000ec5 7fe0          andi  r30,0xf0
000ec6 9508      	RET
                 _lcd_read_byte0_G102:
000ec7 940e 0e91 	CALL __lcd_delay_G102
000ec9 dff4      	RCALL __lcd_read_nibble_G102
000eca 2fae          mov   r26,r30
000ecb dff2      	RCALL __lcd_read_nibble_G102
000ecc 9891          cbi   __lcd_port,__lcd_rd     ;RD=0
000ecd 95e2          swap  r30
000ece 2bea          or    r30,r26
000ecf 9508      	RET
                 _lcd_gotoxy:
000ed0 940e 0e95 	CALL __lcd_ready
000ed2 81e8      	LD   R30,Y
000ed3 e0f0      	LDI  R31,0
000ed4 5cec      	SUBI R30,LOW(-__base_y_G102)
000ed5 4ffc      	SBCI R31,HIGH(-__base_y_G102)
000ed6 81e0      	LD   R30,Z
000ed7 81a9      	LDD  R26,Y+1
000ed8 0fea      	ADD  R30,R26
000ed9 93ea      	ST   -Y,R30
000eda 940e 0eb0 	CALL __lcd_write_data
000edc 8049      	LDD  R4,Y+1
000edd 8078      	LDD  R7,Y+0
000ede c058      	RJMP _0x2100008
                 _lcd_clear:
000edf 940e 0e95 	CALL __lcd_ready
000ee1 e0e2      	LDI  R30,LOW(2)
000ee2 93ea      	ST   -Y,R30
000ee3 940e 0eb0 	CALL __lcd_write_data
000ee5 940e 0e95 	CALL __lcd_ready
000ee7 e0ec      	LDI  R30,LOW(12)
000ee8 93ea      	ST   -Y,R30
000ee9 940e 0eb0 	CALL __lcd_write_data
000eeb 940e 0e95 	CALL __lcd_ready
000eed e0e1      	LDI  R30,LOW(1)
000eee 93ea      	ST   -Y,R30
000eef 940e 0eb0 	CALL __lcd_write_data
000ef1 e0e0      	LDI  R30,LOW(0)
000ef2 2e7e      	MOV  R7,R30
000ef3 2e4e      	MOV  R4,R30
000ef4 9508      	RET
                 _lcd_putchar:
000ef5 93ef          push r30
000ef6 93ff          push r31
000ef7 81a8          ld   r26,y
000ef8 9468          set
000ef9 30aa          cpi  r26,10
000efa f019          breq __lcd_putchar1
000efb 94e8          clt
000efc 1446      	CP   R4,R6
000efd f030      	BRLO _0x2040006
                 	__lcd_putchar1:
000efe 9473      	INC  R7
000eff e0e0      	LDI  R30,LOW(0)
000f00 93ea      	ST   -Y,R30
000f01 927a      	ST   -Y,R7
000f02 dfcd      	RCALL _lcd_gotoxy
000f03 f036      	brts __lcd_putchar0
                 _0x2040006:
000f04 9443      	INC  R4
000f05 df8f          rcall __lcd_ready
000f06 9a90          sbi  __lcd_port,__lcd_rs ;RS=1
000f07 81a8          ld   r26,y
000f08 93aa          st   -y,r26
000f09 dfa6          rcall __lcd_write_data
                 __lcd_putchar0:
000f0a 91ff          pop  r31
000f0b 91ef          pop  r30
000f0c 940c 0f9b 	JMP  _0x2100007
                 _lcd_char:
000f0e 931a      	ST   -Y,R17
000f0f e010      	LDI  R17,0
000f10 81a9      	LDD  R26,Y+1
000f11 31a4      	CPI  R26,LOW(0x14)
000f12 f010      	BRLO _0x2040008
000f13 37ab      	CPI  R26,LOW(0x7B)
000f14 f008      	BRLO _0x2040009
                 _0x2040008:
000f15 c003      	RJMP _0x2040007
                 _0x2040009:
000f16 81e9      	LDD  R30,Y+1
000f17 93ea      	ST   -Y,R30
000f18 dfdc      	RCALL _lcd_putchar
                 _0x2040007:
000f19 81a9      	LDD  R26,Y+1
000f1a 3ca0      	CPI  R26,LOW(0xC0)
000f1b f010      	BRLO _0x204000B
000f1c 3ea0      	CPI  R26,LOW(0xE0)
000f1d f038      	BRLO _0x204000D
                 _0x204000B:
000f1e 81a9      	LDD  R26,Y+1
000f1f 3ea0      	CPI  R26,LOW(0xE0)
000f20 f018      	BRLO _0x204000E
000f21 efef      	LDI  R30,LOW(255)
000f22 17ea      	CP   R30,R26
000f23 f408      	BRSH _0x204000D
                 _0x204000E:
000f24 c011      	RJMP _0x204000A
                 _0x204000D:
                 _0x2040011:
000f25 940e 11df 	CALL SUBOPT_0x16
000f27 5ce8      	SUBI R30,LOW(-_code_rus)
000f28 4ffc      	SBCI R31,HIGH(-_code_rus)
000f29 81a0      	LD   R26,Z
000f2a 81e9      	LDD  R30,Y+1
000f2b 17ea      	CP   R30,R26
000f2c f011      	BREQ _0x2040013
000f2d 5f1f      	SUBI R17,-1
000f2e cff6      	RJMP _0x2040011
                 _0x2040013:
000f2f 940e 11df 	CALL SUBOPT_0x16
000f31 58e6      	SUBI R30,LOW(-_code_byte_lcd)
000f32 4ffc      	SBCI R31,HIGH(-_code_byte_lcd)
000f33 81e0      	LD   R30,Z
000f34 93ea      	ST   -Y,R30
000f35 dfbf      	RCALL _lcd_putchar
                 _0x204000A:
000f36 8118      	LDD  R17,Y+0
                 _0x2100008:
000f37 9622      	ADIW R28,2
000f38 9508      	RET
                 _lcd_puts:
000f39 931a      	ST   -Y,R17
                 _0x2040014:
000f3a 81a9      	LDD  R26,Y+1
000f3b 81ba      	LDD  R27,Y+1+1
000f3c 91ed      	LD   R30,X+
000f3d 83a9      	STD  Y+1,R26
000f3e 83ba      	STD  Y+1+1,R27
000f3f 2f1e      	MOV  R17,R30
000f40 30e0      	CPI  R30,0
000f41 f019      	BREQ _0x2040016
000f42 931a      	ST   -Y,R17
000f43 dfca      	RCALL _lcd_char
000f44 cff5      	RJMP _0x2040014
                 _0x2040016:
000f45 8118      	LDD  R17,Y+0
000f46 940c 0fed 	JMP  _0x2100005
                 _lcd_putsf:
000f48 931a      	ST   -Y,R17
                 _0x2040017:
000f49 81e9      	LDD  R30,Y+1
000f4a 81fa      	LDD  R31,Y+1+1
000f4b 9631      	ADIW R30,1
000f4c 83e9      	STD  Y+1,R30
000f4d 83fa      	STD  Y+1+1,R31
000f4e 9731      	SBIW R30,1
000f4f 91e4      	LPM  R30,Z
000f50 2f1e      	MOV  R17,R30
000f51 30e0      	CPI  R30,0
000f52 f019      	BREQ _0x2040019
000f53 931a      	ST   -Y,R17
000f54 dfb9      	RCALL _lcd_char
000f55 cff3      	RJMP _0x2040017
                 _0x2040019:
000f56 8118      	LDD  R17,Y+0
000f57 940c 0fed 	JMP  _0x2100005
                 __long_delay_G102:
000f59 27aa          clr   r26
000f5a 27bb          clr   r27
                 __long_delay0:
000f5b 9711          sbiw  r26,1         ;2 cycles
000f5c f7f1          brne  __long_delay0 ;2 cycles
000f5d 9508      	RET
                 __lcd_init_write_G102:
000f5e 9891          cbi  __lcd_port,__lcd_rd 	  ;RD=0
000f5f b3a1          in    r26,__lcd_direction
000f60 6fa7          ori   r26,0xf7                ;set as output
000f61 bba1          out   __lcd_direction,r26
000f62 b3b2          in    r27,__lcd_port
000f63 70bf          andi  r27,0xf
000f64 81a8          ld    r26,y
000f65 940e 0ea6 	CALL __lcd_write_nibble_G102
000f67 9a91          sbi   __lcd_port,__lcd_rd     ;RD=1
000f68 c032      	RJMP _0x2100007
                 _lcd_init:
000f69 9892          cbi   __lcd_port,__lcd_enable ;EN=0
000f6a 9890          cbi   __lcd_port,__lcd_rs     ;RS=0
000f6b 8068      	LDD  R6,Y+0
000f6c 81e8      	LD   R30,Y
000f6d 58e0      	SUBI R30,-LOW(128)
                +
000f6e 93e0 0336+STS __base_y_G102 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G102,2
000f70 81e8      	LD   R30,Y
000f71 54e0      	SUBI R30,-LOW(192)
                +
000f72 93e0 0337+STS __base_y_G102 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G102,3
000f74 940e 137e 	CALL SUBOPT_0x5A
000f76 940e 137e 	CALL SUBOPT_0x5A
000f78 940e 137e 	CALL SUBOPT_0x5A
000f7a dfde      	RCALL __long_delay_G102
000f7b e2e0      	LDI  R30,LOW(32)
000f7c 93ea      	ST   -Y,R30
000f7d dfe0      	RCALL __lcd_init_write_G102
000f7e dfda      	RCALL __long_delay_G102
000f7f e2e8      	LDI  R30,LOW(40)
000f80 940e 1384 	CALL SUBOPT_0x5B
000f82 e0e4      	LDI  R30,LOW(4)
000f83 940e 1384 	CALL SUBOPT_0x5B
000f85 e8e5      	LDI  R30,LOW(133)
000f86 940e 1384 	CALL SUBOPT_0x5B
000f88 b3a1          in    r26,__lcd_direction
000f89 70af          andi  r26,0xf                 ;set as input
000f8a bba1          out   __lcd_direction,r26
000f8b 9a91          sbi   __lcd_port,__lcd_rd     ;RD=1
000f8c 940e 0ec7 	CALL _lcd_read_byte0_G102
000f8e 30e5      	CPI  R30,LOW(0x5)
000f8f f011      	BREQ _0x204001A
000f90 e0e0      	LDI  R30,LOW(0)
000f91 c009      	RJMP _0x2100007
                 _0x204001A:
000f92 940e 0e95 	CALL __lcd_ready
000f94 e0e6      	LDI  R30,LOW(6)
000f95 93ea      	ST   -Y,R30
000f96 940e 0eb0 	CALL __lcd_write_data
000f98 940e 0edf 	CALL _lcd_clear
000f9a e0e1      	LDI  R30,LOW(1)
                 _0x2100007:
000f9b 9621      	ADIW R28,1
000f9c 9508      	RET
                 
                 	.CSEG
                 _rtc_init:
000f9d 81ea      	LDD  R30,Y+2
000f9e 70e3      	ANDI R30,LOW(0x3)
000f9f 83ea      	STD  Y+2,R30
000fa0 81e9      	LDD  R30,Y+1
000fa1 30e0      	CPI  R30,0
000fa2 f019      	BREQ _0x2060003
000fa3 81ea      	LDD  R30,Y+2
000fa4 61e0      	ORI  R30,0x10
000fa5 83ea      	STD  Y+2,R30
                 _0x2060003:
000fa6 81e8      	LD   R30,Y
000fa7 30e0      	CPI  R30,0
000fa8 f019      	BREQ _0x2060004
000fa9 81ea      	LDD  R30,Y+2
000faa 68e0      	ORI  R30,0x80
000fab 83ea      	STD  Y+2,R30
                 _0x2060004:
000fac 940e 1389 	CALL SUBOPT_0x5C
000fae e0e7      	LDI  R30,LOW(7)
000faf 940e 138f 	CALL SUBOPT_0x5D
000fb1 c036      	RJMP _0x2100004
                 _rtc_get_time:
000fb2 940e 1389 	CALL SUBOPT_0x5C
000fb4 e0e0      	LDI  R30,LOW(0)
000fb5 940e 1394 	CALL SUBOPT_0x5E
000fb7 81a8      	LD   R26,Y
000fb8 81b9      	LDD  R27,Y+1
000fb9 940e 13a4 	CALL SUBOPT_0x5F
000fbb 81ac      	LDD  R26,Y+4
000fbc 81bd      	LDD  R27,Y+4+1
000fbd c017      	RJMP _0x2100006
                 _rtc_set_time:
000fbe 940e 1389 	CALL SUBOPT_0x5C
000fc0 e0e0      	LDI  R30,LOW(0)
000fc1 93ea      	ST   -Y,R30
000fc2 940e 140d 	CALL _i2c_write
000fc4 81e8      	LD   R30,Y
000fc5 940e 13b6 	CALL SUBOPT_0x60
000fc7 940e 138f 	CALL SUBOPT_0x5D
000fc9 c01b      	RJMP _0x2100003
                 _rtc_get_date:
000fca 940e 1389 	CALL SUBOPT_0x5C
000fcc e0e4      	LDI  R30,LOW(4)
000fcd 940e 1394 	CALL SUBOPT_0x5E
000fcf 81ac      	LDD  R26,Y+4
000fd0 81bd      	LDD  R27,Y+4+1
000fd1 940e 13a4 	CALL SUBOPT_0x5F
000fd3 81a8      	LD   R26,Y
000fd4 81b9      	LDD  R27,Y+1
                 _0x2100006:
000fd5 93ec      	ST   X,R30
000fd6 940e 13e8 	CALL _i2c_stop
000fd8 9626      	ADIW R28,6
000fd9 9508      	RET
                 _rtc_set_date:
000fda 940e 1389 	CALL SUBOPT_0x5C
000fdc e0e4      	LDI  R30,LOW(4)
000fdd 940e 138f 	CALL SUBOPT_0x5D
000fdf 940e 13b6 	CALL SUBOPT_0x60
000fe1 93ea      	ST   -Y,R30
000fe2 940e 140d 	CALL _i2c_write
000fe4 81e8      	LD   R30,Y
                 _0x2100003:
000fe5 93ea      	ST   -Y,R30
000fe6 940e 1103 	CALL _bin2bcd
                 _0x2100004:
000fe8 93ea      	ST   -Y,R30
000fe9 940e 140d 	CALL _i2c_write
000feb 940e 13e8 	CALL _i2c_stop
                 _0x2100005:
000fed 9623      	ADIW R28,3
000fee 9508      	RET
                 
                 	.CSEG
                 _ftrunc:
000fef 817b         ldd  r23,y+3
000ff0 816a         ldd  r22,y+2
000ff1 81f9         ldd  r31,y+1
000ff2 81e8         ld   r30,y
000ff3 fb77         bst  r23,7
000ff4 0f77         lsl  r23
000ff5 fd67         sbrc r22,7
000ff6 6071         sbr  r23,1
000ff7 2f97         mov  r25,r23
000ff8 579e         subi r25,0x7e
000ff9 f081         breq __ftrunc0
000ffa f078         brcs __ftrunc0
000ffb 3198         cpi  r25,24
000ffc f490         brsh __ftrunc1
000ffd 27aa         clr  r26
000ffe 27bb         clr  r27
000fff 2788         clr  r24
                 __ftrunc2:
001000 9408         sec
001001 9587         ror  r24
001002 95b7         ror  r27
001003 95a7         ror  r26
001004 959a         dec  r25
001005 f7d1         brne __ftrunc2
001006 23ea         and  r30,r26
001007 23fb         and  r31,r27
001008 2368         and  r22,r24
001009 c005         rjmp __ftrunc1
                 __ftrunc0:
00100a 94e8         clt
00100b 2777         clr  r23
00100c 27ee         clr  r30
00100d 27ff         clr  r31
00100e 2766         clr  r22
                 __ftrunc1:
00100f 776f         cbr  r22,0x80
001010 9576         lsr  r23
001011 f408         brcc __ftrunc3
001012 6860         sbr  r22,0x80
                 __ftrunc3:
001013 f977         bld  r23,7
001014 91a9         ld   r26,y+
001015 91b9         ld   r27,y+
001016 9189         ld   r24,y+
001017 9199         ld   r25,y+
001018 17ea         cp   r30,r26
001019 07fb         cpc  r31,r27
00101a 0768         cpc  r22,r24
00101b 0779         cpc  r23,r25
00101c fb97         bst  r25,7
00101d 9508         ret
                 _floor:
00101e 940e 1290 	CALL SUBOPT_0x35
001020 940e 16d8 	CALL __PUTPARD1
001022 940e 0fef 	CALL _ftrunc
001024 940e 1283 	CALL SUBOPT_0x32
001026 f419          brne __floor1
                 __floor0:
001027 940e 1290 	CALL SUBOPT_0x35
001029 c0ab      	RJMP _0x2100001
                 __floor1:
00102a f7e6          brtc __floor0
00102b 940e 1290 	CALL SUBOPT_0x35
00102d 940e 13be 	CALL SUBOPT_0x61
00102f c0a5      	RJMP _0x2100001
                 _log:
001030 9724      	SBIW R28,4
001031 931a      	ST   -Y,R17
001032 930a      	ST   -Y,R16
001033 940e 13c5 	CALL SUBOPT_0x62
001035 940e 16fd 	CALL __CPD02
001037 f02c      	BRLT _0x208000C
                +
001038 efef     +LDI R30 , LOW ( 0xFF7FFFFF )
001039 efff     +LDI R31 , HIGH ( 0xFF7FFFFF )
00103a e76f     +LDI R22 , BYTE3 ( 0xFF7FFFFF )
00103b ef7f     +LDI R23 , BYTE4 ( 0xFF7FFFFF )
                 	__GETD1N 0xFF7FFFFF
00103c c07f      	RJMP _0x2100002
                 _0x208000C:
00103d 940e 13ca 	CALL SUBOPT_0x63
00103f 940e 16d8 	CALL __PUTPARD1
001041 b7ed      	IN   R30,SPL
001042 b7fe      	IN   R31,SPH
001043 9731      	SBIW R30,1
001044 93fa      	ST   -Y,R31
001045 93ea      	ST   -Y,R30
001046 931f      	PUSH R17
001047 930f      	PUSH R16
001048 940e 1432 	CALL _frexp
00104a 910f      	POP  R16
00104b 911f      	POP  R17
00104c 940e 13cf 	CALL SUBOPT_0x64
00104e 940e 13c5 	CALL SUBOPT_0x62
                +
001050 efe3     +LDI R30 , LOW ( 0x3F3504F3 )
001051 e0f4     +LDI R31 , HIGH ( 0x3F3504F3 )
001052 e365     +LDI R22 , BYTE3 ( 0x3F3504F3 )
001053 e37f     +LDI R23 , BYTE4 ( 0x3F3504F3 )
                 	__GETD1N 0x3F3504F3
001054 940e 15ce 	CALL __CMPF12
001056 f450      	BRSH _0x208000D
001057 940e 13ca 	CALL SUBOPT_0x63
001059 940e 13c5 	CALL SUBOPT_0x62
00105b 940e 14eb 	CALL __ADDF12
00105d 940e 13cf 	CALL SUBOPT_0x64
                +
00105f 5001     +SUBI R16 , LOW ( 1 )
001060 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
                 _0x208000D:
001061 940e 13ca 	CALL SUBOPT_0x63
001063 940e 13be 	CALL SUBOPT_0x61
001065 937f      	PUSH R23
001066 936f      	PUSH R22
001067 93ff      	PUSH R31
001068 93ef      	PUSH R30
001069 940e 13ca 	CALL SUBOPT_0x63
                +
00106b e0a0     +LDI R26 , LOW ( 0x3F800000 )
00106c e0b0     +LDI R27 , HIGH ( 0x3F800000 )
00106d e880     +LDI R24 , BYTE3 ( 0x3F800000 )
00106e e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
00106f 940e 14eb 	CALL __ADDF12
001071 91af      	POP  R26
001072 91bf      	POP  R27
001073 918f      	POP  R24
001074 919f      	POP  R25
001075 940e 1589 	CALL __DIVF21
001077 940e 13cf 	CALL SUBOPT_0x64
001079 940e 13ca 	CALL SUBOPT_0x63
00107b 940e 13c5 	CALL SUBOPT_0x62
00107d 940e 1364 	CALL SUBOPT_0x56
                +
00107f 81ea     +LDD R30 , Y + 2
001080 81fb     +LDD R31 , Y + 2 + 1
001081 816c     +LDD R22 , Y + 2 + 2
001082 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
                +
001083 e2a6     +LDI R26 , LOW ( 0x3F654226 )
001084 e4b2     +LDI R27 , HIGH ( 0x3F654226 )
001085 e685     +LDI R24 , BYTE3 ( 0x3F654226 )
001086 e39f     +LDI R25 , BYTE4 ( 0x3F654226 )
                 	__GETD2N 0x3F654226
001087 940e 153b 	CALL __MULF12
001089 01df      	MOVW R26,R30
00108a 01cb      	MOVW R24,R22
                +
00108b e4ee     +LDI R30 , LOW ( 0x4054114E )
00108c e1f1     +LDI R31 , HIGH ( 0x4054114E )
00108d e564     +LDI R22 , BYTE3 ( 0x4054114E )
00108e e470     +LDI R23 , BYTE4 ( 0x4054114E )
                 	__GETD1N 0x4054114E
00108f 940e 127e 	CALL SUBOPT_0x31
001091 940e 13c5 	CALL SUBOPT_0x62
001093 940e 153b 	CALL __MULF12
001095 937f      	PUSH R23
001096 936f      	PUSH R22
001097 93ff      	PUSH R31
001098 93ef      	PUSH R30
                +
001099 81ea     +LDD R30 , Y + 2
00109a 81fb     +LDD R31 , Y + 2 + 1
00109b 816c     +LDD R22 , Y + 2 + 2
00109c 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
                +
00109d e4ad     +LDI R26 , LOW ( 0x3FD4114D )
00109e e1b1     +LDI R27 , HIGH ( 0x3FD4114D )
00109f ed84     +LDI R24 , BYTE3 ( 0x3FD4114D )
0010a0 e39f     +LDI R25 , BYTE4 ( 0x3FD4114D )
                 	__GETD2N 0x3FD4114D
0010a1 940e 14e4 	CALL __SUBF12
0010a3 91af      	POP  R26
0010a4 91bf      	POP  R27
0010a5 918f      	POP  R24
0010a6 919f      	POP  R25
0010a7 940e 1589 	CALL __DIVF21
0010a9 937f      	PUSH R23
0010aa 936f      	PUSH R22
0010ab 93ff      	PUSH R31
0010ac 93ef      	PUSH R30
0010ad 01f8      	MOVW R30,R16
0010ae 940e 1248 	CALL SUBOPT_0x27
                +
0010b0 e1a8     +LDI R26 , LOW ( 0x3F317218 )
0010b1 e7b2     +LDI R27 , HIGH ( 0x3F317218 )
0010b2 e381     +LDI R24 , BYTE3 ( 0x3F317218 )
0010b3 e39f     +LDI R25 , BYTE4 ( 0x3F317218 )
                 	__GETD2N 0x3F317218
0010b4 940e 153b 	CALL __MULF12
0010b6 91af      	POP  R26
0010b7 91bf      	POP  R27
0010b8 918f      	POP  R24
0010b9 919f      	POP  R25
0010ba 940e 14eb 	CALL __ADDF12
                 _0x2100002:
0010bc 8119      	LDD  R17,Y+1
0010bd 8108      	LDD  R16,Y+0
0010be 962a      	ADIW R28,10
0010bf 9508      	RET
                 _log10:
0010c0 940e 16ce 	CALL __GETD2S0
0010c2 940e 16fd 	CALL __CPD02
0010c4 f02c      	BRLT _0x208000E
                +
0010c5 efef     +LDI R30 , LOW ( 0xFF7FFFFF )
0010c6 efff     +LDI R31 , HIGH ( 0xFF7FFFFF )
0010c7 e76f     +LDI R22 , BYTE3 ( 0xFF7FFFFF )
0010c8 ef7f     +LDI R23 , BYTE4 ( 0xFF7FFFFF )
                 	__GETD1N 0xFF7FFFFF
0010c9 c00b      	RJMP _0x2100001
                 _0x208000E:
0010ca 940e 1290 	CALL SUBOPT_0x35
0010cc 940e 16d8 	CALL __PUTPARD1
0010ce df61      	RCALL _log
                +
0010cf eda9     +LDI R26 , LOW ( 0x3EDE5BD9 )
0010d0 e5bb     +LDI R27 , HIGH ( 0x3EDE5BD9 )
0010d1 ed8e     +LDI R24 , BYTE3 ( 0x3EDE5BD9 )
0010d2 e39e     +LDI R25 , BYTE4 ( 0x3EDE5BD9 )
                 	__GETD2N 0x3EDE5BD9
0010d3 940e 153b 	CALL __MULF12
                 _0x2100001:
0010d5 9624      	ADIW R28,4
0010d6 9508      	RET
                 
                 	.CSEG
                 
                 	.CSEG
                 _strcpyf:
0010d7 91e9          ld   r30,y+
0010d8 91f9          ld   r31,y+
0010d9 91a9          ld   r26,y+
0010da 91b9          ld   r27,y+
0010db 01cd          movw r24,r26
                 strcpyf0:
0010dc 9005      	lpm  r0,z+
0010dd 920d          st   x+,r0
0010de 2000          tst  r0
0010df f7e1          brne strcpyf0
0010e0 01fc          movw r30,r24
0010e1 9508          ret
                 _strlen:
0010e2 91a9          ld   r26,y+
0010e3 91b9          ld   r27,y+
0010e4 27ee          clr  r30
0010e5 27ff          clr  r31
                 strlen0:
0010e6 916d          ld   r22,x+
0010e7 2366          tst  r22
0010e8 f011          breq strlen1
0010e9 9631          adiw r30,1
0010ea cffb          rjmp strlen0
                 strlen1:
0010eb 9508          ret
                 _strlenf:
0010ec 27aa          clr  r26
0010ed 27bb          clr  r27
0010ee 91e9          ld   r30,y+
0010ef 91f9          ld   r31,y+
                 strlenf0:
0010f0 9005      	lpm  r0,z+
0010f1 2000          tst  r0
0010f2 f011          breq strlenf1
0010f3 9611          adiw r26,1
0010f4 cffb          rjmp strlenf0
                 strlenf1:
0010f5 01fd          movw r30,r26
0010f6 9508          ret
                 
                 	.CSEG
                 _bcd2bin:
0010f7 81e8          ld   r30,y
0010f8 95e2          swap r30
0010f9 70ef          andi r30,0xf
0010fa 2fae          mov  r26,r30
0010fb 0faa          lsl  r26
0010fc 0faa          lsl  r26
0010fd 0fea          add  r30,r26
0010fe 0fee          lsl  r30
0010ff 91a9          ld   r26,y+
001100 70af          andi r26,0xf
001101 0fea          add  r30,r26
001102 9508          ret
                 _bin2bcd:
001103 91a9          ld   r26,y+
001104 27ee          clr  r30
                 bin2bcd0:
001105 50aa          subi r26,10
001106 f012          brmi bin2bcd1
001107 5fe0          subi r30,-16
001108 cffc          rjmp bin2bcd0
                 bin2bcd1:
001109 5fa6          subi r26,-10
00110a 0fea          add  r30,r26
00110b 9508          ret
                 
                 	.DSEG
                 _temp:
0002de           	.BYTE 0x4
                 _hum:
0002e2           	.BYTE 0x4
                 _soil:
0002e6           	.BYTE 0x4
                 _light:
0002ea           	.BYTE 0x4
                 _w_time:
0002ee           	.BYTE 0x18
                 _lcd_buffer:
000306           	.BYTE 0x21
                 ___ds18b20_scratch_pad:
000327           	.BYTE 0x9
                 __seed_G101:
000330           	.BYTE 0x4
                 __base_y_G102:
000334           	.BYTE 0x4
                 _code_rus:
000338           	.BYTE 0x42
                 _code_byte_lcd:
00037a           	.BYTE 0x42
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
00110c b256      	IN   R5,22
00110d e0e6      	LDI  R30,LOW(_lcd_buffer)
00110e e0f3      	LDI  R31,HIGH(_lcd_buffer)
00110f 93fa      	ST   -Y,R31
001110 93ea      	ST   -Y,R30
001111 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:79 WORDS
                 SUBOPT_0x1:
001112 93fa      	ST   -Y,R31
001113 93ea      	ST   -Y,R30
001114 2fa2      	MOV  R26,R18
001115 e0b0      	LDI  R27,0
001116 e0ea      	LDI  R30,LOW(10)
001117 e0f0      	LDI  R31,HIGH(10)
001118 940e 1658 	CALL __DIVW21
00111a 940e 1623 	CALL __CWD1
00111c 940e 16d8 	CALL __PUTPARD1
00111e 2fa2      	MOV  R26,R18
00111f 27bb      	CLR  R27
001120 e0ea      	LDI  R30,LOW(10)
001121 e0f0      	LDI  R31,HIGH(10)
001122 940e 168e 	CALL __MODW21
001124 940e 1623 	CALL __CWD1
001126 940e 16d8 	CALL __PUTPARD1
001128 2fa5      	MOV  R26,R21
001129 e0b0      	LDI  R27,0
00112a e0ea      	LDI  R30,LOW(10)
00112b e0f0      	LDI  R31,HIGH(10)
00112c 940e 1658 	CALL __DIVW21
00112e 940e 1623 	CALL __CWD1
001130 940e 16d8 	CALL __PUTPARD1
001132 2fa5      	MOV  R26,R21
001133 27bb      	CLR  R27
001134 e0ea      	LDI  R30,LOW(10)
001135 e0f0      	LDI  R31,HIGH(10)
001136 940e 168e 	CALL __MODW21
001138 940e 1623 	CALL __CWD1
00113a 940e 16d8 	CALL __PUTPARD1
00113c 2fa4      	MOV  R26,R20
00113d e0b0      	LDI  R27,0
00113e e0ea      	LDI  R30,LOW(10)
00113f e0f0      	LDI  R31,HIGH(10)
001140 940e 1658 	CALL __DIVW21
001142 940e 1623 	CALL __CWD1
001144 940e 16d8 	CALL __PUTPARD1
001146 2fa4      	MOV  R26,R20
001147 27bb      	CLR  R27
001148 e0ea      	LDI  R30,LOW(10)
001149 e0f0      	LDI  R31,HIGH(10)
00114a 940e 168e 	CALL __MODW21
00114c 940e 1623 	CALL __CWD1
00114e 940e 16d8 	CALL __PUTPARD1
001150 e188      	LDI  R24,24
001151 940e 0d97 	CALL _sprintf
001153 966c      	ADIW R28,28
001154 e0e3      	LDI  R30,LOW(3)
001155 93ea      	ST   -Y,R30
001156 e0e0      	LDI  R30,LOW(0)
001157 93ea      	ST   -Y,R30
001158 940e 0ed0 	CALL _lcd_gotoxy
00115a e0e6      	LDI  R30,LOW(_lcd_buffer)
00115b e0f3      	LDI  R31,HIGH(_lcd_buffer)
00115c 93fa      	ST   -Y,R31
00115d 93ea      	ST   -Y,R30
00115e 940c 0f39 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x2:
001160 e0e1      	LDI  R30,LOW(1)
001161 93ea      	ST   -Y,R30
001162 940c 0ed0 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x3:
001164 0fea      	ADD  R30,R26
001165 1ffb      	ADC  R31,R27
001166 93fa      	ST   -Y,R31
001167 93ea      	ST   -Y,R30
001168 940e 0f39 	CALL _lcd_puts
00116a e0e1      	LDI  R30,LOW(1)
00116b 93ea      	ST   -Y,R30
00116c 940e 021d 	CALL _get_key_status
00116e 30e0      	CPI  R30,0
00116f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x4:
001170 2fe1      	MOV  R30,R17
001171 e0f0      	LDI  R31,0
001172 9730      	SBIW R30,0
001173 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:33 WORDS
                 SUBOPT_0x5:
001174 e2ec      	LDI  R30,LOW(300)
001175 e0f1      	LDI  R31,HIGH(300)
001176 93fa      	ST   -Y,R31
001177 93ea      	ST   -Y,R30
001178 940c 1426 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x6:
00117a e0e2      	LDI  R30,LOW(2)
00117b 93ea      	ST   -Y,R30
00117c 940e 021d 	CALL _get_key_status
00117e 30e0      	CPI  R30,0
00117f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x7:
001180 e0e0      	LDI  R30,LOW(0)
001181 93ea      	ST   -Y,R30
001182 940e 021d 	CALL _get_key_status
001184 30e0      	CPI  R30,0
001185 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x8:
001186 e0e0      	LDI  R30,LOW(0)
001187 93ea      	ST   -Y,R30
001188 940e 0224 	CALL _get_prev_key_status
00118a 30e0      	CPI  R30,0
00118b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x9:
                +
00118c e1e5     +LDI R30 , LOW ( 2 * _0x0 + ( 19 ) )
00118d e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 19 ) )
                 	__POINTW1FN _0x0,19
00118e 93fa      	ST   -Y,R31
00118f 93ea      	ST   -Y,R30
001190 940c 0f48 	JMP  _lcd_putsf
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xA:
001192 e0e3      	LDI  R30,LOW(3)
001193 93ea      	ST   -Y,R30
001194 940e 021d 	CALL _get_key_status
001196 30e0      	CPI  R30,0
001197 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xB:
001198 e0e3      	LDI  R30,LOW(3)
001199 93ea      	ST   -Y,R30
00119a 940e 0224 	CALL _get_prev_key_status
00119c 30e0      	CPI  R30,0
00119d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xC:
00119e e0e1      	LDI  R30,LOW(1)
00119f 93ea      	ST   -Y,R30
0011a0 940e 021d 	CALL _get_key_status
0011a2 30e0      	CPI  R30,0
0011a3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xD:
0011a4 93ea      	ST   -Y,R30
0011a5 940e 0224 	CALL _get_prev_key_status
0011a7 30e0      	CPI  R30,0
0011a8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xE:
0011a9 e0f0      	LDI  R31,0
0011aa 9730      	SBIW R30,0
0011ab 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0xF:
0011ac e0e6      	LDI  R30,LOW(_lcd_buffer)
0011ad e0f3      	LDI  R31,HIGH(_lcd_buffer)
0011ae 93fa      	ST   -Y,R31
0011af 93ea      	ST   -Y,R30
0011b0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
0011b1 81ee      	LDD  R30,Y+6
0011b2 81ff      	LDD  R31,Y+6+1
0011b3 2766      	CLR  R22
0011b4 2777      	CLR  R23
0011b5 940e 16d8 	CALL __PUTPARD1
0011b7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x11:
                +
0011b8 edef     +LDI R30 , LOW ( 0xDF )
0011b9 e0f0     +LDI R31 , HIGH ( 0xDF )
0011ba e060     +LDI R22 , BYTE3 ( 0xDF )
0011bb e070     +LDI R23 , BYTE4 ( 0xDF )
                 	__GETD1N 0xDF
0011bc 940e 16d8 	CALL __PUTPARD1
0011be 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x12:
0011bf 2766      	CLR  R22
0011c0 2777      	CLR  R23
0011c1 940e 16d8 	CALL __PUTPARD1
0011c3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x13:
0011c4 e0e0      	LDI  R30,LOW(0)
0011c5 93ea      	ST   -Y,R30
0011c6 93ea      	ST   -Y,R30
0011c7 940e 0ed0 	CALL _lcd_gotoxy
0011c9 cfe2      	RJMP SUBOPT_0xF
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x14:
0011ca 940e 0f39 	CALL _lcd_puts
0011cc 2fe1      	MOV  R30,R17
0011cd e0f0      	LDI  R31,0
0011ce 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x15:
0011cf 010f      	MOVW R0,R30
0011d0 01de      	MOVW R26,R28
0011d1 9659      	ADIW R26,25
0011d2 0fae      	ADD  R26,R30
0011d3 1fbf      	ADC  R27,R31
0011d4 91ec      	LD   R30,X
0011d5 93ea      	ST   -Y,R30
0011d6 01f0      	MOVW R30,R0
0011d7 01de      	MOVW R26,R28
0011d8 9657      	ADIW R26,23
0011d9 0fae      	ADD  R26,R30
0011da 1fbf      	ADC  R27,R31
0011db 91ec      	LD   R30,X
0011dc 93ea      	ST   -Y,R30
0011dd 940c 0ed0 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x16:
0011df 2fe1      	MOV  R30,R17
0011e0 e0f0      	LDI  R31,0
0011e1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x17:
0011e2 a5ea      	LDD  R30,Y+42
0011e3 e0f0      	LDI  R31,0
0011e4 01de      	MOVW R26,R28
0011e5 9616      	ADIW R26,6
0011e6 940e 160f 	CALL __LSLW2
0011e8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x18:
0011e9 0fae      	ADD  R26,R30
0011ea 1fbf      	ADC  R27,R31
0011eb 940e 16ba 	CALL __GETW1P
0011ed 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x19:
0011ee 93fa      	ST   -Y,R31
0011ef 93ea      	ST   -Y,R30
0011f0 940c 0f48 	JMP  _lcd_putsf
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:31 WORDS
                 SUBOPT_0x1A:
0011f2 e0a3      	LDI  R26,LOW(3)
0011f3 9f0a      	MUL  R16,R26
0011f4 01f0      	MOVW R30,R0
0011f5 51e2      	SUBI R30,LOW(-_w_time)
0011f6 4ffd      	SBCI R31,HIGH(-_w_time)
0011f7 8150      	LD   R21,Z
0011f8 9f0a      	MUL  R16,R26
0011f9 01f0      	MOVW R30,R0
                +
0011fa 51e1     +SUBI R30 , LOW ( - _w_time - ( 1 ) )
0011fb 4ffd     +SBCI R31 , HIGH ( - _w_time - ( 1 ) )
                 	__ADDW1MN _w_time,1
0011fc 8140      	LD   R20,Z
0011fd 9f0a      	MUL  R16,R26
0011fe 01f0      	MOVW R30,R0
                +
0011ff 51e0     +SUBI R30 , LOW ( - _w_time - ( 2 ) )
001200 4ffd     +SBCI R31 , HIGH ( - _w_time - ( 2 ) )
                 	__ADDW1MN _w_time,2
001201 81e0      	LD   R30,Z
001202 87ea      	STD  Y+10,R30
001203 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1B:
001204 2fe0      	MOV  R30,R16
001205 e0f0      	LDI  R31,0
001206 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:24 WORDS
                 SUBOPT_0x1C:
001207 e0b0      	LDI  R27,0
001208 e0ea      	LDI  R30,LOW(10)
001209 e0f0      	LDI  R31,HIGH(10)
00120a 940e 1658 	CALL __DIVW21
00120c 940e 1623 	CALL __CWD1
00120e 940e 16d8 	CALL __PUTPARD1
001210 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x1D:
001211 27bb      	CLR  R27
001212 e0ea      	LDI  R30,LOW(10)
001213 e0f0      	LDI  R31,HIGH(10)
001214 940e 168e 	CALL __MODW21
001216 940e 1623 	CALL __CWD1
001218 940e 16d8 	CALL __PUTPARD1
00121a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1E:
00121b 0fee      	LSL  R30
00121c 1fff      	ROL  R31
00121d cfcb      	RJMP SUBOPT_0x18
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1F:
00121e 93fa      	ST   -Y,R31
00121f 93ea      	ST   -Y,R30
001220 940e 0f39 	CALL _lcd_puts
001222 cf7b      	RJMP SUBOPT_0xC
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x20:
001223 93ea      	ST   -Y,R30
001224 e0e0      	LDI  R30,LOW(0)
001225 93ea      	ST   -Y,R30
001226 940c 0ed0 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x21:
001228 93fa      	ST   -Y,R31
001229 93ea      	ST   -Y,R30
00122a 940c 038c 	JMP  _set_values
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x22:
00122c ede0      	LDI  R30,LOW(2000)
00122d e0f7      	LDI  R31,HIGH(2000)
00122e 93fa      	ST   -Y,R31
00122f 93ea      	ST   -Y,R30
001230 940e 1426 	CALL _delay_ms
001232 940c 0edf 	JMP  _lcd_clear
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x23:
001234 2766      	CLR  R22
001235 2777      	CLR  R23
001236 940e 14b1 	CALL __CDF1
001238 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x24:
                +
001239 a1eb     +LDD R30 , Y + 35
00123a a1fc     +LDD R31 , Y + 35 + 1
00123b a16d     +LDD R22 , Y + 35 + 2
00123c a17e     +LDD R23 , Y + 35 + 3
                 	__GETD1S 35
00123d 940e 16d8 	CALL __PUTPARD1
00123f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x25:
001240 e0f0      	LDI  R31,0
001241 95f5      	ASR  R31
001242 95e7      	ROR  R30
001243 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x26:
001244 ecec      	LDI  R30,LOW(204)
001245 93ea      	ST   -Y,R30
001246 940c 07a8 	JMP  _therm_write_byte
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x27:
001248 940e 1623 	CALL __CWD1
00124a 940e 14b1 	CALL __CDF1
00124c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x28:
                +
00124d e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
00124e 958a     +DEC R24
00124f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
001250 9aaa      	SBI  0x15,2
001251 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x29:
001252 2fa1      	MOV  R26,R17
001253 e0b0      	LDI  R27,0
001254 e0e2      	LDI  R30,LOW(2)
001255 e0f0      	LDI  R31,HIGH(2)
001256 940e 1658 	CALL __DIVW21
001258 2f1e      	MOV  R17,R30
001259 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2A:
00125a 98aa      	CBI  0x15,2
                +
00125b e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
00125c 958a     +DEC R24
00125d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
00125e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2B:
00125f 9aaa      	SBI  0x15,2
                +
001260 e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
001261 958a     +DEC R24
001262 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
001263 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2C:
001264 e0e1      	LDI  R30,LOW(1)
001265 93ea      	ST   -Y,R30
001266 940c 08df 	JMP  _s_read_byte
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2D:
001268 93ea      	ST   -Y,R30
001269 940e 08ba 	CALL _s_write_byte
00126b e0f0      	LDI  R31,0
                +
00126c 0f0e     +ADD R16 , R30
00126d 1f1f     +ADC R17 , R31
                 	__ADDWRR 16,17,30,31
00126e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2E:
                +
00126f 8be8     +STD Y + 16 , R30
001270 8bf9     +STD Y + 16 + 1 , R31
001271 8b6a     +STD Y + 16 + 2 , R22
001272 8b7b     +STD Y + 16 + 3 , R23
                 	__PUTD1S 16
001273 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2F:
                +
001274 87ec     +STD Y + 12 , R30
001275 87fd     +STD Y + 12 + 1 , R31
001276 876e     +STD Y + 12 + 2 , R22
001277 877f     +STD Y + 12 + 3 , R23
                 	__PUTD1S 12
001278 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x30:
                +
001279 85ac     +LDD R26 , Y + 12
00127a 85bd     +LDD R27 , Y + 12 + 1
00127b 858e     +LDD R24 , Y + 12 + 2
00127c 859f     +LDD R25 , Y + 12 + 3
                 	__GETD2S 12
00127d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x31:
00127e 940e 16e2 	CALL __SWAPD12
001280 940e 14e4 	CALL __SUBF12
001282 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x32:
001283 940e 16d3 	CALL __PUTD1S0
001285 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x33:
                +
001286 89e8     +LDD R30 , Y + 16
001287 89f9     +LDD R31 , Y + 16 + 1
001288 896a     +LDD R22 , Y + 16 + 2
001289 897b     +LDD R23 , Y + 16 + 3
                 	__GETD1S 16
00128a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x34:
                +
00128b 89a8     +LDD R26 , Y + 16
00128c 89b9     +LDD R27 , Y + 16 + 1
00128d 898a     +LDD R24 , Y + 16 + 2
00128e 899b     +LDD R25 , Y + 16 + 3
                 	__GETD2S 16
00128f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x35:
001290 940e 16c9 	CALL __GETD1S0
001292 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x36:
001293 940e 14eb 	CALL __ADDF12
                +
001295 83ec     +STD Y + 4 , R30
001296 83fd     +STD Y + 4 + 1 , R31
001297 836e     +STD Y + 4 + 2 , R22
001298 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
001299 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x37:
                +
00129a 81ac     +LDD R26 , Y + 4
00129b 81bd     +LDD R27 , Y + 4 + 1
00129c 818e     +LDD R24 , Y + 4 + 2
00129d 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
00129e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x38:
                +
00129f 83ec     +STD Y + 4 , R30
0012a0 83fd     +STD Y + 4 + 1 , R31
0012a1 836e     +STD Y + 4 + 2 , R22
0012a2 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
0012a3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x39:
0012a4 dff5      	RCALL SUBOPT_0x37
                +
0012a5 eced     +LDI R30 , LOW ( 0x3DCCCCCD )
0012a6 ecfc     +LDI R31 , HIGH ( 0x3DCCCCCD )
0012a7 ec6c     +LDI R22 , BYTE3 ( 0x3DCCCCCD )
0012a8 e37d     +LDI R23 , BYTE4 ( 0x3DCCCCCD )
                 	__GETD1N 0x3DCCCCCD
0012a9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3A:
                +
0012aa eced     +LDI R30 , LOW ( 0x3DCCCCCD )
0012ab ecfc     +LDI R31 , HIGH ( 0x3DCCCCCD )
0012ac ec6c     +LDI R22 , BYTE3 ( 0x3DCCCCCD )
0012ad e37d     +LDI R23 , BYTE4 ( 0x3DCCCCCD )
                 	__GETD1N 0x3DCCCCCD
0012ae 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3B:
                +
0012af 81ec     +LDD R30 , Y + 4
0012b0 81fd     +LDD R31 , Y + 4 + 1
0012b1 816e     +LDD R22 , Y + 4 + 2
0012b2 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
0012b3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3C:
                +
0012b4 85ec     +LDD R30 , Y + 12
0012b5 85fd     +LDD R31 , Y + 12 + 1
0012b6 856e     +LDD R22 , Y + 12 + 2
0012b7 857f     +LDD R23 , Y + 12 + 3
                 	__GETD1S 12
0012b8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3D:
0012b9 91ed      	LD   R30,X+
0012ba 91fd      	LD   R31,X+
0012bb 9631      	ADIW R30,1
0012bc 93fe      	ST   -X,R31
0012bd 93ee      	ST   -X,R30
0012be 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3E:
0012bf 93fa      	ST   -Y,R31
0012c0 93ea      	ST   -Y,R30
0012c1 940c 10d7 	JMP  _strcpyf
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x3F:
0012c3 dfd6      	RCALL SUBOPT_0x37
                +
0012c4 e0e0     +LDI R30 , LOW ( 0x41200000 )
0012c5 e0f0     +LDI R31 , HIGH ( 0x41200000 )
0012c6 e260     +LDI R22 , BYTE3 ( 0x41200000 )
0012c7 e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
0012c8 940e 153b 	CALL __MULF12
0012ca cfd4      	RJMP SUBOPT_0x38
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x40:
0012cb dfe3      	RCALL SUBOPT_0x3B
0012cc dfac      	RCALL SUBOPT_0x30
0012cd 940e 15ce 	CALL __CMPF12
0012cf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x41:
0012d0 dfa8      	RCALL SUBOPT_0x30
0012d1 dfd8      	RCALL SUBOPT_0x3A
0012d2 940e 153b 	CALL __MULF12
0012d4 df9f      	RCALL SUBOPT_0x2F
0012d5 5f3f      	SUBI R19,-LOW(1)
0012d6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x42:
                +
0012d7 e0e0     +LDI R30 , LOW ( 0x41200000 )
0012d8 e0f0     +LDI R31 , HIGH ( 0x41200000 )
0012d9 e260     +LDI R22 , BYTE3 ( 0x41200000 )
0012da e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
0012db 940e 153b 	CALL __MULF12
0012dd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x43:
                +
0012de e0a0     +LDI R26 , LOW ( 0x3F000000 )
0012df e0b0     +LDI R27 , HIGH ( 0x3F000000 )
0012e0 e080     +LDI R24 , BYTE3 ( 0x3F000000 )
0012e1 e39f     +LDI R25 , BYTE4 ( 0x3F000000 )
                 	__GETD2N 0x3F000000
0012e2 940e 14eb 	CALL __ADDF12
0012e4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x44:
0012e5 85a8      	LDD  R26,Y+8
0012e6 85b9      	LDD  R27,Y+8+1
0012e7 9611      	ADIW R26,1
0012e8 87a8      	STD  Y+8,R26
0012e9 87b9      	STD  Y+8+1,R27
0012ea 9711      	SBIW R26,1
0012eb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x45:
0012ec 85e8      	LDD  R30,Y+8
0012ed 85f9      	LDD  R31,Y+8+1
0012ee 9631      	ADIW R30,1
0012ef 87e8      	STD  Y+8,R30
0012f0 87f9      	STD  Y+8+1,R31
0012f1 9731      	SBIW R30,1
0012f2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x46:
0012f3 932a      	ST   -Y,R18
0012f4 81ef      	LDD  R30,Y+7
0012f5 85f8      	LDD  R31,Y+7+1
0012f6 93fa      	ST   -Y,R31
0012f7 93ea      	ST   -Y,R30
0012f8 85eb      	LDD  R30,Y+11
0012f9 85fc      	LDD  R31,Y+11+1
0012fa 9509      	ICALL
0012fb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:25 WORDS
                 SUBOPT_0x47:
                +
0012fc 01fe     +MOVW R30 , R28
0012fd 5ae6     +SUBI R30 , LOW ( - 90 )
0012fe 4fff     +SBCI R31 , HIGH ( - 90 )
0012ff 9001     +LD R0 , Z +
001300 81f0     +LD R31 , Z
001301 2de0     +MOV R30 , R0
                 	__GETW1SX 90
001302 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x48:
001303 9734      	SBIW R30,4
                +
001304 01de     +MOVW R26 , R28
001305 5aa6     +SUBI R26 , LOW ( - 90 )
001306 4fbf     +SBCI R27 , HIGH ( - 90 )
001307 93ed     +ST X + , R30
001308 93fc     +ST X , R31
                 	__PUTW1SX 90
001309 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x49:
00130a 81ef      	LDD  R30,Y+7
00130b 85f8      	LDD  R31,Y+7+1
00130c 93fa      	ST   -Y,R31
00130d 93ea      	ST   -Y,R30
00130e 85eb      	LDD  R30,Y+11
00130f 85fc      	LDD  R31,Y+11+1
001310 9509      	ICALL
001311 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x4A:
                +
001312 01de     +MOVW R26 , R28
001313 5aa6     +SUBI R26 , LOW ( - 90 )
001314 4fbf     +SBCI R27 , HIGH ( - 90 )
001315 900d     +LD R0 , X +
001316 91bc     +LD R27 , X
001317 2da0     +MOV R26 , R0
                 	__GETW2SX 90
001318 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4B:
                +
001319 87ea     +STD Y + 10 , R30
00131a 87fb     +STD Y + 10 + 1 , R31
00131b 876c     +STD Y + 10 + 2 , R22
00131c 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
00131d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x4C:
00131e dfdd      	RCALL SUBOPT_0x47
00131f cfe3      	RJMP SUBOPT_0x48
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4D:
                +
001320 85ea     +LDD R30 , Y + 10
001321 85fb     +LDD R31 , Y + 10 + 1
001322 856c     +LDD R22 , Y + 10 + 2
001323 857d     +LDD R23 , Y + 10 + 3
                 	__GETD1S 10
001324 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x4E:
001325 87ee      	STD  Y+14,R30
001326 87ff      	STD  Y+14+1,R31
001327 93fa      	ST   -Y,R31
001328 93ea      	ST   -Y,R30
001329 940e 10e2 	CALL _strlen
00132b 2f1e      	MOV  R17,R30
00132c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x4F:
00132d dfe4      	RCALL SUBOPT_0x4A
00132e 9614      	ADIW R26,4
00132f 940e 16ba 	CALL __GETW1P
001331 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x50:
001332 7f0b      	ANDI R16,LOW(251)
001333 89ed      	LDD  R30,Y+21
001334 93ea      	ST   -Y,R30
                +
001335 01fe     +MOVW R30 , R28
001336 5ae9     +SUBI R30 , LOW ( - 87 )
001337 4fff     +SBCI R31 , HIGH ( - 87 )
001338 9001     +LD R0 , Z +
001339 81f0     +LD R31 , Z
00133a 2de0     +MOV R30 , R0
                 	__GETW1SX 87
00133b 93fa      	ST   -Y,R31
00133c 93ea      	ST   -Y,R30
                +
00133d 01fe     +MOVW R30 , R28
00133e 5ae5     +SUBI R30 , LOW ( - 91 )
00133f 4fff     +SBCI R31 , HIGH ( - 91 )
001340 9001     +LD R0 , Z +
001341 81f0     +LD R31 , Z
001342 2de0     +MOV R30 , R0
                 	__GETW1SX 91
001343 9509      	ICALL
001344 3050      	CPI  R21,0
001345 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x51:
001346 df3f      	RCALL SUBOPT_0x33
                +
001347 85aa     +LDD R26 , Y + 10
001348 85bb     +LDD R27 , Y + 10 + 1
001349 858c     +LDD R24 , Y + 10 + 2
00134a 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
00134b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x52:
00134c 01de      	MOVW R26,R28
00134d 961c      	ADIW R26,12
00134e 940e 15ee 	CALL __ADDW2R15
001350 940e 16ba 	CALL __GETW1P
001352 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x53:
                +
001353 87e9     +STD Y + 9 , R30
001354 87fa     +STD Y + 9 + 1 , R31
001355 876b     +STD Y + 9 + 2 , R22
001356 877c     +STD Y + 9 + 3 , R23
                 	__PUTD1S 9
001357 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x54:
001358 81ae      	LDD  R26,Y+6
001359 81bf      	LDD  R27,Y+6+1
00135a 9611      	ADIW R26,1
00135b 83ae      	STD  Y+6,R26
00135c 83bf      	STD  Y+6+1,R27
00135d 9711      	SBIW R26,1
00135e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x55:
                +
00135f 81aa     +LDD R26 , Y + 2
001360 81bb     +LDD R27 , Y + 2 + 1
001361 818c     +LDD R24 , Y + 2 + 2
001362 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
001363 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x56:
001364 940e 153b 	CALL __MULF12
                +
001366 83ea     +STD Y + 2 , R30
001367 83fb     +STD Y + 2 + 1 , R31
001368 836c     +STD Y + 2 + 2 , R22
001369 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
00136a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x57:
                +
00136b 81ea     +LDD R30 , Y + 2
00136c 81fb     +LDD R31 , Y + 2 + 1
00136d 816c     +LDD R22 , Y + 2 + 2
00136e 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
                +
00136f 85a9     +LDD R26 , Y + 9
001370 85ba     +LDD R27 , Y + 9 + 1
001371 858b     +LDD R24 , Y + 9 + 2
001372 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
001373 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x58:
                +
001374 83ea     +STD Y + 2 , R30
001375 83fb     +STD Y + 2 + 1 , R31
001376 836c     +STD Y + 2 + 2 , R22
001377 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
001378 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x59:
                +
001379 85a9     +LDD R26 , Y + 9
00137a 85ba     +LDD R27 , Y + 9 + 1
00137b 858b     +LDD R24 , Y + 9 + 2
00137c 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
00137d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x5A:
00137e 940e 0f59 	CALL __long_delay_G102
001380 e3e0      	LDI  R30,LOW(48)
001381 93ea      	ST   -Y,R30
001382 940c 0f5e 	JMP  __lcd_init_write_G102
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5B:
001384 93ea      	ST   -Y,R30
001385 940e 0eb0 	CALL __lcd_write_data
001387 940c 0f59 	JMP  __long_delay_G102
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x5C:
001389 940e 13d9 	CALL _i2c_start
00138b ede0      	LDI  R30,LOW(208)
00138c 93ea      	ST   -Y,R30
00138d 940c 140d 	JMP  _i2c_write
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5D:
00138f 93ea      	ST   -Y,R30
001390 940e 140d 	CALL _i2c_write
001392 81ea      	LDD  R30,Y+2
001393 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x5E:
001394 93ea      	ST   -Y,R30
001395 940e 140d 	CALL _i2c_write
001397 940e 13d9 	CALL _i2c_start
001399 ede1      	LDI  R30,LOW(209)
00139a 93ea      	ST   -Y,R30
00139b 940e 140d 	CALL _i2c_write
00139d e0e1      	LDI  R30,LOW(1)
00139e 93ea      	ST   -Y,R30
00139f 940e 13f2 	CALL _i2c_read
0013a1 93ea      	ST   -Y,R30
0013a2 940c 10f7 	JMP  _bcd2bin
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x5F:
0013a4 93ec      	ST   X,R30
0013a5 e0e1      	LDI  R30,LOW(1)
0013a6 93ea      	ST   -Y,R30
0013a7 940e 13f2 	CALL _i2c_read
0013a9 93ea      	ST   -Y,R30
0013aa 940e 10f7 	CALL _bcd2bin
0013ac 81aa      	LDD  R26,Y+2
0013ad 81bb      	LDD  R27,Y+2+1
0013ae 93ec      	ST   X,R30
0013af e0e0      	LDI  R30,LOW(0)
0013b0 93ea      	ST   -Y,R30
0013b1 940e 13f2 	CALL _i2c_read
0013b3 93ea      	ST   -Y,R30
0013b4 940c 10f7 	JMP  _bcd2bin
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x60:
0013b6 93ea      	ST   -Y,R30
0013b7 dd4b      	RCALL _bin2bcd
0013b8 93ea      	ST   -Y,R30
0013b9 940e 140d 	CALL _i2c_write
0013bb 81e9      	LDD  R30,Y+1
0013bc 93ea      	ST   -Y,R30
0013bd cd45      	RJMP _bin2bcd
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x61:
                +
0013be e0a0     +LDI R26 , LOW ( 0x3F800000 )
0013bf e0b0     +LDI R27 , HIGH ( 0x3F800000 )
0013c0 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
0013c1 e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
0013c2 940e 14e4 	CALL __SUBF12
0013c4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x62:
                +
0013c5 81ae     +LDD R26 , Y + 6
0013c6 81bf     +LDD R27 , Y + 6 + 1
0013c7 8588     +LDD R24 , Y + 6 + 2
0013c8 8599     +LDD R25 , Y + 6 + 3
                 	__GETD2S 6
0013c9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x63:
                +
0013ca 81ee     +LDD R30 , Y + 6
0013cb 81ff     +LDD R31 , Y + 6 + 1
0013cc 8568     +LDD R22 , Y + 6 + 2
0013cd 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
0013ce 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x64:
                +
0013cf 83ee     +STD Y + 6 , R30
0013d0 83ff     +STD Y + 6 + 1 , R31
0013d1 8768     +STD Y + 6 + 2 , R22
0013d2 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
0013d3 9508      	RET
                 
                 
                 	.CSEG
                 	.equ __i2c_dir=__i2c_port-1
                 	.equ __i2c_pin=__i2c_port-2
                 _i2c_init:
0013d4 98a8      	cbi  __i2c_port,__scl_bit
0013d5 98a9      	cbi  __i2c_port,__sda_bit
0013d6 9aa0      	sbi  __i2c_dir,__scl_bit
0013d7 98a1      	cbi  __i2c_dir,__sda_bit
0013d8 c015      	rjmp __i2c_delay2
                 _i2c_start:
0013d9 98a1      	cbi  __i2c_dir,__sda_bit
0013da 98a0      	cbi  __i2c_dir,__scl_bit
0013db 27ee      	clr  r30
0013dc 0000      	nop
0013dd 9b99      	sbis __i2c_pin,__sda_bit
0013de 9508      	ret
0013df 9b98      	sbis __i2c_pin,__scl_bit
0013e0 9508      	ret
0013e1 d004      	rcall __i2c_delay1
0013e2 9aa1      	sbi  __i2c_dir,__sda_bit
0013e3 d002      	rcall __i2c_delay1
0013e4 9aa0      	sbi  __i2c_dir,__scl_bit
0013e5 e0e1      	ldi  r30,1
                 __i2c_delay1:
0013e6 e06d      	ldi  r22,13
0013e7 c007      	rjmp __i2c_delay2l
                 _i2c_stop:
0013e8 9aa1      	sbi  __i2c_dir,__sda_bit
0013e9 9aa0      	sbi  __i2c_dir,__scl_bit
0013ea d003      	rcall __i2c_delay2
0013eb 98a0      	cbi  __i2c_dir,__scl_bit
0013ec dff9      	rcall __i2c_delay1
0013ed 98a1      	cbi  __i2c_dir,__sda_bit
                 __i2c_delay2:
0013ee e16b      	ldi  r22,27
                 __i2c_delay2l:
0013ef 956a      	dec  r22
0013f0 f7f1      	brne __i2c_delay2l
0013f1 9508      	ret
                 _i2c_read:
0013f2 e078      	ldi  r23,8
                 __i2c_read0:
0013f3 98a0      	cbi  __i2c_dir,__scl_bit
0013f4 dff1      	rcall __i2c_delay1
                 __i2c_read3:
0013f5 9b98      	sbis __i2c_pin,__scl_bit
0013f6 cffe      	rjmp __i2c_read3
0013f7 dfee      	rcall __i2c_delay1
0013f8 9488      	clc
0013f9 9999      	sbic __i2c_pin,__sda_bit
0013fa 9408      	sec
0013fb 9aa0      	sbi  __i2c_dir,__scl_bit
0013fc dff1      	rcall __i2c_delay2
0013fd 1fee      	rol  r30
0013fe 957a      	dec  r23
0013ff f799      	brne __i2c_read0
001400 9179      	ld   r23,y+
001401 2377      	tst  r23
001402 f411      	brne __i2c_read1
001403 98a1      	cbi  __i2c_dir,__sda_bit
001404 c001      	rjmp __i2c_read2
                 __i2c_read1:
001405 9aa1      	sbi  __i2c_dir,__sda_bit
                 __i2c_read2:
001406 dfdf      	rcall __i2c_delay1
001407 98a0      	cbi  __i2c_dir,__scl_bit
001408 dfe5      	rcall __i2c_delay2
001409 9aa0      	sbi  __i2c_dir,__scl_bit
00140a dfdb      	rcall __i2c_delay1
00140b 98a1      	cbi  __i2c_dir,__sda_bit
00140c cfd9      	rjmp __i2c_delay1
                 
                 _i2c_write:
00140d 91e9      	ld   r30,y+
00140e e078      	ldi  r23,8
                 __i2c_write0:
00140f 0fee      	lsl  r30
001410 f410      	brcc __i2c_write1
001411 98a1      	cbi  __i2c_dir,__sda_bit
001412 c001      	rjmp __i2c_write2
                 __i2c_write1:
001413 9aa1      	sbi  __i2c_dir,__sda_bit
                 __i2c_write2:
001414 dfd9      	rcall __i2c_delay2
001415 98a0      	cbi  __i2c_dir,__scl_bit
001416 dfcf      	rcall __i2c_delay1
                 __i2c_write3:
001417 9b98      	sbis __i2c_pin,__scl_bit
001418 cffe      	rjmp __i2c_write3
001419 dfcc      	rcall __i2c_delay1
00141a 9aa0      	sbi  __i2c_dir,__scl_bit
00141b 957a      	dec  r23
00141c f791      	brne __i2c_write0
00141d 98a1      	cbi  __i2c_dir,__sda_bit
00141e dfc7      	rcall __i2c_delay1
00141f 98a0      	cbi  __i2c_dir,__scl_bit
001420 dfcd      	rcall __i2c_delay2
001421 e0e1      	ldi  r30,1
001422 9999      	sbic __i2c_pin,__sda_bit
001423 27ee      	clr  r30
001424 9aa0      	sbi  __i2c_dir,__scl_bit
001425 9508      	ret
                 
                 _delay_ms:
001426 91e9      	ld   r30,y+
001427 91f9      	ld   r31,y+
001428 9630      	adiw r30,0
001429 f039      	breq __delay_ms1
                 __delay_ms0:
                +
00142a ed80     +LDI R24 , LOW ( 0x7D0 )
00142b e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00142c 9701     +SBIW R24 , 1
00142d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00142e 95a8      	wdr
00142f 9731      	sbiw r30,1
001430 f7c9      	brne __delay_ms0
                 __delay_ms1:
001431 9508      	ret
                 
                 _frexp:
001432 91a9      	LD   R26,Y+
001433 91b9      	LD   R27,Y+
001434 91e9      	LD   R30,Y+
001435 91f9      	LD   R31,Y+
001436 9169      	LD   R22,Y+
001437 9179      	LD   R23,Y+
001438 fb77      	BST  R23,7
001439 0f66      	LSL  R22
00143a 1f77      	ROL  R23
00143b 2788      	CLR  R24
00143c 577e      	SUBI R23,0x7E
00143d 0b88      	SBC  R24,R24
00143e 937d      	ST   X+,R23
00143f 938c      	ST   X,R24
001440 e77e      	LDI  R23,0x7E
001441 9576      	LSR  R23
001442 9567      	ROR  R22
001443 f00e      	BRTS __ANEGF1
001444 9508      	RET
                 
                 __ANEGF1:
001445 9730      	SBIW R30,0
001446 4060      	SBCI R22,0
001447 4070      	SBCI R23,0
001448 f009      	BREQ __ANEGF10
001449 5870      	SUBI R23,0x80
                 __ANEGF10:
00144a 9508      	RET
                 
                 __ROUND_REPACK:
00144b 2355      	TST  R21
00144c f442      	BRPL __REPACK
00144d 3850      	CPI  R21,0x80
00144e f411      	BRNE __ROUND_REPACK0
00144f ffe0      	SBRS R30,0
001450 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
001451 9631      	ADIW R30,1
001452 1f69      	ADC  R22,R25
001453 1f79      	ADC  R23,R25
001454 f06b      	BRVS __REPACK1
                 
                 __REPACK:
001455 e850      	LDI  R21,0x80
001456 2757      	EOR  R21,R23
001457 f411      	BRNE __REPACK0
001458 935f      	PUSH R21
001459 c0cf      	RJMP __ZERORES
                 __REPACK0:
00145a 3f5f      	CPI  R21,0xFF
00145b f031      	BREQ __REPACK1
00145c 0f66      	LSL  R22
00145d 0c00      	LSL  R0
00145e 9557      	ROR  R21
00145f 9567      	ROR  R22
001460 2f75      	MOV  R23,R21
001461 9508      	RET
                 __REPACK1:
001462 935f      	PUSH R21
001463 2000      	TST  R0
001464 f00a      	BRMI __REPACK2
001465 c0cf      	RJMP __MAXRES
                 __REPACK2:
001466 c0c8      	RJMP __MINRES
                 
                 __UNPACK:
001467 e850      	LDI  R21,0x80
001468 2e19      	MOV  R1,R25
001469 2215      	AND  R1,R21
00146a 0f88      	LSL  R24
00146b 1f99      	ROL  R25
00146c 2795      	EOR  R25,R21
00146d 0f55      	LSL  R21
00146e 9587      	ROR  R24
                 
                 __UNPACK1:
00146f e850      	LDI  R21,0x80
001470 2e07      	MOV  R0,R23
001471 2205      	AND  R0,R21
001472 0f66      	LSL  R22
001473 1f77      	ROL  R23
001474 2775      	EOR  R23,R21
001475 0f55      	LSL  R21
001476 9567      	ROR  R22
001477 9508      	RET
                 
                 __CFD1U:
001478 9468      	SET
001479 c001      	RJMP __CFD1U0
                 __CFD1:
00147a 94e8      	CLT
                 __CFD1U0:
00147b 935f      	PUSH R21
00147c dff2      	RCALL __UNPACK1
00147d 3870      	CPI  R23,0x80
00147e f018      	BRLO __CFD10
00147f 3f7f      	CPI  R23,0xFF
001480 f408      	BRCC __CFD10
001481 c0a7      	RJMP __ZERORES
                 __CFD10:
001482 e156      	LDI  R21,22
001483 1b57      	SUB  R21,R23
001484 f4aa      	BRPL __CFD11
001485 9551      	NEG  R21
001486 3058      	CPI  R21,8
001487 f40e      	BRTC __CFD19
001488 3059      	CPI  R21,9
                 __CFD19:
001489 f030      	BRLO __CFD17
00148a efef      	SER  R30
00148b efff      	SER  R31
00148c ef6f      	SER  R22
00148d e77f      	LDI  R23,0x7F
00148e f977      	BLD  R23,7
00148f c01a      	RJMP __CFD15
                 __CFD17:
001490 2777      	CLR  R23
001491 2355      	TST  R21
001492 f0b9      	BREQ __CFD15
                 __CFD18:
001493 0fee      	LSL  R30
001494 1fff      	ROL  R31
001495 1f66      	ROL  R22
001496 1f77      	ROL  R23
001497 955a      	DEC  R21
001498 f7d1      	BRNE __CFD18
001499 c010      	RJMP __CFD15
                 __CFD11:
00149a 2777      	CLR  R23
                 __CFD12:
00149b 3058      	CPI  R21,8
00149c f028      	BRLO __CFD13
00149d 2fef      	MOV  R30,R31
00149e 2ff6      	MOV  R31,R22
00149f 2f67      	MOV  R22,R23
0014a0 5058      	SUBI R21,8
0014a1 cff9      	RJMP __CFD12
                 __CFD13:
0014a2 2355      	TST  R21
0014a3 f031      	BREQ __CFD15
                 __CFD14:
0014a4 9576      	LSR  R23
0014a5 9567      	ROR  R22
0014a6 95f7      	ROR  R31
0014a7 95e7      	ROR  R30
0014a8 955a      	DEC  R21
0014a9 f7d1      	BRNE __CFD14
                 __CFD15:
0014aa 2000      	TST  R0
0014ab f40a      	BRPL __CFD16
0014ac d149      	RCALL __ANEGD1
                 __CFD16:
0014ad 915f      	POP  R21
0014ae 9508      	RET
                 
                 __CDF1U:
0014af 9468      	SET
0014b0 c001      	RJMP __CDF1U0
                 __CDF1:
0014b1 94e8      	CLT
                 __CDF1U0:
0014b2 9730      	SBIW R30,0
0014b3 4060      	SBCI R22,0
0014b4 4070      	SBCI R23,0
0014b5 f0b1      	BREQ __CDF10
0014b6 2400      	CLR  R0
0014b7 f026      	BRTS __CDF11
0014b8 2377      	TST  R23
0014b9 f412      	BRPL __CDF11
0014ba 9400      	COM  R0
0014bb d13a      	RCALL __ANEGD1
                 __CDF11:
0014bc 2e17      	MOV  R1,R23
0014bd e17e      	LDI  R23,30
0014be 2011      	TST  R1
                 __CDF12:
0014bf f032      	BRMI __CDF13
0014c0 957a      	DEC  R23
0014c1 0fee      	LSL  R30
0014c2 1fff      	ROL  R31
0014c3 1f66      	ROL  R22
0014c4 1c11      	ROL  R1
0014c5 cff9      	RJMP __CDF12
                 __CDF13:
0014c6 2fef      	MOV  R30,R31
0014c7 2ff6      	MOV  R31,R22
0014c8 2d61      	MOV  R22,R1
0014c9 935f      	PUSH R21
0014ca df8a      	RCALL __REPACK
0014cb 915f      	POP  R21
                 __CDF10:
0014cc 9508      	RET
                 
                 __SWAPACC:
0014cd 934f      	PUSH R20
0014ce 01af      	MOVW R20,R30
0014cf 01fd      	MOVW R30,R26
0014d0 01da      	MOVW R26,R20
0014d1 01ab      	MOVW R20,R22
0014d2 01bc      	MOVW R22,R24
0014d3 01ca      	MOVW R24,R20
0014d4 2d40      	MOV  R20,R0
0014d5 2c01      	MOV  R0,R1
0014d6 2e14      	MOV  R1,R20
0014d7 914f      	POP  R20
0014d8 9508      	RET
                 
                 __UADD12:
0014d9 0fea      	ADD  R30,R26
0014da 1ffb      	ADC  R31,R27
0014db 1f68      	ADC  R22,R24
0014dc 9508      	RET
                 
                 __NEGMAN1:
0014dd 95e0      	COM  R30
0014de 95f0      	COM  R31
0014df 9560      	COM  R22
0014e0 5fef      	SUBI R30,-1
0014e1 4fff      	SBCI R31,-1
0014e2 4f6f      	SBCI R22,-1
0014e3 9508      	RET
                 
                 __SUBF12:
0014e4 935f      	PUSH R21
0014e5 df81      	RCALL __UNPACK
0014e6 3890      	CPI  R25,0x80
0014e7 f171      	BREQ __ADDF129
0014e8 e850      	LDI  R21,0x80
0014e9 2615      	EOR  R1,R21
                 
0014ea c004      	RJMP __ADDF120
                 
                 __ADDF12:
0014eb 935f      	PUSH R21
0014ec df7a      	RCALL __UNPACK
0014ed 3890      	CPI  R25,0x80
0014ee f139      	BREQ __ADDF129
                 
                 __ADDF120:
0014ef 3870      	CPI  R23,0x80
0014f0 f121      	BREQ __ADDF128
                 __ADDF121:
0014f1 2f57      	MOV  R21,R23
0014f2 1b59      	SUB  R21,R25
0014f3 f12b      	BRVS __ADDF1211
0014f4 f412      	BRPL __ADDF122
0014f5 dfd7      	RCALL __SWAPACC
0014f6 cffa      	RJMP __ADDF121
                 __ADDF122:
0014f7 3158      	CPI  R21,24
0014f8 f018      	BRLO __ADDF123
0014f9 27aa      	CLR  R26
0014fa 27bb      	CLR  R27
0014fb 2788      	CLR  R24
                 __ADDF123:
0014fc 3058      	CPI  R21,8
0014fd f028      	BRLO __ADDF124
0014fe 2fab      	MOV  R26,R27
0014ff 2fb8      	MOV  R27,R24
001500 2788      	CLR  R24
001501 5058      	SUBI R21,8
001502 cff9      	RJMP __ADDF123
                 __ADDF124:
001503 2355      	TST  R21
001504 f029      	BREQ __ADDF126
                 __ADDF125:
001505 9586      	LSR  R24
001506 95b7      	ROR  R27
001507 95a7      	ROR  R26
001508 955a      	DEC  R21
001509 f7d9      	BRNE __ADDF125
                 __ADDF126:
00150a 2d50      	MOV  R21,R0
00150b 2551      	EOR  R21,R1
00150c f072      	BRMI __ADDF127
00150d dfcb      	RCALL __UADD12
00150e f438      	BRCC __ADDF129
00150f 9567      	ROR  R22
001510 95f7      	ROR  R31
001511 95e7      	ROR  R30
001512 9573      	INC  R23
001513 f413      	BRVC __ADDF129
001514 c020      	RJMP __MAXRES
                 __ADDF128:
001515 dfb7      	RCALL __SWAPACC
                 __ADDF129:
001516 df3e      	RCALL __REPACK
001517 915f      	POP  R21
001518 9508      	RET
                 __ADDF1211:
001519 f7d8      	BRCC __ADDF128
00151a cffb      	RJMP __ADDF129
                 __ADDF127:
00151b 1bea      	SUB  R30,R26
00151c 0bfb      	SBC  R31,R27
00151d 0b68      	SBC  R22,R24
00151e f051      	BREQ __ZERORES
00151f f410      	BRCC __ADDF1210
001520 9400      	COM  R0
001521 dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
001522 2366      	TST  R22
001523 f392      	BRMI __ADDF129
001524 0fee      	LSL  R30
001525 1fff      	ROL  R31
001526 1f66      	ROL  R22
001527 957a      	DEC  R23
001528 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
001529 27ee      	CLR  R30
00152a 27ff      	CLR  R31
00152b 2766      	CLR  R22
00152c 2777      	CLR  R23
00152d 915f      	POP  R21
00152e 9508      	RET
                 
                 __MINRES:
00152f efef      	SER  R30
001530 efff      	SER  R31
001531 e76f      	LDI  R22,0x7F
001532 ef7f      	SER  R23
001533 915f      	POP  R21
001534 9508      	RET
                 
                 __MAXRES:
001535 efef      	SER  R30
001536 efff      	SER  R31
001537 e76f      	LDI  R22,0x7F
001538 e77f      	LDI  R23,0x7F
001539 915f      	POP  R21
00153a 9508      	RET
                 
                 __MULF12:
00153b 935f      	PUSH R21
00153c df2a      	RCALL __UNPACK
00153d 3870      	CPI  R23,0x80
00153e f351      	BREQ __ZERORES
00153f 3890      	CPI  R25,0x80
001540 f341      	BREQ __ZERORES
001541 2401      	EOR  R0,R1
001542 9408      	SEC
001543 1f79      	ADC  R23,R25
001544 f423      	BRVC __MULF124
001545 f31c      	BRLT __ZERORES
                 __MULF125:
001546 2000      	TST  R0
001547 f33a      	BRMI __MINRES
001548 cfec      	RJMP __MAXRES
                 __MULF124:
001549 920f      	PUSH R0
00154a 931f      	PUSH R17
00154b 932f      	PUSH R18
00154c 933f      	PUSH R19
00154d 934f      	PUSH R20
00154e 2711      	CLR  R17
00154f 2722      	CLR  R18
001550 2799      	CLR  R25
001551 9f68      	MUL  R22,R24
001552 01a0      	MOVW R20,R0
001553 9f8f      	MUL  R24,R31
001554 2d30      	MOV  R19,R0
001555 0d41      	ADD  R20,R1
001556 1f59      	ADC  R21,R25
001557 9f6b      	MUL  R22,R27
001558 0d30      	ADD  R19,R0
001559 1d41      	ADC  R20,R1
00155a 1f59      	ADC  R21,R25
00155b 9f8e      	MUL  R24,R30
00155c d027      	RCALL __MULF126
00155d 9fbf      	MUL  R27,R31
00155e d025      	RCALL __MULF126
00155f 9f6a      	MUL  R22,R26
001560 d023      	RCALL __MULF126
001561 9fbe      	MUL  R27,R30
001562 d01d      	RCALL __MULF127
001563 9faf      	MUL  R26,R31
001564 d01b      	RCALL __MULF127
001565 9fae      	MUL  R26,R30
001566 0d11      	ADD  R17,R1
001567 1f29      	ADC  R18,R25
001568 1f39      	ADC  R19,R25
001569 1f49      	ADC  R20,R25
00156a 1f59      	ADC  R21,R25
00156b 2fe3      	MOV  R30,R19
00156c 2ff4      	MOV  R31,R20
00156d 2f65      	MOV  R22,R21
00156e 2f52      	MOV  R21,R18
00156f 914f      	POP  R20
001570 913f      	POP  R19
001571 912f      	POP  R18
001572 911f      	POP  R17
001573 900f      	POP  R0
001574 2366      	TST  R22
001575 f02a      	BRMI __MULF122
001576 0f55      	LSL  R21
001577 1fee      	ROL  R30
001578 1fff      	ROL  R31
001579 1f66      	ROL  R22
00157a c002      	RJMP __MULF123
                 __MULF122:
00157b 9573      	INC  R23
00157c f24b      	BRVS __MULF125
                 __MULF123:
00157d decd      	RCALL __ROUND_REPACK
00157e 915f      	POP  R21
00157f 9508      	RET
                 
                 __MULF127:
001580 0d10      	ADD  R17,R0
001581 1d21      	ADC  R18,R1
001582 1f39      	ADC  R19,R25
001583 c002      	RJMP __MULF128
                 __MULF126:
001584 0d20      	ADD  R18,R0
001585 1d31      	ADC  R19,R1
                 __MULF128:
001586 1f49      	ADC  R20,R25
001587 1f59      	ADC  R21,R25
001588 9508      	RET
                 
                 __DIVF21:
001589 935f      	PUSH R21
00158a dedc      	RCALL __UNPACK
00158b 3870      	CPI  R23,0x80
00158c f421      	BRNE __DIVF210
00158d 2011      	TST  R1
                 __DIVF211:
00158e f40a      	BRPL __DIVF219
00158f cf9f      	RJMP __MINRES
                 __DIVF219:
001590 cfa4      	RJMP __MAXRES
                 __DIVF210:
001591 3890      	CPI  R25,0x80
001592 f409      	BRNE __DIVF218
                 __DIVF217:
001593 cf95      	RJMP __ZERORES
                 __DIVF218:
001594 2401      	EOR  R0,R1
001595 9408      	SEC
001596 0b97      	SBC  R25,R23
001597 f41b      	BRVC __DIVF216
001598 f3d4      	BRLT __DIVF217
001599 2000      	TST  R0
00159a cff3      	RJMP __DIVF211
                 __DIVF216:
00159b 2f79      	MOV  R23,R25
00159c 931f      	PUSH R17
00159d 932f      	PUSH R18
00159e 933f      	PUSH R19
00159f 934f      	PUSH R20
0015a0 2411      	CLR  R1
0015a1 2711      	CLR  R17
0015a2 2722      	CLR  R18
0015a3 2733      	CLR  R19
0015a4 2744      	CLR  R20
0015a5 2755      	CLR  R21
0015a6 e290      	LDI  R25,32
                 __DIVF212:
0015a7 17ae      	CP   R26,R30
0015a8 07bf      	CPC  R27,R31
0015a9 0786      	CPC  R24,R22
0015aa 0741      	CPC  R20,R17
0015ab f030      	BRLO __DIVF213
0015ac 1bae      	SUB  R26,R30
0015ad 0bbf      	SBC  R27,R31
0015ae 0b86      	SBC  R24,R22
0015af 0b41      	SBC  R20,R17
0015b0 9408      	SEC
0015b1 c001      	RJMP __DIVF214
                 __DIVF213:
0015b2 9488      	CLC
                 __DIVF214:
0015b3 1f55      	ROL  R21
0015b4 1f22      	ROL  R18
0015b5 1f33      	ROL  R19
0015b6 1c11      	ROL  R1
0015b7 1faa      	ROL  R26
0015b8 1fbb      	ROL  R27
0015b9 1f88      	ROL  R24
0015ba 1f44      	ROL  R20
0015bb 959a      	DEC  R25
0015bc f751      	BRNE __DIVF212
0015bd 01f9      	MOVW R30,R18
0015be 2d61      	MOV  R22,R1
0015bf 914f      	POP  R20
0015c0 913f      	POP  R19
0015c1 912f      	POP  R18
0015c2 911f      	POP  R17
0015c3 2366      	TST  R22
0015c4 f032      	BRMI __DIVF215
0015c5 0f55      	LSL  R21
0015c6 1fee      	ROL  R30
0015c7 1fff      	ROL  R31
0015c8 1f66      	ROL  R22
0015c9 957a      	DEC  R23
0015ca f243      	BRVS __DIVF217
                 __DIVF215:
0015cb de7f      	RCALL __ROUND_REPACK
0015cc 915f      	POP  R21
0015cd 9508      	RET
                 
                 __CMPF12:
0015ce 2399      	TST  R25
0015cf f09a      	BRMI __CMPF120
0015d0 2377      	TST  R23
0015d1 f042      	BRMI __CMPF121
0015d2 1797      	CP   R25,R23
0015d3 f048      	BRLO __CMPF122
0015d4 f429      	BRNE __CMPF121
0015d5 17ae      	CP   R26,R30
0015d6 07bf      	CPC  R27,R31
0015d7 0786      	CPC  R24,R22
0015d8 f020      	BRLO __CMPF122
0015d9 f031      	BREQ __CMPF123
                 __CMPF121:
0015da 9498      	CLZ
0015db 9488      	CLC
0015dc 9508      	RET
                 __CMPF122:
0015dd 9498      	CLZ
0015de 9408      	SEC
0015df 9508      	RET
                 __CMPF123:
0015e0 9418      	SEZ
0015e1 9488      	CLC
0015e2 9508      	RET
                 __CMPF120:
0015e3 2377      	TST  R23
0015e4 f7c2      	BRPL __CMPF122
0015e5 1797      	CP   R25,R23
0015e6 f398      	BRLO __CMPF121
0015e7 f7a9      	BRNE __CMPF122
0015e8 17ea      	CP   R30,R26
0015e9 07fb      	CPC  R31,R27
0015ea 0768      	CPC  R22,R24
0015eb f388      	BRLO __CMPF122
0015ec f399      	BREQ __CMPF123
0015ed cfec      	RJMP __CMPF121
                 
                 __ADDW2R15:
0015ee 2400      	CLR  R0
0015ef 0daf      	ADD  R26,R15
0015f0 1db0      	ADC  R27,R0
0015f1 9508      	RET
                 
                 __ANEGW1:
0015f2 95f1      	NEG  R31
0015f3 95e1      	NEG  R30
0015f4 40f0      	SBCI R31,0
0015f5 9508      	RET
                 
                 __ANEGD1:
0015f6 95f0      	COM  R31
0015f7 9560      	COM  R22
0015f8 9570      	COM  R23
0015f9 95e1      	NEG  R30
0015fa 4fff      	SBCI R31,-1
0015fb 4f6f      	SBCI R22,-1
0015fc 4f7f      	SBCI R23,-1
0015fd 9508      	RET
                 
                 __LSLB12:
0015fe 23ee      	TST  R30
0015ff 2e0e      	MOV  R0,R30
001600 2fea      	MOV  R30,R26
001601 f019      	BREQ __LSLB12R
                 __LSLB12L:
001602 0fee      	LSL  R30
001603 940a      	DEC  R0
001604 f7e9      	BRNE __LSLB12L
                 __LSLB12R:
001605 9508      	RET
                 
                 __ASRW12:
001606 23ee      	TST  R30
001607 2e0e      	MOV  R0,R30
001608 01fd      	MOVW R30,R26
001609 f021      	BREQ __ASRW12R
                 __ASRW12L:
00160a 95f5      	ASR  R31
00160b 95e7      	ROR  R30
00160c 940a      	DEC  R0
00160d f7e1      	BRNE __ASRW12L
                 __ASRW12R:
00160e 9508      	RET
                 
                 __LSLW2:
00160f 0fee      	LSL  R30
001610 1fff      	ROL  R31
001611 0fee      	LSL  R30
001612 1fff      	ROL  R31
001613 9508      	RET
                 
                 __LSRW4:
001614 95f6      	LSR  R31
001615 95e7      	ROR  R30
                 __LSRW3:
001616 95f6      	LSR  R31
001617 95e7      	ROR  R30
                 __LSRW2:
001618 95f6      	LSR  R31
001619 95e7      	ROR  R30
00161a 95f6      	LSR  R31
00161b 95e7      	ROR  R30
00161c 9508      	RET
                 
                 __CBD1:
00161d 2ffe      	MOV  R31,R30
00161e 0fff      	ADD  R31,R31
00161f 0bff      	SBC  R31,R31
001620 2f6f      	MOV  R22,R31
001621 2f7f      	MOV  R23,R31
001622 9508      	RET
                 
                 __CWD1:
001623 2f6f      	MOV  R22,R31
001624 0f66      	ADD  R22,R22
001625 0b66      	SBC  R22,R22
001626 2f76      	MOV  R23,R22
001627 9508      	RET
                 
                 __CWD2:
001628 2f8b      	MOV  R24,R27
001629 0f88      	ADD  R24,R24
00162a 0b88      	SBC  R24,R24
00162b 2f98      	MOV  R25,R24
00162c 9508      	RET
                 
                 __LNEGB1:
00162d 23ee      	TST  R30
00162e e0e1      	LDI  R30,1
00162f f009      	BREQ __LNEGB1F
001630 27ee      	CLR  R30
                 __LNEGB1F:
001631 9508      	RET
                 
                 __DIVB21U:
001632 2400      	CLR  R0
001633 e098      	LDI  R25,8
                 __DIVB21U1:
001634 0faa      	LSL  R26
001635 1c00      	ROL  R0
001636 1a0e      	SUB  R0,R30
001637 f410      	BRCC __DIVB21U2
001638 0e0e      	ADD  R0,R30
001639 c001      	RJMP __DIVB21U3
                 __DIVB21U2:
00163a 60a1      	SBR  R26,1
                 __DIVB21U3:
00163b 959a      	DEC  R25
00163c f7b9      	BRNE __DIVB21U1
00163d 2fea      	MOV  R30,R26
00163e 2da0      	MOV  R26,R0
00163f 9508      	RET
                 
                 __DIVB21:
001640 d05f      	RCALL __CHKSIGNB
001641 dff0      	RCALL __DIVB21U
001642 f40e      	BRTC __DIVB211
001643 95e1      	NEG  R30
                 __DIVB211:
001644 9508      	RET
                 
                 __DIVW21U:
001645 2400      	CLR  R0
001646 2411      	CLR  R1
001647 e190      	LDI  R25,16
                 __DIVW21U1:
001648 0faa      	LSL  R26
001649 1fbb      	ROL  R27
00164a 1c00      	ROL  R0
00164b 1c11      	ROL  R1
00164c 1a0e      	SUB  R0,R30
00164d 0a1f      	SBC  R1,R31
00164e f418      	BRCC __DIVW21U2
00164f 0e0e      	ADD  R0,R30
001650 1e1f      	ADC  R1,R31
001651 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
001652 60a1      	SBR  R26,1
                 __DIVW21U3:
001653 959a      	DEC  R25
001654 f799      	BRNE __DIVW21U1
001655 01fd      	MOVW R30,R26
001656 01d0      	MOVW R26,R0
001657 9508      	RET
                 
                 __DIVW21:
001658 d053      	RCALL __CHKSIGNW
001659 dfeb      	RCALL __DIVW21U
00165a f40e      	BRTC __DIVW211
00165b df96      	RCALL __ANEGW1
                 __DIVW211:
00165c 9508      	RET
                 
                 __DIVD21U:
00165d 933f      	PUSH R19
00165e 934f      	PUSH R20
00165f 935f      	PUSH R21
001660 2400      	CLR  R0
001661 2411      	CLR  R1
001662 2744      	CLR  R20
001663 2755      	CLR  R21
001664 e230      	LDI  R19,32
                 __DIVD21U1:
001665 0faa      	LSL  R26
001666 1fbb      	ROL  R27
001667 1f88      	ROL  R24
001668 1f99      	ROL  R25
001669 1c00      	ROL  R0
00166a 1c11      	ROL  R1
00166b 1f44      	ROL  R20
00166c 1f55      	ROL  R21
00166d 1a0e      	SUB  R0,R30
00166e 0a1f      	SBC  R1,R31
00166f 0b46      	SBC  R20,R22
001670 0b57      	SBC  R21,R23
001671 f428      	BRCC __DIVD21U2
001672 0e0e      	ADD  R0,R30
001673 1e1f      	ADC  R1,R31
001674 1f46      	ADC  R20,R22
001675 1f57      	ADC  R21,R23
001676 c001      	RJMP __DIVD21U3
                 __DIVD21U2:
001677 60a1      	SBR  R26,1
                 __DIVD21U3:
001678 953a      	DEC  R19
001679 f759      	BRNE __DIVD21U1
00167a 01fd      	MOVW R30,R26
00167b 01bc      	MOVW R22,R24
00167c 01d0      	MOVW R26,R0
00167d 01ca      	MOVW R24,R20
00167e 915f      	POP  R21
00167f 914f      	POP  R20
001680 913f      	POP  R19
001681 9508      	RET
                 
                 __MODB21:
001682 94e8      	CLT
001683 ffa7      	SBRS R26,7
001684 c002      	RJMP __MODB211
001685 95a1      	NEG  R26
001686 9468      	SET
                 __MODB211:
001687 fde7      	SBRC R30,7
001688 95e1      	NEG  R30
001689 dfa8      	RCALL __DIVB21U
00168a 2fea      	MOV  R30,R26
00168b f40e      	BRTC __MODB212
00168c 95e1      	NEG  R30
                 __MODB212:
00168d 9508      	RET
                 
                 __MODW21:
00168e 94e8      	CLT
00168f ffb7      	SBRS R27,7
001690 c004      	RJMP __MODW211
001691 95a0      	COM  R26
001692 95b0      	COM  R27
001693 9611      	ADIW R26,1
001694 9468      	SET
                 __MODW211:
001695 fdf7      	SBRC R31,7
001696 df5b      	RCALL __ANEGW1
001697 dfad      	RCALL __DIVW21U
001698 01fd      	MOVW R30,R26
001699 f40e      	BRTC __MODW212
00169a df57      	RCALL __ANEGW1
                 __MODW212:
00169b 9508      	RET
                 
                 __MODD21U:
00169c dfc0      	RCALL __DIVD21U
00169d 01fd      	MOVW R30,R26
00169e 01bc      	MOVW R22,R24
00169f 9508      	RET
                 
                 __CHKSIGNB:
0016a0 94e8      	CLT
0016a1 ffe7      	SBRS R30,7
0016a2 c002      	RJMP __CHKSB1
0016a3 95e1      	NEG  R30
0016a4 9468      	SET
                 __CHKSB1:
0016a5 ffa7      	SBRS R26,7
0016a6 c004      	RJMP __CHKSB2
0016a7 95a1      	NEG  R26
0016a8 f800      	BLD  R0,0
0016a9 9403      	INC  R0
0016aa fa00      	BST  R0,0
                 __CHKSB2:
0016ab 9508      	RET
                 
                 __CHKSIGNW:
0016ac 94e8      	CLT
0016ad fff7      	SBRS R31,7
0016ae c002      	RJMP __CHKSW1
0016af df42      	RCALL __ANEGW1
0016b0 9468      	SET
                 __CHKSW1:
0016b1 ffb7      	SBRS R27,7
0016b2 c006      	RJMP __CHKSW2
0016b3 95a0      	COM  R26
0016b4 95b0      	COM  R27
0016b5 9611      	ADIW R26,1
0016b6 f800      	BLD  R0,0
0016b7 9403      	INC  R0
0016b8 fa00      	BST  R0,0
                 __CHKSW2:
0016b9 9508      	RET
                 
                 __GETW1P:
0016ba 91ed      	LD   R30,X+
0016bb 91fc      	LD   R31,X
0016bc 9711      	SBIW R26,1
0016bd 9508      	RET
                 
                 __GETD1P:
0016be 91ed      	LD   R30,X+
0016bf 91fd      	LD   R31,X+
0016c0 916d      	LD   R22,X+
0016c1 917c      	LD   R23,X
0016c2 9713      	SBIW R26,3
0016c3 9508      	RET
                 
                 __PUTDP1:
0016c4 93ed      	ST   X+,R30
0016c5 93fd      	ST   X+,R31
0016c6 936d      	ST   X+,R22
0016c7 937c      	ST   X,R23
0016c8 9508      	RET
                 
                 __GETD1S0:
0016c9 81e8      	LD   R30,Y
0016ca 81f9      	LDD  R31,Y+1
0016cb 816a      	LDD  R22,Y+2
0016cc 817b      	LDD  R23,Y+3
0016cd 9508      	RET
                 
                 __GETD2S0:
0016ce 81a8      	LD   R26,Y
0016cf 81b9      	LDD  R27,Y+1
0016d0 818a      	LDD  R24,Y+2
0016d1 819b      	LDD  R25,Y+3
0016d2 9508      	RET
                 
                 __PUTD1S0:
0016d3 83e8      	ST   Y,R30
0016d4 83f9      	STD  Y+1,R31
0016d5 836a      	STD  Y+2,R22
0016d6 837b      	STD  Y+3,R23
0016d7 9508      	RET
                 
                 __PUTPARD1:
0016d8 937a      	ST   -Y,R23
0016d9 936a      	ST   -Y,R22
0016da 93fa      	ST   -Y,R31
0016db 93ea      	ST   -Y,R30
0016dc 9508      	RET
                 
                 __CDF2U:
0016dd 9468      	SET
0016de c001      	RJMP __CDF2U0
                 __CDF2:
0016df 94e8      	CLT
                 __CDF2U0:
0016e0 d001      	RCALL __SWAPD12
0016e1 ddd0      	RCALL __CDF1U0
                 
                 __SWAPD12:
0016e2 2e18      	MOV  R1,R24
0016e3 2f86      	MOV  R24,R22
0016e4 2d61      	MOV  R22,R1
0016e5 2e19      	MOV  R1,R25
0016e6 2f97      	MOV  R25,R23
0016e7 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
0016e8 2e1b      	MOV  R1,R27
0016e9 2fbf      	MOV  R27,R31
0016ea 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
0016eb 2e1a      	MOV  R1,R26
0016ec 2fae      	MOV  R26,R30
0016ed 2de1      	MOV  R30,R1
0016ee 9508      	RET
                 
                 __COPYMML:
0016ef 2799      	CLR  R25
                 __COPYMM:
0016f0 93ef      	PUSH R30
0016f1 93ff      	PUSH R31
                 __COPYMM0:
0016f2 9161      	LD   R22,Z+
0016f3 936d      	ST   X+,R22
0016f4 9701      	SBIW R24,1
0016f5 f7e1      	BRNE __COPYMM0
0016f6 91ff      	POP  R31
0016f7 91ef      	POP  R30
0016f8 9508      	RET
                 
                 __CPD10:
0016f9 9730      	SBIW R30,0
0016fa 4060      	SBCI R22,0
0016fb 4070      	SBCI R23,0
0016fc 9508      	RET
                 
                 __CPD02:
0016fd 2400      	CLR  R0
0016fe 160a      	CP   R0,R26
0016ff 060b      	CPC  R0,R27
001700 0608      	CPC  R0,R24
001701 0609      	CPC  R0,R25
001702 9508      	RET
                 
                 __SAVELOCR6:
001703 935a      	ST   -Y,R21
                 __SAVELOCR5:
001704 934a      	ST   -Y,R20
                 __SAVELOCR4:
001705 933a      	ST   -Y,R19
                 __SAVELOCR3:
001706 932a      	ST   -Y,R18
                 __SAVELOCR2:
001707 931a      	ST   -Y,R17
001708 930a      	ST   -Y,R16
001709 9508      	RET
                 
                 __LOADLOCR6:
00170a 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00170b 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00170c 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00170d 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00170e 8119      	LDD  R17,Y+1
00170f 8108      	LD   R16,Y
001710 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
001711 0fac      	ADD  R26,R28
001712 1fbd      	ADC  R27,R29
                 __INITLOC0:
001713 9005      	LPM  R0,Z+
001714 920d      	ST   X+,R0
001715 958a      	DEC  R24
001716 f7e1      	BRNE __INITLOC0
001717 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  89 r1 :  40 r2 :   0 r3 :   0 r4 :   4 r5 :   8 r6 :   2 r7 :   4 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16: 115 r17: 160 r18:  90 r19:  65 r20:  93 r21: 130 r22: 150 r23: 140 
r24: 152 r25:  90 r26: 410 r27: 159 r28:  87 r29:   2 r30:1013 r31: 402 
x  :  63 y  : 762 z  :  37 
Registers used: 26 out of 35 (74.3%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  32 add   :  33 
adiw  :  85 and   :   9 andi  :  21 asr   :   4 bclr  :   0 bld   :   4 
brbc  :   0 brbs  :   0 brcc  :  12 brcs  :   1 break :   0 breq  :  99 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  35 
brlt  :   5 brmi  :  12 brne  : 167 brpl  :   9 brsh  :  20 brtc  :   6 
brts  :   3 brvc  :   4 brvs  :   4 bset  :   0 bst   :   5 call  : 653 
cbi   :  45 cbr   :   1 clc   :   4 clh   :   0 cli   :   1 cln   :   0 
clr   :  70 cls   :   0 clt   :   9 clv   :   0 clz   :   2 com   :  12 
cp    :  25 cpc   :  62 cpi   : 178 cpse  :   0 dec   :  37 des   :   0 
eor   :  11 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   3 ijmp  :   0 
in    :  39 inc   :   6 jmp   :  59 ld    :  86 ldd   : 328 ldi   : 651 
lds   :  10 lpm   :  15 lsl   :  27 lsr   :   8 mov   : 130 movw  :  90 
mul   :  19 muls  :   0 mulsu :   0 neg   :  11 nop   :   1 or    :   6 
ori   :  14 out   :  15 pop   :  73 push  :  73 rcall : 113 ret   : 178 
reti  :   0 rjmp  : 252 rol   :  42 ror   :  26 sbc   :  14 sbci  :  34 
sbi   :  42 sbic  :   4 sbis  :   6 sbiw  :  46 sbr   :   5 sbrc  :   6 
sbrs  :  24 sec   :   6 seh   :   0 sei   :   0 sen   :   0 ser   :   8 
ses   :   0 set   :   8 sev   :   0 sez   :   1 sleep :   0 spm   :   0 
st    : 303 std   : 132 sts   :   2 sub   :   7 subi  : 102 swap  :   4 
tst   :  28 wdr   :   1 
Instructions used: 83 out of 116 (71.6%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x002e30  10922    902  11824   32768  36.1%
[.dseg] 0x000060 0x0003bc      0    348    348    2048  17.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 13 warnings
