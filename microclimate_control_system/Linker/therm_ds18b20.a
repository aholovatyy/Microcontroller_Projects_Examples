;#include "therm_ds18b20.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;struct __ds18b20_scratch_pad_struct __ds18b20_scratch_pad;
;//uint8_t therm_dq;
;
;/*void therm_input_mode(void)
;{
;	THERM_DDR&=~(1<<THERM_DQ);
;}
;void therm_output_mode(void)
;{
;	THERM_DDR|=(1<<THERM_DQ);
;}
;void therm_low(void)
;{
;	THERM_PORT&=~(1<<THERM_DQ);
;}     */
;/*void therm_high(void)
;{
;	THERM_PORT|=(1<<THERM_DQ);
;}
;void therm_delay(uint16_t delay)
;{
;	while (delay--) #asm("nop");
;}*/
;
;uint8_t therm_reset()
; 0001 001C {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 001D 	uint8_t i;
; 0001 001E 	//посилаємо імпульс скидання тривалістю 480 мкс
; 0001 001F 	THERM_LOW();
;PCODE: $0000000F VOL: 0
;	i -> R17
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0001 0020 	THERM_OUTPUT_MODE();
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0001 0021 	//therm_delay(us(480));
; 0001 0022 	delay_us(480);
;PCODE: $00000014 VOL: 0
; 0001 0023 	//повертаємо шину і чекаємо 60 мкс на відповідь
; 0001 0024 	THERM_INPUT_MODE();
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0001 0025 	//therm_delay(us(60));
; 0001 0026 	delay_us(60);
;PCODE: $00000017 VOL: 0
; 0001 0027 	//зберігаємо значення на шині і чекаємо завершення 480 мкс періода
; 0001 0028 	i=(THERM_PIN & (1<<THERM_DQ));
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0001 0029 	//therm_delay(us(420));
; 0001 002A 	delay_us(420);
;PCODE: $0000001B VOL: 0
; 0001 002B 	if ((THERM_PIN & (1<<THERM_DQ))==i) return 1;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0001 002C 	//повертаємо результат виконання (presence pulse) (0=OK, 1=WRONG)
; 0001 002D 	return 0;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0001 002E }
;PCODE: $00000027 VOL: 0
;
;void therm_write_bit(uint8_t _bit)
; 0001 0031 {
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0001 0032 	//переводимо шину в стан лог. 0 на 1 мкс
; 0001 0033 	THERM_LOW();
;	_bit -> Y+0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0001 0034 	THERM_OUTPUT_MODE();
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0001 0035 	//therm_delay(us(1));
; 0001 0036 	delay_us(1);
;PCODE: $0000002E VOL: 0
; 0001 0037 	//якщо пишемо 1, відпускаємо шину (якщо 0 тримаємо в стані лог. 0)
; 0001 0038 	if (_bit) THERM_INPUT_MODE();
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0001 0039 	//чекаємо 60мкм і відпускаємо шину
; 0001 003A 	//therm_delay(us(60));
; 0001 003B 	delay_us(60);
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0001 003C 	THERM_INPUT_MODE();
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0001 003D }
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;
;uint8_t therm_read_bit(void)
; 0001 0040 {
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0001 0041 	uint8_t _bit=0;
; 0001 0042 	//переводимо шину в лог. 0 на 1 мкс
; 0001 0043 	THERM_LOW();
;PCODE: $0000003D VOL: 0
;	_bit -> R17
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0001 0044 	THERM_OUTPUT_MODE();
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0001 0045 	//therm_delay(us(1));
; 0001 0046 	delay_us(1);
;PCODE: $00000044 VOL: 0
; 0001 0047 	//відпускаємо шину і чекаємо 14 мкс
; 0001 0048 	THERM_INPUT_MODE();
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0001 0049 	//therm_delay(us(14));
; 0001 004A 	delay_us(14);
;PCODE: $00000047 VOL: 0
; 0001 004B 	//читаємо біт з шини
; 0001 004C 	if (THERM_PIN&(1<<THERM_DQ)) _bit=1;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0001 004D 	//чекаємо 45 мкс до закінчення і вертаємо прочитане значення
; 0001 004E 	//therm_delay(us(45));
; 0001 004F 	delay_us(45);
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0001 0050 	return _bit;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0001 0051 }
;PCODE: $00000052 VOL: 0
;
;uint8_t therm_read_byte(void)
; 0001 0054 {
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0001 0055 	uint8_t i=8, n=0;
; 0001 0056 	while (i--)
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;	i -> R17
;	n -> R16
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0001 0057 	{
; 0001 0058 		//зсуваємо на 1 розряд вправо і зберігаємо прочитане значення
; 0001 0059 		n>>=1;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0001 005A 		n|=(therm_read_bit()<<7);
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0001 005B 	}
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0001 005C 	return n;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0001 005D }
;PCODE: $0000006E VOL: 0
;
;void therm_write_byte(uint8_t byte)
; 0001 0060 {
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0001 0061 	uint8_t i=8;
; 0001 0062 	while (i--)
;PCODE: $00000071 VOL: 0
;	byte -> Y+1
;	i -> R17
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0001 0063 	{
; 0001 0064 		//пишемо молодший біт і зсуваємо на 1 розряд вправо для виводу наступного біта
; 0001 0065 		therm_write_bit(byte&1);
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0001 0066 		byte>>=1;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0001 0067 	}
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0001 0068 }
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;
;uint8_t therm_crc8(uint8_t *data, uint8_t num_bytes)
; 0001 006B {
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0001 006C 	uint8_t byte_ctr, cur_byte, bit_ctr, crc=0;
; 0001 006D 
; 0001 006E 	for (byte_ctr=0; byte_ctr<num_bytes; byte_ctr++)
;PCODE: $0000008B VOL: 0
;	*data -> Y+5
;	num_bytes -> Y+4
;	byte_ctr -> R17
;	cur_byte -> R16
;	bit_ctr -> R19
;	crc -> R18
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0001 006F 	{
; 0001 0070 		cur_byte=data[byte_ctr];
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0001 0071 		for (bit_ctr=0; bit_ctr<8; cur_byte>>=1, bit_ctr++)
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0001 0072 			if ((cur_byte ^ crc) & 1) crc = ((crc ^ 0x18) >> 1) | 0x80;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0001 0073 			else crc>>=1;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0001 0074 	}
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0001 0075 	return crc;
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0001 0076 }
;PCODE: $000000CA VOL: 0
;
;uint8_t therm_init(int8_t temp_low, int8_t temp_high, uint8_t resolution)
; 0001 0079 {
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0001 007A 	resolution=(resolution<<5)|0x1f;
;	temp_low -> Y+2
;	temp_high -> Y+1
;	resolution -> Y+0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0001 007B 	//ініціалізуємо давач
; 0001 007C 	if (therm_reset()) return 1;
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0001 007D 	therm_write_byte(THERM_CMD_SKIPROM);
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0001 007E 	therm_write_byte(THERM_CMD_WSCRATCHPAD);
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0001 007F 	therm_write_byte(temp_high);
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0001 0080 	therm_write_byte(temp_low);
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0001 0081 	therm_write_byte(resolution);
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0001 0082 	therm_reset();
;PCODE: $000000E7 VOL: 0
; 0001 0083 	therm_write_byte(THERM_CMD_SKIPROM);
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0001 0084 	therm_write_byte(THERM_CMD_CPYSCRATCHPAD);
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0001 0085 	delay_ms(15);
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0001 0086 	return 0;
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0001 0087 }
;PCODE: $000000F4 VOL: 0
;
;uint8_t therm_read_spd(void)
; 0001 008A {
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0001 008B 	uint8_t i=0, *p;
; 0001 008C 
; 0001 008D 	p = (uint8_t*) &__ds18b20_scratch_pad;
;PCODE: $000000F7 VOL: 0
;	i -> R17
;	*p -> R18,R19
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0001 008E 	do
;PCODE: $000000FC VOL: 0
; 0001 008F 		*(p++)=therm_read_byte();
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0001 0090 	while(++i<9);
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0001 0091 	if (therm_crc8((uint8_t*)&__ds18b20_scratch_pad,8)!=__ds18b20_scratch_pad.crc)
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0001 0092 		return 1;
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0001 0093 	return 0;
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0001 0094 }
;PCODE: $0000011E VOL: 0
;
;uint8_t therm_read_temperature(float *temp)
; 0001 0097 {
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0001 0098 	uint8_t digit, decimal, resolution, sign;
; 0001 0099 	uint16_t meas, bit_mask[4]={0x0008, 0x000c, 0x000e, 0x000f};
; 0001 009A 
; 0001 009B 	//скинути, пропустити процедуру перевірки серійного номера ROM і почати вимірювання і перетворення температури
; 0001 009C 	if (therm_reset()) return 1;
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;	*temp -> Y+14
;	digit -> R17
;	decimal -> R16
;	resolution -> R19
;	sign -> R18
;	meas -> R20,R21
;	bit_mask -> Y+6
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0001 009D 	therm_write_byte(THERM_CMD_SKIPROM);
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0001 009E 	therm_write_byte(THERM_CMD_CONVERTTEMP);
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0001 009F 	//чекаємо до закінчення перетворення
; 0001 00A0 	//if (!therm_read_bit()) return 1;
; 0001 00A1 	while(!therm_read_bit());
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0001 00A2 	//скидаємо, пропускаємо ROM і посилаємо команду зчитування Scratchpad
; 0001 00A3 	therm_reset();
;PCODE: $00000147 VOL: 0
; 0001 00A4 	therm_write_byte(THERM_CMD_SKIPROM);
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0001 00A5 	therm_write_byte(THERM_CMD_RSCRATCHPAD);
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0001 00A6 	if (therm_read_spd()) return 1;
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0001 00A7 	therm_reset();
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0001 00A8 	resolution=(__ds18b20_scratch_pad.conf_register>>5) & 3;
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0001 00A9     //отримуємо молодший і старший байти температури
; 0001 00AA 	meas=__ds18b20_scratch_pad.temp_lsb;  // LSB
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0001 00AB 	meas|=((uint16_t)__ds18b20_scratch_pad.temp_msb) << 8; // MSB
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0001 00AC 	//перевіряємо на мінусову температуру
; 0001 00AD 	if (meas & 0x8000)
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0001 00AE 	{
; 0001 00AF 		sign=1;  //відмічаємо мінусову температуру
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0001 00B0 		meas^=0xffff;  //перетворюємо в плюсову
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0001 00B1 		meas++;
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0001 00B2 	}
; 0001 00B3 	else sign=0;
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0001 00B4 	//зберігаємо цілу і дробову частини температури
; 0001 00B5 	digit=(uint8_t)(meas >> 4); //зберігаємо цілу частину
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0001 00B6 	decimal=(uint8_t)(meas & bit_mask[resolution]);	//отримуємо дробову частину
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0001 00B7 	*temp=digit+decimal*0.0625;
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0001 00B8 	if (sign) *temp=-(*temp); //ставемо знак мінус, якщо мінусова температура
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0001 00B9 	return 0;
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0001 00BA }
;PCODE: $00000199 VOL: 0
