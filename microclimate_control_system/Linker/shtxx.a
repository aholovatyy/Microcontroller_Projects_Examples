;/***********************************************************************************
;Project:          SHTxx library
;Filename:         shtxx.c
;Processor:        AVR family
;Author:           (C) Andriy Holovatyy
;***********************************************************************************/
;
;#include "shtxx.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <math.h>   //math library
;
;/* константи для обчислення температури і вологості */
;//const float C1=-4.0;              // for 12 Bit
;//const float C2=+0.0405;           // for 12 Bit
;//const float C3=-0.0000028;        // for 12 Bit
;
;/*const float C1=-2.0468;           // for 12 Bit
;const float C2=+0.0367;           // for 12 Bit
;const float C3=-0.0000015955;     // for 12 Bit
;
;const float T1=+0.01;             // for 14 Bit @ 5V
;const float T2=+0.00008;           // for 14 Bit @ 5V
;
;*/
;
;const float C1=-2.0468;           // for 8 Bit

	.DSEG
;const float C2=+0.5872;           // for 8 Bit
;const float C3=-0.00040845;       // for 8 Bit
;
;const float T1=+0.01;             // for 12 Bit @ 5V
;const float T2=+0.00128;          // for 12 Bit @ 5V
;
;void sht_init(void)
; 0002 0021 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0002 0022   SHT_PORT=0x00;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0002 0023   SHT_DDR=1<<SHT_SCK;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0002 0024 }
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;
;//----------------------------------------------------------------------------------
;char s_write_byte(unsigned char _value)
; 0002 0028 //----------------------------------------------------------------------------------
; 0002 0029 // writes a byte on the Sensibus and checks the acknowledge
; 0002 002A {
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0002 002B   unsigned char i,error=0;
; 0002 002C   SHT_OUTPUT_MODE();
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;	_value -> Y+2
;	i -> R17
;	error -> R16
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0002 002D   for (i=0x80;i>0;i/=2)             //shift bit for masking
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0002 002E   {
; 0002 002F     if (i & _value) SHT_DATA_HIGH(); //masking value with i , write to SENSI-BUS
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0002 0030     else
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0002 0031      SHT_DATA_LOW();
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0002 0032     delay_us(1);
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0002 0033     SHT_SCK_HIGH(); //clk for SENSI-BUS
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0002 0034     delay_us(5);    //pulswith approx. 5 us
;PCODE: $00000036 VOL: 0
; 0002 0035     SHT_SCK_LOW();
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0002 0036   }
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0002 0037   SHT_INPUT_MODE(); //release DATA-line
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0002 0038   delay_us(1);
;PCODE: $00000043 VOL: 0
; 0002 0039   SHT_SCK_HIGH(); //clk #9 for ack
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0002 003A   delay_us(1);
;PCODE: $00000046 VOL: 0
; 0002 003B   error=(SHT_PIN&(1<<SHT_DATA));                       //check ack (DATA will be pulled down by SHT11)
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0002 003C   SHT_SCK_LOW();
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0002 003D   delay_us(1);
;PCODE: $0000004C VOL: 0
; 0002 003E   return error;                     //error=1 in case of no acknowledge
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0002 003F }
;PCODE: $00000054 VOL: 0
;
;//----------------------------------------------------------------------------------
;char s_read_byte(unsigned char ack)
; 0002 0043 //----------------------------------------------------------------------------------
; 0002 0044 // reads a byte form the Sensibus and gives an acknowledge in case of "ack=1"
; 0002 0045 {
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0002 0046   unsigned char i,val=0;
; 0002 0047   SHT_INPUT_MODE(); //release DATA-line
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;	ack -> Y+2
;	i -> R17
;	val -> R16
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0002 0048   for (i=0x80;i>0;i/=2)  //shift bit for masking
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0002 0049   {
; 0002 004A     SHT_SCK_HIGH();    //clk for SENSI-BUS
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0002 004B     delay_us(1);
;PCODE: $0000006B VOL: 0
; 0002 004C     if ((SHT_PIN & (1<<SHT_DATA))) val=(val | i);        //read bit
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0002 004D     SHT_SCK_LOW();
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0002 004E     delay_us(1);
;PCODE: $00000074 VOL: 0
; 0002 004F   }
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0002 0050   if (ack) //in case of "ack==1" pull down DATA-Line
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0002 0051   {
; 0002 0052    SHT_OUTPUT_MODE();
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0002 0053    SHT_DATA_LOW();
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0002 0054    delay_us(1);
;PCODE: $00000084 VOL: 0
; 0002 0055   }
; 0002 0056   SHT_SCK_HIGH();        //clk #9 for ack
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0002 0057   delay_us(5);  //pulswith approx. 5 us
;PCODE: $00000088 VOL: 0
; 0002 0058   SHT_SCK_LOW();
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0002 0059   delay_us(1);
;PCODE: $0000008B VOL: 0
; 0002 005A   SHT_INPUT_MODE(); //release DATA-line
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0002 005B   return val;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0002 005C }
;PCODE: $00000095 VOL: 0
;
;//----------------------------------------------------------------------------------
;void s_transstart(void)
; 0002 0060 //----------------------------------------------------------------------------------
; 0002 0061 // generates a transmission start
; 0002 0062 //       _____         ________
; 0002 0063 // DATA:      |_______|
; 0002 0064 //           ___     ___
; 0002 0065 // SCK : ___|   |___|   |______
; 0002 0066 {
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0002 0067   //Initial state
; 0002 0068   SHT_OUTPUT_MODE();
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0002 0069   SHT_DATA_HIGH();
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0002 006A   SHT_SCK_LOW();
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0002 006B   delay_us(1);
;PCODE: $0000009E VOL: 0
; 0002 006C 
; 0002 006D   SHT_SCK_HIGH();
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0002 006E   delay_us(1);
;PCODE: $000000A1 VOL: 0
; 0002 006F 
; 0002 0070   SHT_DATA_LOW();
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0002 0071   delay_us(1);
;PCODE: $000000A4 VOL: 0
; 0002 0072 
; 0002 0073   SHT_SCK_LOW();
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0002 0074   delay_us(5);
;PCODE: $000000A7 VOL: 0
; 0002 0075 
; 0002 0076   SHT_SCK_HIGH();
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0002 0077   delay_us(1);
;PCODE: $000000AA VOL: 0
; 0002 0078 
; 0002 0079   SHT_DATA_HIGH();
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0002 007A   delay_us(1);
;PCODE: $000000AD VOL: 0
; 0002 007B   SHT_SCK_LOW();
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0002 007C   delay_us(1);
;PCODE: $000000B0 VOL: 0
; 0002 007D }
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;
;//----------------------------------------------------------------------------------
;void s_connectionreset(void)
; 0002 0081 //----------------------------------------------------------------------------------
; 0002 0082 // communication reset: DATA-line=1 and at least 9 SCK cycles followed by transstart
; 0002 0083 //       _____________________________________________________         ________
; 0002 0084 // DATA:                                                      |_______|
; 0002 0085 //          _    _    _    _    _    _    _    _    _        ___     ___
; 0002 0086 // SCK : __| |__| |__| |__| |__| |__| |__| |__| |__| |______|   |___|   |______
; 0002 0087 {
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0002 0088   unsigned char i;
; 0002 0089   //Initial state
; 0002 008A   SHT_OUTPUT_MODE();
;PCODE: $000000B5 VOL: 0
;	i -> R17
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0002 008B   SHT_DATA_HIGH();
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0002 008C   SHT_SCK_LOW();
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0002 008D   delay_us(1);
;PCODE: $000000BC VOL: 0
; 0002 008E   for(i=0;i<9;i++)                  //9 SCK cycles
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0002 008F   {
; 0002 0090     SHT_SCK_HIGH();
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0002 0091     delay_us(1);
;PCODE: $000000C8 VOL: 0
; 0002 0092     SHT_SCK_LOW();
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0002 0093     delay_us(1);
;PCODE: $000000CB VOL: 0
; 0002 0094   }
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0002 0095   s_transstart();                   //transmission start
;PCODE: $000000D1 VOL: 0
; 0002 0096 }
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;
;//----------------------------------------------------------------------------------
;char s_softreset(void)
; 0002 009A //----------------------------------------------------------------------------------
; 0002 009B // resets the sensor by a softreset
; 0002 009C {
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0002 009D   unsigned char error=0;
; 0002 009E   s_connectionreset();              //reset communication
;PCODE: $000000D7 VOL: 0
;	error -> R17
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0002 009F   error+=s_write_byte(RESET);       //send RESET-command to sensor
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0002 00A0   return error;                     //error=1 in case of no response form the sensor
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0002 00A1 }
;PCODE: $000000E3 VOL: 0
;
;//----------------------------------------------------------------------------------
;char s_read_statusreg(unsigned char *p_value, unsigned char *p_checksum)
; 0002 00A5 //----------------------------------------------------------------------------------
; 0002 00A6 // reads the status register with checksum (8-bit)
; 0002 00A7 {
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0002 00A8   unsigned char error=0;
; 0002 00A9   s_transstart();                   //transmission start
;PCODE: $000000E6 VOL: 0
;	*p_value -> Y+3
;	*p_checksum -> Y+1
;	error -> R17
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0002 00AA   error=s_write_byte(STATUS_REG_R); //send command to sensor
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0002 00AB   *p_value=s_read_byte(ACK);        //read status register (8-bit)
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0002 00AC   *p_checksum=s_read_byte(noACK);   //read checksum (8-bit)
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0002 00AD   return error;                     //error=1 in case of no response form the sensor
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0002 00AE }
;PCODE: $000000FD VOL: 0
;
;//----------------------------------------------------------------------------------
;char s_write_statusreg(unsigned char *p_value)
; 0002 00B2 //----------------------------------------------------------------------------------
; 0002 00B3 // writes the status register with checksum (8-bit)
; 0002 00B4 {
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0002 00B5   unsigned char error=0;
; 0002 00B6   s_transstart();                   //transmission start
;PCODE: $00000100 VOL: 0
;	*p_value -> Y+1
;	error -> R17
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0002 00B7   error+=s_write_byte(STATUS_REG_W);//send command to sensor
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0002 00B8   error+=s_write_byte(*p_value);    //send value of status register
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0002 00B9   return error;                     //error>=1 in case of no response form the sensor
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0002 00BA }
;PCODE: $00000114 VOL: 0
;
;//----------------------------------------------------------------------------------
;char s_measure(unsigned char *p_value, unsigned char *p_checksum, unsigned char mode)
; 0002 00BE //----------------------------------------------------------------------------------
; 0002 00BF // makes a measurement (humidity/temperature) with checksum
; 0002 00C0 {
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0002 00C1   unsigned error=0;
; 0002 00C2   unsigned int i;
; 0002 00C3 
; 0002 00C4   s_transstart();                   //transmission start
;PCODE: $00000117 VOL: 0
;	*p_value -> Y+7
;	*p_checksum -> Y+5
;	mode -> Y+4
;	error -> R16,R17
;	i -> R18,R19
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0002 00C5   switch(mode){                     //send command to sensor
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0002 00C6     case TEMP	: error+=s_write_byte(MEASURE_TEMP); break;
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0002 00C7     case HUMI	: error+=s_write_byte(MEASURE_HUMI); break;
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0002 00C8     default     : break;
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0002 00C9   }
;PCODE: $00000132 VOL: 0
; 0002 00CA   SHT_INPUT_MODE();
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0002 00CB   for (i=0;i<65535;i++)
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0002 00CC   {
; 0002 00CD    delay_us(1);
;PCODE: $0000013E VOL: 0
; 0002 00CE    if((SHT_PIN & (1<<SHT_DATA))==0) break; //wait until sensor has finished the measurement
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0002 00CF   }
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0002 00D0   if(SHT_PIN & (1<<SHT_DATA)) error+=1;                // or timeout (~2 sec.) is reached
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0002 00D1   *(p_value+1)=s_read_byte(ACK);    //read the first byte (MSB)
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0002 00D2   *(p_value)=s_read_byte(ACK);    //read the second byte (LSB)
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0002 00D3   *p_checksum =s_read_byte(noACK);  //read checksum
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0002 00D4   return error;
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0002 00D5 }
;PCODE: $00000162 VOL: 0
;
;//----------------------------------------------------------------------------------------
;void calc_sth11(float *p_humidity ,float *p_temperature)
; 0002 00D9 //----------------------------------------------------------------------------------------
; 0002 00DA // calculates temperature [°C] and humidity [%RH]
; 0002 00DB // input :  humi [Ticks] (12 bit)
; 0002 00DC //          temp [Ticks] (14 bit)
; 0002 00DD // output:  humi [%RH]
; 0002 00DE //          temp [°C]
; 0002 00DF {
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0002 00E0   float rh=*p_humidity;             // rh:      Humidity [Ticks] 12 Bit
; 0002 00E1   float t=*p_temperature;           // t:       Temperature [Ticks] 14 Bit
; 0002 00E2   float rh_lin;                     // rh_lin:  Humidity linear
; 0002 00E3   float rh_true;                    // rh_true: Temperature compensated humidity
; 0002 00E4   float t_C;                        // t_C   :  Temperature [°C]
; 0002 00E5 
; 0002 00E6   t_C=t*0.04 - 39.8;                  //calc. temperature from ticks to [°C]  first coeff. 0.01 for 14 bit and 0.04 for 12 bit
;PCODE: $00000165 VOL: 0
;	*p_humidity -> Y+22
;	*p_temperature -> Y+20
;	rh -> Y+16
;	t -> Y+12
;	rh_lin -> Y+8
;	rh_true -> Y+4
;	t_C -> Y+0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0002 00E7   rh_lin=C3*rh*rh + C2*rh + C1;     //calc. humidity from ticks to [%RH]
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0002 00E8   rh_true=(t_C-25)*(T1+T2*rh)+rh_lin;   //calc. temperature compensated humidity [%RH]
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0002 00E9   if(rh_true>100)rh_true=100;       //cut if the value is outside of
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0002 00EA   if(rh_true<0.1)rh_true=0.1;       //the physical possible range
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0002 00EB 
; 0002 00EC   *p_temperature=t_C;               //return temperature [°C]
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0002 00ED   *p_humidity=rh_true;              //return humidity[%RH]
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0002 00EE }
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;
;//--------------------------------------------------------------------
;float calc_dewpoint(float h,float t)
; 0002 00F2 //--------------------------------------------------------------------
; 0002 00F3 // calculates dew point
; 0002 00F4 // input:   humidity [%RH], temperature [°C]
; 0002 00F5 // output:  dew point [°C]
; 0002 00F6 { float logEx,dew_point;
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0002 00F7   logEx=0.66077+7.5*t/(237.3+t)+(log10(h)-2);
;PCODE: $000001A9 VOL: 0
;	h -> Y+12
;	t -> Y+8
;	logEx -> Y+4
;	dew_point -> Y+0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0002 00F8   dew_point = (logEx - 0.66077)*237.3/(0.66077+7.5-logEx);
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
; 0002 00F9   return dew_point;
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
; 0002 00FA }
;PCODE: $000001CF VOL: 0
;
