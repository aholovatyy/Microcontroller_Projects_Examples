
cooler_system.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d98  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c2  00800060  00001d98  00001e2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00800122  00800122  00001eee  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00001eee  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000338  00000000  00000000  00001f4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d29  00000000  00000000  00002286  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004c2  00000000  00000000  00002faf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000dd7  00000000  00000000  00003471  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002a0  00000000  00000000  00004248  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000431  00000000  00000000  000044e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000679  00000000  00000000  00004919  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ab 00 	jmp	0x156	; 0x156 <__ctors_end>
       4:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
       8:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
       c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      10:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      14:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      18:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      1c:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__vector_7>
      20:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      24:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      28:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      2c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      30:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      34:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      38:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      3c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      40:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      44:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      48:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      4c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      50:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>

00000054 <__c.1790>:
      54:	6e 61 6e 00                                         nan.

00000058 <__c.1788>:
      58:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      68:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      78:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      88:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      98:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      a8:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      b8:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      c8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      d8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      e8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
      f8:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     108:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     118:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     128:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     138:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     148:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000156 <__ctors_end>:
     156:	11 24       	eor	r1, r1
     158:	1f be       	out	0x3f, r1	; 63
     15a:	cf e5       	ldi	r28, 0x5F	; 95
     15c:	d8 e0       	ldi	r29, 0x08	; 8
     15e:	de bf       	out	0x3e, r29	; 62
     160:	cd bf       	out	0x3d, r28	; 61

00000162 <__do_copy_data>:
     162:	11 e0       	ldi	r17, 0x01	; 1
     164:	a0 e6       	ldi	r26, 0x60	; 96
     166:	b0 e0       	ldi	r27, 0x00	; 0
     168:	e8 e9       	ldi	r30, 0x98	; 152
     16a:	fd e1       	ldi	r31, 0x1D	; 29
     16c:	02 c0       	rjmp	.+4      	; 0x172 <.do_copy_data_start>

0000016e <.do_copy_data_loop>:
     16e:	05 90       	lpm	r0, Z+
     170:	0d 92       	st	X+, r0

00000172 <.do_copy_data_start>:
     172:	a2 32       	cpi	r26, 0x22	; 34
     174:	b1 07       	cpc	r27, r17
     176:	d9 f7       	brne	.-10     	; 0x16e <.do_copy_data_loop>

00000178 <__do_clear_bss>:
     178:	11 e0       	ldi	r17, 0x01	; 1
     17a:	a2 e2       	ldi	r26, 0x22	; 34
     17c:	b1 e0       	ldi	r27, 0x01	; 1
     17e:	01 c0       	rjmp	.+2      	; 0x182 <.do_clear_bss_start>

00000180 <.do_clear_bss_loop>:
     180:	1d 92       	st	X+, r1

00000182 <.do_clear_bss_start>:
     182:	a7 33       	cpi	r26, 0x37	; 55
     184:	b1 07       	cpc	r27, r17
     186:	e1 f7       	brne	.-8      	; 0x180 <.do_clear_bss_loop>
     188:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <main>
     18c:	0c 94 ca 0e 	jmp	0x1d94	; 0x1d94 <_exit>

00000190 <__bad_interrupt>:
     190:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000194 <working_algorithm>:
uint8_t fan=0, i=0, seconds=0;
float tin=0.0f, tout=0.0f; 

//робочий алгоритм роботи COOLER SYSTEM
void working_algorithm(void)
{
     194:	af 92       	push	r10
     196:	bf 92       	push	r11
     198:	cf 92       	push	r12
     19a:	df 92       	push	r13
     19c:	ef 92       	push	r14
     19e:	ff 92       	push	r15
     1a0:	0f 93       	push	r16
     1a2:	1f 93       	push	r17
	//управління FAN
	if (tout>T_OUT_FAN_OFF)
     1a4:	a0 90 29 01 	lds	r10, 0x0129
     1a8:	b0 90 2a 01 	lds	r11, 0x012A
     1ac:	c0 90 2b 01 	lds	r12, 0x012B
     1b0:	d0 90 2c 01 	lds	r13, 0x012C
     1b4:	c6 01       	movw	r24, r12
     1b6:	b5 01       	movw	r22, r10
     1b8:	20 e0       	ldi	r18, 0x00	; 0
     1ba:	30 e0       	ldi	r19, 0x00	; 0
     1bc:	40 ed       	ldi	r20, 0xD0	; 208
     1be:	51 e4       	ldi	r21, 0x41	; 65
     1c0:	0e 94 90 0c 	call	0x1920	; 0x1920 <__gesf2>
     1c4:	18 16       	cp	r1, r24
     1c6:	34 f4       	brge	.+12     	; 0x1d4 <working_algorithm+0x40>
	{ 
		FAN_PORT&=~(1<<FAN)&~(1<<LED_FAN); 
     1c8:	82 b3       	in	r24, 0x12	; 18
     1ca:	86 7f       	andi	r24, 0xF6	; 246
     1cc:	82 bb       	out	0x12, r24	; 18
		fan=0;
     1ce:	10 92 22 01 	sts	0x0122, r1
     1d2:	46 c0       	rjmp	.+140    	; 0x260 <working_algorithm+0xcc>
	}
	else if (fan==0 && tin>=T_IN_FAN_ON)
     1d4:	80 91 22 01 	lds	r24, 0x0122
     1d8:	88 23       	and	r24, r24
     1da:	b9 f4       	brne	.+46     	; 0x20a <working_algorithm+0x76>
     1dc:	60 91 25 01 	lds	r22, 0x0125
     1e0:	70 91 26 01 	lds	r23, 0x0126
     1e4:	80 91 27 01 	lds	r24, 0x0127
     1e8:	90 91 28 01 	lds	r25, 0x0128
     1ec:	20 e0       	ldi	r18, 0x00	; 0
     1ee:	30 e0       	ldi	r19, 0x00	; 0
     1f0:	40 eb       	ldi	r20, 0xB0	; 176
     1f2:	51 e4       	ldi	r21, 0x41	; 65
     1f4:	0e 94 90 0c 	call	0x1920	; 0x1920 <__gesf2>
     1f8:	88 23       	and	r24, r24
     1fa:	f4 f0       	brlt	.+60     	; 0x238 <working_algorithm+0xa4>
		 { 
			FAN_PORT|=1<<FAN|1<<LED_FAN; 
     1fc:	82 b3       	in	r24, 0x12	; 18
     1fe:	89 60       	ori	r24, 0x09	; 9
     200:	82 bb       	out	0x12, r24	; 18
			fan=1;
     202:	81 e0       	ldi	r24, 0x01	; 1
     204:	80 93 22 01 	sts	0x0122, r24
     208:	17 c0       	rjmp	.+46     	; 0x238 <working_algorithm+0xa4>
		 }
	else if (fan==1 && tin<=T_IN_FAN_OFF)
     20a:	81 30       	cpi	r24, 0x01	; 1
     20c:	a9 f4       	brne	.+42     	; 0x238 <working_algorithm+0xa4>
     20e:	60 91 25 01 	lds	r22, 0x0125
     212:	70 91 26 01 	lds	r23, 0x0126
     216:	80 91 27 01 	lds	r24, 0x0127
     21a:	90 91 28 01 	lds	r25, 0x0128
     21e:	20 e0       	ldi	r18, 0x00	; 0
     220:	30 e0       	ldi	r19, 0x00	; 0
     222:	40 ea       	ldi	r20, 0xA0	; 160
     224:	51 e4       	ldi	r21, 0x41	; 65
     226:	0e 94 ae 0b 	call	0x175c	; 0x175c <__cmpsf2>
     22a:	18 16       	cp	r1, r24
     22c:	2c f0       	brlt	.+10     	; 0x238 <working_algorithm+0xa4>
		 {
			FAN_PORT&=~(1<<FAN)&~(1<<LED_FAN); 
     22e:	82 b3       	in	r24, 0x12	; 18
     230:	86 7f       	andi	r24, 0xF6	; 246
     232:	82 bb       	out	0x12, r24	; 18
			fan=0;
     234:	10 92 22 01 	sts	0x0122, r1
		 }
	//управління заслонкою
	if (tout>=T_OUT_SHU_OFF_MAX) 
     238:	c6 01       	movw	r24, r12
     23a:	b5 01       	movw	r22, r10
     23c:	20 e0       	ldi	r18, 0x00	; 0
     23e:	30 e0       	ldi	r19, 0x00	; 0
     240:	40 ed       	ldi	r20, 0xD0	; 208
     242:	51 e4       	ldi	r21, 0x41	; 65
     244:	0e 94 90 0c 	call	0x1920	; 0x1920 <__gesf2>
     248:	88 23       	and	r24, r24
     24a:	54 f4       	brge	.+20     	; 0x260 <working_algorithm+0xcc>
		SHU_PORT|=1<<SHU|1<<LED_SHU; //shu=1; заслонка закрита
    else if (tout<=T_OUT_SHU_OFF_MIN)
     24c:	c6 01       	movw	r24, r12
     24e:	b5 01       	movw	r22, r10
     250:	20 e0       	ldi	r18, 0x00	; 0
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e2       	ldi	r20, 0x20	; 32
     256:	51 e4       	ldi	r21, 0x41	; 65
     258:	0e 94 ae 0b 	call	0x175c	; 0x175c <__cmpsf2>
     25c:	18 16       	cp	r1, r24
     25e:	1c f0       	brlt	.+6      	; 0x266 <working_algorithm+0xd2>
		SHU_PORT|=1<<SHU|1<<LED_SHU; //shu=1;
     260:	82 b3       	in	r24, 0x12	; 18
     262:	82 61       	ori	r24, 0x12	; 18
     264:	02 c0       	rjmp	.+4      	; 0x26a <working_algorithm+0xd6>
	else 
	  SHU_PORT&=~(1<<SHU)&~(1<<LED_SHU); //shu=0;	
     266:	82 b3       	in	r24, 0x12	; 18
     268:	8d 7e       	andi	r24, 0xED	; 237
     26a:	82 bb       	out	0x12, r24	; 18
	//управління кондиціонером
    if (tin>=T_IN_COM_ON_MAX)      
     26c:	e0 90 25 01 	lds	r14, 0x0125
     270:	f0 90 26 01 	lds	r15, 0x0126
     274:	00 91 27 01 	lds	r16, 0x0127
     278:	10 91 28 01 	lds	r17, 0x0128
     27c:	c8 01       	movw	r24, r16
     27e:	b7 01       	movw	r22, r14
     280:	20 e0       	ldi	r18, 0x00	; 0
     282:	30 e0       	ldi	r19, 0x00	; 0
     284:	40 ed       	ldi	r20, 0xD0	; 208
     286:	51 e4       	ldi	r21, 0x41	; 65
     288:	0e 94 90 0c 	call	0x1920	; 0x1920 <__gesf2>
     28c:	88 23       	and	r24, r24
     28e:	a4 f4       	brge	.+40     	; 0x2b8 <working_algorithm+0x124>
		COM_PORT|=1<<COM|1<<LED_COM; //com=1;
	else if(tin<=T_IN_COM_ON_MIN)
     290:	c8 01       	movw	r24, r16
     292:	b7 01       	movw	r22, r14
     294:	20 e0       	ldi	r18, 0x00	; 0
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	40 e2       	ldi	r20, 0x20	; 32
     29a:	51 e4       	ldi	r21, 0x41	; 65
     29c:	0e 94 ae 0b 	call	0x175c	; 0x175c <__cmpsf2>
     2a0:	18 16       	cp	r1, r24
     2a2:	54 f4       	brge	.+20     	; 0x2b8 <working_algorithm+0x124>
		COM_PORT|=1<<COM|1<<LED_COM; //com=1;
	else if(tout<T_OUT_COM_ON)
     2a4:	c6 01       	movw	r24, r12
     2a6:	b5 01       	movw	r22, r10
     2a8:	20 e0       	ldi	r18, 0x00	; 0
     2aa:	30 e0       	ldi	r19, 0x00	; 0
     2ac:	40 e2       	ldi	r20, 0x20	; 32
     2ae:	51 e4       	ldi	r21, 0x41	; 65
     2b0:	0e 94 ae 0b 	call	0x175c	; 0x175c <__cmpsf2>
     2b4:	88 23       	and	r24, r24
     2b6:	1c f4       	brge	.+6      	; 0x2be <working_algorithm+0x12a>
        COM_PORT|=1<<COM|1<<LED_COM; //com=1;
     2b8:	82 b3       	in	r24, 0x12	; 18
     2ba:	84 62       	ori	r24, 0x24	; 36
     2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <working_algorithm+0x12e>
	else 	
	  COM_PORT&=~(1<<COM)&~(1<<LED_COM); //com=0;
     2be:	82 b3       	in	r24, 0x12	; 18
     2c0:	8b 7d       	andi	r24, 0xDB	; 219
     2c2:	82 bb       	out	0x12, r24	; 18
}
     2c4:	1f 91       	pop	r17
     2c6:	0f 91       	pop	r16
     2c8:	ff 90       	pop	r15
     2ca:	ef 90       	pop	r14
     2cc:	df 90       	pop	r13
     2ce:	cf 90       	pop	r12
     2d0:	bf 90       	pop	r11
     2d2:	af 90       	pop	r10
     2d4:	08 95       	ret

000002d6 <__vector_7>:
    LCDhome();
	LCDstring("   ALARM 220V");  
}

ISR (TIMER1_COMPA_vect)
{
     2d6:	1f 92       	push	r1
     2d8:	0f 92       	push	r0
     2da:	0f b6       	in	r0, 0x3f	; 63
     2dc:	0f 92       	push	r0
     2de:	11 24       	eor	r1, r1
     2e0:	8f 93       	push	r24
 /* This interrupt service routine (ISR)*/ 
 TCNT1H=0;
     2e2:	1d bc       	out	0x2d, r1	; 45
 TCNT1L=0;
     2e4:	1c bc       	out	0x2c, r1	; 44
 if (++seconds>5)
     2e6:	80 91 24 01 	lds	r24, 0x0124
     2ea:	8f 5f       	subi	r24, 0xFF	; 255
     2ec:	80 93 24 01 	sts	0x0124, r24
     2f0:	86 30       	cpi	r24, 0x06	; 6
     2f2:	28 f0       	brcs	.+10     	; 0x2fe <__vector_7+0x28>
 { 
	TIMSK&=~(1<<OCIE1A); 
     2f4:	89 b7       	in	r24, 0x39	; 57
     2f6:	8f 7e       	andi	r24, 0xEF	; 239
     2f8:	89 bf       	out	0x39, r24	; 57
	i=0;		
     2fa:	10 92 23 01 	sts	0x0123, r1
 } 
}
     2fe:	8f 91       	pop	r24
     300:	0f 90       	pop	r0
     302:	0f be       	out	0x3f, r0	; 63
     304:	0f 90       	pop	r0
     306:	1f 90       	pop	r1
     308:	18 95       	reti

0000030a <alarm_algorithm>:
	  COM_PORT&=~(1<<COM)&~(1<<LED_COM); //com=0;
}
  
//алярмовий алгоритм роботи COOLER SYSTEM
void alarm_algorithm(void)
{
     30a:	ef 92       	push	r14
     30c:	ff 92       	push	r15
     30e:	0f 93       	push	r16
     310:	1f 93       	push	r17
	//управління FAN
	if (tout>T_ALARM)          
     312:	e0 90 29 01 	lds	r14, 0x0129
     316:	f0 90 2a 01 	lds	r15, 0x012A
     31a:	00 91 2b 01 	lds	r16, 0x012B
     31e:	10 91 2c 01 	lds	r17, 0x012C
     322:	c8 01       	movw	r24, r16
     324:	b7 01       	movw	r22, r14
     326:	20 e0       	ldi	r18, 0x00	; 0
     328:	30 e0       	ldi	r19, 0x00	; 0
     32a:	40 e0       	ldi	r20, 0x00	; 0
     32c:	52 e4       	ldi	r21, 0x42	; 66
     32e:	0e 94 90 0c 	call	0x1920	; 0x1920 <__gesf2>
     332:	18 16       	cp	r1, r24
     334:	34 f4       	brge	.+12     	; 0x342 <alarm_algorithm+0x38>
	{ 
		FAN_PORT&=~(1<<FAN)&~(1<<LED_FAN); 
     336:	82 b3       	in	r24, 0x12	; 18
     338:	86 7f       	andi	r24, 0xF6	; 246
     33a:	82 bb       	out	0x12, r24	; 18
		fan=0;
     33c:	10 92 22 01 	sts	0x0122, r1
     340:	46 c0       	rjmp	.+140    	; 0x3ce <alarm_algorithm+0xc4>
	}
	else if (fan==0 && tin>=T_IN_FAN_ON)
     342:	80 91 22 01 	lds	r24, 0x0122
     346:	88 23       	and	r24, r24
     348:	b9 f4       	brne	.+46     	; 0x378 <alarm_algorithm+0x6e>
     34a:	60 91 25 01 	lds	r22, 0x0125
     34e:	70 91 26 01 	lds	r23, 0x0126
     352:	80 91 27 01 	lds	r24, 0x0127
     356:	90 91 28 01 	lds	r25, 0x0128
     35a:	20 e0       	ldi	r18, 0x00	; 0
     35c:	30 e0       	ldi	r19, 0x00	; 0
     35e:	40 eb       	ldi	r20, 0xB0	; 176
     360:	51 e4       	ldi	r21, 0x41	; 65
     362:	0e 94 90 0c 	call	0x1920	; 0x1920 <__gesf2>
     366:	88 23       	and	r24, r24
     368:	f4 f0       	brlt	.+60     	; 0x3a6 <alarm_algorithm+0x9c>
		 { 
			FAN_PORT|=1<<FAN|1<<LED_FAN; 
     36a:	82 b3       	in	r24, 0x12	; 18
     36c:	89 60       	ori	r24, 0x09	; 9
     36e:	82 bb       	out	0x12, r24	; 18
			fan=1;
     370:	81 e0       	ldi	r24, 0x01	; 1
     372:	80 93 22 01 	sts	0x0122, r24
     376:	17 c0       	rjmp	.+46     	; 0x3a6 <alarm_algorithm+0x9c>
		 }
	else if (fan==1 && tin<=T_IN_FAN_OFF)
     378:	81 30       	cpi	r24, 0x01	; 1
     37a:	a9 f4       	brne	.+42     	; 0x3a6 <alarm_algorithm+0x9c>
     37c:	60 91 25 01 	lds	r22, 0x0125
     380:	70 91 26 01 	lds	r23, 0x0126
     384:	80 91 27 01 	lds	r24, 0x0127
     388:	90 91 28 01 	lds	r25, 0x0128
     38c:	20 e0       	ldi	r18, 0x00	; 0
     38e:	30 e0       	ldi	r19, 0x00	; 0
     390:	40 ea       	ldi	r20, 0xA0	; 160
     392:	51 e4       	ldi	r21, 0x41	; 65
     394:	0e 94 ae 0b 	call	0x175c	; 0x175c <__cmpsf2>
     398:	18 16       	cp	r1, r24
     39a:	2c f0       	brlt	.+10     	; 0x3a6 <alarm_algorithm+0x9c>
		 {
			FAN_PORT&=~(1<<FAN)&~(1<<LED_FAN); 
     39c:	82 b3       	in	r24, 0x12	; 18
     39e:	86 7f       	andi	r24, 0xF6	; 246
     3a0:	82 bb       	out	0x12, r24	; 18
			fan=0;
     3a2:	10 92 22 01 	sts	0x0122, r1
		 }
    //управління заслонкою 
	if (tout>=T_ALARM)      
     3a6:	c8 01       	movw	r24, r16
     3a8:	b7 01       	movw	r22, r14
     3aa:	20 e0       	ldi	r18, 0x00	; 0
     3ac:	30 e0       	ldi	r19, 0x00	; 0
     3ae:	40 e0       	ldi	r20, 0x00	; 0
     3b0:	52 e4       	ldi	r21, 0x42	; 66
     3b2:	0e 94 90 0c 	call	0x1920	; 0x1920 <__gesf2>
     3b6:	88 23       	and	r24, r24
     3b8:	54 f4       	brge	.+20     	; 0x3ce <alarm_algorithm+0xc4>
		SHU_PORT|=1<<SHU|1<<LED_SHU; //shu=1; //заслонка закрита
	else if (tout<=T_OUT_SHU_OFF_MIN)
     3ba:	c8 01       	movw	r24, r16
     3bc:	b7 01       	movw	r22, r14
     3be:	20 e0       	ldi	r18, 0x00	; 0
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	40 e2       	ldi	r20, 0x20	; 32
     3c4:	51 e4       	ldi	r21, 0x41	; 65
     3c6:	0e 94 ae 0b 	call	0x175c	; 0x175c <__cmpsf2>
     3ca:	18 16       	cp	r1, r24
     3cc:	1c f0       	brlt	.+6      	; 0x3d4 <alarm_algorithm+0xca>
		SHU_PORT|=1<<SHU|1<<LED_SHU; //shu=1;
     3ce:	82 b3       	in	r24, 0x12	; 18
     3d0:	82 61       	ori	r24, 0x12	; 18
     3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <alarm_algorithm+0xce>
	else 
	  SHU_PORT&=~(1<<SHU)&~(1<<LED_SHU);//shu=0;
     3d4:	82 b3       	in	r24, 0x12	; 18
     3d6:	8d 7e       	andi	r24, 0xED	; 237
     3d8:	82 bb       	out	0x12, r24	; 18
    //LCDclr();
    //LCDGotoXY(3,0);
    LCDhome();
     3da:	0e 94 d7 04 	call	0x9ae	; 0x9ae <LCDhome>
	LCDstring("   ALARM 220V");  
     3de:	80 e6       	ldi	r24, 0x60	; 96
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCDstring>
}
     3e6:	1f 91       	pop	r17
     3e8:	0f 91       	pop	r16
     3ea:	ff 90       	pop	r15
     3ec:	ef 90       	pop	r14
     3ee:	08 95       	ret

000003f0 <main>:
	i=0;		
 } 
}

int main(void)
{
     3f0:	9f 92       	push	r9
     3f2:	af 92       	push	r10
     3f4:	bf 92       	push	r11
     3f6:	cf 92       	push	r12
     3f8:	df 92       	push	r13
     3fa:	ef 92       	push	r14
     3fc:	ff 92       	push	r15
     3fe:	0f 93       	push	r16
     400:	1f 93       	push	r17
     402:	df 93       	push	r29
     404:	cf 93       	push	r28
     406:	cd b7       	in	r28, 0x3d	; 61
     408:	de b7       	in	r29, 0x3e	; 62
     40a:	cc 5b       	subi	r28, 0xBC	; 188
     40c:	d0 40       	sbci	r29, 0x00	; 0
     40e:	0f b6       	in	r0, 0x3f	; 63
     410:	f8 94       	cli
     412:	de bf       	out	0x3e, r29	; 62
     414:	0f be       	out	0x3f, r0	; 63
     416:	cd bf       	out	0x3d, r28	; 61
	char title[]="COOLER SYSTEM";
     418:	de 01       	movw	r26, r28
     41a:	1a 96       	adiw	r26, 0x0a	; 10
     41c:	e2 e0       	ldi	r30, 0x02	; 2
     41e:	f1 e0       	ldi	r31, 0x01	; 1
     420:	8e e0       	ldi	r24, 0x0E	; 14
     422:	01 90       	ld	r0, Z+
     424:	0d 92       	st	X+, r0
     426:	81 50       	subi	r24, 0x01	; 1
     428:	e1 f7       	brne	.-8      	; 0x422 <main+0x32>
	char firm[]="INTEGRAL";
     42a:	de 01       	movw	r26, r28
     42c:	11 96       	adiw	r26, 0x01	; 1
     42e:	e0 e1       	ldi	r30, 0x10	; 16
     430:	f1 e0       	ldi	r31, 0x01	; 1
     432:	89 e0       	ldi	r24, 0x09	; 9
     434:	01 90       	ld	r0, Z+
     436:	0d 92       	st	X+, r0
     438:	81 50       	subi	r24, 0x01	; 1
     43a:	e1 f7       	brne	.-8      	; 0x434 <main+0x44>
	char lcd_buffer[5][33];
	uint8_t button_pressed=0, alarmBtnState=0;
    //uint8_t t1init=0, t2init=0;/*i=0,*/ //flag;

	sprintf(lcd_buffer[1], "FAN T1=%d T2=%d\nT3=%d", T_OUT_FAN_OFF, T_IN_FAN_ON, T_IN_FAN_OFF);
     43c:	6d b7       	in	r22, 0x3d	; 61
     43e:	7e b7       	in	r23, 0x3e	; 62
     440:	6a 50       	subi	r22, 0x0A	; 10
     442:	70 40       	sbci	r23, 0x00	; 0
     444:	0f b6       	in	r0, 0x3f	; 63
     446:	f8 94       	cli
     448:	7e bf       	out	0x3e, r23	; 62
     44a:	0f be       	out	0x3f, r0	; 63
     44c:	6d bf       	out	0x3d, r22	; 61
     44e:	ed b7       	in	r30, 0x3d	; 61
     450:	fe b7       	in	r31, 0x3e	; 62
     452:	31 96       	adiw	r30, 0x01	; 1
     454:	ce 01       	movw	r24, r28
     456:	c9 96       	adiw	r24, 0x39	; 57
     458:	ad b7       	in	r26, 0x3d	; 61
     45a:	be b7       	in	r27, 0x3e	; 62
     45c:	12 96       	adiw	r26, 0x02	; 2
     45e:	9c 93       	st	X, r25
     460:	8e 93       	st	-X, r24
     462:	11 97       	sbiw	r26, 0x01	; 1
     464:	8e e6       	ldi	r24, 0x6E	; 110
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	93 83       	std	Z+3, r25	; 0x03
     46a:	82 83       	std	Z+2, r24	; 0x02
     46c:	4a e1       	ldi	r20, 0x1A	; 26
     46e:	e4 2e       	mov	r14, r20
     470:	f1 2c       	mov	r15, r1
     472:	f5 82       	std	Z+5, r15	; 0x05
     474:	e4 82       	std	Z+4, r14	; 0x04
     476:	86 e1       	ldi	r24, 0x16	; 22
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	97 83       	std	Z+7, r25	; 0x07
     47c:	86 83       	std	Z+6, r24	; 0x06
     47e:	84 e1       	ldi	r24, 0x14	; 20
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	91 87       	std	Z+9, r25	; 0x09
     484:	80 87       	std	Z+8, r24	; 0x08
     486:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <sprintf>
	sprintf(lcd_buffer[2], "SHU T4=%d T5=%d", T_OUT_SHU_OFF_MAX, T_OUT_SHU_OFF_MIN);
     48a:	0f 90       	pop	r0
     48c:	0f 90       	pop	r0
     48e:	ed b7       	in	r30, 0x3d	; 61
     490:	fe b7       	in	r31, 0x3e	; 62
     492:	31 96       	adiw	r30, 0x01	; 1
     494:	ce 01       	movw	r24, r28
     496:	86 5a       	subi	r24, 0xA6	; 166
     498:	9f 4f       	sbci	r25, 0xFF	; 255
     49a:	ad b7       	in	r26, 0x3d	; 61
     49c:	be b7       	in	r27, 0x3e	; 62
     49e:	12 96       	adiw	r26, 0x02	; 2
     4a0:	9c 93       	st	X, r25
     4a2:	8e 93       	st	-X, r24
     4a4:	11 97       	sbiw	r26, 0x01	; 1
     4a6:	84 e8       	ldi	r24, 0x84	; 132
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	93 83       	std	Z+3, r25	; 0x03
     4ac:	82 83       	std	Z+2, r24	; 0x02
     4ae:	f5 82       	std	Z+5, r15	; 0x05
     4b0:	e4 82       	std	Z+4, r14	; 0x04
     4b2:	0a e0       	ldi	r16, 0x0A	; 10
     4b4:	10 e0       	ldi	r17, 0x00	; 0
     4b6:	17 83       	std	Z+7, r17	; 0x07
     4b8:	06 83       	std	Z+6, r16	; 0x06
     4ba:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <sprintf>
	sprintf(lcd_buffer[3], "CON T6=%d T7=%d\nT8=%d", T_IN_COM_ON_MAX, T_IN_COM_ON_MIN, T_OUT_COM_ON); 
     4be:	00 d0       	rcall	.+0      	; 0x4c0 <main+0xd0>
     4c0:	ed b7       	in	r30, 0x3d	; 61
     4c2:	fe b7       	in	r31, 0x3e	; 62
     4c4:	31 96       	adiw	r30, 0x01	; 1
     4c6:	ce 01       	movw	r24, r28
     4c8:	85 58       	subi	r24, 0x85	; 133
     4ca:	9f 4f       	sbci	r25, 0xFF	; 255
     4cc:	ad b7       	in	r26, 0x3d	; 61
     4ce:	be b7       	in	r27, 0x3e	; 62
     4d0:	12 96       	adiw	r26, 0x02	; 2
     4d2:	9c 93       	st	X, r25
     4d4:	8e 93       	st	-X, r24
     4d6:	11 97       	sbiw	r26, 0x01	; 1
     4d8:	84 e9       	ldi	r24, 0x94	; 148
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	93 83       	std	Z+3, r25	; 0x03
     4de:	82 83       	std	Z+2, r24	; 0x02
     4e0:	f5 82       	std	Z+5, r15	; 0x05
     4e2:	e4 82       	std	Z+4, r14	; 0x04
     4e4:	17 83       	std	Z+7, r17	; 0x07
     4e6:	06 83       	std	Z+6, r16	; 0x06
     4e8:	11 87       	std	Z+9, r17	; 0x09
     4ea:	00 87       	std	Z+8, r16	; 0x08
     4ec:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <sprintf>
	sprintf(lcd_buffer[4], "ALARM T9=%d", T_ALARM);
     4f0:	0f 90       	pop	r0
     4f2:	0f 90       	pop	r0
     4f4:	0f 90       	pop	r0
     4f6:	0f 90       	pop	r0
     4f8:	ed b7       	in	r30, 0x3d	; 61
     4fa:	fe b7       	in	r31, 0x3e	; 62
     4fc:	31 96       	adiw	r30, 0x01	; 1
     4fe:	ce 01       	movw	r24, r28
     500:	84 56       	subi	r24, 0x64	; 100
     502:	9f 4f       	sbci	r25, 0xFF	; 255
     504:	ad b7       	in	r26, 0x3d	; 61
     506:	be b7       	in	r27, 0x3e	; 62
     508:	12 96       	adiw	r26, 0x02	; 2
     50a:	9c 93       	st	X, r25
     50c:	8e 93       	st	-X, r24
     50e:	11 97       	sbiw	r26, 0x01	; 1
     510:	8a ea       	ldi	r24, 0xAA	; 170
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	93 83       	std	Z+3, r25	; 0x03
     516:	82 83       	std	Z+2, r24	; 0x02
     518:	80 e2       	ldi	r24, 0x20	; 32
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	95 83       	std	Z+5, r25	; 0x05
     51e:	84 83       	std	Z+4, r24	; 0x04
     520:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <sprintf>
	//ініціалізація кнопок
	//PORTB=0x03;
	//DDRB=0xFC;
    BTN_PORT|=(1<<BTN_PIN);
     524:	48 b3       	in	r20, 0x18	; 24
     526:	86 b3       	in	r24, 0x16	; 22
     528:	21 e0       	ldi	r18, 0x01	; 1
     52a:	30 e0       	ldi	r19, 0x00	; 0
     52c:	b9 01       	movw	r22, r18
     52e:	02 c0       	rjmp	.+4      	; 0x534 <main+0x144>
     530:	66 0f       	add	r22, r22
     532:	77 1f       	adc	r23, r23
     534:	8a 95       	dec	r24
     536:	e2 f7       	brpl	.-8      	; 0x530 <main+0x140>
     538:	46 2b       	or	r20, r22
     53a:	48 bb       	out	0x18, r20	; 24
	DDR(BTN_PORT)&=~(1<<BTN_PIN);
     53c:	47 b3       	in	r20, 0x17	; 23
     53e:	86 b3       	in	r24, 0x16	; 22
     540:	d9 01       	movw	r26, r18
     542:	02 c0       	rjmp	.+4      	; 0x548 <main+0x158>
     544:	aa 0f       	add	r26, r26
     546:	bb 1f       	adc	r27, r27
     548:	8a 95       	dec	r24
     54a:	e2 f7       	brpl	.-8      	; 0x544 <main+0x154>
     54c:	cd 01       	movw	r24, r26
     54e:	80 95       	com	r24
     550:	84 23       	and	r24, r20
     552:	87 bb       	out	0x17, r24	; 23
	ALRM_BTN_PORT|=(1<<ALRM_BTN_PIN);
     554:	48 b3       	in	r20, 0x18	; 24
     556:	86 b3       	in	r24, 0x16	; 22
     558:	b9 01       	movw	r22, r18
     55a:	02 c0       	rjmp	.+4      	; 0x560 <main+0x170>
     55c:	66 0f       	add	r22, r22
     55e:	77 1f       	adc	r23, r23
     560:	8a 95       	dec	r24
     562:	e2 f7       	brpl	.-8      	; 0x55c <main+0x16c>
     564:	46 2b       	or	r20, r22
     566:	48 bb       	out	0x18, r20	; 24
	DDR(ALRM_BTN_PORT)&=~(1<<ALRM_BTN_PIN); 
     568:	97 b3       	in	r25, 0x17	; 23
     56a:	86 b3       	in	r24, 0x16	; 22
     56c:	02 c0       	rjmp	.+4      	; 0x572 <main+0x182>
     56e:	22 0f       	add	r18, r18
     570:	33 1f       	adc	r19, r19
     572:	8a 95       	dec	r24
     574:	e2 f7       	brpl	.-8      	; 0x56e <main+0x17e>
     576:	20 95       	com	r18
     578:	29 23       	and	r18, r25
     57a:	27 bb       	out	0x17, r18	; 23
	//ініціалізація управляючих пристроїв
	//DDRD=0xFF;
	//PORTD=0x00;  
	DDR(FAN_PORT)|=(1<<FAN)|(1<<LED_FAN);
     57c:	81 b3       	in	r24, 0x11	; 17
     57e:	89 60       	ori	r24, 0x09	; 9
     580:	81 bb       	out	0x11, r24	; 17
	FAN_PORT=0;
     582:	12 ba       	out	0x12, r1	; 18
	DDR(SHU_PORT)|=(1<<SHU)|(1<<LED_SHU);
     584:	81 b3       	in	r24, 0x11	; 17
     586:	82 61       	ori	r24, 0x12	; 18
     588:	81 bb       	out	0x11, r24	; 17
	SHU_PORT=0;
     58a:	12 ba       	out	0x12, r1	; 18
	DDR(COM_PORT)|=(1<<COM)|(1<<LED_COM);
     58c:	81 b3       	in	r24, 0x11	; 17
     58e:	84 62       	ori	r24, 0x24	; 36
     590:	81 bb       	out	0x11, r24	; 17
	COM_PORT=0;
     592:	12 ba       	out	0x12, r1	; 18
	DDR(BTN_LED_PORT)|=(1<<BTN_LED);
     594:	8e 9a       	sbi	0x11, 6	; 17
	BTN_PORT=0;
     596:	18 ba       	out	0x18, r1	; 24
	DDR(TIMER_LED_PORT)|=(1<<TIMER_LED);
     598:	8f 9a       	sbi	0x11, 7	; 17
	TIMER_LED_PORT=0;
     59a:	12 ba       	out	0x12, r1	; 18
	//ініціалізація 16 бітного таймера
	TCCR1A=0x00;
     59c:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=0x04; //1<<CS12|~(1<<CS11)|~(1<<CS10);  //clk/256, 8MHz/256=31250Hz, TCCR1B=0x04 
     59e:	84 e0       	ldi	r24, 0x04	; 4
     5a0:	8e bd       	out	0x2e, r24	; 46
	TCNT1H=0x00; 
     5a2:	1d bc       	out	0x2d, r1	; 45
	TCNT1L=0x00;
     5a4:	1c bc       	out	0x2c, r1	; 44
	ICR1H=0x00;
     5a6:	17 bc       	out	0x27, r1	; 39
	ICR1L=0x00;
     5a8:	16 bc       	out	0x26, r1	; 38
	OCR1AH=0x7A; //high byte of 31250=7A, high byte has to be written before low byte
     5aa:	8a e7       	ldi	r24, 0x7A	; 122
     5ac:	8b bd       	out	0x2b, r24	; 43
	OCR1AL=0x12; //low byte of 31250=12 
     5ae:	82 e1       	ldi	r24, 0x12	; 18
     5b0:	8a bd       	out	0x2a, r24	; 42
	OCR1BH=0x00;
     5b2:	19 bc       	out	0x29, r1	; 41
	OCR1BL=0x00;  
     5b4:	18 bc       	out	0x28, r1	; 40
	//ініціалізація зовнішніх переривань 
	//INT0: Off; INT1: Off
	GICR=0x00;
     5b6:	1b be       	out	0x3b, r1	; 59
	MCUCR=0x00; 
     5b8:	15 be       	out	0x35, r1	; 53
	//маскування переривання 
	TIMSK&=~(1<<OCIE1A); //TIMSK=0x10;
     5ba:	89 b7       	in	r24, 0x39	; 57
     5bc:	8f 7e       	andi	r24, 0xEF	; 239
     5be:	89 bf       	out	0x39, r24	; 57
	//Analog Comparator initialization; Analog Comparator: Off; Analog Comparator Input capture by Timer/Counter 1: Off
	ACSR=0x80; 
     5c0:	80 e8       	ldi	r24, 0x80	; 128
     5c2:	88 b9       	out	0x08, r24	; 8
	SFIOR=0x00; 
     5c4:	10 be       	out	0x30, r1	; 48
	//дозволяємо переривання 
	sei();
     5c6:	78 94       	sei
	//ініціалізація давачів температури
	therm_init(0, -55, 125, THERM_9BIT_RES);
     5c8:	8d b7       	in	r24, 0x3d	; 61
     5ca:	9e b7       	in	r25, 0x3e	; 62
     5cc:	06 96       	adiw	r24, 0x06	; 6
     5ce:	0f b6       	in	r0, 0x3f	; 63
     5d0:	f8 94       	cli
     5d2:	9e bf       	out	0x3e, r25	; 62
     5d4:	0f be       	out	0x3f, r0	; 63
     5d6:	8d bf       	out	0x3d, r24	; 61
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	69 ec       	ldi	r22, 0xC9	; 201
     5dc:	4d e7       	ldi	r20, 0x7D	; 125
     5de:	20 e0       	ldi	r18, 0x00	; 0
     5e0:	0e 94 c3 06 	call	0xd86	; 0xd86 <therm_init>
	therm_init(1, -55, 125, THERM_9BIT_RES);
     5e4:	81 e0       	ldi	r24, 0x01	; 1
     5e6:	69 ec       	ldi	r22, 0xC9	; 201
     5e8:	4d e7       	ldi	r20, 0x7D	; 125
     5ea:	20 e0       	ldi	r18, 0x00	; 0
     5ec:	0e 94 c3 06 	call	0xd86	; 0xd86 <therm_init>
	//ініціалізація LCD 
	LCDinit(); 
     5f0:	0e 94 8d 04 	call	0x91a	; 0x91a <LCDinit>
	LCDcursorOFF();
     5f4:	0e 94 8c 05 	call	0xb18	; 0xb18 <LCDcursorOFF>
	LCDclr();	 
     5f8:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <LCDclr>
	//вивід на LCD COOLER SYSTEM i INTEGRAL
	LCDGotoXY(2,0);
     5fc:	82 e0       	ldi	r24, 0x02	; 2
     5fe:	60 e0       	ldi	r22, 0x00	; 0
     600:	0e 94 db 04 	call	0x9b6	; 0x9b6 <LCDGotoXY>
	LCDstring(title);
     604:	ce 01       	movw	r24, r28
     606:	0a 96       	adiw	r24, 0x0a	; 10
     608:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCDstring>
	_delay_ms(1000);
     60c:	60 e0       	ldi	r22, 0x00	; 0
     60e:	70 e0       	ldi	r23, 0x00	; 0
     610:	8a e7       	ldi	r24, 0x7A	; 122
     612:	94 e4       	ldi	r25, 0x44	; 68
     614:	0e 94 da 03 	call	0x7b4	; 0x7b4 <_delay_ms>
	LCDclr();
     618:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <LCDclr>
	LCDGotoXY(4,0);
     61c:	84 e0       	ldi	r24, 0x04	; 4
     61e:	60 e0       	ldi	r22, 0x00	; 0
     620:	0e 94 db 04 	call	0x9b6	; 0x9b6 <LCDGotoXY>
	LCDstring(firm);
     624:	ce 01       	movw	r24, r28
     626:	01 96       	adiw	r24, 0x01	; 1
     628:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCDstring>
	_delay_ms(1000);
     62c:	60 e0       	ldi	r22, 0x00	; 0
     62e:	70 e0       	ldi	r23, 0x00	; 0
     630:	8a e7       	ldi	r24, 0x7A	; 122
     632:	94 e4       	ldi	r25, 0x44	; 68
     634:	0e 94 da 03 	call	0x7b4	; 0x7b4 <_delay_ms>
	LCDclr(); 
     638:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <LCDclr>
     63c:	10 e0       	ldi	r17, 0x00	; 0
     63e:	00 e0       	ldi	r16, 0x00	; 0
			
			if (i==0)
			  sprintf(lcd_buffer[0], "Indoor: %+.1f%cC\nOutdoor: %+.1f%cC", (double)tin, 0xdf, (double)tout, 0xdf);   
			//LCDclr();
			LCDhome();
			LCDstring(lcd_buffer[i]);  
     640:	38 e1       	ldi	r19, 0x18	; 24
     642:	c3 2e       	mov	r12, r19
     644:	d1 2c       	mov	r13, r1
     646:	cc 0e       	add	r12, r28
     648:	dd 1e       	adc	r13, r29
     64a:	21 e2       	ldi	r18, 0x21	; 33
     64c:	92 2e       	mov	r9, r18
			}
			//виконання робочого алгоритму
			working_algorithm();
			
			if (i==0)
			  sprintf(lcd_buffer[0], "Indoor: %+.1f%cC\nOutdoor: %+.1f%cC", (double)tin, 0xdf, (double)tout, 0xdf);   
     64e:	9f ed       	ldi	r25, 0xDF	; 223
     650:	a9 2e       	mov	r10, r25
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	b9 2e       	mov	r11, r25
     656:	8f ed       	ldi	r24, 0xDF	; 223
     658:	e8 2e       	mov	r14, r24
     65a:	f1 2c       	mov	r15, r1
     65c:	11 c0       	rjmp	.+34     	; 0x680 <main+0x290>
	while(1)
	{
		//міряємо температуру з давачів  
		while(therm_read_temperature(0,&tin)) 
		{
			FAN_PORT&=~(1<<FAN)&~(1<<LED_FAN);
     65e:	82 b3       	in	r24, 0x12	; 18
     660:	86 7f       	andi	r24, 0xF6	; 246
     662:	82 bb       	out	0x12, r24	; 18
			fan=0;
     664:	10 92 22 01 	sts	0x0122, r1
			SHU_PORT|=1<<SHU|1<<LED_SHU; 
     668:	82 b3       	in	r24, 0x12	; 18
     66a:	82 61       	ori	r24, 0x12	; 18
     66c:	82 bb       	out	0x12, r24	; 18
			COM_PORT|=1<<COM|1<<LED_COM;			
     66e:	82 b3       	in	r24, 0x12	; 18
     670:	84 62       	ori	r24, 0x24	; 36
     672:	82 bb       	out	0x12, r24	; 18
			LCDhome();
     674:	0e 94 d7 04 	call	0x9ae	; 0x9ae <LCDhome>
			LCDstring("Error\nIndoor sensor");			
     678:	86 eb       	ldi	r24, 0xB6	; 182
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCDstring>
	_delay_ms(1000);
	LCDclr(); 
	while(1)
	{
		//міряємо температуру з давачів  
		while(therm_read_temperature(0,&tin)) 
     680:	80 e0       	ldi	r24, 0x00	; 0
     682:	65 e2       	ldi	r22, 0x25	; 37
     684:	71 e0       	ldi	r23, 0x01	; 1
     686:	0e 94 19 07 	call	0xe32	; 0xe32 <therm_read_temperature>
     68a:	88 23       	and	r24, r24
     68c:	91 f0       	breq	.+36     	; 0x6b2 <main+0x2c2>
     68e:	e7 cf       	rjmp	.-50     	; 0x65e <main+0x26e>
			LCDhome();
			LCDstring("Error\nIndoor sensor");			
		}   
		while(therm_read_temperature(1,&tout))
		{
			FAN_PORT&=~(1<<FAN)&~(1<<LED_FAN);
     690:	82 b3       	in	r24, 0x12	; 18
     692:	86 7f       	andi	r24, 0xF6	; 246
     694:	82 bb       	out	0x12, r24	; 18
			fan=0;
     696:	10 92 22 01 	sts	0x0122, r1
			SHU_PORT|=1<<SHU|1<<LED_SHU; 
     69a:	82 b3       	in	r24, 0x12	; 18
     69c:	82 61       	ori	r24, 0x12	; 18
     69e:	82 bb       	out	0x12, r24	; 18
			COM_PORT|=1<<COM|1<<LED_COM;			
     6a0:	82 b3       	in	r24, 0x12	; 18
     6a2:	84 62       	ori	r24, 0x24	; 36
     6a4:	82 bb       	out	0x12, r24	; 18
			LCDhome();			
     6a6:	0e 94 d7 04 	call	0x9ae	; 0x9ae <LCDhome>
			LCDstring("Error\nOutdoor sensor");			
     6aa:	8a ec       	ldi	r24, 0xCA	; 202
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <LCDstring>
			SHU_PORT|=1<<SHU|1<<LED_SHU; 
			COM_PORT|=1<<COM|1<<LED_COM;			
			LCDhome();
			LCDstring("Error\nIndoor sensor");			
		}   
		while(therm_read_temperature(1,&tout))
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	69 e2       	ldi	r22, 0x29	; 41
     6b6:	71 e0       	ldi	r23, 0x01	; 1
     6b8:	0e 94 19 07 	call	0xe32	; 0xe32 <therm_read_temperature>
     6bc:	88 23       	and	r24, r24
     6be:	41 f7       	brne	.-48     	; 0x690 <main+0x2a0>
			COM_PORT|=1<<COM|1<<LED_COM;			
			LCDhome();			
			LCDstring("Error\nOutdoor sensor");			
		}   
		//перевіряємо чи ненатиснута алярмова кнопка   
		if ((ALRM_BTN_PIN & 1<<ALRM_BTN)==0 && alarmBtnState==0)
     6c0:	b0 99       	sbic	0x16, 0	; 22
     6c2:	03 c0       	rjmp	.+6      	; 0x6ca <main+0x2da>
     6c4:	00 23       	and	r16, r16
     6c6:	09 f4       	brne	.+2      	; 0x6ca <main+0x2da>
     6c8:	01 e0       	ldi	r16, 0x01	; 1
			alarmBtnState=1; 
		if ((ALRM_BTN_PIN & 1<<ALRM_BTN))
     6ca:	b0 9b       	sbis	0x16, 0	; 22
     6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <main+0x2e2>
     6ce:	00 e0       	ldi	r16, 0x00	; 0
     6d0:	03 c0       	rjmp	.+6      	; 0x6d8 <main+0x2e8>
			alarmBtnState=0;
		if (!alarmBtnState)
     6d2:	00 23       	and	r16, r16
     6d4:	09 f0       	breq	.+2      	; 0x6d8 <main+0x2e8>
     6d6:	68 c0       	rjmp	.+208    	; 0x7a8 <main+0x3b8>
		{
			//перевіряємо чи ненатиснута кнопка виводу інфо. на дисплей
			if ((BTN_PIN & 1<<BTN)==0 && button_pressed==0)
     6d8:	b1 99       	sbic	0x16, 1	; 22
     6da:	1a c0       	rjmp	.+52     	; 0x710 <main+0x320>
     6dc:	11 23       	and	r17, r17
     6de:	c1 f4       	brne	.+48     	; 0x710 <main+0x320>
			{
				//_delay_ms(1);
				TIMSK&=~(1<<OCIE1A);
     6e0:	89 b7       	in	r24, 0x39	; 57
     6e2:	8f 7e       	andi	r24, 0xEF	; 239
     6e4:	89 bf       	out	0x39, r24	; 57
				LCDclr();	
     6e6:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <LCDclr>
				if (i>3) i=0;
     6ea:	80 91 23 01 	lds	r24, 0x0123
     6ee:	84 30       	cpi	r24, 0x04	; 4
     6f0:	18 f0       	brcs	.+6      	; 0x6f8 <main+0x308>
     6f2:	10 92 23 01 	sts	0x0123, r1
     6f6:	0a c0       	rjmp	.+20     	; 0x70c <main+0x31c>
				else 
				{
					i++;
     6f8:	8f 5f       	subi	r24, 0xFF	; 255
     6fa:	80 93 23 01 	sts	0x0123, r24
					TCNT1H=0;
     6fe:	1d bc       	out	0x2d, r1	; 45
					TCNT1L=0;		
     700:	1c bc       	out	0x2c, r1	; 44
					seconds=0; 	
     702:	10 92 24 01 	sts	0x0124, r1
					TIMSK|=(1<<OCIE1A);					
     706:	89 b7       	in	r24, 0x39	; 57
     708:	80 61       	ori	r24, 0x10	; 16
     70a:	89 bf       	out	0x39, r24	; 57
				}
				BTN_LED_PORT|=(1<<BTN_LED);
     70c:	96 9a       	sbi	0x12, 6	; 18
     70e:	11 e0       	ldi	r17, 0x01	; 1
				button_pressed=1;
			}  
			//перевіряємо чи відпущена кнопка виводу інфо. на дисплей
			if ((BTN_PIN & 1<<BTN))
     710:	b1 9b       	sbis	0x16, 1	; 22
     712:	02 c0       	rjmp	.+4      	; 0x718 <main+0x328>
			{
				BTN_LED_PORT&=~(1<<BTN_LED);
     714:	96 98       	cbi	0x12, 6	; 18
     716:	10 e0       	ldi	r17, 0x00	; 0
				button_pressed=0;
			}
			//виконання робочого алгоритму
			working_algorithm();
     718:	0e 94 ca 00 	call	0x194	; 0x194 <working_algorithm>
			
			if (i==0)
     71c:	80 91 23 01 	lds	r24, 0x0123
     720:	88 23       	and	r24, r24
     722:	c1 f5       	brne	.+112    	; 0x794 <main+0x3a4>
			  sprintf(lcd_buffer[0], "Indoor: %+.1f%cC\nOutdoor: %+.1f%cC", (double)tin, 0xdf, (double)tout, 0xdf);   
     724:	ad b7       	in	r26, 0x3d	; 61
     726:	be b7       	in	r27, 0x3e	; 62
     728:	50 97       	sbiw	r26, 0x10	; 16
     72a:	0f b6       	in	r0, 0x3f	; 63
     72c:	f8 94       	cli
     72e:	be bf       	out	0x3e, r27	; 62
     730:	0f be       	out	0x3f, r0	; 63
     732:	ad bf       	out	0x3d, r26	; 61
     734:	ed b7       	in	r30, 0x3d	; 61
     736:	fe b7       	in	r31, 0x3e	; 62
     738:	31 96       	adiw	r30, 0x01	; 1
     73a:	12 96       	adiw	r26, 0x02	; 2
     73c:	dc 92       	st	X, r13
     73e:	ce 92       	st	-X, r12
     740:	11 97       	sbiw	r26, 0x01	; 1
     742:	b3 82       	std	Z+3, r11	; 0x03
     744:	a2 82       	std	Z+2, r10	; 0x02
     746:	80 91 25 01 	lds	r24, 0x0125
     74a:	90 91 26 01 	lds	r25, 0x0126
     74e:	a0 91 27 01 	lds	r26, 0x0127
     752:	b0 91 28 01 	lds	r27, 0x0128
     756:	84 83       	std	Z+4, r24	; 0x04
     758:	95 83       	std	Z+5, r25	; 0x05
     75a:	a6 83       	std	Z+6, r26	; 0x06
     75c:	b7 83       	std	Z+7, r27	; 0x07
     75e:	f1 86       	std	Z+9, r15	; 0x09
     760:	e0 86       	std	Z+8, r14	; 0x08
     762:	80 91 29 01 	lds	r24, 0x0129
     766:	90 91 2a 01 	lds	r25, 0x012A
     76a:	a0 91 2b 01 	lds	r26, 0x012B
     76e:	b0 91 2c 01 	lds	r27, 0x012C
     772:	82 87       	std	Z+10, r24	; 0x0a
     774:	93 87       	std	Z+11, r25	; 0x0b
     776:	a4 87       	std	Z+12, r26	; 0x0c
     778:	b5 87       	std	Z+13, r27	; 0x0d
     77a:	f7 86       	std	Z+15, r15	; 0x0f
     77c:	e6 86       	std	Z+14, r14	; 0x0e
     77e:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <sprintf>
     782:	6d b7       	in	r22, 0x3d	; 61
     784:	7e b7       	in	r23, 0x3e	; 62
     786:	60 5f       	subi	r22, 0xF0	; 240
     788:	7f 4f       	sbci	r23, 0xFF	; 255
     78a:	0f b6       	in	r0, 0x3f	; 63
     78c:	f8 94       	cli
     78e:	7e bf       	out	0x3e, r23	; 62
     790:	0f be       	out	0x3f, r0	; 63
     792:	6d bf       	out	0x3d, r22	; 61
			//LCDclr();
			LCDhome();
     794:	0e 94 d7 04 	call	0x9ae	; 0x9ae <LCDhome>
			LCDstring(lcd_buffer[i]);  
     798:	80 91 23 01 	lds	r24, 0x0123
     79c:	89 9d       	mul	r24, r9
     79e:	c0 01       	movw	r24, r0
     7a0:	11 24       	eor	r1, r1
     7a2:	8c 0d       	add	r24, r12
     7a4:	9d 1d       	adc	r25, r13
     7a6:	6a cf       	rjmp	.-300    	; 0x67c <main+0x28c>
		}
		else
			alarm_algorithm(); 		 
     7a8:	0e 94 85 01 	call	0x30a	; 0x30a <alarm_algorithm>
     7ac:	69 cf       	rjmp	.-302    	; 0x680 <main+0x290>

000007ae <_delay_loop_2>:

#define F_CPU 8000000UL 

void _delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     7ae:	01 97       	sbiw	r24, 0x01	; 1
     7b0:	f1 f7       	brne	.-4      	; 0x7ae <_delay_loop_2>
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
     7b2:	08 95       	ret

000007b4 <_delay_ms>:

void _delay_ms(double __ms)
{
     7b4:	af 92       	push	r10
     7b6:	bf 92       	push	r11
     7b8:	cf 92       	push	r12
     7ba:	df 92       	push	r13
     7bc:	ef 92       	push	r14
     7be:	ff 92       	push	r15
     7c0:	0f 93       	push	r16
     7c2:	1f 93       	push	r17
     7c4:	5b 01       	movw	r10, r22
     7c6:	6c 01       	movw	r12, r24
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     7c8:	20 e0       	ldi	r18, 0x00	; 0
     7ca:	30 e0       	ldi	r19, 0x00	; 0
     7cc:	4a ef       	ldi	r20, 0xFA	; 250
     7ce:	54 e4       	ldi	r21, 0x44	; 68
     7d0:	0e 94 94 0c 	call	0x1928	; 0x1928 <__mulsf3>
     7d4:	7b 01       	movw	r14, r22
     7d6:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     7d8:	20 e0       	ldi	r18, 0x00	; 0
     7da:	30 e0       	ldi	r19, 0x00	; 0
     7dc:	40 e8       	ldi	r20, 0x80	; 128
     7de:	5f e3       	ldi	r21, 0x3F	; 63
     7e0:	0e 94 ae 0b 	call	0x175c	; 0x175c <__cmpsf2>
     7e4:	88 23       	and	r24, r24
     7e6:	1c f4       	brge	.+6      	; 0x7ee <_delay_ms+0x3a>
     7e8:	61 e0       	ldi	r22, 0x01	; 1
     7ea:	70 e0       	ldi	r23, 0x00	; 0
     7ec:	24 c0       	rjmp	.+72     	; 0x836 <_delay_ms+0x82>
		__ticks = 1;
	else if (__tmp > 65535)
     7ee:	c8 01       	movw	r24, r16
     7f0:	b7 01       	movw	r22, r14
     7f2:	20 e0       	ldi	r18, 0x00	; 0
     7f4:	3f ef       	ldi	r19, 0xFF	; 255
     7f6:	4f e7       	ldi	r20, 0x7F	; 127
     7f8:	57 e4       	ldi	r21, 0x47	; 71
     7fa:	0e 94 90 0c 	call	0x1920	; 0x1920 <__gesf2>
     7fe:	18 16       	cp	r1, r24
     800:	b4 f4       	brge	.+44     	; 0x82e <_delay_ms+0x7a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     802:	c6 01       	movw	r24, r12
     804:	b5 01       	movw	r22, r10
     806:	20 e0       	ldi	r18, 0x00	; 0
     808:	30 e0       	ldi	r19, 0x00	; 0
     80a:	40 e2       	ldi	r20, 0x20	; 32
     80c:	51 e4       	ldi	r21, 0x41	; 65
     80e:	0e 94 94 0c 	call	0x1928	; 0x1928 <__mulsf3>
     812:	0e 94 b2 0b 	call	0x1764	; 0x1764 <__fixunssfsi>

#define F_CPU 8000000UL 

void _delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     816:	88 ec       	ldi	r24, 0xC8	; 200
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	05 c0       	rjmp	.+10     	; 0x826 <_delay_ms+0x72>
     81c:	fc 01       	movw	r30, r24
     81e:	31 97       	sbiw	r30, 0x01	; 1
     820:	f1 f7       	brne	.-4      	; 0x81e <_delay_ms+0x6a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     822:	61 50       	subi	r22, 0x01	; 1
     824:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     826:	61 15       	cp	r22, r1
     828:	71 05       	cpc	r23, r1
     82a:	c1 f7       	brne	.-16     	; 0x81c <_delay_ms+0x68>
     82c:	07 c0       	rjmp	.+14     	; 0x83c <_delay_ms+0x88>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     82e:	c8 01       	movw	r24, r16
     830:	b7 01       	movw	r22, r14
     832:	0e 94 b2 0b 	call	0x1764	; 0x1764 <__fixunssfsi>

#define F_CPU 8000000UL 

void _delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     836:	cb 01       	movw	r24, r22
     838:	01 97       	sbiw	r24, 0x01	; 1
     83a:	f1 f7       	brne	.-4      	; 0x838 <_delay_ms+0x84>
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
	_delay_loop_2(__ticks);
}
     83c:	1f 91       	pop	r17
     83e:	0f 91       	pop	r16
     840:	ff 90       	pop	r15
     842:	ef 90       	pop	r14
     844:	df 90       	pop	r13
     846:	cf 90       	pop	r12
     848:	bf 90       	pop	r11
     84a:	af 90       	pop	r10
     84c:	08 95       	ret

0000084e <LCDstrLen>:

uint8_t LCDstrLen(char *s)
{
     84e:	ac 01       	movw	r20, r24
     850:	20 e0       	ldi	r18, 0x00	; 0
     852:	01 c0       	rjmp	.+2      	; 0x856 <LCDstrLen+0x8>
	uint8_t i=0;
	while (s[i]!='\0') i++;
     854:	2f 5f       	subi	r18, 0xFF	; 255
     856:	fa 01       	movw	r30, r20
     858:	e2 0f       	add	r30, r18
     85a:	f1 1d       	adc	r31, r1
     85c:	80 81       	ld	r24, Z
     85e:	88 23       	and	r24, r24
     860:	c9 f7       	brne	.-14     	; 0x854 <LCDstrLen+0x6>
	return i;
}
     862:	82 2f       	mov	r24, r18
     864:	08 95       	ret

00000866 <LCDsendChar>:

void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{
     866:	0f 93       	push	r16
     868:	1f 93       	push	r17
     86a:	08 2f       	mov	r16, r24
	LDP=(ch&0b11110000);
     86c:	80 7f       	andi	r24, 0xF0	; 240
     86e:	8b bb       	out	0x1b, r24	; 27
	LCP|=1<<LCD_RS;
     870:	d8 9a       	sbi	0x1b, 0	; 27
	LCP|=1<<LCD_E;		
     872:	da 9a       	sbi	0x1b, 2	; 27
	_delay_ms(1);
     874:	60 e0       	ldi	r22, 0x00	; 0
     876:	70 e0       	ldi	r23, 0x00	; 0
     878:	80 e8       	ldi	r24, 0x80	; 128
     87a:	9f e3       	ldi	r25, 0x3F	; 63
     87c:	0e 94 da 03 	call	0x7b4	; 0x7b4 <_delay_ms>
	LCP&=~(1<<LCD_E);	
     880:	da 98       	cbi	0x1b, 2	; 27
	LCP&=~(1<<LCD_RS);
     882:	d8 98       	cbi	0x1b, 0	; 27
	_delay_ms(1);
     884:	60 e0       	ldi	r22, 0x00	; 0
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	80 e8       	ldi	r24, 0x80	; 128
     88a:	9f e3       	ldi	r25, 0x3F	; 63
     88c:	0e 94 da 03 	call	0x7b4	; 0x7b4 <_delay_ms>
	LDP=((ch&0b00001111)<<4);
     890:	10 e0       	ldi	r17, 0x00	; 0
     892:	84 e0       	ldi	r24, 0x04	; 4
     894:	00 0f       	add	r16, r16
     896:	11 1f       	adc	r17, r17
     898:	8a 95       	dec	r24
     89a:	e1 f7       	brne	.-8      	; 0x894 <LCDsendChar+0x2e>
     89c:	0b bb       	out	0x1b, r16	; 27
	LCP|=1<<LCD_RS;
     89e:	d8 9a       	sbi	0x1b, 0	; 27
	LCP|=1<<LCD_E;		
     8a0:	da 9a       	sbi	0x1b, 2	; 27
	_delay_ms(1);
     8a2:	60 e0       	ldi	r22, 0x00	; 0
     8a4:	70 e0       	ldi	r23, 0x00	; 0
     8a6:	80 e8       	ldi	r24, 0x80	; 128
     8a8:	9f e3       	ldi	r25, 0x3F	; 63
     8aa:	0e 94 da 03 	call	0x7b4	; 0x7b4 <_delay_ms>
	LCP&=~(1<<LCD_E);	
     8ae:	da 98       	cbi	0x1b, 2	; 27
	LCP&=~(1<<LCD_RS);
     8b0:	d8 98       	cbi	0x1b, 0	; 27
	_delay_ms(1);
     8b2:	60 e0       	ldi	r22, 0x00	; 0
     8b4:	70 e0       	ldi	r23, 0x00	; 0
     8b6:	80 e8       	ldi	r24, 0x80	; 128
     8b8:	9f e3       	ldi	r25, 0x3F	; 63
     8ba:	0e 94 da 03 	call	0x7b4	; 0x7b4 <_delay_ms>
}
     8be:	1f 91       	pop	r17
     8c0:	0f 91       	pop	r16
     8c2:	08 95       	ret

000008c4 <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
     8c4:	0f 93       	push	r16
     8c6:	1f 93       	push	r17
     8c8:	08 2f       	mov	r16, r24
	LDP=(cmd&0b11110000);
     8ca:	80 7f       	andi	r24, 0xF0	; 240
     8cc:	8b bb       	out	0x1b, r24	; 27
	LCP|=1<<LCD_E;		
     8ce:	da 9a       	sbi	0x1b, 2	; 27
	_delay_ms(1);
     8d0:	60 e0       	ldi	r22, 0x00	; 0
     8d2:	70 e0       	ldi	r23, 0x00	; 0
     8d4:	80 e8       	ldi	r24, 0x80	; 128
     8d6:	9f e3       	ldi	r25, 0x3F	; 63
     8d8:	0e 94 da 03 	call	0x7b4	; 0x7b4 <_delay_ms>
	LCP&=~(1<<LCD_E);
     8dc:	da 98       	cbi	0x1b, 2	; 27
	_delay_ms(1);
     8de:	60 e0       	ldi	r22, 0x00	; 0
     8e0:	70 e0       	ldi	r23, 0x00	; 0
     8e2:	80 e8       	ldi	r24, 0x80	; 128
     8e4:	9f e3       	ldi	r25, 0x3F	; 63
     8e6:	0e 94 da 03 	call	0x7b4	; 0x7b4 <_delay_ms>
	LDP=((cmd&0b00001111)<<4);	
     8ea:	10 e0       	ldi	r17, 0x00	; 0
     8ec:	94 e0       	ldi	r25, 0x04	; 4
     8ee:	00 0f       	add	r16, r16
     8f0:	11 1f       	adc	r17, r17
     8f2:	9a 95       	dec	r25
     8f4:	e1 f7       	brne	.-8      	; 0x8ee <LCDsendCommand+0x2a>
     8f6:	0b bb       	out	0x1b, r16	; 27
	LCP|=1<<LCD_E;		
     8f8:	da 9a       	sbi	0x1b, 2	; 27
	_delay_ms(1);
     8fa:	60 e0       	ldi	r22, 0x00	; 0
     8fc:	70 e0       	ldi	r23, 0x00	; 0
     8fe:	80 e8       	ldi	r24, 0x80	; 128
     900:	9f e3       	ldi	r25, 0x3F	; 63
     902:	0e 94 da 03 	call	0x7b4	; 0x7b4 <_delay_ms>
	LCP&=~(1<<LCD_E);
     906:	da 98       	cbi	0x1b, 2	; 27
	_delay_ms(1);
     908:	60 e0       	ldi	r22, 0x00	; 0
     90a:	70 e0       	ldi	r23, 0x00	; 0
     90c:	80 e8       	ldi	r24, 0x80	; 128
     90e:	9f e3       	ldi	r25, 0x3F	; 63
     910:	0e 94 da 03 	call	0x7b4	; 0x7b4 <_delay_ms>
}
     914:	1f 91       	pop	r17
     916:	0f 91       	pop	r16
     918:	08 95       	ret

0000091a <LCDinit>:
void LCDinit(void)//Initializes LCD
{
     91a:	1f 93       	push	r17
	_delay_ms(15);
     91c:	60 e0       	ldi	r22, 0x00	; 0
     91e:	70 e0       	ldi	r23, 0x00	; 0
     920:	80 e7       	ldi	r24, 0x70	; 112
     922:	91 e4       	ldi	r25, 0x41	; 65
     924:	0e 94 da 03 	call	0x7b4	; 0x7b4 <_delay_ms>
	LDP=0x00;
     928:	1b ba       	out	0x1b, r1	; 27
	LCP=0x00;
     92a:	1b ba       	out	0x1b, r1	; 27
	LDDR|=1<<LCD_D7|1<<LCD_D6|1<<LCD_D5|1<<LCD_D4;
     92c:	8a b3       	in	r24, 0x1a	; 26
     92e:	80 6f       	ori	r24, 0xF0	; 240
     930:	8a bb       	out	0x1a, r24	; 26
	LCDR|=1<<LCD_E|1<<LCD_RW|1<<LCD_RS;
     932:	8a b3       	in	r24, 0x1a	; 26
     934:	87 60       	ori	r24, 0x07	; 7
     936:	8a bb       	out	0x1a, r24	; 26
   //---------one------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     938:	10 e3       	ldi	r17, 0x30	; 48
     93a:	1b bb       	out	0x1b, r17	; 27
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     93c:	da 9a       	sbi	0x1b, 2	; 27
	_delay_ms(1);
     93e:	60 e0       	ldi	r22, 0x00	; 0
     940:	70 e0       	ldi	r23, 0x00	; 0
     942:	80 e8       	ldi	r24, 0x80	; 128
     944:	9f e3       	ldi	r25, 0x3F	; 63
     946:	0e 94 da 03 	call	0x7b4	; 0x7b4 <_delay_ms>
	LCP&=~(1<<LCD_E);
     94a:	da 98       	cbi	0x1b, 2	; 27
	_delay_ms(1);
     94c:	60 e0       	ldi	r22, 0x00	; 0
     94e:	70 e0       	ldi	r23, 0x00	; 0
     950:	80 e8       	ldi	r24, 0x80	; 128
     952:	9f e3       	ldi	r25, 0x3F	; 63
     954:	0e 94 da 03 	call	0x7b4	; 0x7b4 <_delay_ms>
	//-----------two-----------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|1<<LCD_D4; //4 bit mode
     958:	1b bb       	out	0x1b, r17	; 27
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     95a:	da 9a       	sbi	0x1b, 2	; 27
	_delay_ms(1);
     95c:	60 e0       	ldi	r22, 0x00	; 0
     95e:	70 e0       	ldi	r23, 0x00	; 0
     960:	80 e8       	ldi	r24, 0x80	; 128
     962:	9f e3       	ldi	r25, 0x3F	; 63
     964:	0e 94 da 03 	call	0x7b4	; 0x7b4 <_delay_ms>
	LCP&=~(1<<LCD_E);
     968:	da 98       	cbi	0x1b, 2	; 27
	_delay_ms(1);
     96a:	60 e0       	ldi	r22, 0x00	; 0
     96c:	70 e0       	ldi	r23, 0x00	; 0
     96e:	80 e8       	ldi	r24, 0x80	; 128
     970:	9f e3       	ldi	r25, 0x3F	; 63
     972:	0e 94 da 03 	call	0x7b4	; 0x7b4 <_delay_ms>
	//-------three-------------
	LDP=0<<LCD_D7|0<<LCD_D6|1<<LCD_D5|0<<LCD_D4; //4 bit mode
     976:	80 e2       	ldi	r24, 0x20	; 32
     978:	8b bb       	out	0x1b, r24	; 27
	LCP|=1<<LCD_E|0<<LCD_RW|0<<LCD_RS;		
     97a:	da 9a       	sbi	0x1b, 2	; 27
	_delay_ms(1);
     97c:	60 e0       	ldi	r22, 0x00	; 0
     97e:	70 e0       	ldi	r23, 0x00	; 0
     980:	80 e8       	ldi	r24, 0x80	; 128
     982:	9f e3       	ldi	r25, 0x3F	; 63
     984:	0e 94 da 03 	call	0x7b4	; 0x7b4 <_delay_ms>
	LCP&=~(1<<LCD_E);
     988:	da 98       	cbi	0x1b, 2	; 27
	_delay_ms(1);
     98a:	60 e0       	ldi	r22, 0x00	; 0
     98c:	70 e0       	ldi	r23, 0x00	; 0
     98e:	80 e8       	ldi	r24, 0x80	; 128
     990:	9f e3       	ldi	r25, 0x3F	; 63
     992:	0e 94 da 03 	call	0x7b4	; 0x7b4 <_delay_ms>
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
     996:	88 e2       	ldi	r24, 0x28	; 40
     998:	0e 94 62 04 	call	0x8c4	; 0x8c4 <LCDsendCommand>
   //-----increment address, cursor shift------
	LCDsendCommand(0b00001110);
     99c:	8e e0       	ldi	r24, 0x0E	; 14
     99e:	0e 94 62 04 	call	0x8c4	; 0x8c4 <LCDsendCommand>


}			
     9a2:	1f 91       	pop	r17
     9a4:	08 95       	ret

000009a6 <LCDclr>:
	//LCP|=1<<LCD_RS;
	//LCDsendCommand(1<<LCD_HOME);
	//LCP|=1<<LCD_RS;
	//LCDsendCommand(0x0C);
	//LCP|=1<<LCD_RS;
	LCDsendCommand(1<<LCD_CLR);
     9a6:	81 e0       	ldi	r24, 0x01	; 1
     9a8:	0e 94 62 04 	call	0x8c4	; 0x8c4 <LCDsendCommand>
	//LCDGotoXY(0,0);
}
     9ac:	08 95       	ret

000009ae <LCDhome>:
_lcd_x=_lcd_y=0;
}*/

void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
     9ae:	82 e0       	ldi	r24, 0x02	; 2
     9b0:	0e 94 62 04 	call	0x8c4	; 0x8c4 <LCDsendCommand>
}
     9b4:	08 95       	ret

000009b6 <LCDGotoXY>:

void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
     9b6:	62 30       	cpi	r22, 0x02	; 2
     9b8:	31 f0       	breq	.+12     	; 0x9c6 <LCDGotoXY+0x10>
     9ba:	63 30       	cpi	r22, 0x03	; 3
     9bc:	31 f0       	breq	.+12     	; 0x9ca <LCDGotoXY+0x14>
     9be:	61 30       	cpi	r22, 0x01	; 1
     9c0:	29 f4       	brne	.+10     	; 0x9cc <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     9c2:	80 5c       	subi	r24, 0xC0	; 192
     9c4:	03 c0       	rjmp	.+6      	; 0x9cc <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     9c6:	8c 5e       	subi	r24, 0xEC	; 236
     9c8:	01 c0       	rjmp	.+2      	; 0x9cc <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     9ca:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
     9cc:	80 68       	ori	r24, 0x80	; 128
     9ce:	0e 94 62 04 	call	0x8c4	; 0x8c4 <LCDsendCommand>
	
}
     9d2:	08 95       	ret

000009d4 <LCDstring>:
	}	
	while(i++<33) LCDsendChar(' ');
}*/

void LCDstring(char* data)	//Outputs string to LCD
{
     9d4:	ff 92       	push	r15
     9d6:	0f 93       	push	r16
     9d8:	1f 93       	push	r17
     9da:	cf 93       	push	r28
     9dc:	df 93       	push	r29
     9de:	ec 01       	movw	r28, r24
	register uint8_t i=0, j=0; 
	uint8_t nline=0;
	
	// check to make sure we have a good pointer
	if (!data) return;
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a9 f1       	breq	.+106    	; 0xa4e <LCDstring+0x7a>
     9e4:	00 e0       	ldi	r16, 0x00	; 0
     9e6:	10 e0       	ldi	r17, 0x00	; 0
     9e8:	ff 24       	eor	r15, r15
     9ea:	15 c0       	rjmp	.+42     	; 0xa16 <LCDstring+0x42>
	
	// print data
	while (data[i]!='\0') 
	{
		if (data[i]=='\n') 
     9ec:	8a 30       	cpi	r24, 0x0A	; 10
     9ee:	81 f4       	brne	.+32     	; 0xa10 <LCDstring+0x3c>
     9f0:	10 2f       	mov	r17, r16
     9f2:	04 c0       	rjmp	.+8      	; 0x9fc <LCDstring+0x28>
		{
		  for(j=i; j<16; j++)
			LCDsendChar(' ');
     9f4:	80 e2       	ldi	r24, 0x20	; 32
     9f6:	0e 94 33 04 	call	0x866	; 0x866 <LCDsendChar>
	// print data
	while (data[i]!='\0') 
	{
		if (data[i]=='\n') 
		{
		  for(j=i; j<16; j++)
     9fa:	1f 5f       	subi	r17, 0xFF	; 255
     9fc:	10 31       	cpi	r17, 0x10	; 16
     9fe:	d0 f3       	brcs	.-12     	; 0x9f4 <LCDstring+0x20>
			LCDsendChar(' ');
		  LCDGotoXY(0,1);
     a00:	80 e0       	ldi	r24, 0x00	; 0
     a02:	61 e0       	ldi	r22, 0x01	; 1
     a04:	0e 94 db 04 	call	0x9b6	; 0x9b6 <LCDGotoXY>
     a08:	10 2f       	mov	r17, r16
     a0a:	ff 24       	eor	r15, r15
     a0c:	f3 94       	inc	r15
     a0e:	02 c0       	rjmp	.+4      	; 0xa14 <LCDstring+0x40>
		  j=i;
		  nline=1;
		}
		else LCDsendChar(data[i]);
     a10:	0e 94 33 04 	call	0x866	; 0x866 <LCDsendChar>
        i++;	 
     a14:	0f 5f       	subi	r16, 0xFF	; 255
	
	// check to make sure we have a good pointer
	if (!data) return;
	
	// print data
	while (data[i]!='\0') 
     a16:	fe 01       	movw	r30, r28
     a18:	e0 0f       	add	r30, r16
     a1a:	f1 1d       	adc	r31, r1
     a1c:	80 81       	ld	r24, Z
     a1e:	88 23       	and	r24, r24
     a20:	29 f7       	brne	.-54     	; 0x9ec <LCDstring+0x18>
		  nline=1;
		}
		else LCDsendChar(data[i]);
        i++;	 
	}	
	for(j=i-j; j<33; j++)
     a22:	01 1b       	sub	r16, r17
     a24:	10 2f       	mov	r17, r16
     a26:	04 c0       	rjmp	.+8      	; 0xa30 <LCDstring+0x5c>
		LCDsendChar(' ');
     a28:	80 e2       	ldi	r24, 0x20	; 32
     a2a:	0e 94 33 04 	call	0x866	; 0x866 <LCDsendChar>
		  nline=1;
		}
		else LCDsendChar(data[i]);
        i++;	 
	}	
	for(j=i-j; j<33; j++)
     a2e:	1f 5f       	subi	r17, 0xFF	; 255
     a30:	11 32       	cpi	r17, 0x21	; 33
     a32:	d0 f3       	brcs	.-12     	; 0xa28 <LCDstring+0x54>
		LCDsendChar(' ');
	if (!nline)
     a34:	ff 20       	and	r15, r15
     a36:	59 f4       	brne	.+22     	; 0xa4e <LCDstring+0x7a>
	{ 
		LCDGotoXY(0,1);
     a38:	80 e0       	ldi	r24, 0x00	; 0
     a3a:	61 e0       	ldi	r22, 0x01	; 1
     a3c:	0e 94 db 04 	call	0x9b6	; 0x9b6 <LCDGotoXY>
     a40:	10 e0       	ldi	r17, 0x00	; 0
		for(j=0; j<33; j++)
			LCDsendChar(' ');
     a42:	80 e2       	ldi	r24, 0x20	; 32
     a44:	0e 94 33 04 	call	0x866	; 0x866 <LCDsendChar>
	for(j=i-j; j<33; j++)
		LCDsendChar(' ');
	if (!nline)
	{ 
		LCDGotoXY(0,1);
		for(j=0; j<33; j++)
     a48:	1f 5f       	subi	r17, 0xFF	; 255
     a4a:	11 32       	cpi	r17, 0x21	; 33
     a4c:	d1 f7       	brne	.-12     	; 0xa42 <LCDstring+0x6e>
			LCDsendChar(' ');
	}
}
     a4e:	df 91       	pop	r29
     a50:	cf 91       	pop	r28
     a52:	1f 91       	pop	r17
     a54:	0f 91       	pop	r16
     a56:	ff 90       	pop	r15
     a58:	08 95       	ret

00000a5a <CopyStringtoLCD>:
}
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
     a5a:	1f 93       	push	r17
     a5c:	cf 93       	push	r28
     a5e:	df 93       	push	r29
     a60:	ec 01       	movw	r28, r24
     a62:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
     a64:	64 2f       	mov	r22, r20
     a66:	0e 94 db 04 	call	0x9b6	; 0x9b6 <LCDGotoXY>
     a6a:	10 e0       	ldi	r17, 0x00	; 0
     a6c:	03 c0       	rjmp	.+6      	; 0xa74 <CopyStringtoLCD+0x1a>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
     a6e:	0e 94 33 04 	call	0x866	; 0x866 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     a72:	1f 5f       	subi	r17, 0xFF	; 255
     a74:	fe 01       	movw	r30, r28
     a76:	e1 0f       	add	r30, r17
     a78:	f1 1d       	adc	r31, r1
     a7a:	84 91       	lpm	r24, Z+
     a7c:	88 23       	and	r24, r24
     a7e:	b9 f7       	brne	.-18     	; 0xa6e <CopyStringtoLCD+0x14>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
     a80:	df 91       	pop	r29
     a82:	cf 91       	pop	r28
     a84:	1f 91       	pop	r17
     a86:	08 95       	ret

00000a88 <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     a88:	ef 92       	push	r14
     a8a:	ff 92       	push	r15
     a8c:	0f 93       	push	r16
     a8e:	1f 93       	push	r17
     a90:	cf 93       	push	r28
     a92:	df 93       	push	r29
     a94:	7c 01       	movw	r14, r24
     a96:	16 2f       	mov	r17, r22
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
     a98:	11 0f       	add	r17, r17
     a9a:	11 0f       	add	r17, r17
     a9c:	11 0f       	add	r17, r17
     a9e:	10 64       	ori	r17, 0x40	; 64
     aa0:	c0 e0       	ldi	r28, 0x00	; 0
     aa2:	d0 e0       	ldi	r29, 0x00	; 0
	for (i=0; i<8; i++){
		pcc=pgm_read_byte(&pc[i]);
     aa4:	f7 01       	movw	r30, r14
     aa6:	ec 0f       	add	r30, r28
     aa8:	fd 1f       	adc	r31, r29
     aaa:	04 91       	lpm	r16, Z+
		LCDsendCommand(a++);
     aac:	81 2f       	mov	r24, r17
     aae:	8c 0f       	add	r24, r28
     ab0:	0e 94 62 04 	call	0x8c4	; 0x8c4 <LCDsendCommand>
		LCDsendChar(pcc);
     ab4:	80 2f       	mov	r24, r16
     ab6:	0e 94 33 04 	call	0x866	; 0x866 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
     aba:	21 96       	adiw	r28, 0x01	; 1
     abc:	c8 30       	cpi	r28, 0x08	; 8
     abe:	d1 05       	cpc	r29, r1
     ac0:	89 f7       	brne	.-30     	; 0xaa4 <LCDdefinechar+0x1c>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
     ac2:	df 91       	pop	r29
     ac4:	cf 91       	pop	r28
     ac6:	1f 91       	pop	r17
     ac8:	0f 91       	pop	r16
     aca:	ff 90       	pop	r15
     acc:	ef 90       	pop	r14
     ace:	08 95       	ret

00000ad0 <LCDshiftLeft>:

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
     ad0:	0f 93       	push	r16
     ad2:	1f 93       	push	r17
     ad4:	08 2f       	mov	r16, r24
     ad6:	10 e0       	ldi	r17, 0x00	; 0
     ad8:	04 c0       	rjmp	.+8      	; 0xae2 <LCDshiftLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x1E);
     ada:	8e e1       	ldi	r24, 0x1E	; 30
     adc:	0e 94 62 04 	call	0x8c4	; 0x8c4 <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
     ae0:	1f 5f       	subi	r17, 0xFF	; 255
     ae2:	10 17       	cp	r17, r16
     ae4:	d0 f3       	brcs	.-12     	; 0xada <LCDshiftLeft+0xa>
	{
		LCDsendCommand(0x1E);
	}
}
     ae6:	1f 91       	pop	r17
     ae8:	0f 91       	pop	r16
     aea:	08 95       	ret

00000aec <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
     aec:	0f 93       	push	r16
     aee:	1f 93       	push	r17
     af0:	08 2f       	mov	r16, r24
     af2:	10 e0       	ldi	r17, 0x00	; 0
     af4:	04 c0       	rjmp	.+8      	; 0xafe <LCDshiftRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x18);
     af6:	88 e1       	ldi	r24, 0x18	; 24
     af8:	0e 94 62 04 	call	0x8c4	; 0x8c4 <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
     afc:	1f 5f       	subi	r17, 0xFF	; 255
     afe:	10 17       	cp	r17, r16
     b00:	d0 f3       	brcs	.-12     	; 0xaf6 <LCDshiftRight+0xa>
	{
		LCDsendCommand(0x18);
	}
}
     b02:	1f 91       	pop	r17
     b04:	0f 91       	pop	r16
     b06:	08 95       	ret

00000b08 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
     b08:	8e e0       	ldi	r24, 0x0E	; 14
     b0a:	0e 94 62 04 	call	0x8c4	; 0x8c4 <LCDsendCommand>
}
     b0e:	08 95       	ret

00000b10 <LCDcursorOnBlink>:
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
     b10:	8f e0       	ldi	r24, 0x0F	; 15
     b12:	0e 94 62 04 	call	0x8c4	; 0x8c4 <LCDsendCommand>
}
     b16:	08 95       	ret

00000b18 <LCDcursorOFF>:
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
     b18:	8c e0       	ldi	r24, 0x0C	; 12
     b1a:	0e 94 62 04 	call	0x8c4	; 0x8c4 <LCDsendCommand>
}
     b1e:	08 95       	ret

00000b20 <LCDblank>:
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
     b20:	88 e0       	ldi	r24, 0x08	; 8
     b22:	0e 94 62 04 	call	0x8c4	; 0x8c4 <LCDsendCommand>
}
     b26:	08 95       	ret

00000b28 <LCDvisible>:
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
     b28:	8c e0       	ldi	r24, 0x0C	; 12
     b2a:	0e 94 62 04 	call	0x8c4	; 0x8c4 <LCDsendCommand>
}
     b2e:	08 95       	ret

00000b30 <LCDcursorLeft>:
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
     b30:	0f 93       	push	r16
     b32:	1f 93       	push	r17
     b34:	08 2f       	mov	r16, r24
     b36:	10 e0       	ldi	r17, 0x00	; 0
     b38:	04 c0       	rjmp	.+8      	; 0xb42 <LCDcursorLeft+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x10);
     b3a:	80 e1       	ldi	r24, 0x10	; 16
     b3c:	0e 94 62 04 	call	0x8c4	; 0x8c4 <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     b40:	1f 5f       	subi	r17, 0xFF	; 255
     b42:	10 17       	cp	r17, r16
     b44:	d0 f3       	brcs	.-12     	; 0xb3a <LCDcursorLeft+0xa>
	{
		LCDsendCommand(0x10);
	}
}
     b46:	1f 91       	pop	r17
     b48:	0f 91       	pop	r16
     b4a:	08 95       	ret

00000b4c <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
     b4c:	0f 93       	push	r16
     b4e:	1f 93       	push	r17
     b50:	08 2f       	mov	r16, r24
     b52:	10 e0       	ldi	r17, 0x00	; 0
     b54:	04 c0       	rjmp	.+8      	; 0xb5e <LCDcursorRight+0x12>
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
     b56:	84 e1       	ldi	r24, 0x14	; 20
     b58:	0e 94 62 04 	call	0x8c4	; 0x8c4 <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     b5c:	1f 5f       	subi	r17, 0xFF	; 255
     b5e:	10 17       	cp	r17, r16
     b60:	d0 f3       	brcs	.-12     	; 0xb56 <LCDcursorRight+0xa>
	{
		LCDsendCommand(0x14);
	}
}
     b62:	1f 91       	pop	r17
     b64:	0f 91       	pop	r16
     b66:	08 95       	ret

00000b68 <therm_input_mode>:

uint8_t therm_dq;

void therm_input_mode(void) 
{
	THERM_DDR&=~(1<<therm_dq);
     b68:	24 b3       	in	r18, 0x14	; 20
     b6a:	81 e0       	ldi	r24, 0x01	; 1
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	00 90 36 01 	lds	r0, 0x0136
     b72:	02 c0       	rjmp	.+4      	; 0xb78 <therm_input_mode+0x10>
     b74:	88 0f       	add	r24, r24
     b76:	99 1f       	adc	r25, r25
     b78:	0a 94       	dec	r0
     b7a:	e2 f7       	brpl	.-8      	; 0xb74 <therm_input_mode+0xc>
     b7c:	80 95       	com	r24
     b7e:	82 23       	and	r24, r18
     b80:	84 bb       	out	0x14, r24	; 20
}
     b82:	08 95       	ret

00000b84 <therm_output_mode>:
void therm_output_mode(void)
{ 
	THERM_DDR|=(1<<therm_dq);
     b84:	24 b3       	in	r18, 0x14	; 20
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	00 90 36 01 	lds	r0, 0x0136
     b8e:	02 c0       	rjmp	.+4      	; 0xb94 <therm_output_mode+0x10>
     b90:	88 0f       	add	r24, r24
     b92:	99 1f       	adc	r25, r25
     b94:	0a 94       	dec	r0
     b96:	e2 f7       	brpl	.-8      	; 0xb90 <therm_output_mode+0xc>
     b98:	28 2b       	or	r18, r24
     b9a:	24 bb       	out	0x14, r18	; 20
}
     b9c:	08 95       	ret

00000b9e <therm_low>:
void therm_low(void)
{ 
	THERM_PORT&=~(1<<therm_dq);
     b9e:	25 b3       	in	r18, 0x15	; 21
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	00 90 36 01 	lds	r0, 0x0136
     ba8:	02 c0       	rjmp	.+4      	; 0xbae <therm_low+0x10>
     baa:	88 0f       	add	r24, r24
     bac:	99 1f       	adc	r25, r25
     bae:	0a 94       	dec	r0
     bb0:	e2 f7       	brpl	.-8      	; 0xbaa <therm_low+0xc>
     bb2:	80 95       	com	r24
     bb4:	82 23       	and	r24, r18
     bb6:	85 bb       	out	0x15, r24	; 21
}
     bb8:	08 95       	ret

00000bba <therm_high>:
void therm_high(void) 
{
	THERM_PORT|=(1<<therm_dq);
     bba:	25 b3       	in	r18, 0x15	; 21
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	00 90 36 01 	lds	r0, 0x0136
     bc4:	02 c0       	rjmp	.+4      	; 0xbca <therm_high+0x10>
     bc6:	88 0f       	add	r24, r24
     bc8:	99 1f       	adc	r25, r25
     bca:	0a 94       	dec	r0
     bcc:	e2 f7       	brpl	.-8      	; 0xbc6 <therm_high+0xc>
     bce:	28 2b       	or	r18, r24
     bd0:	25 bb       	out	0x15, r18	; 21
}
     bd2:	08 95       	ret

00000bd4 <therm_delay>:
void therm_delay(uint16_t delay)
{
     bd4:	02 c0       	rjmp	.+4      	; 0xbda <therm_delay+0x6>
	while (delay--) asm volatile("nop");
     bd6:	00 00       	nop
     bd8:	01 97       	sbiw	r24, 0x01	; 1
     bda:	00 97       	sbiw	r24, 0x00	; 0
     bdc:	e1 f7       	brne	.-8      	; 0xbd6 <therm_delay+0x2>
}
     bde:	08 95       	ret

00000be0 <therm_reset>:
{ 
	THERM_DDR|=(1<<therm_dq);
}
void therm_low(void)
{ 
	THERM_PORT&=~(1<<therm_dq);
     be0:	85 b3       	in	r24, 0x15	; 21
     be2:	21 e0       	ldi	r18, 0x01	; 1
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	00 90 36 01 	lds	r0, 0x0136
     bea:	02 c0       	rjmp	.+4      	; 0xbf0 <therm_reset+0x10>
     bec:	22 0f       	add	r18, r18
     bee:	33 1f       	adc	r19, r19
     bf0:	0a 94       	dec	r0
     bf2:	e2 f7       	brpl	.-8      	; 0xbec <therm_reset+0xc>
     bf4:	52 2f       	mov	r21, r18
     bf6:	42 2f       	mov	r20, r18
     bf8:	40 95       	com	r20
     bfa:	84 23       	and	r24, r20
     bfc:	85 bb       	out	0x15, r24	; 21
{
	THERM_DDR&=~(1<<therm_dq);
}
void therm_output_mode(void)
{ 
	THERM_DDR|=(1<<therm_dq);
     bfe:	84 b3       	in	r24, 0x14	; 20
     c00:	82 2b       	or	r24, r18
     c02:	84 bb       	out	0x14, r24	; 20
     c04:	80 ee       	ldi	r24, 0xE0	; 224
     c06:	91 e0       	ldi	r25, 0x01	; 1
     c08:	01 c0       	rjmp	.+2      	; 0xc0c <therm_reset+0x2c>
{
	THERM_PORT|=(1<<therm_dq);
}
void therm_delay(uint16_t delay)
{
	while (delay--) asm volatile("nop");
     c0a:	00 00       	nop
     c0c:	01 97       	sbiw	r24, 0x01	; 1
     c0e:	6f ef       	ldi	r22, 0xFF	; 255
     c10:	8f 3f       	cpi	r24, 0xFF	; 255
     c12:	96 07       	cpc	r25, r22
     c14:	d1 f7       	brne	.-12     	; 0xc0a <therm_reset+0x2a>

uint8_t therm_dq;

void therm_input_mode(void) 
{
	THERM_DDR&=~(1<<therm_dq);
     c16:	84 b3       	in	r24, 0x14	; 20
     c18:	48 23       	and	r20, r24
     c1a:	44 bb       	out	0x14, r20	; 20
     c1c:	8c e3       	ldi	r24, 0x3C	; 60
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	01 c0       	rjmp	.+2      	; 0xc24 <therm_reset+0x44>
{
	THERM_PORT|=(1<<therm_dq);
}
void therm_delay(uint16_t delay)
{
	while (delay--) asm volatile("nop");
     c22:	00 00       	nop
     c24:	01 97       	sbiw	r24, 0x01	; 1
     c26:	4f ef       	ldi	r20, 0xFF	; 255
     c28:	8f 3f       	cpi	r24, 0xFF	; 255
     c2a:	94 07       	cpc	r25, r20
     c2c:	d1 f7       	brne	.-12     	; 0xc22 <therm_reset+0x42>
	therm_delay(us(480));
	//повертаємо шину і чекаємо 60 мкс на відповідь
	therm_input_mode();
	therm_delay(us(60));
	//зберігаємо значення на шині і чекаємо завершення 480 мкс періода
	i=(THERM_PIN & (1<<therm_dq));
     c2e:	63 b3       	in	r22, 0x13	; 19
     c30:	84 ea       	ldi	r24, 0xA4	; 164
     c32:	91 e0       	ldi	r25, 0x01	; 1
     c34:	01 c0       	rjmp	.+2      	; 0xc38 <therm_reset+0x58>
{
	THERM_PORT|=(1<<therm_dq);
}
void therm_delay(uint16_t delay)
{
	while (delay--) asm volatile("nop");
     c36:	00 00       	nop
     c38:	01 97       	sbiw	r24, 0x01	; 1
     c3a:	4f ef       	ldi	r20, 0xFF	; 255
     c3c:	8f 3f       	cpi	r24, 0xFF	; 255
     c3e:	94 07       	cpc	r25, r20
     c40:	d1 f7       	brne	.-12     	; 0xc36 <therm_reset+0x56>
	therm_input_mode();
	therm_delay(us(60));
	//зберігаємо значення на шині і чекаємо завершення 480 мкс періода
	i=(THERM_PIN & (1<<therm_dq));
	therm_delay(us(420));
	if ((THERM_PIN & (1<<therm_dq))==i) return 1;
     c42:	83 b3       	in	r24, 0x13	; 19
     c44:	40 e0       	ldi	r20, 0x00	; 0
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	28 23       	and	r18, r24
     c4a:	39 23       	and	r19, r25
     c4c:	56 23       	and	r21, r22
     c4e:	85 2f       	mov	r24, r21
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	28 17       	cp	r18, r24
     c54:	39 07       	cpc	r19, r25
     c56:	09 f4       	brne	.+2      	; 0xc5a <therm_reset+0x7a>
     c58:	41 e0       	ldi	r20, 0x01	; 1
	//повертаємо результат виконання (presence pulse) (0=OK, 1=WRONG)
	return 0;
}
     c5a:	84 2f       	mov	r24, r20
     c5c:	08 95       	ret

00000c5e <therm_write_bit>:
{ 
	THERM_DDR|=(1<<therm_dq);
}
void therm_low(void)
{ 
	THERM_PORT&=~(1<<therm_dq);
     c5e:	95 b3       	in	r25, 0x15	; 21
     c60:	21 e0       	ldi	r18, 0x01	; 1
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	00 90 36 01 	lds	r0, 0x0136
     c68:	02 c0       	rjmp	.+4      	; 0xc6e <therm_write_bit+0x10>
     c6a:	22 0f       	add	r18, r18
     c6c:	33 1f       	adc	r19, r19
     c6e:	0a 94       	dec	r0
     c70:	e2 f7       	brpl	.-8      	; 0xc6a <therm_write_bit+0xc>
     c72:	32 2f       	mov	r19, r18
     c74:	30 95       	com	r19
     c76:	93 23       	and	r25, r19
     c78:	95 bb       	out	0x15, r25	; 21
{
	THERM_DDR&=~(1<<therm_dq);
}
void therm_output_mode(void)
{ 
	THERM_DDR|=(1<<therm_dq);
     c7a:	94 b3       	in	r25, 0x14	; 20
     c7c:	29 2b       	or	r18, r25
     c7e:	24 bb       	out	0x14, r18	; 20
{
	THERM_PORT|=(1<<therm_dq);
}
void therm_delay(uint16_t delay)
{
	while (delay--) asm volatile("nop");
     c80:	00 00       	nop
	//переводимо шину в стан лог. 0 на 1 мкс
	therm_low();
	therm_output_mode();
	therm_delay(us(1));
	//якщо пишемо 1, відпускаємо шину (якщо 0 тримаємо в стані лог. 0)
	if (bit) therm_input_mode();
     c82:	88 23       	and	r24, r24
     c84:	19 f0       	breq	.+6      	; 0xc8c <therm_write_bit+0x2e>

uint8_t therm_dq;

void therm_input_mode(void) 
{
	THERM_DDR&=~(1<<therm_dq);
     c86:	84 b3       	in	r24, 0x14	; 20
     c88:	83 23       	and	r24, r19
     c8a:	84 bb       	out	0x14, r24	; 20
     c8c:	8c e3       	ldi	r24, 0x3C	; 60
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	01 c0       	rjmp	.+2      	; 0xc94 <therm_write_bit+0x36>
{
	THERM_PORT|=(1<<therm_dq);
}
void therm_delay(uint16_t delay)
{
	while (delay--) asm volatile("nop");
     c92:	00 00       	nop
     c94:	01 97       	sbiw	r24, 0x01	; 1
     c96:	2f ef       	ldi	r18, 0xFF	; 255
     c98:	8f 3f       	cpi	r24, 0xFF	; 255
     c9a:	92 07       	cpc	r25, r18
     c9c:	d1 f7       	brne	.-12     	; 0xc92 <therm_write_bit+0x34>

uint8_t therm_dq;

void therm_input_mode(void) 
{
	THERM_DDR&=~(1<<therm_dq);
     c9e:	84 b3       	in	r24, 0x14	; 20
     ca0:	38 23       	and	r19, r24
     ca2:	34 bb       	out	0x14, r19	; 20
	//якщо пишемо 1, відпускаємо шину (якщо 0 тримаємо в стані лог. 0)
	if (bit) therm_input_mode();
	//чекаємо 60мкм і відпускаємо шину
	therm_delay(us(60));
	therm_input_mode();
}
     ca4:	08 95       	ret

00000ca6 <therm_read_bit>:
{ 
	THERM_DDR|=(1<<therm_dq);
}
void therm_low(void)
{ 
	THERM_PORT&=~(1<<therm_dq);
     ca6:	25 b3       	in	r18, 0x15	; 21
     ca8:	40 91 36 01 	lds	r20, 0x0136
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	04 2e       	mov	r0, r20
     cb2:	02 c0       	rjmp	.+4      	; 0xcb8 <therm_read_bit+0x12>
     cb4:	88 0f       	add	r24, r24
     cb6:	99 1f       	adc	r25, r25
     cb8:	0a 94       	dec	r0
     cba:	e2 f7       	brpl	.-8      	; 0xcb4 <therm_read_bit+0xe>
     cbc:	38 2f       	mov	r19, r24
     cbe:	30 95       	com	r19
     cc0:	23 23       	and	r18, r19
     cc2:	25 bb       	out	0x15, r18	; 21
{
	THERM_DDR&=~(1<<therm_dq);
}
void therm_output_mode(void)
{ 
	THERM_DDR|=(1<<therm_dq);
     cc4:	24 b3       	in	r18, 0x14	; 20
     cc6:	82 2b       	or	r24, r18
     cc8:	84 bb       	out	0x14, r24	; 20
{
	THERM_PORT|=(1<<therm_dq);
}
void therm_delay(uint16_t delay)
{
	while (delay--) asm volatile("nop");
     cca:	00 00       	nop

uint8_t therm_dq;

void therm_input_mode(void) 
{
	THERM_DDR&=~(1<<therm_dq);
     ccc:	84 b3       	in	r24, 0x14	; 20
     cce:	38 23       	and	r19, r24
     cd0:	34 bb       	out	0x14, r19	; 20
     cd2:	8e e0       	ldi	r24, 0x0E	; 14
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	01 c0       	rjmp	.+2      	; 0xcda <therm_read_bit+0x34>
{
	THERM_PORT|=(1<<therm_dq);
}
void therm_delay(uint16_t delay)
{
	while (delay--) asm volatile("nop");
     cd8:	00 00       	nop
     cda:	01 97       	sbiw	r24, 0x01	; 1
     cdc:	2f ef       	ldi	r18, 0xFF	; 255
     cde:	8f 3f       	cpi	r24, 0xFF	; 255
     ce0:	92 07       	cpc	r25, r18
     ce2:	d1 f7       	brne	.-12     	; 0xcd8 <therm_read_bit+0x32>
	therm_delay(us(1));
	//відпускаємо шину і чекаємо 14 мкс
	therm_input_mode();
	therm_delay(us(14));
	//читаємо біт з шини
	if (THERM_PIN&(1<<therm_dq)) bit=1;
     ce4:	83 b3       	in	r24, 0x13	; 19
     ce6:	2d e2       	ldi	r18, 0x2D	; 45
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	01 c0       	rjmp	.+2      	; 0xcee <therm_read_bit+0x48>
{
	THERM_PORT|=(1<<therm_dq);
}
void therm_delay(uint16_t delay)
{
	while (delay--) asm volatile("nop");
     cec:	00 00       	nop
     cee:	21 50       	subi	r18, 0x01	; 1
     cf0:	30 40       	sbci	r19, 0x00	; 0
     cf2:	9f ef       	ldi	r25, 0xFF	; 255
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	39 07       	cpc	r19, r25
     cf8:	c9 f7       	brne	.-14     	; 0xcec <therm_read_bit+0x46>
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <therm_read_bit+0x5c>
     cfe:	95 95       	asr	r25
     d00:	87 95       	ror	r24
     d02:	4a 95       	dec	r20
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <therm_read_bit+0x58>
	//читаємо біт з шини
	if (THERM_PIN&(1<<therm_dq)) bit=1;
	//чекаємо 45 мкс до закінчення і вертаємо прочитане значення
	therm_delay(us(45));
	return bit;
}
     d06:	81 70       	andi	r24, 0x01	; 1
     d08:	08 95       	ret

00000d0a <therm_read_byte>:

uint8_t therm_read_byte(void)
{
     d0a:	0f 93       	push	r16
     d0c:	1f 93       	push	r17
     d0e:	08 e0       	ldi	r16, 0x08	; 8
     d10:	10 e0       	ldi	r17, 0x00	; 0
     d12:	09 c0       	rjmp	.+18     	; 0xd26 <therm_read_byte+0x1c>
	uint8_t i=8, n=0;
	while (i--)
	{
		//зсуваємо на 1 розряд вправо і зберігаємо прочитане значення
		n>>=1;
		n|=(therm_read_bit()<<7);
     d14:	0e 94 53 06 	call	0xca6	; 0xca6 <therm_read_bit>
     d18:	91 2f       	mov	r25, r17
     d1a:	96 95       	lsr	r25
     d1c:	18 2f       	mov	r17, r24
     d1e:	17 95       	ror	r17
     d20:	11 27       	eor	r17, r17
     d22:	17 95       	ror	r17
     d24:	19 2b       	or	r17, r25
}

uint8_t therm_read_byte(void)
{
	uint8_t i=8, n=0;
	while (i--)
     d26:	01 50       	subi	r16, 0x01	; 1
     d28:	a8 f7       	brcc	.-22     	; 0xd14 <therm_read_byte+0xa>
		//зсуваємо на 1 розряд вправо і зберігаємо прочитане значення
		n>>=1;
		n|=(therm_read_bit()<<7);
	}
	return n;
}
     d2a:	81 2f       	mov	r24, r17
     d2c:	1f 91       	pop	r17
     d2e:	0f 91       	pop	r16
     d30:	08 95       	ret

00000d32 <therm_write_byte>:

void therm_write_byte(uint8_t byte)
{
     d32:	0f 93       	push	r16
     d34:	1f 93       	push	r17
     d36:	08 2f       	mov	r16, r24
     d38:	18 e0       	ldi	r17, 0x08	; 8
     d3a:	05 c0       	rjmp	.+10     	; 0xd46 <therm_write_byte+0x14>
	uint8_t i=8;
	while (i--)
	{
		//пишемо молодший біт і зсуваємо на 1 розряд вправо для виводу наступного біта
		therm_write_bit(byte&1);
     d3c:	80 2f       	mov	r24, r16
     d3e:	81 70       	andi	r24, 0x01	; 1
     d40:	0e 94 2f 06 	call	0xc5e	; 0xc5e <therm_write_bit>
		byte>>=1;
     d44:	06 95       	lsr	r16
}

void therm_write_byte(uint8_t byte)
{
	uint8_t i=8;
	while (i--)
     d46:	11 50       	subi	r17, 0x01	; 1
     d48:	c8 f7       	brcc	.-14     	; 0xd3c <therm_write_byte+0xa>
	{
		//пишемо молодший біт і зсуваємо на 1 розряд вправо для виводу наступного біта
		therm_write_bit(byte&1);
		byte>>=1;
	}
}
     d4a:	1f 91       	pop	r17
     d4c:	0f 91       	pop	r16
     d4e:	08 95       	ret

00000d50 <therm_crc8>:

uint8_t therm_crc8(uint8_t *data, uint8_t num_bytes)
{
     d50:	fc 01       	movw	r30, r24
     d52:	40 e0       	ldi	r20, 0x00	; 0
     d54:	90 e0       	ldi	r25, 0x00	; 0
 
	for (byte_ctr=0; byte_ctr<num_bytes; byte_ctr++)
	{
		cur_byte=data[byte_ctr];
		for (bit_ctr=0; bit_ctr<8; cur_byte>>=1, bit_ctr++)
			if ((cur_byte ^ crc) & 1) crc = ((crc ^ 0x18) >> 1) | 0x80;
     d56:	58 e1       	ldi	r21, 0x18	; 24
     d58:	12 c0       	rjmp	.+36     	; 0xd7e <therm_crc8+0x2e>
{
	uint8_t byte_ctr, cur_byte, bit_ctr, crc=0;
 
	for (byte_ctr=0; byte_ctr<num_bytes; byte_ctr++)
	{
		cur_byte=data[byte_ctr];
     d5a:	30 81       	ld	r19, Z
     d5c:	20 e0       	ldi	r18, 0x00	; 0
		for (bit_ctr=0; bit_ctr<8; cur_byte>>=1, bit_ctr++)
			if ((cur_byte ^ crc) & 1) crc = ((crc ^ 0x18) >> 1) | 0x80;
     d5e:	89 2f       	mov	r24, r25
     d60:	83 27       	eor	r24, r19
     d62:	80 ff       	sbrs	r24, 0
     d64:	04 c0       	rjmp	.+8      	; 0xd6e <therm_crc8+0x1e>
     d66:	95 27       	eor	r25, r21
     d68:	96 95       	lsr	r25
     d6a:	90 68       	ori	r25, 0x80	; 128
     d6c:	01 c0       	rjmp	.+2      	; 0xd70 <therm_crc8+0x20>
			else crc>>=1;
     d6e:	96 95       	lsr	r25
	uint8_t byte_ctr, cur_byte, bit_ctr, crc=0;
 
	for (byte_ctr=0; byte_ctr<num_bytes; byte_ctr++)
	{
		cur_byte=data[byte_ctr];
		for (bit_ctr=0; bit_ctr<8; cur_byte>>=1, bit_ctr++)
     d70:	2f 5f       	subi	r18, 0xFF	; 255
     d72:	28 30       	cpi	r18, 0x08	; 8
     d74:	11 f0       	breq	.+4      	; 0xd7a <therm_crc8+0x2a>
     d76:	36 95       	lsr	r19
     d78:	f2 cf       	rjmp	.-28     	; 0xd5e <therm_crc8+0xe>

uint8_t therm_crc8(uint8_t *data, uint8_t num_bytes)
{
	uint8_t byte_ctr, cur_byte, bit_ctr, crc=0;
 
	for (byte_ctr=0; byte_ctr<num_bytes; byte_ctr++)
     d7a:	4f 5f       	subi	r20, 0xFF	; 255
     d7c:	31 96       	adiw	r30, 0x01	; 1
     d7e:	46 17       	cp	r20, r22
     d80:	60 f3       	brcs	.-40     	; 0xd5a <therm_crc8+0xa>
		for (bit_ctr=0; bit_ctr<8; cur_byte>>=1, bit_ctr++)
			if ((cur_byte ^ crc) & 1) crc = ((crc ^ 0x18) >> 1) | 0x80;
			else crc>>=1;
	}
	return crc; 
}
     d82:	89 2f       	mov	r24, r25
     d84:	08 95       	ret

00000d86 <therm_init>:

uint8_t therm_init(uint8_t sensor_id, int8_t temp_low, int8_t temp_high, uint8_t resolution)
{
     d86:	ff 92       	push	r15
     d88:	0f 93       	push	r16
     d8a:	1f 93       	push	r17
     d8c:	f6 2e       	mov	r15, r22
     d8e:	04 2f       	mov	r16, r20
     d90:	12 2f       	mov	r17, r18
	resolution=(resolution<<5)|0x1f;
	//ініціалізуємо давач sensor_id
	if (sensor_id) therm_dq=OUTDOOR_THERM;
     d92:	88 23       	and	r24, r24
     d94:	19 f0       	breq	.+6      	; 0xd9c <therm_init+0x16>
     d96:	10 92 36 01 	sts	0x0136, r1
     d9a:	03 c0       	rjmp	.+6      	; 0xda2 <therm_init+0x1c>
    else therm_dq=INDOOR_THERM;
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	80 93 36 01 	sts	0x0136, r24
	if (therm_reset()) return 1;
     da2:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <therm_reset>
     da6:	88 23       	and	r24, r24
     da8:	11 f0       	breq	.+4      	; 0xdae <therm_init+0x28>
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	25 c0       	rjmp	.+74     	; 0xdf8 <therm_init+0x72>
	therm_write_byte(THERM_CMD_SKIPROM);	
     dae:	8c ec       	ldi	r24, 0xCC	; 204
     db0:	0e 94 99 06 	call	0xd32	; 0xd32 <therm_write_byte>
	therm_write_byte(THERM_CMD_WSCRATCHPAD);
     db4:	8e e4       	ldi	r24, 0x4E	; 78
     db6:	0e 94 99 06 	call	0xd32	; 0xd32 <therm_write_byte>
	therm_write_byte(temp_high);
     dba:	80 2f       	mov	r24, r16
     dbc:	0e 94 99 06 	call	0xd32	; 0xd32 <therm_write_byte>
	therm_write_byte(temp_low);
     dc0:	8f 2d       	mov	r24, r15
     dc2:	0e 94 99 06 	call	0xd32	; 0xd32 <therm_write_byte>
	return crc; 
}

uint8_t therm_init(uint8_t sensor_id, int8_t temp_low, int8_t temp_high, uint8_t resolution)
{
	resolution=(resolution<<5)|0x1f;
     dc6:	12 95       	swap	r17
     dc8:	11 0f       	add	r17, r17
     dca:	10 7e       	andi	r17, 0xE0	; 224
	if (therm_reset()) return 1;
	therm_write_byte(THERM_CMD_SKIPROM);	
	therm_write_byte(THERM_CMD_WSCRATCHPAD);
	therm_write_byte(temp_high);
	therm_write_byte(temp_low);
	therm_write_byte(resolution);
     dcc:	81 2f       	mov	r24, r17
     dce:	8f 61       	ori	r24, 0x1F	; 31
     dd0:	0e 94 99 06 	call	0xd32	; 0xd32 <therm_write_byte>
	therm_reset();
     dd4:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <therm_reset>
	therm_write_byte(THERM_CMD_SKIPROM);	
     dd8:	8c ec       	ldi	r24, 0xCC	; 204
     dda:	0e 94 99 06 	call	0xd32	; 0xd32 <therm_write_byte>
	therm_write_byte(THERM_CMD_CPYSCRATCHPAD);
     dde:	88 e4       	ldi	r24, 0x48	; 72
     de0:	0e 94 99 06 	call	0xd32	; 0xd32 <therm_write_byte>
     de4:	87 e9       	ldi	r24, 0x97	; 151
     de6:	9a e3       	ldi	r25, 0x3A	; 58
     de8:	01 c0       	rjmp	.+2      	; 0xdec <therm_init+0x66>
{
	THERM_PORT|=(1<<therm_dq);
}
void therm_delay(uint16_t delay)
{
	while (delay--) asm volatile("nop");
     dea:	00 00       	nop
     dec:	01 97       	sbiw	r24, 0x01	; 1
     dee:	2f ef       	ldi	r18, 0xFF	; 255
     df0:	8f 3f       	cpi	r24, 0xFF	; 255
     df2:	92 07       	cpc	r25, r18
     df4:	d1 f7       	brne	.-12     	; 0xdea <therm_init+0x64>
     df6:	80 e0       	ldi	r24, 0x00	; 0
	therm_reset();
	therm_write_byte(THERM_CMD_SKIPROM);	
	therm_write_byte(THERM_CMD_CPYSCRATCHPAD);
	therm_delay(ms(15));	
	return 0;
}
     df8:	1f 91       	pop	r17
     dfa:	0f 91       	pop	r16
     dfc:	ff 90       	pop	r15
     dfe:	08 95       	ret

00000e00 <therm_read_spd>:

uint8_t therm_read_spd(void)
{
     e00:	cf 93       	push	r28
     e02:	df 93       	push	r29
     e04:	cd e2       	ldi	r28, 0x2D	; 45
     e06:	d1 e0       	ldi	r29, 0x01	; 1
	uint8_t i=0, *p;	
	
	p = (uint8_t*) &__ds18b20_scratch_pad;
	do 
		*(p++)=therm_read_byte();
     e08:	0e 94 85 06 	call	0xd0a	; 0xd0a <therm_read_byte>
     e0c:	89 93       	st	Y+, r24
	while(++i<9);	
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	c6 33       	cpi	r28, 0x36	; 54
     e12:	d8 07       	cpc	r29, r24
     e14:	c9 f7       	brne	.-14     	; 0xe08 <therm_read_spd+0x8>
	if (therm_crc8((uint8_t*)&__ds18b20_scratch_pad,8)!=__ds18b20_scratch_pad.crc) 
     e16:	ce 01       	movw	r24, r28
     e18:	09 97       	sbiw	r24, 0x09	; 9
     e1a:	68 e0       	ldi	r22, 0x08	; 8
     e1c:	0e 94 a8 06 	call	0xd50	; 0xd50 <therm_crc8>
     e20:	20 e0       	ldi	r18, 0x00	; 0
     e22:	90 91 35 01 	lds	r25, 0x0135
     e26:	89 13       	cpse	r24, r25
     e28:	21 e0       	ldi	r18, 0x01	; 1
		return 1;
	return 0;
}
     e2a:	82 2f       	mov	r24, r18
     e2c:	df 91       	pop	r29
     e2e:	cf 91       	pop	r28
     e30:	08 95       	ret

00000e32 <therm_read_temperature>:

uint8_t therm_read_temperature(uint8_t sensor_id, float *temp)
{
     e32:	8f 92       	push	r8
     e34:	9f 92       	push	r9
     e36:	bf 92       	push	r11
     e38:	cf 92       	push	r12
     e3a:	df 92       	push	r13
     e3c:	0f 93       	push	r16
     e3e:	df 93       	push	r29
     e40:	cf 93       	push	r28
     e42:	cd b7       	in	r28, 0x3d	; 61
     e44:	de b7       	in	r29, 0x3e	; 62
     e46:	2c 97       	sbiw	r28, 0x0c	; 12
     e48:	0f b6       	in	r0, 0x3f	; 63
     e4a:	f8 94       	cli
     e4c:	de bf       	out	0x3e, r29	; 62
     e4e:	0f be       	out	0x3f, r0	; 63
     e50:	cd bf       	out	0x3d, r28	; 61
     e52:	4b 01       	movw	r8, r22
	uint8_t digit, decimal, resolution, sign;
	uint16_t meas, bit_mask[4]={0x0008, 0x000c, 0x000e, 0x000f};
     e54:	de 01       	movw	r26, r28
     e56:	11 96       	adiw	r26, 0x01	; 1
     e58:	e9 e1       	ldi	r30, 0x19	; 25
     e5a:	f1 e0       	ldi	r31, 0x01	; 1
     e5c:	98 e0       	ldi	r25, 0x08	; 8
     e5e:	01 90       	ld	r0, Z+
     e60:	0d 92       	st	X+, r0
     e62:	91 50       	subi	r25, 0x01	; 1
     e64:	e1 f7       	brne	.-8      	; 0xe5e <therm_read_temperature+0x2c>
 
	if (sensor_id) therm_dq=OUTDOOR_THERM;
     e66:	88 23       	and	r24, r24
     e68:	19 f0       	breq	.+6      	; 0xe70 <therm_read_temperature+0x3e>
     e6a:	10 92 36 01 	sts	0x0136, r1
     e6e:	03 c0       	rjmp	.+6      	; 0xe76 <therm_read_temperature+0x44>
    else therm_dq=INDOOR_THERM; 
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	80 93 36 01 	sts	0x0136, r24
	//скинути, пропустити процедуру перевірки серійного номера ROM і почати вимірювання і перетворення температури
	if (therm_reset()) return 1;
     e76:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <therm_reset>
     e7a:	88 23       	and	r24, r24
     e7c:	09 f0       	breq	.+2      	; 0xe80 <therm_read_temperature+0x4e>
     e7e:	72 c0       	rjmp	.+228    	; 0xf64 <therm_read_temperature+0x132>
	therm_write_byte(THERM_CMD_SKIPROM);
     e80:	8c ec       	ldi	r24, 0xCC	; 204
     e82:	0e 94 99 06 	call	0xd32	; 0xd32 <therm_write_byte>
	therm_write_byte(THERM_CMD_CONVERTTEMP);
     e86:	84 e4       	ldi	r24, 0x44	; 68
     e88:	0e 94 99 06 	call	0xd32	; 0xd32 <therm_write_byte>
	//чекаємо до закінчення перетворення
	//if (!therm_read_bit()) return 1;
	while(!therm_read_bit());	
     e8c:	0e 94 53 06 	call	0xca6	; 0xca6 <therm_read_bit>
     e90:	88 23       	and	r24, r24
     e92:	e1 f3       	breq	.-8      	; 0xe8c <therm_read_temperature+0x5a>
	//скидаємо, пропускаємо ROM і посилаємо команду зчитування Scratchpad
	therm_reset();
     e94:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <therm_reset>
	therm_write_byte(THERM_CMD_SKIPROM);	
     e98:	8c ec       	ldi	r24, 0xCC	; 204
     e9a:	0e 94 99 06 	call	0xd32	; 0xd32 <therm_write_byte>
	therm_write_byte(THERM_CMD_RSCRATCHPAD);
     e9e:	8e eb       	ldi	r24, 0xBE	; 190
     ea0:	0e 94 99 06 	call	0xd32	; 0xd32 <therm_write_byte>
	if (therm_read_spd()) return 1;
     ea4:	0e 94 00 07 	call	0xe00	; 0xe00 <therm_read_spd>
     ea8:	88 23       	and	r24, r24
     eaa:	09 f0       	breq	.+2      	; 0xeae <therm_read_temperature+0x7c>
     eac:	5b c0       	rjmp	.+182    	; 0xf64 <therm_read_temperature+0x132>
	therm_reset();
     eae:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <therm_reset>
	resolution=(__ds18b20_scratch_pad.conf_register>>5) & 3;
     eb2:	b0 90 31 01 	lds	r11, 0x0131
    //отримуємо молодший і старший байти температури
	meas=__ds18b20_scratch_pad.temp_lsb;  // LSB
     eb6:	80 91 2d 01 	lds	r24, 0x012D
     eba:	c8 2e       	mov	r12, r24
     ebc:	dd 24       	eor	r13, r13
	meas|=((uint16_t)__ds18b20_scratch_pad.temp_msb) << 8; // MSB	
     ebe:	90 91 2e 01 	lds	r25, 0x012E
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	c8 2a       	or	r12, r24
     ec6:	d9 2a       	or	r13, r25
	//перевіряємо на мінусову температуру 
	if (meas & 0x8000) 
     ec8:	d7 fc       	sbrc	r13, 7
     eca:	02 c0       	rjmp	.+4      	; 0xed0 <therm_read_temperature+0x9e>
     ecc:	00 e0       	ldi	r16, 0x00	; 0
     ece:	05 c0       	rjmp	.+10     	; 0xeda <therm_read_temperature+0xa8>
	{
		sign=1;  //відмічаємо мінусову температуру
		meas^=0xffff;  //перетворюємо в плюсову
		meas++;
     ed0:	d0 94       	com	r13
     ed2:	c1 94       	neg	r12
     ed4:	d1 08       	sbc	r13, r1
     ed6:	d3 94       	inc	r13
     ed8:	01 e0       	ldi	r16, 0x01	; 1
	}
	else sign=0;
	//зберігаємо цілу і дробову частини температури
	digit=(uint8_t)(meas >> 4); //зберігаємо цілу частину 
	decimal=(uint8_t)(meas & bit_mask[resolution]);	//отримуємо дробову частину
	*temp=digit+decimal*0.0625;	
     eda:	b6 01       	movw	r22, r12
     edc:	24 e0       	ldi	r18, 0x04	; 4
     ede:	76 95       	lsr	r23
     ee0:	67 95       	ror	r22
     ee2:	2a 95       	dec	r18
     ee4:	e1 f7       	brne	.-8      	; 0xede <therm_read_temperature+0xac>
     ee6:	70 e0       	ldi	r23, 0x00	; 0
     ee8:	88 27       	eor	r24, r24
     eea:	77 fd       	sbrc	r23, 7
     eec:	80 95       	com	r24
     eee:	98 2f       	mov	r25, r24
     ef0:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <__floatsisf>
     ef4:	69 87       	std	Y+9, r22	; 0x09
     ef6:	7a 87       	std	Y+10, r23	; 0x0a
     ef8:	8b 87       	std	Y+11, r24	; 0x0b
     efa:	9c 87       	std	Y+12, r25	; 0x0c
     efc:	b2 94       	swap	r11
     efe:	b6 94       	lsr	r11
     f00:	97 e0       	ldi	r25, 0x07	; 7
     f02:	b9 22       	and	r11, r25
     f04:	eb 2d       	mov	r30, r11
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	e3 70       	andi	r30, 0x03	; 3
     f0a:	f0 70       	andi	r31, 0x00	; 0
     f0c:	ee 0f       	add	r30, r30
     f0e:	ff 1f       	adc	r31, r31
     f10:	ec 0f       	add	r30, r28
     f12:	fd 1f       	adc	r31, r29
     f14:	61 81       	ldd	r22, Z+1	; 0x01
     f16:	6c 21       	and	r22, r12
     f18:	70 e0       	ldi	r23, 0x00	; 0
     f1a:	88 27       	eor	r24, r24
     f1c:	77 fd       	sbrc	r23, 7
     f1e:	80 95       	com	r24
     f20:	98 2f       	mov	r25, r24
     f22:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <__floatsisf>
     f26:	20 e0       	ldi	r18, 0x00	; 0
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	40 e8       	ldi	r20, 0x80	; 128
     f2c:	5d e3       	ldi	r21, 0x3D	; 61
     f2e:	0e 94 94 0c 	call	0x1928	; 0x1928 <__mulsf3>
     f32:	9b 01       	movw	r18, r22
     f34:	ac 01       	movw	r20, r24
     f36:	69 85       	ldd	r22, Y+9	; 0x09
     f38:	7a 85       	ldd	r23, Y+10	; 0x0a
     f3a:	8b 85       	ldd	r24, Y+11	; 0x0b
     f3c:	9c 85       	ldd	r25, Y+12	; 0x0c
     f3e:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__addsf3>
     f42:	f4 01       	movw	r30, r8
     f44:	60 83       	st	Z, r22
     f46:	71 83       	std	Z+1, r23	; 0x01
     f48:	82 83       	std	Z+2, r24	; 0x02
     f4a:	93 83       	std	Z+3, r25	; 0x03
	if (sign) *temp=-(*temp); //ставемо знак мінус, якщо мінусова температура 
     f4c:	00 23       	and	r16, r16
     f4e:	41 f0       	breq	.+16     	; 0xf60 <therm_read_temperature+0x12e>
     f50:	dc 01       	movw	r26, r24
     f52:	cb 01       	movw	r24, r22
     f54:	b0 58       	subi	r27, 0x80	; 128
     f56:	f4 01       	movw	r30, r8
     f58:	80 83       	st	Z, r24
     f5a:	91 83       	std	Z+1, r25	; 0x01
     f5c:	a2 83       	std	Z+2, r26	; 0x02
     f5e:	b3 83       	std	Z+3, r27	; 0x03
     f60:	80 e0       	ldi	r24, 0x00	; 0
     f62:	01 c0       	rjmp	.+2      	; 0xf66 <therm_read_temperature+0x134>
     f64:	81 e0       	ldi	r24, 0x01	; 1
	return 0;
     f66:	2c 96       	adiw	r28, 0x0c	; 12
     f68:	0f b6       	in	r0, 0x3f	; 63
     f6a:	f8 94       	cli
     f6c:	de bf       	out	0x3e, r29	; 62
     f6e:	0f be       	out	0x3f, r0	; 63
     f70:	cd bf       	out	0x3d, r28	; 61
     f72:	cf 91       	pop	r28
     f74:	df 91       	pop	r29
     f76:	0f 91       	pop	r16
     f78:	df 90       	pop	r13
     f7a:	cf 90       	pop	r12
     f7c:	bf 90       	pop	r11
     f7e:	9f 90       	pop	r9
     f80:	8f 90       	pop	r8
     f82:	08 95       	ret

00000f84 <vfprintf>:
     f84:	a1 e1       	ldi	r26, 0x11	; 17
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	e8 ec       	ldi	r30, 0xC8	; 200
     f8a:	f7 e0       	ldi	r31, 0x07	; 7
     f8c:	0c 94 f7 0c 	jmp	0x19ee	; 0x19ee <__prologue_saves__>
     f90:	3c 01       	movw	r6, r24
     f92:	7f 87       	std	Y+15, r23	; 0x0f
     f94:	6e 87       	std	Y+14, r22	; 0x0e
     f96:	6a 01       	movw	r12, r20
     f98:	fc 01       	movw	r30, r24
     f9a:	17 82       	std	Z+7, r1	; 0x07
     f9c:	16 82       	std	Z+6, r1	; 0x06
     f9e:	83 81       	ldd	r24, Z+3	; 0x03
     fa0:	81 fd       	sbrc	r24, 1
     fa2:	03 c0       	rjmp	.+6      	; 0xfaa <vfprintf+0x26>
     fa4:	6f ef       	ldi	r22, 0xFF	; 255
     fa6:	7f ef       	ldi	r23, 0xFF	; 255
     fa8:	6f c3       	rjmp	.+1758   	; 0x1688 <vfprintf+0x704>
     faa:	9e 01       	movw	r18, r28
     fac:	2f 5f       	subi	r18, 0xFF	; 255
     fae:	3f 4f       	sbci	r19, 0xFF	; 255
     fb0:	39 8b       	std	Y+17, r19	; 0x11
     fb2:	28 8b       	std	Y+16, r18	; 0x10
     fb4:	f3 01       	movw	r30, r6
     fb6:	23 81       	ldd	r18, Z+3	; 0x03
     fb8:	ee 85       	ldd	r30, Y+14	; 0x0e
     fba:	ff 85       	ldd	r31, Y+15	; 0x0f
     fbc:	23 fd       	sbrc	r18, 3
     fbe:	85 91       	lpm	r24, Z+
     fc0:	23 ff       	sbrs	r18, 3
     fc2:	81 91       	ld	r24, Z+
     fc4:	ff 87       	std	Y+15, r31	; 0x0f
     fc6:	ee 87       	std	Y+14, r30	; 0x0e
     fc8:	88 23       	and	r24, r24
     fca:	09 f4       	brne	.+2      	; 0xfce <vfprintf+0x4a>
     fcc:	5a c3       	rjmp	.+1716   	; 0x1682 <vfprintf+0x6fe>
     fce:	85 32       	cpi	r24, 0x25	; 37
     fd0:	51 f4       	brne	.+20     	; 0xfe6 <vfprintf+0x62>
     fd2:	ee 85       	ldd	r30, Y+14	; 0x0e
     fd4:	ff 85       	ldd	r31, Y+15	; 0x0f
     fd6:	23 fd       	sbrc	r18, 3
     fd8:	85 91       	lpm	r24, Z+
     fda:	23 ff       	sbrs	r18, 3
     fdc:	81 91       	ld	r24, Z+
     fde:	ff 87       	std	Y+15, r31	; 0x0f
     fe0:	ee 87       	std	Y+14, r30	; 0x0e
     fe2:	85 32       	cpi	r24, 0x25	; 37
     fe4:	29 f4       	brne	.+10     	; 0xff0 <vfprintf+0x6c>
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	b3 01       	movw	r22, r6
     fea:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <fputc>
     fee:	e2 cf       	rjmp	.-60     	; 0xfb4 <vfprintf+0x30>
     ff0:	98 2f       	mov	r25, r24
     ff2:	10 e0       	ldi	r17, 0x00	; 0
     ff4:	88 24       	eor	r8, r8
     ff6:	99 24       	eor	r9, r9
     ff8:	10 32       	cpi	r17, 0x20	; 32
     ffa:	b0 f4       	brcc	.+44     	; 0x1028 <vfprintf+0xa4>
     ffc:	9b 32       	cpi	r25, 0x2B	; 43
     ffe:	69 f0       	breq	.+26     	; 0x101a <vfprintf+0x96>
    1000:	9c 32       	cpi	r25, 0x2C	; 44
    1002:	28 f4       	brcc	.+10     	; 0x100e <vfprintf+0x8a>
    1004:	90 32       	cpi	r25, 0x20	; 32
    1006:	51 f0       	breq	.+20     	; 0x101c <vfprintf+0x98>
    1008:	93 32       	cpi	r25, 0x23	; 35
    100a:	71 f4       	brne	.+28     	; 0x1028 <vfprintf+0xa4>
    100c:	0b c0       	rjmp	.+22     	; 0x1024 <vfprintf+0xa0>
    100e:	9d 32       	cpi	r25, 0x2D	; 45
    1010:	39 f0       	breq	.+14     	; 0x1020 <vfprintf+0x9c>
    1012:	90 33       	cpi	r25, 0x30	; 48
    1014:	49 f4       	brne	.+18     	; 0x1028 <vfprintf+0xa4>
    1016:	11 60       	ori	r17, 0x01	; 1
    1018:	28 c0       	rjmp	.+80     	; 0x106a <vfprintf+0xe6>
    101a:	12 60       	ori	r17, 0x02	; 2
    101c:	14 60       	ori	r17, 0x04	; 4
    101e:	25 c0       	rjmp	.+74     	; 0x106a <vfprintf+0xe6>
    1020:	18 60       	ori	r17, 0x08	; 8
    1022:	23 c0       	rjmp	.+70     	; 0x106a <vfprintf+0xe6>
    1024:	10 61       	ori	r17, 0x10	; 16
    1026:	21 c0       	rjmp	.+66     	; 0x106a <vfprintf+0xe6>
    1028:	17 fd       	sbrc	r17, 7
    102a:	2a c0       	rjmp	.+84     	; 0x1080 <vfprintf+0xfc>
    102c:	89 2f       	mov	r24, r25
    102e:	80 53       	subi	r24, 0x30	; 48
    1030:	8a 30       	cpi	r24, 0x0A	; 10
    1032:	78 f4       	brcc	.+30     	; 0x1052 <vfprintf+0xce>
    1034:	16 ff       	sbrs	r17, 6
    1036:	06 c0       	rjmp	.+12     	; 0x1044 <vfprintf+0xc0>
    1038:	fa e0       	ldi	r31, 0x0A	; 10
    103a:	9f 9e       	mul	r9, r31
    103c:	90 2c       	mov	r9, r0
    103e:	11 24       	eor	r1, r1
    1040:	98 0e       	add	r9, r24
    1042:	13 c0       	rjmp	.+38     	; 0x106a <vfprintf+0xe6>
    1044:	3a e0       	ldi	r19, 0x0A	; 10
    1046:	83 9e       	mul	r8, r19
    1048:	80 2c       	mov	r8, r0
    104a:	11 24       	eor	r1, r1
    104c:	88 0e       	add	r8, r24
    104e:	10 62       	ori	r17, 0x20	; 32
    1050:	0c c0       	rjmp	.+24     	; 0x106a <vfprintf+0xe6>
    1052:	9e 32       	cpi	r25, 0x2E	; 46
    1054:	21 f4       	brne	.+8      	; 0x105e <vfprintf+0xda>
    1056:	16 fd       	sbrc	r17, 6
    1058:	14 c3       	rjmp	.+1576   	; 0x1682 <vfprintf+0x6fe>
    105a:	10 64       	ori	r17, 0x40	; 64
    105c:	06 c0       	rjmp	.+12     	; 0x106a <vfprintf+0xe6>
    105e:	9c 36       	cpi	r25, 0x6C	; 108
    1060:	11 f4       	brne	.+4      	; 0x1066 <vfprintf+0xe2>
    1062:	10 68       	ori	r17, 0x80	; 128
    1064:	02 c0       	rjmp	.+4      	; 0x106a <vfprintf+0xe6>
    1066:	98 36       	cpi	r25, 0x68	; 104
    1068:	59 f4       	brne	.+22     	; 0x1080 <vfprintf+0xfc>
    106a:	ee 85       	ldd	r30, Y+14	; 0x0e
    106c:	ff 85       	ldd	r31, Y+15	; 0x0f
    106e:	23 fd       	sbrc	r18, 3
    1070:	95 91       	lpm	r25, Z+
    1072:	23 ff       	sbrs	r18, 3
    1074:	91 91       	ld	r25, Z+
    1076:	ff 87       	std	Y+15, r31	; 0x0f
    1078:	ee 87       	std	Y+14, r30	; 0x0e
    107a:	99 23       	and	r25, r25
    107c:	09 f0       	breq	.+2      	; 0x1080 <vfprintf+0xfc>
    107e:	bc cf       	rjmp	.-136    	; 0xff8 <vfprintf+0x74>
    1080:	89 2f       	mov	r24, r25
    1082:	85 54       	subi	r24, 0x45	; 69
    1084:	83 30       	cpi	r24, 0x03	; 3
    1086:	20 f4       	brcc	.+8      	; 0x1090 <vfprintf+0x10c>
    1088:	81 2f       	mov	r24, r17
    108a:	80 61       	ori	r24, 0x10	; 16
    108c:	90 5e       	subi	r25, 0xE0	; 224
    108e:	07 c0       	rjmp	.+14     	; 0x109e <vfprintf+0x11a>
    1090:	89 2f       	mov	r24, r25
    1092:	85 56       	subi	r24, 0x65	; 101
    1094:	83 30       	cpi	r24, 0x03	; 3
    1096:	08 f0       	brcs	.+2      	; 0x109a <vfprintf+0x116>
    1098:	9f c1       	rjmp	.+830    	; 0x13d8 <vfprintf+0x454>
    109a:	81 2f       	mov	r24, r17
    109c:	8f 7e       	andi	r24, 0xEF	; 239
    109e:	86 fd       	sbrc	r24, 6
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <vfprintf+0x122>
    10a2:	76 e0       	ldi	r23, 0x06	; 6
    10a4:	97 2e       	mov	r9, r23
    10a6:	6f e3       	ldi	r22, 0x3F	; 63
    10a8:	f6 2e       	mov	r15, r22
    10aa:	f8 22       	and	r15, r24
    10ac:	95 36       	cpi	r25, 0x65	; 101
    10ae:	19 f4       	brne	.+6      	; 0x10b6 <vfprintf+0x132>
    10b0:	f0 e4       	ldi	r31, 0x40	; 64
    10b2:	ff 2a       	or	r15, r31
    10b4:	07 c0       	rjmp	.+14     	; 0x10c4 <vfprintf+0x140>
    10b6:	96 36       	cpi	r25, 0x66	; 102
    10b8:	19 f4       	brne	.+6      	; 0x10c0 <vfprintf+0x13c>
    10ba:	20 e8       	ldi	r18, 0x80	; 128
    10bc:	f2 2a       	or	r15, r18
    10be:	02 c0       	rjmp	.+4      	; 0x10c4 <vfprintf+0x140>
    10c0:	91 10       	cpse	r9, r1
    10c2:	9a 94       	dec	r9
    10c4:	f7 fe       	sbrs	r15, 7
    10c6:	0a c0       	rjmp	.+20     	; 0x10dc <vfprintf+0x158>
    10c8:	3b e3       	ldi	r19, 0x3B	; 59
    10ca:	39 15       	cp	r19, r9
    10cc:	18 f4       	brcc	.+6      	; 0x10d4 <vfprintf+0x150>
    10ce:	5c e3       	ldi	r21, 0x3C	; 60
    10d0:	b5 2e       	mov	r11, r21
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <vfprintf+0x154>
    10d4:	b9 2c       	mov	r11, r9
    10d6:	b3 94       	inc	r11
    10d8:	27 e0       	ldi	r18, 0x07	; 7
    10da:	09 c0       	rjmp	.+18     	; 0x10ee <vfprintf+0x16a>
    10dc:	47 e0       	ldi	r20, 0x07	; 7
    10de:	49 15       	cp	r20, r9
    10e0:	20 f4       	brcc	.+8      	; 0x10ea <vfprintf+0x166>
    10e2:	bb 24       	eor	r11, r11
    10e4:	47 e0       	ldi	r20, 0x07	; 7
    10e6:	94 2e       	mov	r9, r20
    10e8:	f7 cf       	rjmp	.-18     	; 0x10d8 <vfprintf+0x154>
    10ea:	29 2d       	mov	r18, r9
    10ec:	bb 24       	eor	r11, r11
    10ee:	c6 01       	movw	r24, r12
    10f0:	04 96       	adiw	r24, 0x04	; 4
    10f2:	9d 87       	std	Y+13, r25	; 0x0d
    10f4:	8c 87       	std	Y+12, r24	; 0x0c
    10f6:	f6 01       	movw	r30, r12
    10f8:	60 81       	ld	r22, Z
    10fa:	71 81       	ldd	r23, Z+1	; 0x01
    10fc:	82 81       	ldd	r24, Z+2	; 0x02
    10fe:	93 81       	ldd	r25, Z+3	; 0x03
    1100:	ae 01       	movw	r20, r28
    1102:	4f 5f       	subi	r20, 0xFF	; 255
    1104:	5f 4f       	sbci	r21, 0xFF	; 255
    1106:	0b 2d       	mov	r16, r11
    1108:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <__ftoa_engine>
    110c:	6c 01       	movw	r12, r24
    110e:	09 81       	ldd	r16, Y+1	; 0x01
    1110:	20 2e       	mov	r2, r16
    1112:	33 24       	eor	r3, r3
    1114:	00 ff       	sbrs	r16, 0
    1116:	04 c0       	rjmp	.+8      	; 0x1120 <vfprintf+0x19c>
    1118:	03 fd       	sbrc	r16, 3
    111a:	02 c0       	rjmp	.+4      	; 0x1120 <vfprintf+0x19c>
    111c:	1d e2       	ldi	r17, 0x2D	; 45
    111e:	09 c0       	rjmp	.+18     	; 0x1132 <vfprintf+0x1ae>
    1120:	f1 fe       	sbrs	r15, 1
    1122:	02 c0       	rjmp	.+4      	; 0x1128 <vfprintf+0x1a4>
    1124:	1b e2       	ldi	r17, 0x2B	; 43
    1126:	05 c0       	rjmp	.+10     	; 0x1132 <vfprintf+0x1ae>
    1128:	f2 fc       	sbrc	r15, 2
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <vfprintf+0x1ac>
    112c:	10 e0       	ldi	r17, 0x00	; 0
    112e:	01 c0       	rjmp	.+2      	; 0x1132 <vfprintf+0x1ae>
    1130:	10 e2       	ldi	r17, 0x20	; 32
    1132:	c1 01       	movw	r24, r2
    1134:	8c 70       	andi	r24, 0x0C	; 12
    1136:	90 70       	andi	r25, 0x00	; 0
    1138:	89 2b       	or	r24, r25
    113a:	b9 f1       	breq	.+110    	; 0x11aa <vfprintf+0x226>
    113c:	11 23       	and	r17, r17
    113e:	11 f4       	brne	.+4      	; 0x1144 <vfprintf+0x1c0>
    1140:	83 e0       	ldi	r24, 0x03	; 3
    1142:	01 c0       	rjmp	.+2      	; 0x1146 <vfprintf+0x1c2>
    1144:	84 e0       	ldi	r24, 0x04	; 4
    1146:	88 15       	cp	r24, r8
    1148:	10 f0       	brcs	.+4      	; 0x114e <vfprintf+0x1ca>
    114a:	88 24       	eor	r8, r8
    114c:	0a c0       	rjmp	.+20     	; 0x1162 <vfprintf+0x1de>
    114e:	88 1a       	sub	r8, r24
    1150:	f3 fc       	sbrc	r15, 3
    1152:	07 c0       	rjmp	.+14     	; 0x1162 <vfprintf+0x1de>
    1154:	80 e2       	ldi	r24, 0x20	; 32
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	b3 01       	movw	r22, r6
    115a:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <fputc>
    115e:	8a 94       	dec	r8
    1160:	c9 f7       	brne	.-14     	; 0x1154 <vfprintf+0x1d0>
    1162:	11 23       	and	r17, r17
    1164:	29 f0       	breq	.+10     	; 0x1170 <vfprintf+0x1ec>
    1166:	81 2f       	mov	r24, r17
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	b3 01       	movw	r22, r6
    116c:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <fputc>
    1170:	23 fe       	sbrs	r2, 3
    1172:	03 c0       	rjmp	.+6      	; 0x117a <vfprintf+0x1f6>
    1174:	04 e5       	ldi	r16, 0x54	; 84
    1176:	10 e0       	ldi	r17, 0x00	; 0
    1178:	0e c0       	rjmp	.+28     	; 0x1196 <vfprintf+0x212>
    117a:	08 e5       	ldi	r16, 0x58	; 88
    117c:	10 e0       	ldi	r17, 0x00	; 0
    117e:	0b c0       	rjmp	.+22     	; 0x1196 <vfprintf+0x212>
    1180:	e1 14       	cp	r14, r1
    1182:	f1 04       	cpc	r15, r1
    1184:	09 f0       	breq	.+2      	; 0x1188 <vfprintf+0x204>
    1186:	80 52       	subi	r24, 0x20	; 32
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	b3 01       	movw	r22, r6
    118c:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <fputc>
    1190:	0f 5f       	subi	r16, 0xFF	; 255
    1192:	1f 4f       	sbci	r17, 0xFF	; 255
    1194:	05 c0       	rjmp	.+10     	; 0x11a0 <vfprintf+0x21c>
    1196:	ef 2c       	mov	r14, r15
    1198:	ff 24       	eor	r15, r15
    119a:	f0 e1       	ldi	r31, 0x10	; 16
    119c:	ef 22       	and	r14, r31
    119e:	ff 24       	eor	r15, r15
    11a0:	f8 01       	movw	r30, r16
    11a2:	84 91       	lpm	r24, Z+
    11a4:	88 23       	and	r24, r24
    11a6:	61 f7       	brne	.-40     	; 0x1180 <vfprintf+0x1fc>
    11a8:	14 c1       	rjmp	.+552    	; 0x13d2 <vfprintf+0x44e>
    11aa:	f7 fe       	sbrs	r15, 7
    11ac:	12 c0       	rjmp	.+36     	; 0x11d2 <vfprintf+0x24e>
    11ae:	bc 0c       	add	r11, r12
    11b0:	24 fe       	sbrs	r2, 4
    11b2:	04 c0       	rjmp	.+8      	; 0x11bc <vfprintf+0x238>
    11b4:	8a 81       	ldd	r24, Y+2	; 0x02
    11b6:	81 33       	cpi	r24, 0x31	; 49
    11b8:	09 f4       	brne	.+2      	; 0x11bc <vfprintf+0x238>
    11ba:	ba 94       	dec	r11
    11bc:	1b 14       	cp	r1, r11
    11be:	1c f0       	brlt	.+6      	; 0x11c6 <vfprintf+0x242>
    11c0:	bb 24       	eor	r11, r11
    11c2:	b3 94       	inc	r11
    11c4:	2d c0       	rjmp	.+90     	; 0x1220 <vfprintf+0x29c>
    11c6:	f8 e0       	ldi	r31, 0x08	; 8
    11c8:	fb 15       	cp	r31, r11
    11ca:	50 f5       	brcc	.+84     	; 0x1220 <vfprintf+0x29c>
    11cc:	38 e0       	ldi	r19, 0x08	; 8
    11ce:	b3 2e       	mov	r11, r19
    11d0:	27 c0       	rjmp	.+78     	; 0x1220 <vfprintf+0x29c>
    11d2:	f6 fc       	sbrc	r15, 6
    11d4:	25 c0       	rjmp	.+74     	; 0x1220 <vfprintf+0x29c>
    11d6:	89 2d       	mov	r24, r9
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	8c 15       	cp	r24, r12
    11dc:	9d 05       	cpc	r25, r13
    11de:	4c f0       	brlt	.+18     	; 0x11f2 <vfprintf+0x26e>
    11e0:	2c ef       	ldi	r18, 0xFC	; 252
    11e2:	c2 16       	cp	r12, r18
    11e4:	2f ef       	ldi	r18, 0xFF	; 255
    11e6:	d2 06       	cpc	r13, r18
    11e8:	24 f0       	brlt	.+8      	; 0x11f2 <vfprintf+0x26e>
    11ea:	30 e8       	ldi	r19, 0x80	; 128
    11ec:	f3 2a       	or	r15, r19
    11ee:	01 c0       	rjmp	.+2      	; 0x11f2 <vfprintf+0x26e>
    11f0:	9a 94       	dec	r9
    11f2:	99 20       	and	r9, r9
    11f4:	49 f0       	breq	.+18     	; 0x1208 <vfprintf+0x284>
    11f6:	e2 e0       	ldi	r30, 0x02	; 2
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	ec 0f       	add	r30, r28
    11fc:	fd 1f       	adc	r31, r29
    11fe:	e9 0d       	add	r30, r9
    1200:	f1 1d       	adc	r31, r1
    1202:	80 81       	ld	r24, Z
    1204:	80 33       	cpi	r24, 0x30	; 48
    1206:	a1 f3       	breq	.-24     	; 0x11f0 <vfprintf+0x26c>
    1208:	f7 fe       	sbrs	r15, 7
    120a:	0a c0       	rjmp	.+20     	; 0x1220 <vfprintf+0x29c>
    120c:	b9 2c       	mov	r11, r9
    120e:	b3 94       	inc	r11
    1210:	89 2d       	mov	r24, r9
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	c8 16       	cp	r12, r24
    1216:	d9 06       	cpc	r13, r25
    1218:	14 f0       	brlt	.+4      	; 0x121e <vfprintf+0x29a>
    121a:	99 24       	eor	r9, r9
    121c:	01 c0       	rjmp	.+2      	; 0x1220 <vfprintf+0x29c>
    121e:	9c 18       	sub	r9, r12
    1220:	f7 fc       	sbrc	r15, 7
    1222:	03 c0       	rjmp	.+6      	; 0x122a <vfprintf+0x2a6>
    1224:	25 e0       	ldi	r18, 0x05	; 5
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	09 c0       	rjmp	.+18     	; 0x123c <vfprintf+0x2b8>
    122a:	1c 14       	cp	r1, r12
    122c:	1d 04       	cpc	r1, r13
    122e:	1c f0       	brlt	.+6      	; 0x1236 <vfprintf+0x2b2>
    1230:	21 e0       	ldi	r18, 0x01	; 1
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	03 c0       	rjmp	.+6      	; 0x123c <vfprintf+0x2b8>
    1236:	96 01       	movw	r18, r12
    1238:	2f 5f       	subi	r18, 0xFF	; 255
    123a:	3f 4f       	sbci	r19, 0xFF	; 255
    123c:	11 23       	and	r17, r17
    123e:	11 f0       	breq	.+4      	; 0x1244 <vfprintf+0x2c0>
    1240:	2f 5f       	subi	r18, 0xFF	; 255
    1242:	3f 4f       	sbci	r19, 0xFF	; 255
    1244:	99 20       	and	r9, r9
    1246:	29 f0       	breq	.+10     	; 0x1252 <vfprintf+0x2ce>
    1248:	89 2d       	mov	r24, r9
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	01 96       	adiw	r24, 0x01	; 1
    124e:	28 0f       	add	r18, r24
    1250:	39 1f       	adc	r19, r25
    1252:	88 2d       	mov	r24, r8
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	28 17       	cp	r18, r24
    1258:	39 07       	cpc	r19, r25
    125a:	14 f0       	brlt	.+4      	; 0x1260 <vfprintf+0x2dc>
    125c:	88 24       	eor	r8, r8
    125e:	01 c0       	rjmp	.+2      	; 0x1262 <vfprintf+0x2de>
    1260:	82 1a       	sub	r8, r18
    1262:	4f 2c       	mov	r4, r15
    1264:	55 24       	eor	r5, r5
    1266:	c2 01       	movw	r24, r4
    1268:	89 70       	andi	r24, 0x09	; 9
    126a:	90 70       	andi	r25, 0x00	; 0
    126c:	89 2b       	or	r24, r25
    126e:	39 f0       	breq	.+14     	; 0x127e <vfprintf+0x2fa>
    1270:	08 c0       	rjmp	.+16     	; 0x1282 <vfprintf+0x2fe>
    1272:	80 e2       	ldi	r24, 0x20	; 32
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	b3 01       	movw	r22, r6
    1278:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <fputc>
    127c:	8a 94       	dec	r8
    127e:	88 20       	and	r8, r8
    1280:	c1 f7       	brne	.-16     	; 0x1272 <vfprintf+0x2ee>
    1282:	11 23       	and	r17, r17
    1284:	29 f0       	breq	.+10     	; 0x1290 <vfprintf+0x30c>
    1286:	81 2f       	mov	r24, r17
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	b3 01       	movw	r22, r6
    128c:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <fputc>
    1290:	43 fe       	sbrs	r4, 3
    1292:	07 c0       	rjmp	.+14     	; 0x12a2 <vfprintf+0x31e>
    1294:	08 c0       	rjmp	.+16     	; 0x12a6 <vfprintf+0x322>
    1296:	80 e3       	ldi	r24, 0x30	; 48
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	b3 01       	movw	r22, r6
    129c:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <fputc>
    12a0:	8a 94       	dec	r8
    12a2:	88 20       	and	r8, r8
    12a4:	c1 f7       	brne	.-16     	; 0x1296 <vfprintf+0x312>
    12a6:	f7 fe       	sbrs	r15, 7
    12a8:	46 c0       	rjmp	.+140    	; 0x1336 <vfprintf+0x3b2>
    12aa:	86 01       	movw	r16, r12
    12ac:	d7 fe       	sbrs	r13, 7
    12ae:	02 c0       	rjmp	.+4      	; 0x12b4 <vfprintf+0x330>
    12b0:	00 e0       	ldi	r16, 0x00	; 0
    12b2:	10 e0       	ldi	r17, 0x00	; 0
    12b4:	76 01       	movw	r14, r12
    12b6:	08 94       	sec
    12b8:	e1 1c       	adc	r14, r1
    12ba:	f1 1c       	adc	r15, r1
    12bc:	e0 1a       	sub	r14, r16
    12be:	f1 0a       	sbc	r15, r17
    12c0:	41 e0       	ldi	r20, 0x01	; 1
    12c2:	50 e0       	ldi	r21, 0x00	; 0
    12c4:	4c 0f       	add	r20, r28
    12c6:	5d 1f       	adc	r21, r29
    12c8:	e4 0e       	add	r14, r20
    12ca:	f5 1e       	adc	r15, r21
    12cc:	26 01       	movw	r4, r12
    12ce:	4b 18       	sub	r4, r11
    12d0:	51 08       	sbc	r5, r1
    12d2:	89 2d       	mov	r24, r9
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	aa 24       	eor	r10, r10
    12d8:	bb 24       	eor	r11, r11
    12da:	a8 1a       	sub	r10, r24
    12dc:	b9 0a       	sbc	r11, r25
    12de:	5f ef       	ldi	r21, 0xFF	; 255
    12e0:	0f 3f       	cpi	r16, 0xFF	; 255
    12e2:	15 07       	cpc	r17, r21
    12e4:	29 f4       	brne	.+10     	; 0x12f0 <vfprintf+0x36c>
    12e6:	8e e2       	ldi	r24, 0x2E	; 46
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	b3 01       	movw	r22, r6
    12ec:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <fputc>
    12f0:	c0 16       	cp	r12, r16
    12f2:	d1 06       	cpc	r13, r17
    12f4:	34 f0       	brlt	.+12     	; 0x1302 <vfprintf+0x37e>
    12f6:	40 16       	cp	r4, r16
    12f8:	51 06       	cpc	r5, r17
    12fa:	1c f4       	brge	.+6      	; 0x1302 <vfprintf+0x37e>
    12fc:	f7 01       	movw	r30, r14
    12fe:	80 81       	ld	r24, Z
    1300:	01 c0       	rjmp	.+2      	; 0x1304 <vfprintf+0x380>
    1302:	80 e3       	ldi	r24, 0x30	; 48
    1304:	01 50       	subi	r16, 0x01	; 1
    1306:	10 40       	sbci	r17, 0x00	; 0
    1308:	08 94       	sec
    130a:	e1 1c       	adc	r14, r1
    130c:	f1 1c       	adc	r15, r1
    130e:	0a 15       	cp	r16, r10
    1310:	1b 05       	cpc	r17, r11
    1312:	2c f0       	brlt	.+10     	; 0x131e <vfprintf+0x39a>
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	b3 01       	movw	r22, r6
    1318:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <fputc>
    131c:	e0 cf       	rjmp	.-64     	; 0x12de <vfprintf+0x35a>
    131e:	0c 15       	cp	r16, r12
    1320:	1d 05       	cpc	r17, r13
    1322:	39 f4       	brne	.+14     	; 0x1332 <vfprintf+0x3ae>
    1324:	9a 81       	ldd	r25, Y+2	; 0x02
    1326:	96 33       	cpi	r25, 0x36	; 54
    1328:	18 f4       	brcc	.+6      	; 0x1330 <vfprintf+0x3ac>
    132a:	95 33       	cpi	r25, 0x35	; 53
    132c:	11 f4       	brne	.+4      	; 0x1332 <vfprintf+0x3ae>
    132e:	24 fe       	sbrs	r2, 4
    1330:	81 e3       	ldi	r24, 0x31	; 49
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	4b c0       	rjmp	.+150    	; 0x13cc <vfprintf+0x448>
    1336:	8a 81       	ldd	r24, Y+2	; 0x02
    1338:	81 33       	cpi	r24, 0x31	; 49
    133a:	09 f0       	breq	.+2      	; 0x133e <vfprintf+0x3ba>
    133c:	0f 7e       	andi	r16, 0xEF	; 239
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	b3 01       	movw	r22, r6
    1342:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <fputc>
    1346:	99 20       	and	r9, r9
    1348:	a1 f0       	breq	.+40     	; 0x1372 <vfprintf+0x3ee>
    134a:	8e e2       	ldi	r24, 0x2E	; 46
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	b3 01       	movw	r22, r6
    1350:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <fputc>
    1354:	12 e0       	ldi	r17, 0x02	; 2
    1356:	e1 e0       	ldi	r30, 0x01	; 1
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	ec 0f       	add	r30, r28
    135c:	fd 1f       	adc	r31, r29
    135e:	e1 0f       	add	r30, r17
    1360:	f1 1d       	adc	r31, r1
    1362:	1f 5f       	subi	r17, 0xFF	; 255
    1364:	80 81       	ld	r24, Z
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	b3 01       	movw	r22, r6
    136a:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <fputc>
    136e:	9a 94       	dec	r9
    1370:	91 f7       	brne	.-28     	; 0x1356 <vfprintf+0x3d2>
    1372:	44 fc       	sbrc	r4, 4
    1374:	03 c0       	rjmp	.+6      	; 0x137c <vfprintf+0x3f8>
    1376:	85 e6       	ldi	r24, 0x65	; 101
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <vfprintf+0x3fc>
    137c:	85 e4       	ldi	r24, 0x45	; 69
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	b3 01       	movw	r22, r6
    1382:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <fputc>
    1386:	d7 fc       	sbrc	r13, 7
    1388:	05 c0       	rjmp	.+10     	; 0x1394 <vfprintf+0x410>
    138a:	c1 14       	cp	r12, r1
    138c:	d1 04       	cpc	r13, r1
    138e:	41 f4       	brne	.+16     	; 0x13a0 <vfprintf+0x41c>
    1390:	04 ff       	sbrs	r16, 4
    1392:	06 c0       	rjmp	.+12     	; 0x13a0 <vfprintf+0x41c>
    1394:	d0 94       	com	r13
    1396:	c1 94       	neg	r12
    1398:	d1 08       	sbc	r13, r1
    139a:	d3 94       	inc	r13
    139c:	8d e2       	ldi	r24, 0x2D	; 45
    139e:	01 c0       	rjmp	.+2      	; 0x13a2 <vfprintf+0x41e>
    13a0:	8b e2       	ldi	r24, 0x2B	; 43
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	b3 01       	movw	r22, r6
    13a6:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <fputc>
    13aa:	80 e3       	ldi	r24, 0x30	; 48
    13ac:	05 c0       	rjmp	.+10     	; 0x13b8 <vfprintf+0x434>
    13ae:	8f 5f       	subi	r24, 0xFF	; 255
    13b0:	26 ef       	ldi	r18, 0xF6	; 246
    13b2:	3f ef       	ldi	r19, 0xFF	; 255
    13b4:	c2 0e       	add	r12, r18
    13b6:	d3 1e       	adc	r13, r19
    13b8:	3a e0       	ldi	r19, 0x0A	; 10
    13ba:	c3 16       	cp	r12, r19
    13bc:	d1 04       	cpc	r13, r1
    13be:	bc f7       	brge	.-18     	; 0x13ae <vfprintf+0x42a>
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	b3 01       	movw	r22, r6
    13c4:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <fputc>
    13c8:	c6 01       	movw	r24, r12
    13ca:	c0 96       	adiw	r24, 0x30	; 48
    13cc:	b3 01       	movw	r22, r6
    13ce:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <fputc>
    13d2:	cc 84       	ldd	r12, Y+12	; 0x0c
    13d4:	dd 84       	ldd	r13, Y+13	; 0x0d
    13d6:	52 c1       	rjmp	.+676    	; 0x167c <vfprintf+0x6f8>
    13d8:	93 36       	cpi	r25, 0x63	; 99
    13da:	31 f0       	breq	.+12     	; 0x13e8 <vfprintf+0x464>
    13dc:	93 37       	cpi	r25, 0x73	; 115
    13de:	99 f0       	breq	.+38     	; 0x1406 <vfprintf+0x482>
    13e0:	93 35       	cpi	r25, 0x53	; 83
    13e2:	09 f0       	breq	.+2      	; 0x13e6 <vfprintf+0x462>
    13e4:	59 c0       	rjmp	.+178    	; 0x1498 <vfprintf+0x514>
    13e6:	23 c0       	rjmp	.+70     	; 0x142e <vfprintf+0x4aa>
    13e8:	f6 01       	movw	r30, r12
    13ea:	80 81       	ld	r24, Z
    13ec:	89 83       	std	Y+1, r24	; 0x01
    13ee:	5e 01       	movw	r10, r28
    13f0:	08 94       	sec
    13f2:	a1 1c       	adc	r10, r1
    13f4:	b1 1c       	adc	r11, r1
    13f6:	22 e0       	ldi	r18, 0x02	; 2
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	c2 0e       	add	r12, r18
    13fc:	d3 1e       	adc	r13, r19
    13fe:	21 e0       	ldi	r18, 0x01	; 1
    1400:	e2 2e       	mov	r14, r18
    1402:	f1 2c       	mov	r15, r1
    1404:	12 c0       	rjmp	.+36     	; 0x142a <vfprintf+0x4a6>
    1406:	f6 01       	movw	r30, r12
    1408:	a0 80       	ld	r10, Z
    140a:	b1 80       	ldd	r11, Z+1	; 0x01
    140c:	16 fd       	sbrc	r17, 6
    140e:	03 c0       	rjmp	.+6      	; 0x1416 <vfprintf+0x492>
    1410:	6f ef       	ldi	r22, 0xFF	; 255
    1412:	7f ef       	ldi	r23, 0xFF	; 255
    1414:	02 c0       	rjmp	.+4      	; 0x141a <vfprintf+0x496>
    1416:	69 2d       	mov	r22, r9
    1418:	70 e0       	ldi	r23, 0x00	; 0
    141a:	22 e0       	ldi	r18, 0x02	; 2
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	c2 0e       	add	r12, r18
    1420:	d3 1e       	adc	r13, r19
    1422:	c5 01       	movw	r24, r10
    1424:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <strnlen>
    1428:	7c 01       	movw	r14, r24
    142a:	1f 77       	andi	r17, 0x7F	; 127
    142c:	13 c0       	rjmp	.+38     	; 0x1454 <vfprintf+0x4d0>
    142e:	f6 01       	movw	r30, r12
    1430:	a0 80       	ld	r10, Z
    1432:	b1 80       	ldd	r11, Z+1	; 0x01
    1434:	16 fd       	sbrc	r17, 6
    1436:	03 c0       	rjmp	.+6      	; 0x143e <vfprintf+0x4ba>
    1438:	6f ef       	ldi	r22, 0xFF	; 255
    143a:	7f ef       	ldi	r23, 0xFF	; 255
    143c:	02 c0       	rjmp	.+4      	; 0x1442 <vfprintf+0x4be>
    143e:	69 2d       	mov	r22, r9
    1440:	70 e0       	ldi	r23, 0x00	; 0
    1442:	22 e0       	ldi	r18, 0x02	; 2
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	c2 0e       	add	r12, r18
    1448:	d3 1e       	adc	r13, r19
    144a:	c5 01       	movw	r24, r10
    144c:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <strnlen_P>
    1450:	7c 01       	movw	r14, r24
    1452:	10 68       	ori	r17, 0x80	; 128
    1454:	13 ff       	sbrs	r17, 3
    1456:	07 c0       	rjmp	.+14     	; 0x1466 <vfprintf+0x4e2>
    1458:	1b c0       	rjmp	.+54     	; 0x1490 <vfprintf+0x50c>
    145a:	80 e2       	ldi	r24, 0x20	; 32
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	b3 01       	movw	r22, r6
    1460:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <fputc>
    1464:	8a 94       	dec	r8
    1466:	88 2d       	mov	r24, r8
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	e8 16       	cp	r14, r24
    146c:	f9 06       	cpc	r15, r25
    146e:	a8 f3       	brcs	.-22     	; 0x145a <vfprintf+0x4d6>
    1470:	0f c0       	rjmp	.+30     	; 0x1490 <vfprintf+0x50c>
    1472:	f5 01       	movw	r30, r10
    1474:	17 fd       	sbrc	r17, 7
    1476:	85 91       	lpm	r24, Z+
    1478:	17 ff       	sbrs	r17, 7
    147a:	81 91       	ld	r24, Z+
    147c:	5f 01       	movw	r10, r30
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	b3 01       	movw	r22, r6
    1482:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <fputc>
    1486:	81 10       	cpse	r8, r1
    1488:	8a 94       	dec	r8
    148a:	08 94       	sec
    148c:	e1 08       	sbc	r14, r1
    148e:	f1 08       	sbc	r15, r1
    1490:	e1 14       	cp	r14, r1
    1492:	f1 04       	cpc	r15, r1
    1494:	71 f7       	brne	.-36     	; 0x1472 <vfprintf+0x4ee>
    1496:	f2 c0       	rjmp	.+484    	; 0x167c <vfprintf+0x6f8>
    1498:	94 36       	cpi	r25, 0x64	; 100
    149a:	11 f0       	breq	.+4      	; 0x14a0 <vfprintf+0x51c>
    149c:	99 36       	cpi	r25, 0x69	; 105
    149e:	89 f5       	brne	.+98     	; 0x1502 <vfprintf+0x57e>
    14a0:	17 ff       	sbrs	r17, 7
    14a2:	08 c0       	rjmp	.+16     	; 0x14b4 <vfprintf+0x530>
    14a4:	f6 01       	movw	r30, r12
    14a6:	20 81       	ld	r18, Z
    14a8:	31 81       	ldd	r19, Z+1	; 0x01
    14aa:	42 81       	ldd	r20, Z+2	; 0x02
    14ac:	53 81       	ldd	r21, Z+3	; 0x03
    14ae:	84 e0       	ldi	r24, 0x04	; 4
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	0a c0       	rjmp	.+20     	; 0x14c8 <vfprintf+0x544>
    14b4:	f6 01       	movw	r30, r12
    14b6:	80 81       	ld	r24, Z
    14b8:	91 81       	ldd	r25, Z+1	; 0x01
    14ba:	9c 01       	movw	r18, r24
    14bc:	44 27       	eor	r20, r20
    14be:	37 fd       	sbrc	r19, 7
    14c0:	40 95       	com	r20
    14c2:	54 2f       	mov	r21, r20
    14c4:	82 e0       	ldi	r24, 0x02	; 2
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	c8 0e       	add	r12, r24
    14ca:	d9 1e       	adc	r13, r25
    14cc:	9f e6       	ldi	r25, 0x6F	; 111
    14ce:	f9 2e       	mov	r15, r25
    14d0:	f1 22       	and	r15, r17
    14d2:	57 ff       	sbrs	r21, 7
    14d4:	09 c0       	rjmp	.+18     	; 0x14e8 <vfprintf+0x564>
    14d6:	50 95       	com	r21
    14d8:	40 95       	com	r20
    14da:	30 95       	com	r19
    14dc:	21 95       	neg	r18
    14de:	3f 4f       	sbci	r19, 0xFF	; 255
    14e0:	4f 4f       	sbci	r20, 0xFF	; 255
    14e2:	5f 4f       	sbci	r21, 0xFF	; 255
    14e4:	90 e8       	ldi	r25, 0x80	; 128
    14e6:	f9 2a       	or	r15, r25
    14e8:	ca 01       	movw	r24, r20
    14ea:	b9 01       	movw	r22, r18
    14ec:	ae 01       	movw	r20, r28
    14ee:	4f 5f       	subi	r20, 0xFF	; 255
    14f0:	5f 4f       	sbci	r21, 0xFF	; 255
    14f2:	2a e0       	ldi	r18, 0x0A	; 10
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <__ultoa_invert>
    14fa:	e8 2e       	mov	r14, r24
    14fc:	e8 89       	ldd	r30, Y+16	; 0x10
    14fe:	ee 1a       	sub	r14, r30
    1500:	41 c0       	rjmp	.+130    	; 0x1584 <vfprintf+0x600>
    1502:	95 37       	cpi	r25, 0x75	; 117
    1504:	21 f4       	brne	.+8      	; 0x150e <vfprintf+0x58a>
    1506:	1f 7e       	andi	r17, 0xEF	; 239
    1508:	2a e0       	ldi	r18, 0x0A	; 10
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	1c c0       	rjmp	.+56     	; 0x1546 <vfprintf+0x5c2>
    150e:	19 7f       	andi	r17, 0xF9	; 249
    1510:	9f 36       	cpi	r25, 0x6F	; 111
    1512:	61 f0       	breq	.+24     	; 0x152c <vfprintf+0x5a8>
    1514:	90 37       	cpi	r25, 0x70	; 112
    1516:	20 f4       	brcc	.+8      	; 0x1520 <vfprintf+0x59c>
    1518:	98 35       	cpi	r25, 0x58	; 88
    151a:	09 f0       	breq	.+2      	; 0x151e <vfprintf+0x59a>
    151c:	b2 c0       	rjmp	.+356    	; 0x1682 <vfprintf+0x6fe>
    151e:	0f c0       	rjmp	.+30     	; 0x153e <vfprintf+0x5ba>
    1520:	90 37       	cpi	r25, 0x70	; 112
    1522:	39 f0       	breq	.+14     	; 0x1532 <vfprintf+0x5ae>
    1524:	98 37       	cpi	r25, 0x78	; 120
    1526:	09 f0       	breq	.+2      	; 0x152a <vfprintf+0x5a6>
    1528:	ac c0       	rjmp	.+344    	; 0x1682 <vfprintf+0x6fe>
    152a:	04 c0       	rjmp	.+8      	; 0x1534 <vfprintf+0x5b0>
    152c:	28 e0       	ldi	r18, 0x08	; 8
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	0a c0       	rjmp	.+20     	; 0x1546 <vfprintf+0x5c2>
    1532:	10 61       	ori	r17, 0x10	; 16
    1534:	14 fd       	sbrc	r17, 4
    1536:	14 60       	ori	r17, 0x04	; 4
    1538:	20 e1       	ldi	r18, 0x10	; 16
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	04 c0       	rjmp	.+8      	; 0x1546 <vfprintf+0x5c2>
    153e:	14 fd       	sbrc	r17, 4
    1540:	16 60       	ori	r17, 0x06	; 6
    1542:	20 e1       	ldi	r18, 0x10	; 16
    1544:	32 e0       	ldi	r19, 0x02	; 2
    1546:	17 ff       	sbrs	r17, 7
    1548:	08 c0       	rjmp	.+16     	; 0x155a <vfprintf+0x5d6>
    154a:	f6 01       	movw	r30, r12
    154c:	60 81       	ld	r22, Z
    154e:	71 81       	ldd	r23, Z+1	; 0x01
    1550:	82 81       	ldd	r24, Z+2	; 0x02
    1552:	93 81       	ldd	r25, Z+3	; 0x03
    1554:	44 e0       	ldi	r20, 0x04	; 4
    1556:	50 e0       	ldi	r21, 0x00	; 0
    1558:	08 c0       	rjmp	.+16     	; 0x156a <vfprintf+0x5e6>
    155a:	f6 01       	movw	r30, r12
    155c:	80 81       	ld	r24, Z
    155e:	91 81       	ldd	r25, Z+1	; 0x01
    1560:	bc 01       	movw	r22, r24
    1562:	80 e0       	ldi	r24, 0x00	; 0
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	42 e0       	ldi	r20, 0x02	; 2
    1568:	50 e0       	ldi	r21, 0x00	; 0
    156a:	c4 0e       	add	r12, r20
    156c:	d5 1e       	adc	r13, r21
    156e:	ae 01       	movw	r20, r28
    1570:	4f 5f       	subi	r20, 0xFF	; 255
    1572:	5f 4f       	sbci	r21, 0xFF	; 255
    1574:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <__ultoa_invert>
    1578:	e8 2e       	mov	r14, r24
    157a:	58 89       	ldd	r21, Y+16	; 0x10
    157c:	e5 1a       	sub	r14, r21
    157e:	8f e7       	ldi	r24, 0x7F	; 127
    1580:	f8 2e       	mov	r15, r24
    1582:	f1 22       	and	r15, r17
    1584:	f6 fe       	sbrs	r15, 6
    1586:	0b c0       	rjmp	.+22     	; 0x159e <vfprintf+0x61a>
    1588:	8e ef       	ldi	r24, 0xFE	; 254
    158a:	f8 22       	and	r15, r24
    158c:	e9 14       	cp	r14, r9
    158e:	38 f4       	brcc	.+14     	; 0x159e <vfprintf+0x61a>
    1590:	f4 fe       	sbrs	r15, 4
    1592:	07 c0       	rjmp	.+14     	; 0x15a2 <vfprintf+0x61e>
    1594:	f2 fc       	sbrc	r15, 2
    1596:	05 c0       	rjmp	.+10     	; 0x15a2 <vfprintf+0x61e>
    1598:	9f ee       	ldi	r25, 0xEF	; 239
    159a:	f9 22       	and	r15, r25
    159c:	02 c0       	rjmp	.+4      	; 0x15a2 <vfprintf+0x61e>
    159e:	1e 2d       	mov	r17, r14
    15a0:	01 c0       	rjmp	.+2      	; 0x15a4 <vfprintf+0x620>
    15a2:	19 2d       	mov	r17, r9
    15a4:	f4 fe       	sbrs	r15, 4
    15a6:	0d c0       	rjmp	.+26     	; 0x15c2 <vfprintf+0x63e>
    15a8:	fe 01       	movw	r30, r28
    15aa:	ee 0d       	add	r30, r14
    15ac:	f1 1d       	adc	r31, r1
    15ae:	80 81       	ld	r24, Z
    15b0:	80 33       	cpi	r24, 0x30	; 48
    15b2:	19 f4       	brne	.+6      	; 0x15ba <vfprintf+0x636>
    15b4:	e9 ee       	ldi	r30, 0xE9	; 233
    15b6:	fe 22       	and	r15, r30
    15b8:	08 c0       	rjmp	.+16     	; 0x15ca <vfprintf+0x646>
    15ba:	1f 5f       	subi	r17, 0xFF	; 255
    15bc:	f2 fe       	sbrs	r15, 2
    15be:	05 c0       	rjmp	.+10     	; 0x15ca <vfprintf+0x646>
    15c0:	03 c0       	rjmp	.+6      	; 0x15c8 <vfprintf+0x644>
    15c2:	8f 2d       	mov	r24, r15
    15c4:	86 78       	andi	r24, 0x86	; 134
    15c6:	09 f0       	breq	.+2      	; 0x15ca <vfprintf+0x646>
    15c8:	1f 5f       	subi	r17, 0xFF	; 255
    15ca:	0f 2d       	mov	r16, r15
    15cc:	f3 fc       	sbrc	r15, 3
    15ce:	14 c0       	rjmp	.+40     	; 0x15f8 <vfprintf+0x674>
    15d0:	f0 fe       	sbrs	r15, 0
    15d2:	0f c0       	rjmp	.+30     	; 0x15f2 <vfprintf+0x66e>
    15d4:	18 15       	cp	r17, r8
    15d6:	10 f0       	brcs	.+4      	; 0x15dc <vfprintf+0x658>
    15d8:	9e 2c       	mov	r9, r14
    15da:	0b c0       	rjmp	.+22     	; 0x15f2 <vfprintf+0x66e>
    15dc:	9e 2c       	mov	r9, r14
    15de:	98 0c       	add	r9, r8
    15e0:	91 1a       	sub	r9, r17
    15e2:	18 2d       	mov	r17, r8
    15e4:	06 c0       	rjmp	.+12     	; 0x15f2 <vfprintf+0x66e>
    15e6:	80 e2       	ldi	r24, 0x20	; 32
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	b3 01       	movw	r22, r6
    15ec:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <fputc>
    15f0:	1f 5f       	subi	r17, 0xFF	; 255
    15f2:	18 15       	cp	r17, r8
    15f4:	c0 f3       	brcs	.-16     	; 0x15e6 <vfprintf+0x662>
    15f6:	04 c0       	rjmp	.+8      	; 0x1600 <vfprintf+0x67c>
    15f8:	18 15       	cp	r17, r8
    15fa:	10 f4       	brcc	.+4      	; 0x1600 <vfprintf+0x67c>
    15fc:	81 1a       	sub	r8, r17
    15fe:	01 c0       	rjmp	.+2      	; 0x1602 <vfprintf+0x67e>
    1600:	88 24       	eor	r8, r8
    1602:	04 ff       	sbrs	r16, 4
    1604:	0f c0       	rjmp	.+30     	; 0x1624 <vfprintf+0x6a0>
    1606:	80 e3       	ldi	r24, 0x30	; 48
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	b3 01       	movw	r22, r6
    160c:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <fputc>
    1610:	02 ff       	sbrs	r16, 2
    1612:	1d c0       	rjmp	.+58     	; 0x164e <vfprintf+0x6ca>
    1614:	01 fd       	sbrc	r16, 1
    1616:	03 c0       	rjmp	.+6      	; 0x161e <vfprintf+0x69a>
    1618:	88 e7       	ldi	r24, 0x78	; 120
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	0e c0       	rjmp	.+28     	; 0x163a <vfprintf+0x6b6>
    161e:	88 e5       	ldi	r24, 0x58	; 88
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	0b c0       	rjmp	.+22     	; 0x163a <vfprintf+0x6b6>
    1624:	80 2f       	mov	r24, r16
    1626:	86 78       	andi	r24, 0x86	; 134
    1628:	91 f0       	breq	.+36     	; 0x164e <vfprintf+0x6ca>
    162a:	01 ff       	sbrs	r16, 1
    162c:	02 c0       	rjmp	.+4      	; 0x1632 <vfprintf+0x6ae>
    162e:	8b e2       	ldi	r24, 0x2B	; 43
    1630:	01 c0       	rjmp	.+2      	; 0x1634 <vfprintf+0x6b0>
    1632:	80 e2       	ldi	r24, 0x20	; 32
    1634:	f7 fc       	sbrc	r15, 7
    1636:	8d e2       	ldi	r24, 0x2D	; 45
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	b3 01       	movw	r22, r6
    163c:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <fputc>
    1640:	06 c0       	rjmp	.+12     	; 0x164e <vfprintf+0x6ca>
    1642:	80 e3       	ldi	r24, 0x30	; 48
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	b3 01       	movw	r22, r6
    1648:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <fputc>
    164c:	9a 94       	dec	r9
    164e:	e9 14       	cp	r14, r9
    1650:	c0 f3       	brcs	.-16     	; 0x1642 <vfprintf+0x6be>
    1652:	ea 94       	dec	r14
    1654:	e1 e0       	ldi	r30, 0x01	; 1
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	ec 0f       	add	r30, r28
    165a:	fd 1f       	adc	r31, r29
    165c:	ee 0d       	add	r30, r14
    165e:	f1 1d       	adc	r31, r1
    1660:	80 81       	ld	r24, Z
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	b3 01       	movw	r22, r6
    1666:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <fputc>
    166a:	ee 20       	and	r14, r14
    166c:	91 f7       	brne	.-28     	; 0x1652 <vfprintf+0x6ce>
    166e:	06 c0       	rjmp	.+12     	; 0x167c <vfprintf+0x6f8>
    1670:	80 e2       	ldi	r24, 0x20	; 32
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	b3 01       	movw	r22, r6
    1676:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <fputc>
    167a:	8a 94       	dec	r8
    167c:	88 20       	and	r8, r8
    167e:	c1 f7       	brne	.-16     	; 0x1670 <vfprintf+0x6ec>
    1680:	99 cc       	rjmp	.-1742   	; 0xfb4 <vfprintf+0x30>
    1682:	f3 01       	movw	r30, r6
    1684:	66 81       	ldd	r22, Z+6	; 0x06
    1686:	77 81       	ldd	r23, Z+7	; 0x07
    1688:	cb 01       	movw	r24, r22
    168a:	61 96       	adiw	r28, 0x11	; 17
    168c:	e2 e1       	ldi	r30, 0x12	; 18
    168e:	0c 94 13 0d 	jmp	0x1a26	; 0x1a26 <__epilogue_restores__>

00001692 <__subsf3>:
    1692:	50 58       	subi	r21, 0x80	; 128

00001694 <__addsf3>:
    1694:	bb 27       	eor	r27, r27
    1696:	aa 27       	eor	r26, r26
    1698:	0e d0       	rcall	.+28     	; 0x16b6 <__addsf3x>
    169a:	08 c1       	rjmp	.+528    	; 0x18ac <__fp_round>
    169c:	f9 d0       	rcall	.+498    	; 0x1890 <__fp_pscA>
    169e:	30 f0       	brcs	.+12     	; 0x16ac <__addsf3+0x18>
    16a0:	fe d0       	rcall	.+508    	; 0x189e <__fp_pscB>
    16a2:	20 f0       	brcs	.+8      	; 0x16ac <__addsf3+0x18>
    16a4:	31 f4       	brne	.+12     	; 0x16b2 <__addsf3+0x1e>
    16a6:	9f 3f       	cpi	r25, 0xFF	; 255
    16a8:	11 f4       	brne	.+4      	; 0x16ae <__addsf3+0x1a>
    16aa:	1e f4       	brtc	.+6      	; 0x16b2 <__addsf3+0x1e>
    16ac:	ee c0       	rjmp	.+476    	; 0x188a <__fp_nan>
    16ae:	0e f4       	brtc	.+2      	; 0x16b2 <__addsf3+0x1e>
    16b0:	e0 95       	com	r30
    16b2:	e7 fb       	bst	r30, 7
    16b4:	e4 c0       	rjmp	.+456    	; 0x187e <__fp_inf>

000016b6 <__addsf3x>:
    16b6:	e9 2f       	mov	r30, r25
    16b8:	0a d1       	rcall	.+532    	; 0x18ce <__fp_split3>
    16ba:	80 f3       	brcs	.-32     	; 0x169c <__addsf3+0x8>
    16bc:	ba 17       	cp	r27, r26
    16be:	62 07       	cpc	r22, r18
    16c0:	73 07       	cpc	r23, r19
    16c2:	84 07       	cpc	r24, r20
    16c4:	95 07       	cpc	r25, r21
    16c6:	18 f0       	brcs	.+6      	; 0x16ce <__addsf3x+0x18>
    16c8:	71 f4       	brne	.+28     	; 0x16e6 <__addsf3x+0x30>
    16ca:	9e f5       	brtc	.+102    	; 0x1732 <__addsf3x+0x7c>
    16cc:	22 c1       	rjmp	.+580    	; 0x1912 <__fp_zero>
    16ce:	0e f4       	brtc	.+2      	; 0x16d2 <__addsf3x+0x1c>
    16d0:	e0 95       	com	r30
    16d2:	0b 2e       	mov	r0, r27
    16d4:	ba 2f       	mov	r27, r26
    16d6:	a0 2d       	mov	r26, r0
    16d8:	0b 01       	movw	r0, r22
    16da:	b9 01       	movw	r22, r18
    16dc:	90 01       	movw	r18, r0
    16de:	0c 01       	movw	r0, r24
    16e0:	ca 01       	movw	r24, r20
    16e2:	a0 01       	movw	r20, r0
    16e4:	11 24       	eor	r1, r1
    16e6:	ff 27       	eor	r31, r31
    16e8:	59 1b       	sub	r21, r25
    16ea:	99 f0       	breq	.+38     	; 0x1712 <__addsf3x+0x5c>
    16ec:	59 3f       	cpi	r21, 0xF9	; 249
    16ee:	50 f4       	brcc	.+20     	; 0x1704 <__addsf3x+0x4e>
    16f0:	50 3e       	cpi	r21, 0xE0	; 224
    16f2:	68 f1       	brcs	.+90     	; 0x174e <__addsf3x+0x98>
    16f4:	1a 16       	cp	r1, r26
    16f6:	f0 40       	sbci	r31, 0x00	; 0
    16f8:	a2 2f       	mov	r26, r18
    16fa:	23 2f       	mov	r18, r19
    16fc:	34 2f       	mov	r19, r20
    16fe:	44 27       	eor	r20, r20
    1700:	58 5f       	subi	r21, 0xF8	; 248
    1702:	f3 cf       	rjmp	.-26     	; 0x16ea <__addsf3x+0x34>
    1704:	46 95       	lsr	r20
    1706:	37 95       	ror	r19
    1708:	27 95       	ror	r18
    170a:	a7 95       	ror	r26
    170c:	f0 40       	sbci	r31, 0x00	; 0
    170e:	53 95       	inc	r21
    1710:	c9 f7       	brne	.-14     	; 0x1704 <__addsf3x+0x4e>
    1712:	7e f4       	brtc	.+30     	; 0x1732 <__addsf3x+0x7c>
    1714:	1f 16       	cp	r1, r31
    1716:	ba 0b       	sbc	r27, r26
    1718:	62 0b       	sbc	r22, r18
    171a:	73 0b       	sbc	r23, r19
    171c:	84 0b       	sbc	r24, r20
    171e:	ba f0       	brmi	.+46     	; 0x174e <__addsf3x+0x98>
    1720:	91 50       	subi	r25, 0x01	; 1
    1722:	a1 f0       	breq	.+40     	; 0x174c <__addsf3x+0x96>
    1724:	ff 0f       	add	r31, r31
    1726:	bb 1f       	adc	r27, r27
    1728:	66 1f       	adc	r22, r22
    172a:	77 1f       	adc	r23, r23
    172c:	88 1f       	adc	r24, r24
    172e:	c2 f7       	brpl	.-16     	; 0x1720 <__addsf3x+0x6a>
    1730:	0e c0       	rjmp	.+28     	; 0x174e <__addsf3x+0x98>
    1732:	ba 0f       	add	r27, r26
    1734:	62 1f       	adc	r22, r18
    1736:	73 1f       	adc	r23, r19
    1738:	84 1f       	adc	r24, r20
    173a:	48 f4       	brcc	.+18     	; 0x174e <__addsf3x+0x98>
    173c:	87 95       	ror	r24
    173e:	77 95       	ror	r23
    1740:	67 95       	ror	r22
    1742:	b7 95       	ror	r27
    1744:	f7 95       	ror	r31
    1746:	9e 3f       	cpi	r25, 0xFE	; 254
    1748:	08 f0       	brcs	.+2      	; 0x174c <__addsf3x+0x96>
    174a:	b3 cf       	rjmp	.-154    	; 0x16b2 <__addsf3+0x1e>
    174c:	93 95       	inc	r25
    174e:	88 0f       	add	r24, r24
    1750:	08 f0       	brcs	.+2      	; 0x1754 <__addsf3x+0x9e>
    1752:	99 27       	eor	r25, r25
    1754:	ee 0f       	add	r30, r30
    1756:	97 95       	ror	r25
    1758:	87 95       	ror	r24
    175a:	08 95       	ret

0000175c <__cmpsf2>:
    175c:	6c d0       	rcall	.+216    	; 0x1836 <__fp_cmp>
    175e:	08 f4       	brcc	.+2      	; 0x1762 <__cmpsf2+0x6>
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	08 95       	ret

00001764 <__fixunssfsi>:
    1764:	bc d0       	rcall	.+376    	; 0x18de <__fp_splitA>
    1766:	88 f0       	brcs	.+34     	; 0x178a <__fixunssfsi+0x26>
    1768:	9f 57       	subi	r25, 0x7F	; 127
    176a:	90 f0       	brcs	.+36     	; 0x1790 <__fixunssfsi+0x2c>
    176c:	b9 2f       	mov	r27, r25
    176e:	99 27       	eor	r25, r25
    1770:	b7 51       	subi	r27, 0x17	; 23
    1772:	a0 f0       	brcs	.+40     	; 0x179c <__fixunssfsi+0x38>
    1774:	d1 f0       	breq	.+52     	; 0x17aa <__fixunssfsi+0x46>
    1776:	66 0f       	add	r22, r22
    1778:	77 1f       	adc	r23, r23
    177a:	88 1f       	adc	r24, r24
    177c:	99 1f       	adc	r25, r25
    177e:	1a f0       	brmi	.+6      	; 0x1786 <__fixunssfsi+0x22>
    1780:	ba 95       	dec	r27
    1782:	c9 f7       	brne	.-14     	; 0x1776 <__fixunssfsi+0x12>
    1784:	12 c0       	rjmp	.+36     	; 0x17aa <__fixunssfsi+0x46>
    1786:	b1 30       	cpi	r27, 0x01	; 1
    1788:	81 f0       	breq	.+32     	; 0x17aa <__fixunssfsi+0x46>
    178a:	c3 d0       	rcall	.+390    	; 0x1912 <__fp_zero>
    178c:	b1 e0       	ldi	r27, 0x01	; 1
    178e:	08 95       	ret
    1790:	c0 c0       	rjmp	.+384    	; 0x1912 <__fp_zero>
    1792:	67 2f       	mov	r22, r23
    1794:	78 2f       	mov	r23, r24
    1796:	88 27       	eor	r24, r24
    1798:	b8 5f       	subi	r27, 0xF8	; 248
    179a:	39 f0       	breq	.+14     	; 0x17aa <__fixunssfsi+0x46>
    179c:	b9 3f       	cpi	r27, 0xF9	; 249
    179e:	cc f3       	brlt	.-14     	; 0x1792 <__fixunssfsi+0x2e>
    17a0:	86 95       	lsr	r24
    17a2:	77 95       	ror	r23
    17a4:	67 95       	ror	r22
    17a6:	b3 95       	inc	r27
    17a8:	d9 f7       	brne	.-10     	; 0x17a0 <__fixunssfsi+0x3c>
    17aa:	3e f4       	brtc	.+14     	; 0x17ba <__fixunssfsi+0x56>
    17ac:	90 95       	com	r25
    17ae:	80 95       	com	r24
    17b0:	70 95       	com	r23
    17b2:	61 95       	neg	r22
    17b4:	7f 4f       	sbci	r23, 0xFF	; 255
    17b6:	8f 4f       	sbci	r24, 0xFF	; 255
    17b8:	9f 4f       	sbci	r25, 0xFF	; 255
    17ba:	08 95       	ret

000017bc <__floatunsisf>:
    17bc:	e8 94       	clt
    17be:	09 c0       	rjmp	.+18     	; 0x17d2 <__floatsisf+0x12>

000017c0 <__floatsisf>:
    17c0:	97 fb       	bst	r25, 7
    17c2:	3e f4       	brtc	.+14     	; 0x17d2 <__floatsisf+0x12>
    17c4:	90 95       	com	r25
    17c6:	80 95       	com	r24
    17c8:	70 95       	com	r23
    17ca:	61 95       	neg	r22
    17cc:	7f 4f       	sbci	r23, 0xFF	; 255
    17ce:	8f 4f       	sbci	r24, 0xFF	; 255
    17d0:	9f 4f       	sbci	r25, 0xFF	; 255
    17d2:	99 23       	and	r25, r25
    17d4:	a9 f0       	breq	.+42     	; 0x1800 <__floatsisf+0x40>
    17d6:	f9 2f       	mov	r31, r25
    17d8:	96 e9       	ldi	r25, 0x96	; 150
    17da:	bb 27       	eor	r27, r27
    17dc:	93 95       	inc	r25
    17de:	f6 95       	lsr	r31
    17e0:	87 95       	ror	r24
    17e2:	77 95       	ror	r23
    17e4:	67 95       	ror	r22
    17e6:	b7 95       	ror	r27
    17e8:	f1 11       	cpse	r31, r1
    17ea:	f8 cf       	rjmp	.-16     	; 0x17dc <__floatsisf+0x1c>
    17ec:	fa f4       	brpl	.+62     	; 0x182c <__floatsisf+0x6c>
    17ee:	bb 0f       	add	r27, r27
    17f0:	11 f4       	brne	.+4      	; 0x17f6 <__floatsisf+0x36>
    17f2:	60 ff       	sbrs	r22, 0
    17f4:	1b c0       	rjmp	.+54     	; 0x182c <__floatsisf+0x6c>
    17f6:	6f 5f       	subi	r22, 0xFF	; 255
    17f8:	7f 4f       	sbci	r23, 0xFF	; 255
    17fa:	8f 4f       	sbci	r24, 0xFF	; 255
    17fc:	9f 4f       	sbci	r25, 0xFF	; 255
    17fe:	16 c0       	rjmp	.+44     	; 0x182c <__floatsisf+0x6c>
    1800:	88 23       	and	r24, r24
    1802:	11 f0       	breq	.+4      	; 0x1808 <__floatsisf+0x48>
    1804:	96 e9       	ldi	r25, 0x96	; 150
    1806:	11 c0       	rjmp	.+34     	; 0x182a <__floatsisf+0x6a>
    1808:	77 23       	and	r23, r23
    180a:	21 f0       	breq	.+8      	; 0x1814 <__floatsisf+0x54>
    180c:	9e e8       	ldi	r25, 0x8E	; 142
    180e:	87 2f       	mov	r24, r23
    1810:	76 2f       	mov	r23, r22
    1812:	05 c0       	rjmp	.+10     	; 0x181e <__floatsisf+0x5e>
    1814:	66 23       	and	r22, r22
    1816:	71 f0       	breq	.+28     	; 0x1834 <__floatsisf+0x74>
    1818:	96 e8       	ldi	r25, 0x86	; 134
    181a:	86 2f       	mov	r24, r22
    181c:	70 e0       	ldi	r23, 0x00	; 0
    181e:	60 e0       	ldi	r22, 0x00	; 0
    1820:	2a f0       	brmi	.+10     	; 0x182c <__floatsisf+0x6c>
    1822:	9a 95       	dec	r25
    1824:	66 0f       	add	r22, r22
    1826:	77 1f       	adc	r23, r23
    1828:	88 1f       	adc	r24, r24
    182a:	da f7       	brpl	.-10     	; 0x1822 <__floatsisf+0x62>
    182c:	88 0f       	add	r24, r24
    182e:	96 95       	lsr	r25
    1830:	87 95       	ror	r24
    1832:	97 f9       	bld	r25, 7
    1834:	08 95       	ret

00001836 <__fp_cmp>:
    1836:	99 0f       	add	r25, r25
    1838:	00 08       	sbc	r0, r0
    183a:	55 0f       	add	r21, r21
    183c:	aa 0b       	sbc	r26, r26
    183e:	e0 e8       	ldi	r30, 0x80	; 128
    1840:	fe ef       	ldi	r31, 0xFE	; 254
    1842:	16 16       	cp	r1, r22
    1844:	17 06       	cpc	r1, r23
    1846:	e8 07       	cpc	r30, r24
    1848:	f9 07       	cpc	r31, r25
    184a:	c0 f0       	brcs	.+48     	; 0x187c <__fp_cmp+0x46>
    184c:	12 16       	cp	r1, r18
    184e:	13 06       	cpc	r1, r19
    1850:	e4 07       	cpc	r30, r20
    1852:	f5 07       	cpc	r31, r21
    1854:	98 f0       	brcs	.+38     	; 0x187c <__fp_cmp+0x46>
    1856:	62 1b       	sub	r22, r18
    1858:	73 0b       	sbc	r23, r19
    185a:	84 0b       	sbc	r24, r20
    185c:	95 0b       	sbc	r25, r21
    185e:	39 f4       	brne	.+14     	; 0x186e <__fp_cmp+0x38>
    1860:	0a 26       	eor	r0, r26
    1862:	61 f0       	breq	.+24     	; 0x187c <__fp_cmp+0x46>
    1864:	23 2b       	or	r18, r19
    1866:	24 2b       	or	r18, r20
    1868:	25 2b       	or	r18, r21
    186a:	21 f4       	brne	.+8      	; 0x1874 <__fp_cmp+0x3e>
    186c:	08 95       	ret
    186e:	0a 26       	eor	r0, r26
    1870:	09 f4       	brne	.+2      	; 0x1874 <__fp_cmp+0x3e>
    1872:	a1 40       	sbci	r26, 0x01	; 1
    1874:	a6 95       	lsr	r26
    1876:	8f ef       	ldi	r24, 0xFF	; 255
    1878:	81 1d       	adc	r24, r1
    187a:	81 1d       	adc	r24, r1
    187c:	08 95       	ret

0000187e <__fp_inf>:
    187e:	97 f9       	bld	r25, 7
    1880:	9f 67       	ori	r25, 0x7F	; 127
    1882:	80 e8       	ldi	r24, 0x80	; 128
    1884:	70 e0       	ldi	r23, 0x00	; 0
    1886:	60 e0       	ldi	r22, 0x00	; 0
    1888:	08 95       	ret

0000188a <__fp_nan>:
    188a:	9f ef       	ldi	r25, 0xFF	; 255
    188c:	80 ec       	ldi	r24, 0xC0	; 192
    188e:	08 95       	ret

00001890 <__fp_pscA>:
    1890:	00 24       	eor	r0, r0
    1892:	0a 94       	dec	r0
    1894:	16 16       	cp	r1, r22
    1896:	17 06       	cpc	r1, r23
    1898:	18 06       	cpc	r1, r24
    189a:	09 06       	cpc	r0, r25
    189c:	08 95       	ret

0000189e <__fp_pscB>:
    189e:	00 24       	eor	r0, r0
    18a0:	0a 94       	dec	r0
    18a2:	12 16       	cp	r1, r18
    18a4:	13 06       	cpc	r1, r19
    18a6:	14 06       	cpc	r1, r20
    18a8:	05 06       	cpc	r0, r21
    18aa:	08 95       	ret

000018ac <__fp_round>:
    18ac:	09 2e       	mov	r0, r25
    18ae:	03 94       	inc	r0
    18b0:	00 0c       	add	r0, r0
    18b2:	11 f4       	brne	.+4      	; 0x18b8 <__fp_round+0xc>
    18b4:	88 23       	and	r24, r24
    18b6:	52 f0       	brmi	.+20     	; 0x18cc <__fp_round+0x20>
    18b8:	bb 0f       	add	r27, r27
    18ba:	40 f4       	brcc	.+16     	; 0x18cc <__fp_round+0x20>
    18bc:	bf 2b       	or	r27, r31
    18be:	11 f4       	brne	.+4      	; 0x18c4 <__fp_round+0x18>
    18c0:	60 ff       	sbrs	r22, 0
    18c2:	04 c0       	rjmp	.+8      	; 0x18cc <__fp_round+0x20>
    18c4:	6f 5f       	subi	r22, 0xFF	; 255
    18c6:	7f 4f       	sbci	r23, 0xFF	; 255
    18c8:	8f 4f       	sbci	r24, 0xFF	; 255
    18ca:	9f 4f       	sbci	r25, 0xFF	; 255
    18cc:	08 95       	ret

000018ce <__fp_split3>:
    18ce:	57 fd       	sbrc	r21, 7
    18d0:	90 58       	subi	r25, 0x80	; 128
    18d2:	44 0f       	add	r20, r20
    18d4:	55 1f       	adc	r21, r21
    18d6:	59 f0       	breq	.+22     	; 0x18ee <__fp_splitA+0x10>
    18d8:	5f 3f       	cpi	r21, 0xFF	; 255
    18da:	71 f0       	breq	.+28     	; 0x18f8 <__fp_splitA+0x1a>
    18dc:	47 95       	ror	r20

000018de <__fp_splitA>:
    18de:	88 0f       	add	r24, r24
    18e0:	97 fb       	bst	r25, 7
    18e2:	99 1f       	adc	r25, r25
    18e4:	61 f0       	breq	.+24     	; 0x18fe <__fp_splitA+0x20>
    18e6:	9f 3f       	cpi	r25, 0xFF	; 255
    18e8:	79 f0       	breq	.+30     	; 0x1908 <__fp_splitA+0x2a>
    18ea:	87 95       	ror	r24
    18ec:	08 95       	ret
    18ee:	12 16       	cp	r1, r18
    18f0:	13 06       	cpc	r1, r19
    18f2:	14 06       	cpc	r1, r20
    18f4:	55 1f       	adc	r21, r21
    18f6:	f2 cf       	rjmp	.-28     	; 0x18dc <__fp_split3+0xe>
    18f8:	46 95       	lsr	r20
    18fa:	f1 df       	rcall	.-30     	; 0x18de <__fp_splitA>
    18fc:	08 c0       	rjmp	.+16     	; 0x190e <__fp_splitA+0x30>
    18fe:	16 16       	cp	r1, r22
    1900:	17 06       	cpc	r1, r23
    1902:	18 06       	cpc	r1, r24
    1904:	99 1f       	adc	r25, r25
    1906:	f1 cf       	rjmp	.-30     	; 0x18ea <__fp_splitA+0xc>
    1908:	86 95       	lsr	r24
    190a:	71 05       	cpc	r23, r1
    190c:	61 05       	cpc	r22, r1
    190e:	08 94       	sec
    1910:	08 95       	ret

00001912 <__fp_zero>:
    1912:	e8 94       	clt

00001914 <__fp_szero>:
    1914:	bb 27       	eor	r27, r27
    1916:	66 27       	eor	r22, r22
    1918:	77 27       	eor	r23, r23
    191a:	cb 01       	movw	r24, r22
    191c:	97 f9       	bld	r25, 7
    191e:	08 95       	ret

00001920 <__gesf2>:
    1920:	8a df       	rcall	.-236    	; 0x1836 <__fp_cmp>
    1922:	08 f4       	brcc	.+2      	; 0x1926 <__gesf2+0x6>
    1924:	8f ef       	ldi	r24, 0xFF	; 255
    1926:	08 95       	ret

00001928 <__mulsf3>:
    1928:	0b d0       	rcall	.+22     	; 0x1940 <__mulsf3x>
    192a:	c0 cf       	rjmp	.-128    	; 0x18ac <__fp_round>
    192c:	b1 df       	rcall	.-158    	; 0x1890 <__fp_pscA>
    192e:	28 f0       	brcs	.+10     	; 0x193a <__mulsf3+0x12>
    1930:	b6 df       	rcall	.-148    	; 0x189e <__fp_pscB>
    1932:	18 f0       	brcs	.+6      	; 0x193a <__mulsf3+0x12>
    1934:	95 23       	and	r25, r21
    1936:	09 f0       	breq	.+2      	; 0x193a <__mulsf3+0x12>
    1938:	a2 cf       	rjmp	.-188    	; 0x187e <__fp_inf>
    193a:	a7 cf       	rjmp	.-178    	; 0x188a <__fp_nan>
    193c:	11 24       	eor	r1, r1
    193e:	ea cf       	rjmp	.-44     	; 0x1914 <__fp_szero>

00001940 <__mulsf3x>:
    1940:	c6 df       	rcall	.-116    	; 0x18ce <__fp_split3>
    1942:	a0 f3       	brcs	.-24     	; 0x192c <__mulsf3+0x4>

00001944 <__mulsf3_pse>:
    1944:	95 9f       	mul	r25, r21
    1946:	d1 f3       	breq	.-12     	; 0x193c <__mulsf3+0x14>
    1948:	95 0f       	add	r25, r21
    194a:	50 e0       	ldi	r21, 0x00	; 0
    194c:	55 1f       	adc	r21, r21
    194e:	62 9f       	mul	r22, r18
    1950:	f0 01       	movw	r30, r0
    1952:	72 9f       	mul	r23, r18
    1954:	bb 27       	eor	r27, r27
    1956:	f0 0d       	add	r31, r0
    1958:	b1 1d       	adc	r27, r1
    195a:	63 9f       	mul	r22, r19
    195c:	aa 27       	eor	r26, r26
    195e:	f0 0d       	add	r31, r0
    1960:	b1 1d       	adc	r27, r1
    1962:	aa 1f       	adc	r26, r26
    1964:	64 9f       	mul	r22, r20
    1966:	66 27       	eor	r22, r22
    1968:	b0 0d       	add	r27, r0
    196a:	a1 1d       	adc	r26, r1
    196c:	66 1f       	adc	r22, r22
    196e:	82 9f       	mul	r24, r18
    1970:	22 27       	eor	r18, r18
    1972:	b0 0d       	add	r27, r0
    1974:	a1 1d       	adc	r26, r1
    1976:	62 1f       	adc	r22, r18
    1978:	73 9f       	mul	r23, r19
    197a:	b0 0d       	add	r27, r0
    197c:	a1 1d       	adc	r26, r1
    197e:	62 1f       	adc	r22, r18
    1980:	83 9f       	mul	r24, r19
    1982:	a0 0d       	add	r26, r0
    1984:	61 1d       	adc	r22, r1
    1986:	22 1f       	adc	r18, r18
    1988:	74 9f       	mul	r23, r20
    198a:	33 27       	eor	r19, r19
    198c:	a0 0d       	add	r26, r0
    198e:	61 1d       	adc	r22, r1
    1990:	23 1f       	adc	r18, r19
    1992:	84 9f       	mul	r24, r20
    1994:	60 0d       	add	r22, r0
    1996:	21 1d       	adc	r18, r1
    1998:	82 2f       	mov	r24, r18
    199a:	76 2f       	mov	r23, r22
    199c:	6a 2f       	mov	r22, r26
    199e:	11 24       	eor	r1, r1
    19a0:	9f 57       	subi	r25, 0x7F	; 127
    19a2:	50 40       	sbci	r21, 0x00	; 0
    19a4:	8a f0       	brmi	.+34     	; 0x19c8 <__mulsf3_pse+0x84>
    19a6:	e1 f0       	breq	.+56     	; 0x19e0 <__mulsf3_pse+0x9c>
    19a8:	88 23       	and	r24, r24
    19aa:	4a f0       	brmi	.+18     	; 0x19be <__mulsf3_pse+0x7a>
    19ac:	ee 0f       	add	r30, r30
    19ae:	ff 1f       	adc	r31, r31
    19b0:	bb 1f       	adc	r27, r27
    19b2:	66 1f       	adc	r22, r22
    19b4:	77 1f       	adc	r23, r23
    19b6:	88 1f       	adc	r24, r24
    19b8:	91 50       	subi	r25, 0x01	; 1
    19ba:	50 40       	sbci	r21, 0x00	; 0
    19bc:	a9 f7       	brne	.-22     	; 0x19a8 <__mulsf3_pse+0x64>
    19be:	9e 3f       	cpi	r25, 0xFE	; 254
    19c0:	51 05       	cpc	r21, r1
    19c2:	70 f0       	brcs	.+28     	; 0x19e0 <__mulsf3_pse+0x9c>
    19c4:	5c cf       	rjmp	.-328    	; 0x187e <__fp_inf>
    19c6:	a6 cf       	rjmp	.-180    	; 0x1914 <__fp_szero>
    19c8:	5f 3f       	cpi	r21, 0xFF	; 255
    19ca:	ec f3       	brlt	.-6      	; 0x19c6 <__mulsf3_pse+0x82>
    19cc:	98 3e       	cpi	r25, 0xE8	; 232
    19ce:	dc f3       	brlt	.-10     	; 0x19c6 <__mulsf3_pse+0x82>
    19d0:	86 95       	lsr	r24
    19d2:	77 95       	ror	r23
    19d4:	67 95       	ror	r22
    19d6:	b7 95       	ror	r27
    19d8:	f7 95       	ror	r31
    19da:	e7 95       	ror	r30
    19dc:	9f 5f       	subi	r25, 0xFF	; 255
    19de:	c1 f7       	brne	.-16     	; 0x19d0 <__mulsf3_pse+0x8c>
    19e0:	fe 2b       	or	r31, r30
    19e2:	88 0f       	add	r24, r24
    19e4:	91 1d       	adc	r25, r1
    19e6:	96 95       	lsr	r25
    19e8:	87 95       	ror	r24
    19ea:	97 f9       	bld	r25, 7
    19ec:	08 95       	ret

000019ee <__prologue_saves__>:
    19ee:	2f 92       	push	r2
    19f0:	3f 92       	push	r3
    19f2:	4f 92       	push	r4
    19f4:	5f 92       	push	r5
    19f6:	6f 92       	push	r6
    19f8:	7f 92       	push	r7
    19fa:	8f 92       	push	r8
    19fc:	9f 92       	push	r9
    19fe:	af 92       	push	r10
    1a00:	bf 92       	push	r11
    1a02:	cf 92       	push	r12
    1a04:	df 92       	push	r13
    1a06:	ef 92       	push	r14
    1a08:	ff 92       	push	r15
    1a0a:	0f 93       	push	r16
    1a0c:	1f 93       	push	r17
    1a0e:	cf 93       	push	r28
    1a10:	df 93       	push	r29
    1a12:	cd b7       	in	r28, 0x3d	; 61
    1a14:	de b7       	in	r29, 0x3e	; 62
    1a16:	ca 1b       	sub	r28, r26
    1a18:	db 0b       	sbc	r29, r27
    1a1a:	0f b6       	in	r0, 0x3f	; 63
    1a1c:	f8 94       	cli
    1a1e:	de bf       	out	0x3e, r29	; 62
    1a20:	0f be       	out	0x3f, r0	; 63
    1a22:	cd bf       	out	0x3d, r28	; 61
    1a24:	09 94       	ijmp

00001a26 <__epilogue_restores__>:
    1a26:	2a 88       	ldd	r2, Y+18	; 0x12
    1a28:	39 88       	ldd	r3, Y+17	; 0x11
    1a2a:	48 88       	ldd	r4, Y+16	; 0x10
    1a2c:	5f 84       	ldd	r5, Y+15	; 0x0f
    1a2e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1a30:	7d 84       	ldd	r7, Y+13	; 0x0d
    1a32:	8c 84       	ldd	r8, Y+12	; 0x0c
    1a34:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a36:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a38:	b9 84       	ldd	r11, Y+9	; 0x09
    1a3a:	c8 84       	ldd	r12, Y+8	; 0x08
    1a3c:	df 80       	ldd	r13, Y+7	; 0x07
    1a3e:	ee 80       	ldd	r14, Y+6	; 0x06
    1a40:	fd 80       	ldd	r15, Y+5	; 0x05
    1a42:	0c 81       	ldd	r16, Y+4	; 0x04
    1a44:	1b 81       	ldd	r17, Y+3	; 0x03
    1a46:	aa 81       	ldd	r26, Y+2	; 0x02
    1a48:	b9 81       	ldd	r27, Y+1	; 0x01
    1a4a:	ce 0f       	add	r28, r30
    1a4c:	d1 1d       	adc	r29, r1
    1a4e:	0f b6       	in	r0, 0x3f	; 63
    1a50:	f8 94       	cli
    1a52:	de bf       	out	0x3e, r29	; 62
    1a54:	0f be       	out	0x3f, r0	; 63
    1a56:	cd bf       	out	0x3d, r28	; 61
    1a58:	ed 01       	movw	r28, r26
    1a5a:	08 95       	ret

00001a5c <__ftoa_engine>:
    1a5c:	28 30       	cpi	r18, 0x08	; 8
    1a5e:	08 f0       	brcs	.+2      	; 0x1a62 <__ftoa_engine+0x6>
    1a60:	27 e0       	ldi	r18, 0x07	; 7
    1a62:	33 27       	eor	r19, r19
    1a64:	da 01       	movw	r26, r20
    1a66:	99 0f       	add	r25, r25
    1a68:	31 1d       	adc	r19, r1
    1a6a:	87 fd       	sbrc	r24, 7
    1a6c:	91 60       	ori	r25, 0x01	; 1
    1a6e:	00 96       	adiw	r24, 0x00	; 0
    1a70:	61 05       	cpc	r22, r1
    1a72:	71 05       	cpc	r23, r1
    1a74:	39 f4       	brne	.+14     	; 0x1a84 <__ftoa_engine+0x28>
    1a76:	32 60       	ori	r19, 0x02	; 2
    1a78:	2e 5f       	subi	r18, 0xFE	; 254
    1a7a:	3d 93       	st	X+, r19
    1a7c:	30 e3       	ldi	r19, 0x30	; 48
    1a7e:	2a 95       	dec	r18
    1a80:	e1 f7       	brne	.-8      	; 0x1a7a <__ftoa_engine+0x1e>
    1a82:	08 95       	ret
    1a84:	9f 3f       	cpi	r25, 0xFF	; 255
    1a86:	30 f0       	brcs	.+12     	; 0x1a94 <__ftoa_engine+0x38>
    1a88:	80 38       	cpi	r24, 0x80	; 128
    1a8a:	71 05       	cpc	r23, r1
    1a8c:	61 05       	cpc	r22, r1
    1a8e:	09 f0       	breq	.+2      	; 0x1a92 <__ftoa_engine+0x36>
    1a90:	3c 5f       	subi	r19, 0xFC	; 252
    1a92:	3c 5f       	subi	r19, 0xFC	; 252
    1a94:	3d 93       	st	X+, r19
    1a96:	91 30       	cpi	r25, 0x01	; 1
    1a98:	08 f0       	brcs	.+2      	; 0x1a9c <__ftoa_engine+0x40>
    1a9a:	80 68       	ori	r24, 0x80	; 128
    1a9c:	91 1d       	adc	r25, r1
    1a9e:	df 93       	push	r29
    1aa0:	cf 93       	push	r28
    1aa2:	1f 93       	push	r17
    1aa4:	0f 93       	push	r16
    1aa6:	ff 92       	push	r15
    1aa8:	ef 92       	push	r14
    1aaa:	19 2f       	mov	r17, r25
    1aac:	98 7f       	andi	r25, 0xF8	; 248
    1aae:	96 95       	lsr	r25
    1ab0:	e9 2f       	mov	r30, r25
    1ab2:	96 95       	lsr	r25
    1ab4:	96 95       	lsr	r25
    1ab6:	e9 0f       	add	r30, r25
    1ab8:	ff 27       	eor	r31, r31
    1aba:	ea 54       	subi	r30, 0x4A	; 74
    1abc:	ff 4f       	sbci	r31, 0xFF	; 255
    1abe:	99 27       	eor	r25, r25
    1ac0:	33 27       	eor	r19, r19
    1ac2:	ee 24       	eor	r14, r14
    1ac4:	ff 24       	eor	r15, r15
    1ac6:	a7 01       	movw	r20, r14
    1ac8:	e7 01       	movw	r28, r14
    1aca:	05 90       	lpm	r0, Z+
    1acc:	08 94       	sec
    1ace:	07 94       	ror	r0
    1ad0:	28 f4       	brcc	.+10     	; 0x1adc <__ftoa_engine+0x80>
    1ad2:	36 0f       	add	r19, r22
    1ad4:	e7 1e       	adc	r14, r23
    1ad6:	f8 1e       	adc	r15, r24
    1ad8:	49 1f       	adc	r20, r25
    1ada:	51 1d       	adc	r21, r1
    1adc:	66 0f       	add	r22, r22
    1ade:	77 1f       	adc	r23, r23
    1ae0:	88 1f       	adc	r24, r24
    1ae2:	99 1f       	adc	r25, r25
    1ae4:	06 94       	lsr	r0
    1ae6:	a1 f7       	brne	.-24     	; 0x1ad0 <__ftoa_engine+0x74>
    1ae8:	05 90       	lpm	r0, Z+
    1aea:	07 94       	ror	r0
    1aec:	28 f4       	brcc	.+10     	; 0x1af8 <__ftoa_engine+0x9c>
    1aee:	e7 0e       	add	r14, r23
    1af0:	f8 1e       	adc	r15, r24
    1af2:	49 1f       	adc	r20, r25
    1af4:	56 1f       	adc	r21, r22
    1af6:	c1 1d       	adc	r28, r1
    1af8:	77 0f       	add	r23, r23
    1afa:	88 1f       	adc	r24, r24
    1afc:	99 1f       	adc	r25, r25
    1afe:	66 1f       	adc	r22, r22
    1b00:	06 94       	lsr	r0
    1b02:	a1 f7       	brne	.-24     	; 0x1aec <__ftoa_engine+0x90>
    1b04:	05 90       	lpm	r0, Z+
    1b06:	07 94       	ror	r0
    1b08:	28 f4       	brcc	.+10     	; 0x1b14 <__ftoa_engine+0xb8>
    1b0a:	f8 0e       	add	r15, r24
    1b0c:	49 1f       	adc	r20, r25
    1b0e:	56 1f       	adc	r21, r22
    1b10:	c7 1f       	adc	r28, r23
    1b12:	d1 1d       	adc	r29, r1
    1b14:	88 0f       	add	r24, r24
    1b16:	99 1f       	adc	r25, r25
    1b18:	66 1f       	adc	r22, r22
    1b1a:	77 1f       	adc	r23, r23
    1b1c:	06 94       	lsr	r0
    1b1e:	a1 f7       	brne	.-24     	; 0x1b08 <__ftoa_engine+0xac>
    1b20:	05 90       	lpm	r0, Z+
    1b22:	07 94       	ror	r0
    1b24:	20 f4       	brcc	.+8      	; 0x1b2e <__ftoa_engine+0xd2>
    1b26:	49 0f       	add	r20, r25
    1b28:	56 1f       	adc	r21, r22
    1b2a:	c7 1f       	adc	r28, r23
    1b2c:	d8 1f       	adc	r29, r24
    1b2e:	99 0f       	add	r25, r25
    1b30:	66 1f       	adc	r22, r22
    1b32:	77 1f       	adc	r23, r23
    1b34:	88 1f       	adc	r24, r24
    1b36:	06 94       	lsr	r0
    1b38:	a9 f7       	brne	.-22     	; 0x1b24 <__ftoa_engine+0xc8>
    1b3a:	84 91       	lpm	r24, Z+
    1b3c:	10 95       	com	r17
    1b3e:	17 70       	andi	r17, 0x07	; 7
    1b40:	41 f0       	breq	.+16     	; 0x1b52 <__ftoa_engine+0xf6>
    1b42:	d6 95       	lsr	r29
    1b44:	c7 95       	ror	r28
    1b46:	57 95       	ror	r21
    1b48:	47 95       	ror	r20
    1b4a:	f7 94       	ror	r15
    1b4c:	e7 94       	ror	r14
    1b4e:	1a 95       	dec	r17
    1b50:	c1 f7       	brne	.-16     	; 0x1b42 <__ftoa_engine+0xe6>
    1b52:	ec e5       	ldi	r30, 0x5C	; 92
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	68 94       	set
    1b58:	15 90       	lpm	r1, Z+
    1b5a:	15 91       	lpm	r17, Z+
    1b5c:	35 91       	lpm	r19, Z+
    1b5e:	65 91       	lpm	r22, Z+
    1b60:	95 91       	lpm	r25, Z+
    1b62:	05 90       	lpm	r0, Z+
    1b64:	7f e2       	ldi	r23, 0x2F	; 47
    1b66:	73 95       	inc	r23
    1b68:	e1 18       	sub	r14, r1
    1b6a:	f1 0a       	sbc	r15, r17
    1b6c:	43 0b       	sbc	r20, r19
    1b6e:	56 0b       	sbc	r21, r22
    1b70:	c9 0b       	sbc	r28, r25
    1b72:	d0 09       	sbc	r29, r0
    1b74:	c0 f7       	brcc	.-16     	; 0x1b66 <__ftoa_engine+0x10a>
    1b76:	e1 0c       	add	r14, r1
    1b78:	f1 1e       	adc	r15, r17
    1b7a:	43 1f       	adc	r20, r19
    1b7c:	56 1f       	adc	r21, r22
    1b7e:	c9 1f       	adc	r28, r25
    1b80:	d0 1d       	adc	r29, r0
    1b82:	7e f4       	brtc	.+30     	; 0x1ba2 <__ftoa_engine+0x146>
    1b84:	70 33       	cpi	r23, 0x30	; 48
    1b86:	11 f4       	brne	.+4      	; 0x1b8c <__ftoa_engine+0x130>
    1b88:	8a 95       	dec	r24
    1b8a:	e6 cf       	rjmp	.-52     	; 0x1b58 <__ftoa_engine+0xfc>
    1b8c:	e8 94       	clt
    1b8e:	01 50       	subi	r16, 0x01	; 1
    1b90:	30 f0       	brcs	.+12     	; 0x1b9e <__ftoa_engine+0x142>
    1b92:	08 0f       	add	r16, r24
    1b94:	0a f4       	brpl	.+2      	; 0x1b98 <__ftoa_engine+0x13c>
    1b96:	00 27       	eor	r16, r16
    1b98:	02 17       	cp	r16, r18
    1b9a:	08 f4       	brcc	.+2      	; 0x1b9e <__ftoa_engine+0x142>
    1b9c:	20 2f       	mov	r18, r16
    1b9e:	23 95       	inc	r18
    1ba0:	02 2f       	mov	r16, r18
    1ba2:	7a 33       	cpi	r23, 0x3A	; 58
    1ba4:	28 f0       	brcs	.+10     	; 0x1bb0 <__ftoa_engine+0x154>
    1ba6:	79 e3       	ldi	r23, 0x39	; 57
    1ba8:	7d 93       	st	X+, r23
    1baa:	2a 95       	dec	r18
    1bac:	e9 f7       	brne	.-6      	; 0x1ba8 <__ftoa_engine+0x14c>
    1bae:	10 c0       	rjmp	.+32     	; 0x1bd0 <__ftoa_engine+0x174>
    1bb0:	7d 93       	st	X+, r23
    1bb2:	2a 95       	dec	r18
    1bb4:	89 f6       	brne	.-94     	; 0x1b58 <__ftoa_engine+0xfc>
    1bb6:	06 94       	lsr	r0
    1bb8:	97 95       	ror	r25
    1bba:	67 95       	ror	r22
    1bbc:	37 95       	ror	r19
    1bbe:	17 95       	ror	r17
    1bc0:	17 94       	ror	r1
    1bc2:	e1 18       	sub	r14, r1
    1bc4:	f1 0a       	sbc	r15, r17
    1bc6:	43 0b       	sbc	r20, r19
    1bc8:	56 0b       	sbc	r21, r22
    1bca:	c9 0b       	sbc	r28, r25
    1bcc:	d0 09       	sbc	r29, r0
    1bce:	98 f0       	brcs	.+38     	; 0x1bf6 <__ftoa_engine+0x19a>
    1bd0:	23 95       	inc	r18
    1bd2:	7e 91       	ld	r23, -X
    1bd4:	73 95       	inc	r23
    1bd6:	7a 33       	cpi	r23, 0x3A	; 58
    1bd8:	08 f0       	brcs	.+2      	; 0x1bdc <__ftoa_engine+0x180>
    1bda:	70 e3       	ldi	r23, 0x30	; 48
    1bdc:	7c 93       	st	X, r23
    1bde:	20 13       	cpse	r18, r16
    1be0:	b8 f7       	brcc	.-18     	; 0x1bd0 <__ftoa_engine+0x174>
    1be2:	7e 91       	ld	r23, -X
    1be4:	70 61       	ori	r23, 0x10	; 16
    1be6:	7d 93       	st	X+, r23
    1be8:	30 f0       	brcs	.+12     	; 0x1bf6 <__ftoa_engine+0x19a>
    1bea:	83 95       	inc	r24
    1bec:	71 e3       	ldi	r23, 0x31	; 49
    1bee:	7d 93       	st	X+, r23
    1bf0:	70 e3       	ldi	r23, 0x30	; 48
    1bf2:	2a 95       	dec	r18
    1bf4:	e1 f7       	brne	.-8      	; 0x1bee <__ftoa_engine+0x192>
    1bf6:	11 24       	eor	r1, r1
    1bf8:	ef 90       	pop	r14
    1bfa:	ff 90       	pop	r15
    1bfc:	0f 91       	pop	r16
    1bfe:	1f 91       	pop	r17
    1c00:	cf 91       	pop	r28
    1c02:	df 91       	pop	r29
    1c04:	99 27       	eor	r25, r25
    1c06:	87 fd       	sbrc	r24, 7
    1c08:	90 95       	com	r25
    1c0a:	08 95       	ret

00001c0c <strnlen_P>:
    1c0c:	fc 01       	movw	r30, r24
    1c0e:	05 90       	lpm	r0, Z+
    1c10:	61 50       	subi	r22, 0x01	; 1
    1c12:	70 40       	sbci	r23, 0x00	; 0
    1c14:	01 10       	cpse	r0, r1
    1c16:	d8 f7       	brcc	.-10     	; 0x1c0e <strnlen_P+0x2>
    1c18:	80 95       	com	r24
    1c1a:	90 95       	com	r25
    1c1c:	8e 0f       	add	r24, r30
    1c1e:	9f 1f       	adc	r25, r31
    1c20:	08 95       	ret

00001c22 <strnlen>:
    1c22:	fc 01       	movw	r30, r24
    1c24:	61 50       	subi	r22, 0x01	; 1
    1c26:	70 40       	sbci	r23, 0x00	; 0
    1c28:	01 90       	ld	r0, Z+
    1c2a:	01 10       	cpse	r0, r1
    1c2c:	d8 f7       	brcc	.-10     	; 0x1c24 <strnlen+0x2>
    1c2e:	80 95       	com	r24
    1c30:	90 95       	com	r25
    1c32:	8e 0f       	add	r24, r30
    1c34:	9f 1f       	adc	r25, r31
    1c36:	08 95       	ret

00001c38 <fputc>:
    1c38:	0f 93       	push	r16
    1c3a:	1f 93       	push	r17
    1c3c:	cf 93       	push	r28
    1c3e:	df 93       	push	r29
    1c40:	8c 01       	movw	r16, r24
    1c42:	eb 01       	movw	r28, r22
    1c44:	8b 81       	ldd	r24, Y+3	; 0x03
    1c46:	81 ff       	sbrs	r24, 1
    1c48:	1b c0       	rjmp	.+54     	; 0x1c80 <fputc+0x48>
    1c4a:	82 ff       	sbrs	r24, 2
    1c4c:	0d c0       	rjmp	.+26     	; 0x1c68 <fputc+0x30>
    1c4e:	2e 81       	ldd	r18, Y+6	; 0x06
    1c50:	3f 81       	ldd	r19, Y+7	; 0x07
    1c52:	8c 81       	ldd	r24, Y+4	; 0x04
    1c54:	9d 81       	ldd	r25, Y+5	; 0x05
    1c56:	28 17       	cp	r18, r24
    1c58:	39 07       	cpc	r19, r25
    1c5a:	64 f4       	brge	.+24     	; 0x1c74 <fputc+0x3c>
    1c5c:	e8 81       	ld	r30, Y
    1c5e:	f9 81       	ldd	r31, Y+1	; 0x01
    1c60:	01 93       	st	Z+, r16
    1c62:	f9 83       	std	Y+1, r31	; 0x01
    1c64:	e8 83       	st	Y, r30
    1c66:	06 c0       	rjmp	.+12     	; 0x1c74 <fputc+0x3c>
    1c68:	e8 85       	ldd	r30, Y+8	; 0x08
    1c6a:	f9 85       	ldd	r31, Y+9	; 0x09
    1c6c:	80 2f       	mov	r24, r16
    1c6e:	09 95       	icall
    1c70:	89 2b       	or	r24, r25
    1c72:	31 f4       	brne	.+12     	; 0x1c80 <fputc+0x48>
    1c74:	8e 81       	ldd	r24, Y+6	; 0x06
    1c76:	9f 81       	ldd	r25, Y+7	; 0x07
    1c78:	01 96       	adiw	r24, 0x01	; 1
    1c7a:	9f 83       	std	Y+7, r25	; 0x07
    1c7c:	8e 83       	std	Y+6, r24	; 0x06
    1c7e:	02 c0       	rjmp	.+4      	; 0x1c84 <fputc+0x4c>
    1c80:	0f ef       	ldi	r16, 0xFF	; 255
    1c82:	1f ef       	ldi	r17, 0xFF	; 255
    1c84:	c8 01       	movw	r24, r16
    1c86:	df 91       	pop	r29
    1c88:	cf 91       	pop	r28
    1c8a:	1f 91       	pop	r17
    1c8c:	0f 91       	pop	r16
    1c8e:	08 95       	ret

00001c90 <sprintf>:
    1c90:	ae e0       	ldi	r26, 0x0E	; 14
    1c92:	b0 e0       	ldi	r27, 0x00	; 0
    1c94:	ee e4       	ldi	r30, 0x4E	; 78
    1c96:	fe e0       	ldi	r31, 0x0E	; 14
    1c98:	0c 94 05 0d 	jmp	0x1a0a	; 0x1a0a <__prologue_saves__+0x1c>
    1c9c:	0d 89       	ldd	r16, Y+21	; 0x15
    1c9e:	1e 89       	ldd	r17, Y+22	; 0x16
    1ca0:	86 e0       	ldi	r24, 0x06	; 6
    1ca2:	8c 83       	std	Y+4, r24	; 0x04
    1ca4:	1a 83       	std	Y+2, r17	; 0x02
    1ca6:	09 83       	std	Y+1, r16	; 0x01
    1ca8:	8f ef       	ldi	r24, 0xFF	; 255
    1caa:	9f e7       	ldi	r25, 0x7F	; 127
    1cac:	9e 83       	std	Y+6, r25	; 0x06
    1cae:	8d 83       	std	Y+5, r24	; 0x05
    1cb0:	9e 01       	movw	r18, r28
    1cb2:	27 5e       	subi	r18, 0xE7	; 231
    1cb4:	3f 4f       	sbci	r19, 0xFF	; 255
    1cb6:	ce 01       	movw	r24, r28
    1cb8:	01 96       	adiw	r24, 0x01	; 1
    1cba:	6f 89       	ldd	r22, Y+23	; 0x17
    1cbc:	78 8d       	ldd	r23, Y+24	; 0x18
    1cbe:	a9 01       	movw	r20, r18
    1cc0:	0e 94 c2 07 	call	0xf84	; 0xf84 <vfprintf>
    1cc4:	2f 81       	ldd	r18, Y+7	; 0x07
    1cc6:	38 85       	ldd	r19, Y+8	; 0x08
    1cc8:	02 0f       	add	r16, r18
    1cca:	13 1f       	adc	r17, r19
    1ccc:	f8 01       	movw	r30, r16
    1cce:	10 82       	st	Z, r1
    1cd0:	2e 96       	adiw	r28, 0x0e	; 14
    1cd2:	e4 e0       	ldi	r30, 0x04	; 4
    1cd4:	0c 94 21 0d 	jmp	0x1a42	; 0x1a42 <__epilogue_restores__+0x1c>

00001cd8 <__ultoa_invert>:
    1cd8:	fa 01       	movw	r30, r20
    1cda:	aa 27       	eor	r26, r26
    1cdc:	28 30       	cpi	r18, 0x08	; 8
    1cde:	51 f1       	breq	.+84     	; 0x1d34 <__ultoa_invert+0x5c>
    1ce0:	20 31       	cpi	r18, 0x10	; 16
    1ce2:	81 f1       	breq	.+96     	; 0x1d44 <__ultoa_invert+0x6c>
    1ce4:	e8 94       	clt
    1ce6:	6f 93       	push	r22
    1ce8:	6e 7f       	andi	r22, 0xFE	; 254
    1cea:	6e 5f       	subi	r22, 0xFE	; 254
    1cec:	7f 4f       	sbci	r23, 0xFF	; 255
    1cee:	8f 4f       	sbci	r24, 0xFF	; 255
    1cf0:	9f 4f       	sbci	r25, 0xFF	; 255
    1cf2:	af 4f       	sbci	r26, 0xFF	; 255
    1cf4:	b1 e0       	ldi	r27, 0x01	; 1
    1cf6:	3e d0       	rcall	.+124    	; 0x1d74 <__ultoa_invert+0x9c>
    1cf8:	b4 e0       	ldi	r27, 0x04	; 4
    1cfa:	3c d0       	rcall	.+120    	; 0x1d74 <__ultoa_invert+0x9c>
    1cfc:	67 0f       	add	r22, r23
    1cfe:	78 1f       	adc	r23, r24
    1d00:	89 1f       	adc	r24, r25
    1d02:	9a 1f       	adc	r25, r26
    1d04:	a1 1d       	adc	r26, r1
    1d06:	68 0f       	add	r22, r24
    1d08:	79 1f       	adc	r23, r25
    1d0a:	8a 1f       	adc	r24, r26
    1d0c:	91 1d       	adc	r25, r1
    1d0e:	a1 1d       	adc	r26, r1
    1d10:	6a 0f       	add	r22, r26
    1d12:	71 1d       	adc	r23, r1
    1d14:	81 1d       	adc	r24, r1
    1d16:	91 1d       	adc	r25, r1
    1d18:	a1 1d       	adc	r26, r1
    1d1a:	20 d0       	rcall	.+64     	; 0x1d5c <__ultoa_invert+0x84>
    1d1c:	09 f4       	brne	.+2      	; 0x1d20 <__ultoa_invert+0x48>
    1d1e:	68 94       	set
    1d20:	3f 91       	pop	r19
    1d22:	2a e0       	ldi	r18, 0x0A	; 10
    1d24:	26 9f       	mul	r18, r22
    1d26:	11 24       	eor	r1, r1
    1d28:	30 19       	sub	r19, r0
    1d2a:	30 5d       	subi	r19, 0xD0	; 208
    1d2c:	31 93       	st	Z+, r19
    1d2e:	de f6       	brtc	.-74     	; 0x1ce6 <__ultoa_invert+0xe>
    1d30:	cf 01       	movw	r24, r30
    1d32:	08 95       	ret
    1d34:	46 2f       	mov	r20, r22
    1d36:	47 70       	andi	r20, 0x07	; 7
    1d38:	40 5d       	subi	r20, 0xD0	; 208
    1d3a:	41 93       	st	Z+, r20
    1d3c:	b3 e0       	ldi	r27, 0x03	; 3
    1d3e:	0f d0       	rcall	.+30     	; 0x1d5e <__ultoa_invert+0x86>
    1d40:	c9 f7       	brne	.-14     	; 0x1d34 <__ultoa_invert+0x5c>
    1d42:	f6 cf       	rjmp	.-20     	; 0x1d30 <__ultoa_invert+0x58>
    1d44:	46 2f       	mov	r20, r22
    1d46:	4f 70       	andi	r20, 0x0F	; 15
    1d48:	40 5d       	subi	r20, 0xD0	; 208
    1d4a:	4a 33       	cpi	r20, 0x3A	; 58
    1d4c:	18 f0       	brcs	.+6      	; 0x1d54 <__ultoa_invert+0x7c>
    1d4e:	49 5d       	subi	r20, 0xD9	; 217
    1d50:	31 fd       	sbrc	r19, 1
    1d52:	40 52       	subi	r20, 0x20	; 32
    1d54:	41 93       	st	Z+, r20
    1d56:	02 d0       	rcall	.+4      	; 0x1d5c <__ultoa_invert+0x84>
    1d58:	a9 f7       	brne	.-22     	; 0x1d44 <__ultoa_invert+0x6c>
    1d5a:	ea cf       	rjmp	.-44     	; 0x1d30 <__ultoa_invert+0x58>
    1d5c:	b4 e0       	ldi	r27, 0x04	; 4
    1d5e:	a6 95       	lsr	r26
    1d60:	97 95       	ror	r25
    1d62:	87 95       	ror	r24
    1d64:	77 95       	ror	r23
    1d66:	67 95       	ror	r22
    1d68:	ba 95       	dec	r27
    1d6a:	c9 f7       	brne	.-14     	; 0x1d5e <__ultoa_invert+0x86>
    1d6c:	00 97       	sbiw	r24, 0x00	; 0
    1d6e:	61 05       	cpc	r22, r1
    1d70:	71 05       	cpc	r23, r1
    1d72:	08 95       	ret
    1d74:	9b 01       	movw	r18, r22
    1d76:	ac 01       	movw	r20, r24
    1d78:	0a 2e       	mov	r0, r26
    1d7a:	06 94       	lsr	r0
    1d7c:	57 95       	ror	r21
    1d7e:	47 95       	ror	r20
    1d80:	37 95       	ror	r19
    1d82:	27 95       	ror	r18
    1d84:	ba 95       	dec	r27
    1d86:	c9 f7       	brne	.-14     	; 0x1d7a <__ultoa_invert+0xa2>
    1d88:	62 0f       	add	r22, r18
    1d8a:	73 1f       	adc	r23, r19
    1d8c:	84 1f       	adc	r24, r20
    1d8e:	95 1f       	adc	r25, r21
    1d90:	a0 1d       	adc	r26, r0
    1d92:	08 95       	ret

00001d94 <_exit>:
    1d94:	f8 94       	cli

00001d96 <__stop_program>:
    1d96:	ff cf       	rjmp	.-2      	; 0x1d96 <__stop_program>
